Author,Committer,Date,Message,Check Runs,Weekday,Year and Month
cj5716,Disservin,2024-06-08 21:40:22+00:00,Make repeated bench runs identical  fixes https://github.com/official-stockfish/Stockfish/issues/5376 closes https://github.com/official-stockfish/Stockfish/pull/5377  No functional changes,True,5,2024-06-01
evqsx,Disservin,2024-06-08 21:39:46+00:00,Remove the correction history bonus in null move search  Passed STC: https://tests.stockfishchess.org/tests/view/666168e191e372763104c664 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 94848 W: 24708 L: 24550 D: 45590 Ptnml(0-2): 289; 11355; 24033; 11403; 344  Passed LTC: https://tests.stockfishchess.org/tests/view/6661e73591e372763104c751 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 70452 W: 17849 L: 17679 D: 34924 Ptnml(0-2): 27; 7707; 19596; 7861; 35  closes https://github.com/official-stockfish/Stockfish/pull/5375  Bench: 1174094,True,5,2024-06-01
dubslow,Disservin,2024-06-08 21:35:00+00:00,Linearize corrHist  Passed STC: https://tests.stockfishchess.org/tests/view/6661fff88dd8f31ed3c5d819 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 17504 W: 4651 L: 4406 D: 8447 Ptnml(0-2): 71; 1975; 4384; 2282; 40  Passed LTC: https://tests.stockfishchess.org/tests/view/666205b48dd8f31ed3c61296 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 24522 W: 6313 L: 6094 D: 12115 Ptnml(0-2): 14; 2643; 6726; 2866; 12  closes https://github.com/official-stockfish/Stockfish/pull/5374  Bench: 1237729,True,5,2024-06-01
dubslow,Disservin,2024-06-08 21:34:03+00:00,Remove delta from evaluation  Passed STC: https://tests.stockfishchess.org/tests/view/6660e49c6489614cdad14e29 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 188768 W: 48907 L: 48854 D: 91007 Ptnml(0-2): 584; 22571; 48005; 22656; 568  Passed LTC: https://tests.stockfishchess.org/tests/view/6660ff9791e372763104b38c LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 310680 W: 78651 L: 78727 D: 153302 Ptnml(0-2): 180; 34818; 85433; 34716; 193  closes https://github.com/official-stockfish/Stockfish/pull/5373  Bench: 1214575,True,5,2024-06-01
Sopel97,Disservin,2024-06-08 21:32:27+00:00,NumaPolicy fixes and robustness improvements  1. Fix GetProcessGroupAffinity still not getting properly aligned memory    sometimes. 2. Fix a very theoretically possible heap corruption if    GetActiveProcessorGroupCount changes between calls. 3. Fully determine affinity on Windows 11 and Windows Server 2022. It    should only ever be indeterminate in case of an error. 4. Separate isDeterminate for old and new API; as they are &'d together    we still can end up with a subset of processors even if one API is    indeterminate. 5. likely_used_old_api() that is based on actual affinity that's been    detected 6. IMPORTANT: Gather affinities at startup; so that we only later use    the affinites set at startup. Not only does this prevent us from our    own calls interfering with detection but it also means subsequent    setoption NumaPolicy calls should behave as expected. 7. Fix ERROR_INSUFFICIENT_BUFFER from GetThreadSelectedCpuSetMasks being    treated like an error.  Should resolve https://github.com/vondele/Stockfish/commit/02ff76630b358e5f958793cc93df0009d2da65a5#commitcomment-142790025  closes https://github.com/official-stockfish/Stockfish/pull/5372  Bench: 1231853,True,5,2024-06-01
FauziAkram,Disservin,2024-06-08 21:28:07+00:00,Tweak pruning formula  Tweak pruning formula; including a constant. I started from an old yellow patch; if I'm not mistaken by Viz (Unfortunately I lost the link) where he tried something similar. I worked on it; trying different variations; until I came up with a good configuration to pass.  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 213120 W: 55351 L: 54778 D: 102991 Ptnml(0-2): 572; 25209; 54437; 25758; 584 https://tests.stockfishchess.org/tests/view/6660c9a7c340c8eed7758195  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 315324 W: 80176 L: 79284 D: 155864 Ptnml(0-2): 155; 34711; 87030; 35619; 147 https://tests.stockfishchess.org/tests/view/6660d7bb6489614cdad13d66  closes https://github.com/official-stockfish/Stockfish/pull/5370  Bench: 1231853,True,5,2024-06-01
rn5f107s2,Disservin,2024-06-08 21:10:59+00:00,Simplify razor changes  Remove razoring changes from https://github.com/official-stockfish/Stockfish/pull/5360  The mentioned patch introduced the usage of futility_margin into razoring alongside a tune to futility_margin. It seems the elo gained in this patch comes from the tune of futility_margin and not the introduction of futility_margin to razoring; so simplify it away here.  Passed Non-regression STC: https://tests.stockfishchess.org/tests/view/66606581c340c8eed7757bc8 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 169056 W: 43922 L: 43848 D: 81286 Ptnml(0-2): 438; 20288; 43034; 20298; 470  Passed Non-regression LTC: https://tests.stockfishchess.org/tests/view/66607764c340c8eed7757c58 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 157134 W: 39805 L: 39723 D: 77606 Ptnml(0-2): 74; 17444; 43461; 17502; 86  Passed rebased Non-regression LTC: https://tests.stockfishchess.org/tests/view/6660c696c340c8eed77580c0 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 135984 W: 34427 L: 34324 D: 67233 Ptnml(0-2): 67; 15063; 37615; 15194; 53  closes https://github.com/official-stockfish/Stockfish/pull/5366  Bench: 1150518,True,5,2024-06-01
Disservin,Disservin,2024-06-08 21:09:02+00:00,Workaround the clang-format inconsistencies  closes https://github.com/official-stockfish/Stockfish/pull/5378  No functional change,True,5,2024-06-01
R-Goc,Disservin,2024-06-08 21:05:56+00:00,Change PGO type for clang  Change type of PGO in clang to IR which is recommended by LLVM/clang and could result in a speedup. https://github.com/llvm/llvm-project/issues/45668  closes https://github.com/official-stockfish/Stockfish/pull/5355  No functional change,True,5,2024-06-01
cj5716,vondele,2024-06-05 19:49:29+00:00,Simplify evaluation constants  Passed STC (<0; 2> by accident): LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 346016 W: 89529 L: 88756 D: 167731 Ptnml(0-2): 1012; 41074; 88027; 41919; 976 https://tests.stockfishchess.org/tests/view/6659d6ecf426908fcc6b6929  Passed LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 89862 W: 22887 L: 22734 D: 44241 Ptnml(0-2): 45; 9999; 24694; 10144; 49 https://tests.stockfishchess.org/tests/view/665a6ebb062b2c3cf814fde8  Passed LTC (Rebased): LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 325500 W: 82734 L: 82826 D: 159940 Ptnml(0-2): 193; 36409; 89665; 36263; 220 https://tests.stockfishchess.org/tests/view/665bd39f44e8416a9cdc1909  closes https://github.com/official-stockfish/Stockfish/pull/5361  Bench 961982,True,2,2024-06-01
Disservin,vondele,2024-06-05 19:41:43+00:00,"Update clang-format to version 18  clang-format-18 is available in ubuntu noble(24.04); if you are on a version lower than that you can use the update script from llvm. https://apt.llvm.org/  Windows users should be able to download and use clang-format from their release builds https://github.com/llvm/llvm-project/releases or get the latest from msys2 https://packages.msys2.org/package/mingw-w64-x86_64-clang.  macOS users can resort to ""brew install clang-format"".  closes https://github.com/official-stockfish/Stockfish/pull/5365  No functional change",True,2,2024-06-01
Viren6,vondele,2024-06-05 19:33:46+00:00,Use futility margin in razoring margin  Uses futilityMargin * depth to set the razoring margin. This retains the quadratic depth scaling to preserve mate finding capabilities. This patch is nice because it increases the elo sensitivity of the futility margin heuristics.  Passed STC: https://tests.stockfishchess.org/tests/view/665f9892fd11ae7170b4849c LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 39392 W: 10348 L: 10030 D: 19014 Ptnml(0-2): 99; 4585; 10009; 4905; 98  Passed LTC: https://tests.stockfishchess.org/tests/view/665f9d2dfd11ae7170b484a8 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 107910 W: 27521 L: 27053 D: 53336 Ptnml(0-2): 73; 11835; 29670; 12305; 72  closes https://github.com/official-stockfish/Stockfish/pull/5360  bench 1277173,True,2,2024-06-01
XInTheDark,vondele,2024-06-05 19:10:55+00:00,VVLTC search tune  Parameters were tuned with 199k games of VVLTC: https://tests.stockfishchess.org/tests/view/665c67e73542f91ad1c54fe2  Passed VVLTC 1st sprt: https://tests.stockfishchess.org/tests/view/665e9c83fd45fb0f907c837c LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 83494 W: 21546 L: 21219 D: 40729 Ptnml(0-2): 6; 7707; 25993; 8036; 5  Passed VVLTC 2nd sprt: https://tests.stockfishchess.org/tests/view/665f650bfd45fb0f907cb360 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 151056 W: 38796 L: 38295 D: 73965 Ptnml(0-2): 5; 13742; 47536; 14237; 8  https://github.com/official-stockfish/Stockfish/pull/5359  Bench: 1154524,True,2,2024-06-01
mstembera,vondele,2024-06-05 19:07:07+00:00,Remove m512_hadd128x16_interleave()  This functionality is no longer used anywhere.  closes https://github.com/official-stockfish/Stockfish/pull/5357  No functional change,True,2,2024-06-01
Sopel97,vondele,2024-06-05 19:01:45+00:00,"Add NumaPolicy ""hardware"" option that bypasses current processor affinity.  Can be used in case a GUI (e.g. ChessBase 17 see #5307) sets affinity to a single processor group; but the user would like to use the full capabilities of the hardware.  Improves affinity handling on Windows in case of multiple available APIs and existing affinities.  closes https://github.com/official-stockfish/Stockfish/pull/5353  No functional change",True,2,2024-06-01
gahtan-syarif,vondele,2024-06-05 18:59:56+00:00,Simplify smallnet threshold  remove pawncount  Passed STC non-reg: https://tests.stockfishchess.org/tests/view/665e4548fd45fb0f907c80d5 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 60896 W: 15710 L: 15518 D: 29668 Ptnml(0-2): 149; 7145; 15660; 7353; 141  Passed LTC non-reg: https://tests.stockfishchess.org/tests/view/665e4c52fd45fb0f907c815f LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 58068 W: 14773 L: 14590 D: 28705 Ptnml(0-2): 16; 6368; 16090; 6537; 23  closes https://github.com/official-stockfish/Stockfish/pull/5349  Bench: 1343156,True,2,2024-06-01
Disservin,Disservin,2024-06-04 06:26:35+00:00,Accumulate nodes over all bench positions not just the last  closes https://github.com/official-stockfish/Stockfish/pull/5352  No functional change,True,1,2024-06-01
Disservin,Disservin,2024-06-04 05:53:25+00:00,Properly initialize the TT in a multithreaded way again,False,1,2024-06-01
Disservin,Disservin,2024-06-03 21:28:23+00:00,Normalize some variable names and reuse existing logic  closes https://github.com/official-stockfish/Stockfish/pull/5346  No functional change,True,0,2024-06-01
dubslow,Disservin,2024-06-03 21:27:58+00:00,Remove delta; adjusted; complexity from nnue code  ...rather they're the consumer's concern whether to tweak the result or not.  Passed STC: https://tests.stockfishchess.org/tests/view/665cea9ffd45fb0f907c53bd LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 69696 W: 18101 L: 17918 D: 33677 Ptnml(0-2): 195; 8171; 17929; 8362; 191  Passed LTC: https://tests.stockfishchess.org/tests/view/665cf761fd45fb0f907c5406 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 63720 W: 16344 L: 16165 D: 31211 Ptnml(0-2): 32; 6990; 17625; 7193; 20  Non functional except for rounding issues of OutputScale changing bench.  closes https://github.com/official-stockfish/Stockfish/pull/5344  Bench: 1378596,True,0,2024-06-01
dubslow,Disservin,2024-06-03 21:20:02+00:00,Adjust lowest depth constants to the natural place  Passed STC: https://tests.stockfishchess.org/tests/view/665ce3f8fd45fb0f907c537f LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 282784 W: 73032 L: 73082 D: 136670 Ptnml(0-2): 680; 31845; 76364; 31851; 652  Recently when I overhauled these comments; Disservin asked why these were so much lower: they're a relic from when we had a third QS stage at -5. Now we don't; so fix these to the obvious place.  I was fairly sure it was nonfunctional but ran the nonreg to be double sure.  closes https://github.com/official-stockfish/Stockfish/pull/5343  Bench: 1057383,True,0,2024-06-01
gahtan-syarif,Disservin,2024-06-03 21:18:36+00:00,Simplify smallnet threshold  Turns the quadratic threshold to a linear one  STC non-reg: https://tests.stockfishchess.org/tests/view/665ba0b744e8416a9cdc188d LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 330432 W: 85351 L: 85454 D: 159627 Ptnml(0-2): 888; 39643; 84283; 39488; 914  LTC non-reg: https://tests.stockfishchess.org/tests/view/665cd60ffd45fb0f907c4306 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 139146 W: 35194 L: 35093 D: 68859 Ptnml(0-2): 58; 15523; 38313; 15618; 61  closes https://github.com/official-stockfish/Stockfish/pull/5342  Bench: 1057383,True,0,2024-06-01
FauziAkram,Disservin,2024-06-03 21:17:09+00:00,Simplify recapture extension  Simplifying the extension formula by removing the move == ttMove condition.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 47328 W: 12324 L: 12117 D: 22887 Ptnml(0-2): 134; 5532; 12097; 5795; 106 https://tests.stockfishchess.org/tests/view/665ca5e6fd45fb0f907c41be  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 72126 W: 18378 L: 18209 D: 35539 Ptnml(0-2): 36; 7841; 20130; 8030; 26 https://tests.stockfishchess.org/tests/view/665cb276fd45fb0f907c41f9  closes https://github.com/official-stockfish/Stockfish/pull/5341  Bench: 1399468,True,0,2024-06-01
FauziAkram,Disservin,2024-06-03 21:12:13+00:00,Simplify continuation histories  Functional simplification.  Simplify continuation histories; therefore increasing the effect of stats updates and movepicker bonuses for continuation history 3 plies deep.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 229184 W: 59087 L: 59080 D: 111017 Ptnml(0-2): 554; 27248; 59002; 27213; 575 https://tests.stockfishchess.org/tests/view/665c7a09fd45fb0f907c223b  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 44532 W: 11419 L: 11223 D: 21890 Ptnml(0-2): 18; 4787; 12457; 4989; 15 https://tests.stockfishchess.org/tests/view/665c8842fd45fb0f907c23ec  closes https://github.com/official-stockfish/Stockfish/pull/5339  Bench: 1326444,True,0,2024-06-01
Disservin,Disservin,2024-06-03 21:11:59+00:00,Add helpers for managing aligned memory  Previously; we had two type aliases; LargePagePtr and AlignedPtr; which required manually initializing the aligned memory for the pointer.  The new helpers:  - make_unique_aligned - make_unique_large_page  are now available for allocating aligned memory (with large pages). They behave similarly to std::make_unique; ensuring objects allocated with these functions follow RAII.  The old approach had issues with initializing non-trivial types or arrays of objects. The evaluation function of the network is now a unique pointer to an array instead of an array of unique pointers.  Memory related functions have been moved into memory.h  Passed High Hash Pressure Test Non-Regression STC: https://tests.stockfishchess.org/tests/view/665b2b36586058766677cfd2 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 476992 W: 122426 L: 122677 D: 231889 Ptnml(0-2): 1145; 51027; 134419; 50744; 1161  Failed Normal Non-Regression STC: https://tests.stockfishchess.org/tests/view/665b2997586058766677cfc8 LLR: -2.94 (-2.94;2.94) <-1.75;0.25> Total: 877312 W: 225233 L: 226395 D: 425684 Ptnml(0-2): 2110; 94642; 246239; 93630; 2035  Probably a fluke since there shouldn't be a real slowndown and it has also passed the high hash pressure test.  closes https://github.com/official-stockfish/Stockfish/pull/5332  No functional change,True,0,2024-06-01
Sopel97,vondele,2024-06-03 06:54:24+00:00,Fix GetProcessGroupAffinity call  `GetProcessGroupAffinity` appears to require 4 byte alignment for `GroupArray` memory.  See https://stackoverflow.com/q/78567676 for further information  closes https://github.com/official-stockfish/Stockfish/pull/5340  No functional change,True,0,2024-06-01
vondele,vondele,2024-06-02 07:23:28+00:00,"Revert ""Adjust return bonus from tt cutoffs at fail highs""  This reverts commit 783dfc2eb235236ff799618436d68d0c1a3f3807.  could lead to a division by zero for:  ttValue = (ttValue * tte->depth() + beta) / (tte->depth() + 1)  as other threads can overwrite the tte with a QS depth of -1.  closes https://github.com/official-stockfish/Stockfish/pull/5338  Bench: 1280020",True,6,2024-06-01
linrock,vondele,2024-06-01 18:17:38+00:00,Simplify statScore divisor into a constant  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/665b392ff4a1fd0c208ea864 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 114752 W: 29628 L: 29495 D: 55629 Ptnml(0-2): 293; 13694; 29269; 13827; 293  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/665b588c11645bd3d3fac467 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 65322 W: 16549 L: 16373 D: 32400 Ptnml(0-2): 30; 7146; 18133; 7322; 30  closes https://github.com/official-stockfish/Stockfish/pull/5337  bench 1241443,True,5,2024-06-01
xoto10,vondele,2024-06-01 18:12:36+00:00,Simplify tm; removing faster 1st move and 1.13 extraTime.  Passed STC 10+0.1 : LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 349760 W: 90112 L: 90231 D: 169417 Ptnml(0-2): 784; 37970; 97496; 37841; 789 https://tests.stockfishchess.org/tests/view/665aeee00223e235f05b7d21  Passed LTC 60+0.6 : LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 140082 W: 35463 L: 35370 D: 69249 Ptnml(0-2): 59; 13492; 42851; 13575; 64 https://tests.stockfishchess.org/tests/view/665b15e78da109e362924e5a  closes https://github.com/official-stockfish/Stockfish/pull/5334  No functional change,True,5,2024-06-01
MinetaS,vondele,2024-06-01 18:09:47+00:00,Simplify 50 move rule dampening  Refactor the logic of 50 move rule dampening by removing a constant.  Passed non-regression STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 35232 W: 9214 L: 8992 D: 17026 Ptnml(0-2): 114; 4081; 8999; 4313; 109 https://tests.stockfishchess.org/tests/view/665a329013d08af3c1725610  Passed non-regression LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 38406 W: 9732 L: 9530 D: 19144 Ptnml(0-2): 14; 4132; 10708; 4336; 13 https://tests.stockfishchess.org/tests/view/665a370913d08af3c1725651  https://github.com/official-stockfish/Stockfish/pull/5327  Bench: 1059739,True,5,2024-06-01
FauziAkram,vondele,2024-06-01 18:08:08+00:00,Simplify histories movepick formula  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 81440 W: 21100 L: 20929 D: 39411 Ptnml(0-2): 248; 9659; 20718; 9864; 231 https://tests.stockfishchess.org/tests/view/6659a8b7ea624d64ea5f3208  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 85758 W: 21763 L: 21607 D: 42388 Ptnml(0-2): 34; 9606; 23463; 9722; 54 https://tests.stockfishchess.org/tests/view/6659d7bff426908fcc6b692c  closes https://github.com/official-stockfish/Stockfish/pull/5326  bench: 1280472,True,5,2024-06-01
vondele,vondele,2024-06-01 18:04:30+00:00,Avoid changing bestvalue  in the case the ttValue contains mate scores; do not return them as bestValue; since they are not proven.  passed STC https://tests.stockfishchess.org/tests/view/665b1ea5586058766677cfa3 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 58912 W: 15319 L: 15130 D: 28463 Ptnml(0-2): 141; 6562; 15854; 6765; 134  passed LTC: https://tests.stockfishchess.org/tests/view/665b2712586058766677cfc4 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 141666 W: 35976 L: 35879 D: 69811 Ptnml(0-2): 61; 15513; 39584; 15618; 57  closes https://github.com/official-stockfish/Stockfish/pull/5335  Bench: 1336115,True,5,2024-06-01
Vizvezdenec,vondele,2024-06-01 18:02:09+00:00,Adjust return bonus from tt cutoffs at fail highs  This is reintroduction of the recently simplified logic - if positive tt cutoff occurs return not a tt value but smth between it and beta.  Difference is that instead of static linear combination there we use basically the same formula as we do in the main search - with the only difference being using tt depth instead of depth; which makes a lot of sense.  Passed STC: https://tests.stockfishchess.org/tests/view/665b3a34f4a1fd0c208ea870 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 54944 W: 14239 L: 13896 D: 26809 Ptnml(0-2): 151; 6407; 14008; 6760; 146  Passed LTC: https://tests.stockfishchess.org/tests/view/665b520011645bd3d3fac341 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 90540 W: 23070 L: 22640 D: 44830 Ptnml(0-2): 39; 9903; 24965; 10315; 48  closes https://github.com/official-stockfish/Stockfish/pull/5336  bench 1381237,True,5,2024-06-01
linrock,vondele,2024-06-01 17:59:07+00:00,Update default smallnet to nn-37f18f62d772.nnue  Created by training L1-128 from scratch with: - skipping based on simple eval in the trainer; for compatibility with   regular binpacks without requiring pre-filtering all binpacks - minimum simple eval of 950; lower than 1000 previously - usage of some hse-v1 binpacks with minimum simple eval 1000 - addition of hse-v6 binpacks with minimum simple eval 500 - permuting the FT with 10k positions from fishpack32.binpack - torch.compile to speed up smallnet training  Training is significantly slower when using non-pre-filtered binpacks due to the increased skipping required.  This net was reached at epoch 339.  ``` experiment-name: 128--S1-hse-1k-T80-v6-unfilt-less-sf--se-gt950-no-wld-skip  training-dataset:   /data/:     - dfrc99-16tb7p.v2.min.binpack    /data/hse-v1/:     - leela96-filt-v2.min.high-simple-eval-1k.min-v2.binpack      - test60-novdec2021-12tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.min-v2.binpack      - test77-nov2021-2tb7p.no-db.min.high-simple-eval-1k.min-v2.binpack     - test77-dec2021-16tb7p.no-db.min.high-simple-eval-1k.min-v2.binpack     - test77-jan2022-2tb7p.high-simple-eval-1k.min-v2.binpack      - test78-jantomay2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.min-v2.binpack     - test78-juntosep2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.min-v2.binpack      - test79-apr2022-16tb7p.min.high-simple-eval-1k.min-v2.binpack     - test79-may2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.min-v2.binpack      - test80-apr2022-16tb7p.min.high-simple-eval-1k.min-v2.binpack     - test80-may2022-16tb7p.high-simple-eval-1k.min-v2.binpack     - test80-jun2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.min-v2.binpack     - test80-jul2022-16tb7p.v6-dd.min.high-simple-eval-1k.min-v2.binpack     - test80-sep2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.min-v2.binpack     - test80-nov2022-16tb7p-v6-dd.min.high-simple-eval-1k.min-v2.binpack    /data/S11-mar2024/:     - test80-2022-08-aug-16tb7p.v6-dd.min.binpack     - test80-2022-10-oct-16tb7p.v6-dd.binpack     - test80-2022-12-dec-16tb7p.min.binpack      - test80-2023-01-jan-16tb7p.v6-sk20.min.binpack     - test80-2023-02-feb-16tb7p.v6-sk20.min.binpack     - test80-2023-03-mar-2tb7p.v6-sk16.min.binpack     - test80-2023-04-apr-2tb7p.v6-sk16.min.binpack     - test80-2023-05-may-2tb7p.v6.min.binpack     - test80-2023-06-jun-2tb7p.binpack.min-v2.binpack     - test80-2023-07-jul-2tb7p.binpack.min-v2.binpack     - test80-2023-08-aug-2tb7p.v6.min.binpack     - test80-2023-09-sep-2tb7p.binpack.hse-v6.binpack     - test80-2023-10-oct-2tb7p.binpack.hse-v6.binpack     - test80-2023-11-nov-2tb7p.binpack.hse-v6.binpack     - test80-2023-12-dec-2tb7p.binpack.hse-v6.binpack      - test80-2024-01-jan-2tb7p.binpack.hse-v6.binpack     - test80-2024-02-feb-2tb7p.binpack.hse-v6.binpack     - test80-2024-03-mar-2tb7p.binpack  wld-fen-skipping: False  nnue-pytorch-branch: linrock/nnue-pytorch/128-skipSimpleEval-lt950-torch-compile engine-test-branch: linrock/Stockfish/L1-128-nolazy engine-base-branch: linrock/Stockfish/L1-128 start-from-engine-test-net: False  num-epochs: 500 start-lambda: 1.0 end-lambda: 1.0 ```  Training data can be found at: https://robotmoon.com/nnue-training-data/  Passed STC: https://tests.stockfishchess.org/tests/view/66549c16a86388d5e27daff5 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 196608 W: 51254 L: 50697 D: 94657 Ptnml(0-2): 722; 23244; 49796; 23839; 703  Passed LTC: https://tests.stockfishchess.org/tests/view/6658d1aa6b0e318cefa90122 LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 122538 W: 31332 L: 30835 D: 60371 Ptnml(0-2): 69; 13407; 33811; 13922; 60  closes https://github.com/official-stockfish/Stockfish/pull/5333  bench,True,5,2024-06-01
rn5f107s2,vondele,2024-06-01 17:58:20+00:00,MCP more after a bad singular search  The idea is; that if we have the information that the singular search failed low and therefore produced an upperbound score; we can use the score from singularsearch as approximate upperbound as to what bestValue our non ttMoves will produce. If this value is well below alpha; we assume that all non-ttMoves will score below alpha and therfore can skip more moves. This patch also sets up variables for future patches wanting to use teh singular search result outside of singular extensions; in singularBound and singularValue; meaning further patches using this search result to affect various pruning techniques can be tried.  Passed STC: https://tests.stockfishchess.org/tests/view/6658d13e6b0e318cefa90120 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 85632 W: 22112 L: 21725 D: 41795 Ptnml(0-2): 243; 10010; 21947; 10349; 267  Passed LTC: https://tests.stockfishchess.org/tests/view/6658dd356b0e318cefa9016a LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 243978 W: 62014 L: 61272 D: 120692 Ptnml(0-2): 128; 26598; 67791; 27348; 124  closes https://github.com/official-stockfish/Stockfish/pull/5325  bench 1397172,True,5,2024-06-01
linrock,vondele,2024-06-01 17:56:05+00:00,Quadratic smallnet threshold with re-evaluation  The threshold now decreases more quickly as pawn count decreases; using the smallnet more compared to before.  Combo of two eval patches: https://tests.stockfishchess.org/tests/view/66576c5f6b0e318cefa8d26e https://tests.stockfishchess.org/tests/view/664ced40830eb9f886616a77  Passed STC: https://tests.stockfishchess.org/tests/view/66588c136b0e318cefa8ff21 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 112608 W: 29336 L: 28908 D: 54364 Ptnml(0-2): 344; 13223; 28718; 13699; 320  Passed LTC: https://tests.stockfishchess.org/tests/view/6658c8786b0e318cefa900f5 LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 108288 W: 27493 L: 27026 D: 53769 Ptnml(0-2): 54; 11821; 29930; 12282; 57  closes https://github.com/official-stockfish/Stockfish/pull/5323  bench 1728074,True,5,2024-06-01
FauziAkram,vondele,2024-06-01 17:53:13+00:00,Tweak first picked move (ttMove) reduction rule  Tweak first picked move (ttMove) reduction rule:  Instead of always resetting the reduction to 0; we now only do so if the current reduction is less than 2. If the current reduction is 2 or more; we decrease it by 2 instead.  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 109504 W: 28340 L: 27919 D: 53245 Ptnml(0-2): 305; 12848; 28028; 13263; 308 https://tests.stockfishchess.org/tests/view/6658c2fa6b0e318cefa900c2  Passed LTC: LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 130410 W: 33248 L: 32738 D: 64424 Ptnml(0-2): 53; 14139; 36328; 14615; 70 https://tests.stockfishchess.org/tests/view/6658dd8a6b0e318cefa90173  closes https://github.com/official-stockfish/Stockfish/pull/5321  bench: 1224588,True,5,2024-06-01
vondele,Disservin,2024-05-30 21:07:25+00:00,Fix cross from Linux to Windows  specifies Windows 7 required  https://learn.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt?view=msvc-170  closes https://github.com/official-stockfish/Stockfish/pull/5319  No functional change,True,3,2024-05-01
Sopel97,Disservin,2024-05-30 21:05:25+00:00,On linux use sysfs instead of lscpu  Use sysfs (https://www.kernel.org/doc/Documentation/ABI/stable/sysfs-devices-node) to determine processor to NUMA node mapping.  Avoids problems on some machines with high core count where lscpu was showing high cpu utilization.  closes https://github.com/official-stockfish/Stockfish/pull/5315  No functional change,True,3,2024-05-01
Sopel97,Disservin,2024-05-30 21:05:21+00:00,Replace std::from_chars with std::stoull  the former was not widely supported; requiring newer compiler versions.  closes https://github.com/official-stockfish/Stockfish/pull/5313  No functional change,True,3,2024-05-01
Sopel97,Disservin,2024-05-30 21:05:16+00:00,Fix process' processor affinity determination on Windows.  Specialize and privatize NumaConfig::get_process_affinity. Only enable NUMA capability for 64-bit Windows.  Following #5307 and some more testing it was determined that the way affinity was being determined on Windows was incorrect; based on incorrect assumptions about GetNumaProcessorNodeEx.  This patch fixes the issue by attempting to retrieve the actual process' processor affinity using Windows API. However one issue persists that is not addressable due to limitations of Windows; and will have to be considered a limitation. If affinities were set using SetThreadAffinityMask instead of SetThreadSelectedCpuSetMasks and GetProcessGroupAffinity returns more than 1 group it is NOT POSSIBLE to determine the affinity programmatically on Windows. In such case the implementation assumes no affinites are set and will consider all processors available for execution.  closes https://github.com/official-stockfish/Stockfish/pull/5312  No functional change,True,3,2024-05-01
Disservin,Disservin,2024-05-30 21:05:01+00:00,NUMA: Fix concurrency counting for windows systems  If there is more than 1 processor group; std::thread::hardware_concurrency should not be used.  fixes #5307  closes https://github.com/official-stockfish/Stockfish/pull/5311  No functional change,True,3,2024-05-01
FauziAkram,Disservin,2024-05-30 21:00:22+00:00,Simplifying the malus for putting piece en prise formula  Simplifying the malus for putting piece en prise formula by merging the minor pieces and pawns (removing the pawn exclusion from the formula).  Passed STC: https://tests.stockfishchess.org/tests/view/66578d9c6b0e318cefa8d441 LLR: 2.99 (-2.94;2.94) <-1.75;0.25> Total: 314272 W: 80705 L: 80786 D: 152781 Ptnml(0-2): 873; 37577; 80366; 37398; 922  Passed LTC (before rebasing): https://tests.stockfishchess.org/tests/view/6657b5ee6b0e318cefa8d6ab LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 117000 W: 29447 L: 29324 D: 58229 Ptnml(0-2): 47; 12877; 32535; 12988; 53  Passed LTC (also after rebasing): https://tests.stockfishchess.org/tests/view/6658803d6b0e318cefa8fd99 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 244992 W: 61807 L: 61814 D: 121371 Ptnml(0-2): 125; 27420; 67414; 27411; 126  closes https://github.com/official-stockfish/Stockfish/pull/5316  Bench: 1484840,True,3,2024-05-01
Vizvezdenec,Disservin,2024-05-30 20:54:23+00:00,Allow tt cutoffs for shallower depths in certain conditions  Current master allows tt cutoffs only when depth from tt is strictly greater than current node depth. This patch also allows them when it's equal and if tt value is lower or equal to beta.  Passed STC: https://tests.stockfishchess.org/tests/view/66578e2e6b0e318cefa8d447 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 26592 W: 6944 L: 6645 D: 13003 Ptnml(0-2): 67; 3039; 6795; 3318; 77  Passed LTC: https://tests.stockfishchess.org/tests/view/6657f46b6b0e318cefa8d7e9 LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 142572 W: 36315 L: 35776 D: 70481 Ptnml(0-2): 70; 15666; 39288; 16179; 83  closes https://github.com/official-stockfish/Stockfish/pull/5314  Bench: 1368486,True,3,2024-05-01
FauziAkram,Disservin,2024-05-30 20:53:20+00:00,Functional simplification in the transposition table  Passed STC: LLR: 2.98 (-2.94;2.94) <-1.75;0.25> Total: 154848 W: 39838 L: 39750 D: 75260 Ptnml(0-2): 404; 16214; 44087; 16328; 391 https://tests.stockfishchess.org/tests/view/664892b088b8c6a2bbe430fc  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 68172 W: 17296 L: 17137 D: 33739 Ptnml(0-2): 23; 6349; 21185; 6504; 25 https://tests.stockfishchess.org/tests/view/6648aabfa0781149e383e526  closes https://github.com/official-stockfish/Stockfish/pull/5263  Bench: 1623228,True,3,2024-05-01
Viren6,vondele,2024-05-30 12:34:24+00:00,Add extension condition to cutoffCnt  Decrease cutoffCnt increment by 1 if extension is 2 or greater.  Passed STC: https://tests.stockfishchess.org/tests/view/66577a696b0e318cefa8d34d LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 99200 W: 25703 L: 25297 D: 48200 Ptnml(0-2): 253; 11660; 25390; 12022; 275  Passed LTC: https://tests.stockfishchess.org/tests/view/665787ab6b0e318cefa8d411 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 124530 W: 31659 L: 31161 D: 61710 Ptnml(0-2): 58; 13578; 34489; 14088; 52  closes https://github.com/official-stockfish/Stockfish/pull/5310  bench 1623228,True,3,2024-05-01
robertnurnberg,vondele,2024-05-30 12:29:31+00:00,Tweak and update the WDL model  This PR updates the internal WDL model; using data from 2.5M games played by SF-dev (3c62ad7). Note that the normalizing constant has increased from 329 to 368.  Changes to the fitting procedure:  * the value for --materialMin was increased from 10 to 17: including data with less material leads to less accuracy for larger material count values * the data was filtered to only include single thread LTC games at 60+0.6 * the data was filtered to only include games from master against patches that are (approximatively) within 5 nElo of master  For more information and plots of the model see PR#5309  closes https://github.com/official-stockfish/Stockfish/pull/5309  No functional change,True,3,2024-05-01
linrock,vondele,2024-05-30 12:28:07+00:00,Update default main net to nn-ddcfb9224cdb.nnue  Created by further tuning the spsa-tuned main net `nn-c721dfca8cd3.nnue` with the same methods described in https://github.com/official-stockfish/Stockfish/pull/5254  This net was reached at 61k / 120k spsa games at 70+0.7 th 7: https://tests.stockfishchess.org/tests/view/665639d0a86388d5e27dd259  Passed STC: https://tests.stockfishchess.org/tests/view/6657d44e6b0e318cefa8d771 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 114688 W: 29775 L: 29344 D: 55569 Ptnml(0-2): 274; 13633; 29149; 13964; 324  Passed LTC: https://tests.stockfishchess.org/tests/view/6657e1e46b0e318cefa8d7a6 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 88152 W: 22412 L: 21988 D: 43752 Ptnml(0-2): 56; 9560; 24409; 10006; 45  closes https://github.com/official-stockfish/Stockfish/pull/5308  Bench: 1434678,True,3,2024-05-01
FauziAkram,vondele,2024-05-30 12:21:28+00:00,Remove Queen threatenedByMinor  Remove Queen threatenedByMinor from movepick  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 54432 W: 14053 L: 13855 D: 26524 Ptnml(0-2): 124; 6347; 14090; 6517; 138 https://tests.stockfishchess.org/tests/view/66578d036b0e318cefa8d43d  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 198168 W: 49979 L: 49940 D: 98249 Ptnml(0-2): 84; 21824; 55236; 21849; 91 https://tests.stockfishchess.org/tests/view/66579cf86b0e318cefa8d5b1  closes https://github.com/official-stockfish/Stockfish/pull/5306  bench: 1342438,True,3,2024-05-01
linrock,vondele,2024-05-30 12:18:39+00:00,Simplify blending eval with nnue complexity  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/66567377a86388d5e27dd89c LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 144000 W: 37443 L: 37338 D: 69219 Ptnml(0-2): 587; 17260; 36208; 17351; 594  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/66567f29a86388d5e27dd924 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 112326 W: 28550 L: 28421 D: 55355 Ptnml(0-2): 66; 12732; 30434; 12869; 62  closes https://github.com/official-stockfish/Stockfish/pull/5305  bench 1554486,True,3,2024-05-01
xu-shawn,vondele,2024-05-30 12:16:17+00:00,Simplify Away Quadruple Extension  Passed non-regression VVLTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 90792 W: 23155 L: 23018 D: 44619 Ptnml(0-2): 6; 8406; 28432; 8549; 3 https://tests.stockfishchess.org/tests/view/664ffa4ca86388d5e27d8e7a  Passed non-regression VLTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 288136 W: 72608 L: 72659 D: 142869 Ptnml(0-2): 38; 30258; 83525; 30211; 36 https://tests.stockfishchess.org/tests/view/66551609a86388d5e27db9ae  closes https://github.com/official-stockfish/Stockfish/pull/5293  bench 1501735,True,3,2024-05-01
xoto10,Disservin,2024-05-29 17:04:57+00:00,Add compensation factor to adjust extra time according to time control  As stockfish nets and search evolve; the existing time control appears to give too little time at STC; roughly correct at LTC; and too little at VLTC+.  This change adds an adjustment to the optExtra calculation. This adjustment is easy to retune and refine; so it should be easier to keep up-to-date than the more complex calculations used for optConstant and optScale.  Passed STC 10+0.1: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 169568 W: 43803 L: 43295 D: 82470 Ptnml(0-2): 485; 19679; 44055; 19973; 592 https://tests.stockfishchess.org/tests/view/66531865a86388d5e27da9fa  Yellow LTC 60+0.6: LLR: -2.94 (-2.94;2.94) <0.50;2.50> Total: 209970 W: 53087 L: 52914 D: 103969 Ptnml(0-2): 91; 19652; 65314; 19849; 79 https://tests.stockfishchess.org/tests/view/6653e38ba86388d5e27daaa0  Passed VLTC 180+1.8 : LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 85618 W: 21735 L: 21342 D: 42541 Ptnml(0-2): 15; 8267; 25848; 8668; 11 https://tests.stockfishchess.org/tests/view/6655131da86388d5e27db95f  closes https://github.com/official-stockfish/Stockfish/pull/5297  Bench: 1212167,True,2,2024-05-01
xu-shawn,Disservin,2024-05-29 17:01:50+00:00,Simplify Fail Low Bonus Formula  Tested against PR #5299  Passed Non-regression STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 76352 W: 19797 L: 19619 D: 36936 Ptnml(0-2): 236; 9017; 19509; 9161; 253 https://tests.stockfishchess.org/tests/view/66564f60a86388d5e27dd307  Passed Non-regression LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 114624 W: 28946 L: 28821 D: 56857 Ptnml(0-2): 59; 12675; 31714; 12810; 54 https://tests.stockfishchess.org/tests/view/6656543da86388d5e27dd329  closes https://github.com/official-stockfish/Stockfish/pull/5301  Bench: 1212167,True,2,2024-05-01
mstembera,Disservin,2024-05-29 17:00:37+00:00,Fix MSVC NUMA compile issues  closes https://github.com/official-stockfish/Stockfish/pull/5298  No functional change,True,2,2024-05-01
xu-shawn,Disservin,2024-05-29 16:58:38+00:00,Tune Fail Low Bonus  Fractional bonus idea is from @Ergodice on [discord](https://discord.com/channels/435943710472011776/735707599353151579/1244039134499180614). Values are tuned for 149k games at LTC.  SPSA tune: https://tests.stockfishchess.org/tests/view/6652d5d5a86388d5e27da9d6  Failed STC: LLR: -2.95 (-2.94;2.94) <0.00;2.00> Total: 67424 W: 17364 L: 17528 D: 32532 Ptnml(0-2): 238; 8043; 17299; 7909; 223 https://tests.stockfishchess.org/tests/view/66551e1ba86388d5e27db9f9  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 146910 W: 37141 L: 36695 D: 73074 Ptnml(0-2): 84; 16201; 40441; 16643; 86 https://tests.stockfishchess.org/tests/view/66559949a86388d5e27dcc5d  Passed VLTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 27248 W: 6924 L: 6633 D: 13691 Ptnml(0-2): 5; 2744; 7835; 3035; 5 https://tests.stockfishchess.org/tests/view/66563f4da86388d5e27dd27a  closes https://github.com/official-stockfish/Stockfish/pull/5299  Bench: 1390709,True,2,2024-05-01
snicolet,Disservin,2024-05-29 16:57:32+00:00,Merge pawn count terms using their average  This simplification patch merges the pawn count terms in the eval formula with the material term; updating the offset constant for the nnue part of the formula from 34000 to 34300 because the average pawn count in middlegame positions evaluated during search is around 8.  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 138240 W: 35834 L: 35723 D: 66683 Ptnml(0-2): 527; 16587; 34817; 16626; 563 https://tests.stockfishchess.org/tests/view/6653f474a86388d5e27daaac  LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 454272 W: 114787 L: 115012 D: 224473 Ptnml(0-2): 246; 51168; 124553; 50903; 266 https://tests.stockfishchess.org/tests/view/6654f256a86388d5e27db131  closes https://github.com/official-stockfish/Stockfish/pull/5303  Bench: 1279635,True,2,2024-05-01
FauziAkram,Disservin,2024-05-29 16:55:30+00:00,Simplifying malus for putting piece en prise formula  Patch author: @ehsanrashid  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 116192 W: 30229 L: 30094 D: 55869 Ptnml(0-2): 451; 13880; 29351; 13911; 503 https://tests.stockfishchess.org/tests/view/66510a40a86388d5e27da936  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 441312 W: 111009 L: 111220 D: 219083 Ptnml(0-2): 217; 49390; 121659; 49167; 223 https://tests.stockfishchess.org/tests/view/66530696a86388d5e27da9e3  closes https://github.com/official-stockfish/Stockfish/pull/5304  Bench: 1987574,True,2,2024-05-01
Sopel97,vondele,2024-05-28 16:34:15+00:00,"Improve performance on NUMA systems  Allow for NUMA memory replication for NNUE weights.  Bind threads to ensure execution on a specific NUMA node.  This patch introduces NUMA memory replication; currently only utilized for the NNUE weights. Along with it comes all machinery required to identify NUMA nodes and bind threads to specific processors/nodes. It also comes with small changes to Thread and ThreadPool to allow easier execution of custom functions on the designated thread. Old thread binding (WinProcGroup) machinery is removed because it's incompatible with this patch. Small changes to unrelated parts of the code were made to ensure correctness; like some classes being made unmovable; raw pointers replaced with unique_ptr. etc.  Windows 7 and Windows 10 is partially supported. Windows 11 is fully supported. Linux is fully supported; with explicit exclusion of Android. No additional dependencies.  -----------------  A new UCI option `NumaPolicy` is introduced. It can take the following values: ``` system - gathers NUMA node information from the system (lscpu or windows api); for each threads binds it to a single NUMA node none - assumes there is 1 NUMA node; never binds threads auto - this is the default value; depends on the number of set threads and NUMA nodes; will only enable binding on multinode systems and when the number of threads reaches a threshold (dependent on node size and count) [[custom]] -   // ':'-separated numa nodes   // ';'-separated cpu indices   // supports ""first-last"" range syntax for cpu indices;   for example '0-15;32-47:16-31;48-63' ```  Setting `NumaPolicy` forces recreation of the threads in the ThreadPool; which in turn forces the recreation of the TT.  The threads are distributed among NUMA nodes in a round-robin fashion based on fill percentage (i.e. it will strive to fill all NUMA nodes evenly). Threads are bound to NUMA nodes; not specific processors; because that's our only requirement and the OS can schedule them better.  Special care is made that maximum memory usage on systems that do not require memory replication stays as previously; that is; unnecessary copies are avoided.  On linux the process' processor affinity is respected. This means that if you for example use taskset to restrict Stockfish to a single NUMA node then the `system` and `auto` settings will only see a single NUMA node (more precisely; the processors included in the current affinity mask) and act accordingly.  -----------------  We can't ensure that a memory allocation takes place on a given NUMA node without using libnuma on linux; or using appropriate custom allocators on windows (https://learn.microsoft.com/en-us/windows/win32/memory/allocating-memory-from-a-numa-node); so to avoid complications the current implementation relies on first-touch policy. Due to this we also rely on the memory allocator to give us a new chunk of untouched memory from the system. This appears to work reliably on linux; but results may vary.  MacOS is not supported; because AFAIK it's not affected; and implementation would be problematic anyway.  Windows is supported since Windows 7 (https://learn.microsoft.com/en-us/windows/win32/api/processtopologyapi/nf-processtopologyapi-setthreadgroupaffinity). Until Windows 11/Server 2022 NUMA nodes are split such that they cannot span processor groups. This is because before Windows 11/Server 2022 it's not possible to set thread affinity spanning processor groups. The splitting is done manually in some cases (required after Windows 10 Build 20348). Since Windows 11/Server 2022 we can set affinites spanning processor group so this splitting is not done; so the behaviour is pretty much like on linux.  Linux is supported; **without** libnuma requirement. `lscpu` is expected.  -----------------  Passed 60+1 @ 256t 16000MB hash: https://tests.stockfishchess.org/tests/view/6654e443a86388d5e27db0d8 ``` LLR: 2.95 (-2.94;2.94) <0.00;10.00> Total: 278 W: 110 L: 29 D: 139 Ptnml(0-2): 0; 1; 56; 82; 0 ```  Passed SMP STC: https://tests.stockfishchess.org/tests/view/6654fc74a86388d5e27db1cd ``` LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 67152 W: 17354 L: 17177 D: 32621 Ptnml(0-2): 64; 7428; 18408; 7619; 57 ```  Passed STC: https://tests.stockfishchess.org/tests/view/6654fb27a86388d5e27db15c ``` LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 131648 W: 34155 L: 34045 D: 63448 Ptnml(0-2): 426; 13878; 37096; 14008; 416 ```  fixes #5253 closes https://github.com/official-stockfish/Stockfish/pull/5285  No functional change",True,1,2024-05-01
Disservin,vondele,2024-05-28 16:31:06+00:00,apply const to prefetch parameter  closes https://github.com/official-stockfish/Stockfish/pull/5296  No functional change,True,1,2024-05-01
FauziAkram,vondele,2024-05-28 16:30:24+00:00,Tweak return value in futility pruning  Tweak the return value formula in futility pruning.  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 60544 W: 15791 L: 15440 D: 29313 Ptnml(0-2): 193; 7024; 15520; 7309; 226 https://tests.stockfishchess.org/tests/view/6654ef22a86388d5e27db122  Passed LTC: LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 126426 W: 32317 L: 31812 D: 62297 Ptnml(0-2): 55; 13871; 34869; 14350; 68 https://tests.stockfishchess.org/tests/view/66550644a86388d5e27db649  closes https://github.com/official-stockfish/Stockfish/pull/5295  bench: 1856147,True,1,2024-05-01
xu-shawn,vondele,2024-05-28 16:26:42+00:00,Simplify Away TT Cutoff Return Value Adjustments  Passed Non-regression STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 198432 W: 51161 L: 51119 D: 96152 Ptnml(0-2): 772; 23670; 50273; 23746; 755 https://tests.stockfishchess.org/tests/view/66517b9ea86388d5e27da966  Passed Non-regression LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 234150 W: 59200 L: 59197 D: 115753 Ptnml(0-2): 126; 26200; 64404; 26235; 110 https://tests.stockfishchess.org/tests/view/6653a84da86388d5e27daa63  closes https://github.com/official-stockfish/Stockfish/pull/5292  bench 1555200,True,1,2024-05-01
peregrineshahin,Disservin,2024-05-26 18:32:41+00:00,Remove rootDelta branch  This makes rootDelta logic easier to understand; recalculating the value where it belongs so removes an unnecessary branch.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/664fc147a86388d5e27d8d8e LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 206016 W: 53120 L: 53089 D: 99807 Ptnml(0-2): 591; 20928; 59888; 21061; 540  closes https://github.com/official-stockfish/Stockfish/pull/5289  No functional change,True,6,2024-05-01
linrock,Disservin,2024-05-26 18:32:30+00:00,Lower smallnet threshold with tuned eval params  The smallnet threshold is now below the training data range of the current smallnet (simple eval diff > 1k; nn-baff1edelf90.nnue) when no pawns are on the board.  Params found with spsa at 93k / 120k games at 60+06: https://tests.stockfishchess.org/tests/view/664fa166a86388d5e27d7d6b  Tuned on top of: https://github.com/official-stockfish/Stockfish/pull/5287  Passed STC: https://tests.stockfishchess.org/tests/view/664fc8b7a86388d5e27d8dac LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 64672 W: 16731 L: 16371 D: 31570 Ptnml(0-2): 239; 7463; 16517; 7933; 184  Passed LTC: https://tests.stockfishchess.org/tests/view/664fd5f9a86388d5e27d8dfe LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 210648 W: 53489 L: 52813 D: 104346 Ptnml(0-2): 102; 23129; 58164; 23849; 80  closes https://github.com/official-stockfish/Stockfish/pull/5288  Bench: 1717838,True,6,2024-05-01
snicolet,Disservin,2024-05-26 18:24:05+00:00,Simplify material weights in evaluation  This patch uses the same material weights for the nnue amplification term and the optimism term in evaluate().  STC: LLR: 2.99 (-2.94;2.94) <-1.75;0.25> Total: 83360 W: 21489 L: 21313 D: 40558 Ptnml(0-2): 303; 9934; 21056; 10058; 329 https://tests.stockfishchess.org/tests/view/664eee69928b1fb18de500d9  LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 192648 W: 48675 L: 48630 D: 95343 Ptnml(0-2): 82; 21484; 53161; 21501; 96 https://tests.stockfishchess.org/tests/view/664fa17aa86388d5e27d7d6e  closes https://github.com/official-stockfish/Stockfish/pull/5287  Bench: 1495602,True,6,2024-05-01
XInTheDark,Disservin,2024-05-23 19:37:46+00:00,VVLTC search tune  Parameters were tuned in 2 stages: 1. 127k games at VVLTC:    https://tests.stockfishchess.org/tests/view/6649f8dfb8fa20e74c39f52a. 2. 106k games at VVLTC:    https://tests.stockfishchess.org/tests/view/664bfb77830eb9f886615a9d.  Passed VVLTC 1st sprt: https://tests.stockfishchess.org/tests/view/664e8dd9928b1fb18de4e410 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 20466 W: 5340 L: 5093 D: 10033 Ptnml(0-2): 0; 1796; 6397; 2037; 3  Passed VVLTC 2nd sprt: https://tests.stockfishchess.org/tests/view/664eb4aa928b1fb18de4e47d LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 15854 W: 4186 L: 3934 D: 7734 Ptnml(0-2): 1; 1367; 4938; 1621; 0  closes https://github.com/official-stockfish/Stockfish/pull/5286  Bench: 1558110,True,3,2024-05-01
linrock,Disservin,2024-05-23 19:37:46+00:00,Remove material imbalance param when adjusting optimism  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/664d033d830eb9f886616aff LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 102144 W: 26283 L: 26135 D: 49726 Ptnml(0-2): 292; 12201; 25991; 12243; 345  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/664d5c00830eb9f886616cb3 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 250032 W: 63022 L: 63036 D: 123974 Ptnml(0-2): 103; 27941; 68970; 27871; 131  closes https://github.com/official-stockfish/Stockfish/pull/5284  Bench: 1330940,True,3,2024-05-01
XInTheDark,Disservin,2024-05-23 19:37:46+00:00,"Revert ""Reduce When TTValue is Above Alpha""  The patch regressed significantly at longer time controls. In particular; the `depth--` behavior was predicted to scale badly based on data from other variations of the patch.  Passed VVLTC 1st sprt: https://tests.stockfishchess.org/tests/view/664d45cf830eb9f886616c7d LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 51292 W: 13242 L: 12954 D: 25096 Ptnml(0-2): 5; 4724; 15896; 5020; 1  Passed VVLTC 2nd sprt: https://tests.stockfishchess.org/tests/view/664e641a928b1fb18de4e385 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 41884 W: 10933 L: 10634 D: 20317 Ptnml(0-2): 1; 3759; 13125; 4054; 3  closes https://github.com/official-stockfish/Stockfish/pull/5283  Bench: 1503815",True,3,2024-05-01
cj5716,Disservin,2024-05-23 19:37:46+00:00,"Optimise pairwise multiplication  This speedup was first inspired by a comment by @AndyGrant on my recent PR ""If mullo_epi16 would preserve the signedness; then this could be used to remove 50% of the max operations during the halfkp-pairwise mat-mul relu deal.""  That got me thinking; because although mullo_epi16 did not preserve the signedness; mulhi_epi16 did; and so we could shift left and then use mulhi_epi16; instead of shifting right after the mullo.  However; due to some issues with shifting into the sign bit; the FT weights and biases had to be multiplied by 2 for the optimisation to work.  Speedup on ""Arch=x86-64-bmi2 COMP=clang""; courtesy of @Torom Result of 50 runs base (...es/stockfish) =     962946  +/- 1202 test (...ise-max-less) =     979696  +/- 1084 diff                   =     +16750  +/- 1794  speedup        = +0.0174 P(speedup > 0) =  1.0000  CPU: 4 x Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz Hyperthreading: on  Also a speedup on ""COMP=gcc""; courtesy of Torom once again Result of 50 runs base (...tockfish_gcc) =     966033  +/- 1574 test (...max-less_gcc) =     983319  +/- 1513 diff                   =     +17286  +/- 2515  speedup        = +0.0179 P(speedup > 0) =  1.0000  CPU: 4 x Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz Hyperthreading: on  Passed STC: LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 67712 W: 17715 L: 17358 D: 32639 Ptnml(0-2): 225; 7472; 18140; 7759; 260 https://tests.stockfishchess.org/tests/view/664c1d75830eb9f886616906  closes https://github.com/official-stockfish/Stockfish/pull/5282  No functional change",True,3,2024-05-01
xu-shawn,Disservin,2024-05-23 19:30:33+00:00,Simplify Away History Updates in Multicut  Passed Non-regression STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 44896 W: 11600 L: 11388 D: 21908 Ptnml(0-2): 140; 5230; 11532; 5370; 176 https://tests.stockfishchess.org/tests/view/664cee31830eb9f886616a80  Passed Non-regression LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 56832 W: 14421 L: 14234 D: 28177 Ptnml(0-2): 37; 6251; 15643; 6458; 27 https://tests.stockfishchess.org/tests/view/664cfd4e830eb9f886616aa6  closes https://github.com/official-stockfish/Stockfish/pull/5281  Bench: 1119412,True,3,2024-05-01
linrock,Disservin,2024-05-23 19:30:24+00:00,Comment about re-evaluating positions  While the smallNet bool is no longer used as of now; setting it to false upon re-evaluation represents the correct eval state.  closes https://github.com/official-stockfish/Stockfish/pull/5279  No functional change,True,3,2024-05-01
Viren6,Disservin,2024-05-23 19:29:36+00:00,Addition of new scaling comments  This patch is intended to prevent patches like 9b90cd8 and the subsequent reversion e3c9ed7 from happening again. Scaling behaviour of the reduction adjustments in the non-linear scaling section have been proven to >8 sigma:  STC: https://tests.stockfishchess.org/tests/view/6647b19f6dcff0d1d6b05d52 Elo: 4.28 � 0.8 (95%) LOS: 100.0% Total: 200000 W: 52555 L: 50094 D: 97351 Ptnml(0-2): 573; 22628; 51248; 24867; 684 nElo: 8.35 � 1.5 (95%) PairsRatio: 1.10  VLTC: https://tests.stockfishchess.org/tests/view/6647b1b06dcff0d1d6b05d54 Elo: -1.48 � 1.0 (95%) LOS: 0.2% Total: 100000 W: 25009 L: 25436 D: 49555 Ptnml(0-2): 11; 10716; 28971; 10293; 9 nElo: -3.23 � 2.2 (95%) PairsRatio: 0.96  The else if condition is moved to the non scaling section based on: https://tests.stockfishchess.org/tests/view/664567a193ce6da3e93b3232 (It has no proven scaling)  General comment improvements and removal of a redundant margin condition have also been included.  closes https://github.com/official-stockfish/Stockfish/pull/5266  No functional change,True,3,2024-05-01
dubslow,Disservin,2024-05-23 19:29:11+00:00,"Improve comments about DEPTH constants  Also ""fix"" movepicker to allow depths between CHECKS and NO_CHECKS; which makes them easier to tweak (not that they get tweaked hardly ever) (This was more beneficial when there was a third stage to DEPTH_QS; but it's still an improvement now)  closes https://github.com/official-stockfish/Stockfish/pull/5205  No functional change",True,3,2024-05-01
linrock,vondele,2024-05-21 20:06:17+00:00,Lower smallnet threshold with updated eval divisors  Params found after 30k spsa games at 60+0.6; with initial values from 64k spsa games at 45+0.45  First spsa with 64k / 120k games at 45+0.45: https://tests.stockfishchess.org/tests/view/664a561b5fc7b70b8817c663 https://tests.stockfishchess.org/tests/view/664ae88e830eb9f8866146f9  Second spsa with 30k / 120k games at 60+0.6: https://tests.stockfishchess.org/tests/view/664be227830eb9f886615a36  Values found at 10k games at 60+0.6 also passed STC and LTC: https://tests.stockfishchess.org/tests/view/664bf4bd830eb9f886615a72 https://tests.stockfishchess.org/tests/view/664c0905830eb9f886615abf  Passed STC: https://tests.stockfishchess.org/tests/view/664c139e830eb9f886615af2 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 69408 W: 18216 L: 17842 D: 33350 Ptnml(0-2): 257; 8275; 17401; 8379; 392  Passed LTC: https://tests.stockfishchess.org/tests/view/664cdaf7830eb9f886616a24 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 35466 W: 9075 L: 8758 D: 17633 Ptnml(0-2): 27; 3783; 9794; 4104; 25  closes https://github.com/official-stockfish/Stockfish/pull/5280  bench 1301287,True,1,2024-05-01
MinetaS,vondele,2024-05-21 06:46:12+00:00,Remove cutoffCnt margin adjustment in razoring  Passed non-regression STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 65344 W: 16767 L: 16578 D: 31999 Ptnml(0-2): 198; 7557; 16987; 7718; 212 https://tests.stockfishchess.org/tests/view/664bd895830eb9f886615a26  Passed non-regression LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 35214 W: 8999 L: 8791 D: 17424 Ptnml(0-2): 16; 3804; 9760; 4010; 17 https://tests.stockfishchess.org/tests/view/664bead5830eb9f886615a52  closes https://github.com/official-stockfish/Stockfish/pull/5278  Bench: 1296223,False,1,2024-05-01
FauziAkram,vondele,2024-05-21 06:44:59+00:00,Refine Evaluation Scaling with Piece-Specific Weights  Refine Evaluation Scaling with Piece-Specific Weights; instead of the simplified npm method. I took the initial idea from Viren6 ; as he worked on it in September of last year. I worked on it; and tuned it; and now it passed both tests.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 95712 W: 24731 L: 24325 D: 46656 Ptnml(0-2): 363; 11152; 24357; 11684; 300 https://tests.stockfishchess.org/tests/view/664b5493830eb9f886614af3  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 204480 W: 52167 L: 51501 D: 100812 Ptnml(0-2): 114; 22579; 56166; 23289; 92 https://tests.stockfishchess.org/tests/view/664b75dd830eb9f886614b44  closes https://github.com/official-stockfish/Stockfish/pull/5277  Bench: 1384337,True,1,2024-05-01
xu-shawn,vondele,2024-05-21 06:40:37+00:00,Reduce When TTValue is Above Alpha  Passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 53376 W: 13818 L: 13476 D: 26082 Ptnml(0-2): 156; 6212; 13626; 6522; 172 https://tests.stockfishchess.org/tests/view/664aa261830eb9f8866145e5  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 393444 W: 100096 L: 99042 D: 194306 Ptnml(0-2): 191; 43516; 108248; 44582; 185 https://tests.stockfishchess.org/tests/view/664ab54f830eb9f88661463c  closes https://github.com/official-stockfish/Stockfish/pull/5276  Bench: 1024562,True,1,2024-05-01
Vizvezdenec,vondele,2024-05-21 06:36:32+00:00,Rescale pawn history updates  This patch is somewhat of a continuation of recent pawn history gainers. It makes pawn history updates after search twice smaller. Since on average they make pawn history more negative offset is changed to lower value to remain average value approximately the same.  https://tests.stockfishchess.org/tests/view/664b3af9830eb9f886614aab Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 170464 W: 44239 L: 43724 D: 82501 Ptnml(0-2): 523; 20278; 43128; 20767; 536  Passed LTC against pending PR : https://tests.stockfishchess.org/tests/view/664b8c58830eb9f886614b64 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 98178 W: 25015 L: 24569 D: 48594 Ptnml(0-2): 48; 10769; 27005; 11223; 44  closes https://github.com/official-stockfish/Stockfish/pull/5275  Bench: 1343175,True,1,2024-05-01
FauziAkram,vondele,2024-05-21 06:27:16+00:00,Use same shuffling Constant for both nets  Passed STC: https://tests.stockfishchess.org/tests/view/664a42b15fc7b70b8817aeef LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 87840 W: 22759 L: 22594 D: 42487 Ptnml(0-2): 335; 10351; 22324; 10634; 276  Passed LTC: https://tests.stockfishchess.org/tests/view/664a46995fc7b70b8817af02 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 163122 W: 41443 L: 41367 D: 80312 Ptnml(0-2): 105; 18154; 44927; 18310; 65  closes https://github.com/official-stockfish/Stockfish/pull/5273  bench: 1190174,True,1,2024-05-01
Vizvezdenec,vondele,2024-05-21 06:17:20+00:00,Update correction history in case of successful null move pruning  Since null move pruning uses the same position it makes some sense to try to update correction history there in case of fail high. Update value is 4 times less than normal update.  Passed STC: https://tests.stockfishchess.org/tests/view/664a011cae57c1758ac5b4dd LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 419360 W: 108390 L: 107505 D: 203465 Ptnml(0-2): 1416; 49603; 106724; 50554; 1383  Passed LTC: https://tests.stockfishchess.org/tests/view/664a53d95fc7b70b8817c65b LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 193518 W: 49076 L: 48434 D: 96008 Ptnml(0-2): 89; 21335; 53263; 21989; 83  closes https://github.com/official-stockfish/Stockfish/pull/5272  bench 1301487,True,1,2024-05-01
linrock,vondele,2024-05-21 06:13:25+00:00,Re-eval only if smallnet output flips from simple eval  Recent attempts to change the smallnet nnue re-eval threshold did not show much elo difference: https://tests.stockfishchess.org/tests/view/664a29bb25a9058c4d21d53c https://tests.stockfishchess.org/tests/view/664a299925a9058c4d21d53a  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/664a3ea95fc7b70b8817aee2 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 22304 W: 5905 L: 5664 D: 10735 Ptnml(0-2): 67; 2602; 5603; 2783; 97  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/664a43d35fc7b70b8817aef4 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 37536 W: 9667 L: 9460 D: 18409 Ptnml(0-2): 25; 4090; 10321; 4317; 15  closes https://github.com/official-stockfish/Stockfish/pull/5271  bench 1287409,True,1,2024-05-01
locutus2,vondele,2024-05-21 06:11:17+00:00,Simplify the recently introduced ply-based cmh bonus factor.  Replace it with a constant which is an approximation of the limit of the factor.  STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 120064 W: 30967 L: 30836 D: 58261 Ptnml(0-2): 421; 14238; 30608; 14319; 446 https://tests.stockfishchess.org/tests/view/6649d146b8fa20e74c39f4ad  LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 53856 W: 13719 L: 13530 D: 26607 Ptnml(0-2): 31; 5879; 14922; 6062; 34 https://tests.stockfishchess.org/tests/view/664a027fae57c1758ac5b4ee  closes https://github.com/official-stockfish/Stockfish/pull/5270  Bench: 1355618,True,1,2024-05-01
Vizvezdenec,vondele,2024-05-21 06:07:22+00:00,Do more aggressive pawn history updates  Tweak of recent patch that made pawn history to update for move that caused a fail low - and setting up default value of it to -900.  This patch makes it more aggressive - twice bigger updates and default value -1100.  Passed STC: https://tests.stockfishchess.org/tests/view/6648c5d4308cceea45533b5d LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 235200 W: 61090 L: 60476 D: 113634 Ptnml(0-2): 763; 27952; 59651; 28376; 858  Passed LTC: https://tests.stockfishchess.org/tests/view/664a1008ae57c1758ac5b523 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 20076 W: 5193 L: 4908 D: 9975 Ptnml(0-2): 7; 2105; 5534; 2380; 12  closes https://github.com/official-stockfish/Stockfish/pull/5268  Bench: 1590474,True,1,2024-05-01
locutus2,vondele,2024-05-21 06:04:44+00:00,Tweak continuation history bonus dependent on ply.  This patch is based on following tuning https://tests.stockfishchess.org/tests/view/6648b2eb308cceea45533abe by only using the tuned factors for the continuation history.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 99904 W: 25865 L: 25457 D: 48582 Ptnml(0-2): 281; 11705; 25578; 12101; 287 https://tests.stockfishchess.org/tests/view/6648c136308cceea45533af8  Passed LTC: LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 36402 W: 9362 L: 9039 D: 18001 Ptnml(0-2): 20; 3952; 9951; 4241; 37 https://tests.stockfishchess.org/tests/view/6648ee3cb8fa20e74c39f3fd  closes https://github.com/official-stockfish/Stockfish/pull/5267  Bench: 1917762,True,1,2024-05-01
cj5716,vondele,2024-05-21 05:58:16+00:00,Simplify ClippedReLU  Removes some max calls  Some speedup stats; courtesy of @AndyGrant (albeit measured in an alternate implementation) Dev  749240 nps Base 748495 nps Gain 0.100% 289936 games  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 203040 W: 52213 L: 52179 D: 98648 Ptnml(0-2): 480; 20722; 59139; 20642; 537 https://tests.stockfishchess.org/tests/view/664805fe6dcff0d1d6b05f2c  closes #5261  No functional change,True,1,2024-05-01
Viren6,vondele,2024-05-19 07:37:22+00:00,"Revert ""Simplify Away Quadruple Extensions""  This reverts commit 4edd1a3  The unusual result of (combined) +12.0 +- 3.7 in the 2 VVLTC simplification SPRTs ran was the result of base having only 64MB of hash instead of 512MB (Asymmetric hash). Vizvezdenec was the one to notice this.  closes https://github.com/official-stockfish/Stockfish/pull/5265  bench 1404295  Co-Authored-By: Michael Chaly <26898827+Vizvezdenec@users.noreply.github.com>",True,6,2024-05-01
XInTheDark,vondele,2024-05-18 16:09:45+00:00,VVLTC search tune  Tuned with 85k games at VVLTC.  VVLTC 1st sprt: https://tests.stockfishchess.org/tests/view/6648b836308cceea45533ad7 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 14880 W: 3890 L: 3652 D: 7338 Ptnml(0-2): 0; 1255; 4694; 1489; 2  VVLTC 2nd sprt: https://tests.stockfishchess.org/tests/view/6648c34f308cceea45533b4f LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 24984 W: 6502 L: 6235 D: 12247 Ptnml(0-2): 1; 2178; 7867; 2445; 1  closes https://github.com/official-stockfish/Stockfish/pull/5264  Bench: 1198142,True,5,2024-05-01
linrock,vondele,2024-05-18 16:08:39+00:00,Simplify away adjustEval lambda  Now that only the shuffling constant differs between nets; a lambda for adjusting eval is no longer needed.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/664806ca6dcff0d1d6b05f34 LLR: 2.99 (-2.94;2.94) <-1.75;0.25> Total: 31552 W: 8175 L: 7959 D: 15418 Ptnml(0-2): 76; 3180; 9065; 3362; 93  closes https://github.com/official-stockfish/Stockfish/pull/5260  No functional change,True,5,2024-05-01
xu-shawn,vondele,2024-05-18 07:32:21+00:00,Simplify Away Quadruple Extensions  serendipitous gainer  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 95472 W: 24176 L: 24031 D: 47265 Ptnml(0-2): 52; 10533; 26414; 10692; 45 https://tests.stockfishchess.org/tests/live_elo/6647fa596dcff0d1d6b05efa  Passed VVLTC 70+7 th 7: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 6772 W: 1793 L: 1583 D: 3396 Ptnml(0-2): 0; 502; 2172; 712; 0 https://tests.stockfishchess.org/tests/live_elo/6648277a6dcff0d1d6b05ffb  Passed VVLTC 70+7 th 7 (2x): https://tests.stockfishchess.org/tests/view/66484c896dcff0d1d6b0619d LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 5424 W: 1469 L: 1254 D: 2701 Ptnml(0-2): 0; 394; 1710; 607; 1  closes https://github.com/official-stockfish/Stockfish/pull/5259  Bench: 1441794,True,5,2024-05-01
linrock,vondele,2024-05-18 07:29:26+00:00,Use one nnue pawn count multiplier  Switch to the value used by the main net.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/6647e8096dcff0d1d6b05e96 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 51040 W: 13249 L: 13044 D: 24747 Ptnml(0-2): 139; 6029; 13016; 6160; 176  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/6647f4a46dcff0d1d6b05eea LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 20460 W: 5195 L: 4972 D: 10293 Ptnml(0-2): 8; 2178; 5637; 2397; 10  https://github.com/official-stockfish/Stockfish/pull/5258  bench 1887462,True,5,2024-05-01
xu-shawn,vondele,2024-05-18 07:26:42+00:00,Tweak NMP Formula  Passed STC: LLR: 2.99 (-2.94;2.94) <0.00;2.00> Total: 241728 W: 62440 L: 61811 D: 117477 Ptnml(0-2): 914; 28467; 61458; 29126; 899 https://tests.stockfishchess.org/tests/live_elo/6645992993ce6da3e93b5b99  Passed LTC: LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 167850 W: 42620 L: 42030 D: 83200 Ptnml(0-2): 82; 18412; 46354; 18988; 89 https://tests.stockfishchess.org/tests/live_elo/6647c5726dcff0d1d6b05dd3  closes https://github.com/official-stockfish/Stockfish/pull/5257  Bench: 1636018,True,5,2024-05-01
FauziAkram,vondele,2024-05-18 07:24:23+00:00,Early Exit in Bitboards::sliding_attack()  he original code checks for occupancy within the loop condition. By moving this check inside the loop and adding an early exit condition; we can avoid unnecessary iterations if a blocking piece is encountered.  Passed stc: LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 127200 W: 33129 L: 32700 D: 61371 Ptnml(0-2): 424; 13243; 35826; 13694; 413 https://tests.stockfishchess.org/tests/view/664646006dcff0d1d6b05bca  closes https://github.com/official-stockfish/Stockfish/pull/5256  No functional change,True,5,2024-05-01
linrock,vondele,2024-05-18 07:21:00+00:00,Move smallnet threshold logic into a function  Now that the smallnet threshold is no longer a constant; use a function to organize it with other eval code.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/66459fa093ce6da3e93b5ba2 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 217600 W: 56281 L: 56260 D: 105059 Ptnml(0-2): 756; 23787; 59729; 23736; 792  closes https://github.com/official-stockfish/Stockfish/pull/5255  No functional change,True,5,2024-05-01
linrock,vondele,2024-05-18 07:19:10+00:00,Update default main net to nn-c721dfca8cd3.nnue  Created by first retraining the spsa-tuned main net `nn-ae6a388e4a1a.nnue` with: - using v6-dd data without bestmove captures removed - addition of T80 mar2024 data - increasing loss by 20% when Q is too high - torch.compile changes for marginal training speed gains  And then SPSA tuning weights of epoch 899 following methods described in: https://github.com/official-stockfish/Stockfish/pull/5149  This net was reached at 92k out of 120k steps in this 70+0.7 th 7 SPSA tuning run: https://tests.stockfishchess.org/tests/view/66413b7df9f4e8fc783c9bbb Thanks to @Viren6 for suggesting usage of: - c value 4 for the weights - c value 128 for the biases  Scripts for automating applying fishtest spsa params to exporting tuned .nnue are in: https://github.com/linrock/nnue-tools/tree/master/spsa  Before spsa tuning; epoch 899 was nn-f85738aefa84.nnue https://tests.stockfishchess.org/tests/view/663e5c893a2f9702074bc167  After initially training with max-epoch 800; training was resumed with max-epoch 1000.  ``` experiment-name: 3072--S11--more-data-v6-dd-t80-mar2024--see-ge0-20p-more-loss-high-q-sk28-l8 nnue-pytorch-branch: linrock/nnue-pytorch/3072-r21-skip-more-wdl-see-ge0-20p-more-loss-high-q-torch-compile-more  start-from-engine-test-net: False start-from-model: /data/config/apr2024-3072/nn-ae6a388e4a1a.nnue  early-fen-skipping: 28 training-dataset:   /data/S11-mar2024/:     - leela96.v2.min.binpack      - test60-2021-11-12-novdec-12tb7p.v6-dd.min.binpack     - test78-2022-01-to-05-jantomay-16tb7p.v6-dd.min.binpack      - test80-2022-06-jun-16tb7p.v6-dd.min.binpack      - test80-2022-08-aug-16tb7p.v6-dd.min.binpack     - test80-2022-09-sep-16tb7p.v6-dd.min.binpack      - test80-2023-01-jan-16tb7p.v6-sk20.min.binpack     - test80-2023-02-feb-16tb7p.v6-sk20.min.binpack     - test80-2023-03-mar-2tb7p.v6-sk16.min.binpack     - test80-2023-04-apr-2tb7p.v6-sk16.min.binpack     - test80-2023-05-may-2tb7p.v6.min.binpack      # https://github.com/official-stockfish/Stockfish/pull/4782     - test80-2023-06-jun-2tb7p.binpack     - test80-2023-07-jul-2tb7p.binpack      # https://github.com/official-stockfish/Stockfish/pull/4972     - test80-2023-08-aug-2tb7p.v6.min.binpack     - test80-2023-09-sep-2tb7p.binpack     - test80-2023-10-oct-2tb7p.binpack      # S9 new data: https://github.com/official-stockfish/Stockfish/pull/5056     - test80-2023-11-nov-2tb7p.binpack     - test80-2023-12-dec-2tb7p.binpack      # S10 new data: https://github.com/official-stockfish/Stockfish/pull/5149     - test80-2024-01-jan-2tb7p.binpack     - test80-2024-02-feb-2tb7p.binpack      # S11 new data     - test80-2024-03-mar-2tb7p.binpack    /data/filt-v6-dd/:     - test77-dec2021-16tb7p-filter-v6-dd.binpack     - test78-juntosep2022-16tb7p-filter-v6-dd.binpack     - test79-apr2022-16tb7p-filter-v6-dd.binpack     - test79-may2022-16tb7p-filter-v6-dd.binpack     - test80-jul2022-16tb7p-filter-v6-dd.binpack     - test80-oct2022-16tb7p-filter-v6-dd.binpack     - test80-nov2022-16tb7p-filter-v6-dd.binpack  num-epochs: 1000  lr: 4.375e-4 gamma: 0.995 start-lambda: 0.8 end-lambda: 0.7 ```  Training data can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move: nn-epoch899.nnue : 4.6 +/- 1.4  Passed STC: https://tests.stockfishchess.org/tests/view/6645454893ce6da3e93b31ae LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 95232 W: 24598 L: 24194 D: 46440 Ptnml(0-2): 294; 11215; 24180; 11647; 280  Passed LTC: https://tests.stockfishchess.org/tests/view/6645522d93ce6da3e93b31df LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 320544 W: 81432 L: 80524 D: 158588 Ptnml(0-2): 164; 35659; 87696; 36611; 142  closes https://github.com/official-stockfish/Stockfish/pull/5254  bench 1995552,True,5,2024-05-01
raklaptudirm,vondele,2024-05-18 07:18:14+00:00,Improve comment  closes https://github.com/official-stockfish/Stockfish/pull/5249  No functional change,True,5,2024-05-01
linrock,Disservin,2024-05-16 12:19:28+00:00,Lower smallnet threshold linearly as pawn count decreases  Passed STC: https://tests.stockfishchess.org/tests/view/6644f677324e96f42f89d894 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 377920 W: 97135 L: 96322 D: 184463 Ptnml(0-2): 1044; 44259; 97588; 44978; 1091  Passed LTC: https://tests.stockfishchess.org/tests/view/664548af93ce6da3e93b31b3 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 169056 W: 42901 L: 42312 D: 83843 Ptnml(0-2): 58; 18538; 46753; 19115; 64  closes https://github.com/official-stockfish/Stockfish/pull/5252  Bench: 1991750,True,3,2024-05-01
XInTheDark,Disservin,2024-05-16 12:17:53+00:00,"Revert ""Reduce more when improving and ttvalue is lower than alpha""  The patch regressed significantly at longer time controls.  Passed VLTC: https://tests.stockfishchess.org/tests/view/6644c7a2bc537f5619453096 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 43336 W: 11177 L: 10884 D: 21275 Ptnml(0-2): 3; 4432; 12507; 4721; 5  Passed VVLTC: https://tests.stockfishchess.org/tests/view/66450c974aa4fa9a83b6d0b0 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 32394 W: 8350 L: 8072 D: 15972 Ptnml(0-2): 2; 2798; 10317; 3080; 0  closes https://github.com/official-stockfish/Stockfish/pull/5251  Bench: 1594188",True,3,2024-05-01
linrock,Disservin,2024-05-16 12:16:54+00:00,Use same nnue divisor for both nets  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/6643ceeabc537f56194506f6 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 224800 W: 57910 L: 57896 D: 108994 Ptnml(0-2): 673; 26790; 57519; 26686; 732  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/6643ff15bc537f5619451719 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 347658 W: 87574 L: 87688 D: 172396 Ptnml(0-2): 207; 39004; 95488; 38956; 174  closes https://github.com/official-stockfish/Stockfish/pull/5250  Bench: 1804704,True,3,2024-05-01
FauziAkram,Disservin,2024-05-15 14:27:03+00:00,Simplifying improving and worsening deduction formulas  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 77696 W: 20052 L: 19878 D: 37766 Ptnml(0-2): 222; 9124; 19994; 9274; 234 https://tests.stockfishchess.org/tests/view/66440032bc537f561945171e  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 234414 W: 58874 L: 58871 D: 116669 Ptnml(0-2): 96; 26147; 64742; 26102; 120 https://tests.stockfishchess.org/tests/view/6644094cbc537f5619451735  closes https://github.com/official-stockfish/Stockfish/pull/5248  Bench: 1336738,True,2,2024-05-01
linrock,Disservin,2024-05-15 14:26:00+00:00,Use same eval divisor for both nets  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/66428f146577e9d2c8a29cf8 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 241024 W: 62173 L: 62177 D: 116674 Ptnml(0-2): 904; 28648; 61407; 28654; 899  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/6643ae6f1f32a966da74977b LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 193710 W: 48762 L: 48717 D: 96231 Ptnml(0-2): 70; 21599; 53481; 21626; 79  closes https://github.com/official-stockfish/Stockfish/pull/5246  Bench: 1700680,True,2,2024-05-01
locutus2,Disservin,2024-05-15 14:20:14+00:00,Reduce more when improving and ttvalue is lower than alpha  More reduction if position is improving but value from TT doesn't exceeds alpha but the tt move is excluded.  This idea is based on following LMR condition tuning https://tests.stockfishchess.org/tests/view/66423a1bf9f4e8fc783cba37 by using only three of the four largest terms P[3]; P[18] and P[12].  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 27840 W: 7309 L: 7004 D: 13527 Ptnml(0-2): 85; 3219; 7018; 3502; 96 https://tests.stockfishchess.org/tests/view/6643dc1cbc537f56194508ba  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 191280 W: 48656 L: 48020 D: 94604 Ptnml(0-2): 78; 20979; 52903; 21589; 91 https://tests.stockfishchess.org/tests/view/6643e543bc537f5619451683  closes https://github.com/official-stockfish/Stockfish/pull/5245  Bench: 1430835,True,2,2024-05-01
mstembera,Disservin,2024-05-15 14:19:04+00:00,Call adjustEval with correct parameters after rescore  Set smallNet to false after rescoring so we call adjustEval() w/ correct parameters.  STC: https://tests.stockfishchess.org/tests/view/664308687134c82f3f7a4003 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 146912 W: 37856 L: 37756 D: 71300 Ptnml(0-2): 566; 17562; 37122; 17618; 588  LTC: https://tests.stockfishchess.org/tests/view/6643a0821f32a966da7485d6 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 390414 W: 98015 L: 98173 D: 194226 Ptnml(0-2): 162; 43555; 107929; 43401; 160  closes https://github.com/official-stockfish/Stockfish/pull/5244  Bench: 1819318,True,2,2024-05-01
Vizvezdenec,Disservin,2024-05-15 14:15:15+00:00,Add extra bonus to pawn history for a move that caused a fail low  Basically the same idea as it is for continuation/main history; but it has some tweaks. 1) it has * 2 multiplier for bonus instead of full/half bonus - for    whatever reason this seems to work better; 2) attempts with this type of big bonuses scaled somewhat poorly (or    were unlucky at longer time controls); but after measuring the fact    that average value of pawn history in LMR after adding this bonuses    increased by substantial number (for multiplier 1;5 it increased by    smth like 400~ from 8192 cap) attempts were made to make default pawn    history negative to compensate it - and version with multiplier 2 and    initial fill value -900 passed.  Passed STC: https://tests.stockfishchess.org/tests/view/66424815f9f4e8fc783cba59 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 115008 W: 30001 L: 29564 D: 55443 Ptnml(0-2): 432; 13629; 28903; 14150; 390  Passed LTC: https://tests.stockfishchess.org/tests/view/6642f5437134c82f3f7a3ffa LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 56448 W: 14432 L: 14067 D: 27949 Ptnml(0-2): 36; 6268; 15254; 6627; 39  Bench: 1857237,True,2,2024-05-01
FauziAkram,Disservin,2024-05-15 14:13:43+00:00,Add extra bonus for high-depth condition  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 54208 W: 14058 L: 13717 D: 26433 Ptnml(0-2): 166; 6277; 13885; 6602; 174 https://tests.stockfishchess.org/tests/view/664136d8f9f4e8fc783c9b82  Passed LTC: LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 112548 W: 28492 L: 28018 D: 56038 Ptnml(0-2): 53; 12186; 31318; 12668; 49 https://tests.stockfishchess.org/tests/view/664143fef9f4e8fc783c9bf6  closes https://github.com/official-stockfish/Stockfish/pull/5242  Bench: 1725980,True,2,2024-05-01
xoto10,Disservin,2024-05-15 14:09:30+00:00,Use 5% less time on first move  Stockfish appears to take too much time on the first move of a game and then not enough on moves 2;3;4... Probably caused by most of the factors that increase time usually applying on the first move.  Attempts to give more time to the subsequent moves have not worked so far; but this change to simply reduce first move time by 5% worked.  STC 10+0.1 : LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 78496 W: 20516 L: 20135 D: 37845 Ptnml(0-2): 340; 8859; 20456; 9266; 327 https://tests.stockfishchess.org/tests/view/663d47bf507ebe1c0e9200ba  LTC 60+0.6 : LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 94872 W: 24179 L: 23751 D: 46942 Ptnml(0-2): 61; 9743; 27405; 10161; 66 https://tests.stockfishchess.org/tests/view/663e779cbb28828150dd9089  closes https://github.com/official-stockfish/Stockfish/pull/5235  Bench: 1876282,True,2,2024-05-01
mstembera,vondele,2024-05-13 05:32:32+00:00,Optimize update_accumulator_refresh_cache()  STC https://tests.stockfishchess.org/tests/view/664105df26ac5f9b286d30e6 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 178528 W: 46235 L: 45750 D: 86543 Ptnml(0-2): 505; 17792; 52142; 18363; 462  Combo of two yellow speedups https://tests.stockfishchess.org/tests/view/6640abf9d163897c63214f5c LLR: -2.93 (-2.94;2.94) <0.00;2.00> Total: 355744 W: 91714 L: 91470 D: 172560 Ptnml(0-2): 913; 36233; 103384; 36381; 961  https://tests.stockfishchess.org/tests/view/6628ce073fe04ce4cefc739c LLR: -2.93 (-2.94;2.94) <0.00;2.00> Total: 627040 W: 162001 L: 161339 D: 303700 Ptnml(0-2): 2268; 72379; 163532; 73105; 2236  closes https://github.com/official-stockfish/Stockfish/pull/5239  No functional change,True,0,2024-05-01
linrock,vondele,2024-05-13 05:30:18+00:00,Re-evaluate some small net positions for more accurate evals  Use main net evals when small net evals hint that higher eval accuracy may be worth the slower eval speeds. With Finny caches; re-evals with the main net are less expensive than before.  Original idea by mstembera who I've added as co-author to this PR.  Based on reEval tests by mstembera: https://tests.stockfishchess.org/tests/view/65e69187b6345c1b934866e5 https://tests.stockfishchess.org/tests/view/65e863aa0ec64f0526c3e991  A few variants of this patch also passed LTC: https://tests.stockfishchess.org/tests/view/663d2108507ebe1c0e91f407 https://tests.stockfishchess.org/tests/view/663e388c3a2f9702074bc152  Passed STC: https://tests.stockfishchess.org/tests/view/663dadbd1a61d6377f190e2c LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 92320 W: 23941 L: 23531 D: 44848 Ptnml(0-2): 430; 10993; 22931; 11349; 457  Passed LTC: https://tests.stockfishchess.org/tests/view/663ef48b2948bf9aa698690c LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 98934 W: 24907 L: 24457 D: 49570 Ptnml(0-2): 48; 10952; 27027; 11382; 58  closes https://github.com/official-stockfish/Stockfish/pull/5238  bench 1876282  Co-Authored-By: mstembera <5421953+mstembera@users.noreply.github.com>,True,0,2024-05-01
linrock,vondele,2024-05-13 05:25:22+00:00,Simplify npm constants when adjusting eval  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/663d0c4f507ebe1c0e91ec8d LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 162784 W: 41987 L: 41906 D: 78891 Ptnml(0-2): 520; 19338; 41591; 19427; 516  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/663d20fd507ebe1c0e91f405 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 457242 W: 115022 L: 115250 D: 226970 Ptnml(0-2): 271; 51566; 125179; 51330; 275  closes https://github.com/official-stockfish/Stockfish/pull/5237  Bench: 2238216,True,0,2024-05-01
Vizvezdenec,vondele,2024-05-13 05:22:11+00:00,Adjust standpat return value in qsearch  Instead of returning value itself return value between it and beta for non pv nodes - analogous to what we do after actual search there.  Passed STC: https://tests.stockfishchess.org/tests/view/663cb1b4c0b75d7f7b98188e LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 131552 W: 34131 L: 33673 D: 63748 Ptnml(0-2): 420; 15446; 33600; 15876; 434  Passed LTC: https://tests.stockfishchess.org/tests/view/663cda5dc0b75d7f7b981c6f LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 282798 W: 71658 L: 70833 D: 140307 Ptnml(0-2): 112; 31187; 77979; 32006; 115  closes https://github.com/official-stockfish/Stockfish/pull/5233  Bench: 1606672,True,0,2024-05-01
XInTheDark,vondele,2024-05-13 05:20:03+00:00,VVLTC search tune  Tuned at 111k games of VVLTC.  Passed VVLTC 1st sprt: https://tests.stockfishchess.org/tests/view/664090c6d163897c63214324 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 83046 W: 21071 L: 20747 D: 41228 Ptnml(0-2): 2; 7574; 26048; 7896; 3  Passed VVLTC 2nd sprt: https://tests.stockfishchess.org/tests/view/6640cb2abaa6260a5688dc17 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 68630 W: 17620 L: 17270 D: 33740 Ptnml(0-2): 4; 6242; 21471; 6596; 2  closes https://github.com/official-stockfish/Stockfish/pull/5240  Bench: 1752471,True,0,2024-05-01
xu-shawn,vondele,2024-05-13 05:16:59+00:00,simplify away quietCheckEvasions pruning  simplifies away the pruning of quiet evasion moves in quiescent search.  Passed STC: LLR: 2.98 (-2.94;2.94) <-1.75;0.25> Total: 343520 W: 88356 L: 88470 D: 166694 Ptnml(0-2): 1061; 40073; 89706; 39759; 1161 https://tests.stockfishchess.org/tests/view/663c7ddfc0b75d7f7b980f3b  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 168744 W: 42454 L: 42384 D: 83906 Ptnml(0-2): 75; 18678; 46782; 18776; 61 https://tests.stockfishchess.org/tests/view/663ce34fc0b75d7f7b981ed9  closes https://github.com/official-stockfish/Stockfish/pull/5231  bench 3681552,True,0,2024-05-01
xu-shawn,vondele,2024-05-13 05:15:25+00:00,Fix usage of abs vs std::abs  closes https://github.com/official-stockfish/Stockfish/pull/5229  no functional change,True,0,2024-05-01
xu-shawn,vondele,2024-05-09 07:02:57+00:00,Simplify Away Negative Extension  This patch simplifies away the negative extension applied when the value returned by the transposition table is assumed to fail low over the value of reduced search.  Passed STC: LLR: 2.99 (-2.94;2.94) <-1.75;0.25> Total: 248736 W: 64293 L: 64302 D: 120141 Ptnml(0-2): 925; 29833; 62831; 29884; 895 https://tests.stockfishchess.org/tests/view/663bee3bca93dad645f7f64a  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 254970 W: 64289 L: 64308 D: 126373 Ptnml(0-2): 110; 28428; 70422; 28421; 104 https://tests.stockfishchess.org/tests/view/663c11f0c0b75d7f7b97d4bb  closes https://github.com/official-stockfish/Stockfish/pull/5226  Bench: 2353057,True,3,2024-05-01
FauziAkram,vondele,2024-05-09 07:00:32+00:00,Simplify depth formula based on score improvement  Simplify depth formula based on score improvement. This idea was first tried by cj5716  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 347104 W: 89683 L: 89804 D: 167617 Ptnml(0-2): 1357; 38824; 93307; 38711; 1353 https://tests.stockfishchess.org/tests/view/66378edf9819650825aa75d0  Passed LTC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 63000 W: 15851 L: 15694 D: 31455 Ptnml(0-2): 22; 5396; 20499; 5569; 14 https://tests.stockfishchess.org/tests/view/663c04e5c0b75d7f7b97d461  closes https://github.com/official-stockfish/Stockfish/pull/5225  Bench: 2691699  Co-Authored-By: cj5716 <125858804+cj5716@users.noreply.github.com>,True,3,2024-05-01
Vizvezdenec,vondele,2024-05-09 06:56:36+00:00,Remove conthist 3 from moves loop pruning  Followup to previous gainer that made it twice less impactful there - this patch removes it entirely as a simplification.  Passed STC: https://tests.stockfishchess.org/tests/view/6637aa7e9819650825aa93e0 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 26208 W: 6930 L: 6694 D: 12584 Ptnml(0-2): 113; 2997; 6652; 3225; 117  Passed LTC: https://tests.stockfishchess.org/tests/view/66383cba493aaaf4b7ea90c2 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 67866 W: 17294 L: 17118 D: 33454 Ptnml(0-2): 46; 7627; 18415; 7795; 50  closes https://github.com/official-stockfish/Stockfish/pull/5221  Bench: 2691699,True,3,2024-05-01
Vizvezdenec,vondele,2024-05-09 06:52:06+00:00,Simplify away conthist 3 from statscore  Following previous elo gainer that gained by making conthist 3 less important in pruning this patch simplifies away this history from calculation of statscore.  Passed STC: https://tests.stockfishchess.org/tests/view/6637aa7e9819650825aa93e0 LLR: 3.00 (-2.94;2.94) <-1.75;0.25> Total: 35392 W: 9352 L: 9120 D: 16920 Ptnml(0-2): 141; 4145; 8888; 4385; 137  Passed LTC: https://tests.stockfishchess.org/tests/view/66383cd8493aaaf4b7ea90c5 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 33948 W: 8714 L: 8503 D: 16731 Ptnml(0-2): 39; 3701; 9270; 3938; 26  closes https://github.com/official-stockfish/Stockfish/pull/5220  Bench: 2508571,True,3,2024-05-01
FauziAkram,vondele,2024-05-09 06:48:29+00:00,simplify moveCountPruning  no (significant) speedup upon renewed testing  Passed stc: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 88992 W: 22779 L: 22633 D: 43580 Ptnml(0-2): 137; 8706; 26681; 8818; 154 https://tests.stockfishchess.org/tests/view/6636c4844b68b70d85800dae  closes https://github.com/official-stockfish/Stockfish/pull/5213  No functional change.,True,3,2024-05-01
MinetaS,vondele,2024-05-09 06:42:56+00:00,Fix nodestime  1. The current time management system utilizes limits.inc and limits.time; which can represent either milliseconds or node count; depending on whether the nodestime option is active. There have been several modifications which brought Elo gain for typical uses (i.e. real-time matches); however some of these changes overlooked such distinction. This patch adjusts constants and multiplication/division to more accurately simulate real TC conditions when nodestime is used.  2. The advance_nodes_time function has a bug that can extend the time limit when availableNodes reaches exact zero. This patch fixes the bug by initializing the variable to -1 and make sure it does not go below zero.  3. elapsed_time function is newly introduced to print PV in the UCI output based on real time. This makes PV output more consistent with the behavior of trivial use cases.  closes https://github.com/official-stockfish/Stockfish/pull/5186  No functional changes,True,3,2024-05-01
rn5f107s2,vondele,2024-05-09 06:38:04+00:00,IIR on cutnodes if there is a ttMove but the ttBound is upper  If there is an upper bound stored in the transposition table; but we still have a ttMove; the upperbound indicates that the last time the ttMove was tried; it failed low. This fail low indicates that the ttMove may not be good; so this patch introduces a depth reduction of one for cutnodes with such ttMoves.  Passed STC: https://tests.stockfishchess.org/tests/view/663be4d1ca93dad645f7f45f LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 139424 W: 35900 L: 35433 D: 68091 Ptnml(0-2): 425; 16357; 35743; 16700; 487  Passed LTC: https://tests.stockfishchess.org/tests/view/663bec95ca93dad645f7f5c8 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 129690 W: 32902 L: 32390 D: 64398 Ptnml(0-2): 63; 14304; 35610; 14794; 74  closes https://github.com/official-stockfish/Stockfish/pull/5227  bench 2257437,True,3,2024-05-01
Vizvezdenec,vondele,2024-05-09 06:33:07+00:00,Refactor quiet moves pruning in qsearch  Make it formula more in line with what we use in search - current formula is more or less the one we used years ago for search but since then it was remade; this patch remakes qsearch formula to almost exactly the same as we use in search - with sum of conthist 0; 1 and pawn structure history.  Passed STC: https://tests.stockfishchess.org/tests/view/6639c8421343f0cb16716206 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 84992 W: 22414 L: 22019 D: 40559 Ptnml(0-2): 358; 9992; 21440; 10309; 397  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 119136 W: 30407 L: 29916 D: 58813 Ptnml(0-2): 46; 13192; 32622; 13641; 67  closes https://github.com/official-stockfish/Stockfish/pull/5224  Bench: 2138659,True,3,2024-05-01
FauziAkram,vondele,2024-05-09 06:29:33+00:00,Depth dependent statscore based reductions  Test a modification of Fawzi's PR #5223; against that PR.  parameters locally tuned with nevergrad4sf.  passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 1047424 W: 271478 L: 269649 D: 506297 Ptnml(0-2): 3851; 124543; 265290; 125982; 4046 https://tests.stockfishchess.org/tests/view/663b0889ca93dad645f7c58c  passed LTC: LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 796236 W: 201712 L: 199825 D: 394699 Ptnml(0-2): 361; 88381; 218778; 90206; 392 https://tests.stockfishchess.org/tests/view/663be6adca93dad645f7f509  https://github.com/official-stockfish/Stockfish/pull/5228  Bench: 3346224,True,3,2024-05-01
FauziAkram,vondele,2024-05-09 06:26:35+00:00,Tweak reduction formula based on depth  The idea came to me by checking for trends from the megafauzi tunes; since the values of the divisor for this specific formula were as follows: stc: 15990 mtc: 16117 ltc: 14805 vltc: 12719 new vltc passed by Muzhen: 12076  This shows a clear trend related to time control; the higher it is; the lower the optimum value for the divisor seems to be. So I tried a simple formula; using educated guesses based on some calculations; tests show it works pretty fine; and it can still be further tuned at VLTC in the future to scale even better.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 431360 W: 110791 L: 109898 D: 210671 Ptnml(0-2): 1182; 50846; 110698; 51805; 1149 https://tests.stockfishchess.org/tests/view/663770409819650825aa269f  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 114114 W: 29109 L: 28625 D: 56380 Ptnml(0-2): 105; 12628; 31101; 13124; 99 https://tests.stockfishchess.org/tests/view/66378c099819650825aa73f6  https://github.com/official-stockfish/Stockfish/pull/5223  bench: 2273551,True,3,2024-05-01
XInTheDark,Disservin,2024-05-05 13:11:53+00:00,VVLTC search tune  This patch is the result of two tuning stages: 1. ~32k games at 60+0.6 th8:    https://tests.stockfishchess.org/tests/view/662d9dea6115ff6764c7f817 2. ~193k games at 80+0.8 th6; based on PR #5211:    https://tests.stockfishchess.org/tests/view/663587e273559a8aa857ca00.    Based on extensive VVLTC tuning and testing both before and after    #5211; it is observed that introduction of new extensions positively    affected the search tune results.  Passed VVLTC 70+0.7 th7 1st sprt: https://tests.stockfishchess.org/tests/view/6636c6f04b68b70d85801409 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 18566 W: 4864 L: 4620 D: 9082 Ptnml(0-2): 0; 1608; 5827; 1844; 4  Passed VVLTC 70+0.7 th7 2nd sprt: https://tests.stockfishchess.org/tests/view/6636d4b84b68b70d85802ab7 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 43142 W: 11141 L: 10838 D: 21163 Ptnml(0-2): 4; 3915; 13427; 4224; 1  Passed VVLTC 70+0.7 3rd sprt: https://tests.stockfishchess.org/tests/view/66376b4f9819650825aa230b LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 40322 W: 10374 L: 10076 D: 19872 Ptnml(0-2): 1; 3660; 12544; 3952; 4  The first two sprts were run against passed #5211. The third sprt was run against latest master.  closes https://github.com/official-stockfish/Stockfish/pull/5216  Bench: 2180675,True,6,2024-05-01
cj5716,Disservin,2024-05-05 13:11:37+00:00,Simplify accumulator refreshes  Passed Non-Regression STC: https://tests.stockfishchess.org/tests/view/6631f5d5d01fb9ac9bcdc7d0 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 57472 W: 14979 L: 14784 D: 27709 Ptnml(0-2): 185; 6486; 15192; 6695; 178  closes https://github.com/official-stockfish/Stockfish/pull/5207  No functional change,True,6,2024-05-01
Vizvezdenec,vondele,2024-05-05 11:06:22+00:00,Adjust history usage in moves loop pruning  After experiments with conthist 5 addition failed really bad divions by 2 passed as a gainer.  Passed STC: https://tests.stockfishchess.org/tests/view/6636d7114b68b70d858035ce LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 35936 W: 9287 L: 8976 D: 17673 Ptnml(0-2): 81; 4129; 9234; 4446; 78  Passed LTC: https://tests.stockfishchess.org/tests/view/6636ddb64b68b70d858040a8 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 82428 W: 21035 L: 20622 D: 40771 Ptnml(0-2): 29; 8985; 22775; 9394; 31  closes https://github.com/official-stockfish/Stockfish/pull/5217  Bench: 2309253,True,6,2024-05-01
cj5716,vondele,2024-05-05 11:04:37+00:00,Some history fixes and tidy-up  This adds the functions `update_refutations` and `update_quiet_histories` to better distinguish the two. `update_quiet_stats` now just calls both of these functions.  The functional side of this patch is two-fold: 1. Stop refutations being updated when we carry out multicut 2. Update pawn history every time we update other quiet histories  Yellow STC: LLR: -2.95 (-2.94;2.94) <0.00;2.00> Total: 238976 W: 61506 L: 61415 D: 116055 Ptnml(0-2): 846; 28628; 60456; 28705; 853 https://tests.stockfishchess.org/tests/view/66321b5ed01fb9ac9bcdca83  However; it passed in <-1.75; 0.25> bounds: $ python3 sprt.py --wins 61506 --losses 61415 --draws 116055 --elo0 -1.75 --elo1 0.25 ELO: 0.132 +- 0.998 [-0.865; 1.13] LLR: 4.15 [-1.75; 0.25] (-2.94; 2.94) H1 Accepted  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 399126 W: 100730 L: 100896 D: 197500 Ptnml(0-2): 116; 44328; 110843; 44158; 118 https://tests.stockfishchess.org/tests/view/66357b0473559a8aa857ba6f  closes #5215  Bench 2370967,True,6,2024-05-01
FauziAkram,vondele,2024-05-05 11:02:42+00:00,Simplify shuffling and optimism divisors to constants  Shuffling divisor and Optimism divisors passed STC & LTC separately: shuf STC: https://tests.stockfishchess.org/tests/view/66356316b4e9bdbc7228b995 shuf LTC: https://tests.stockfishchess.org/tests/view/6635815a73559a8aa857c1dc opt STC: https://tests.stockfishchess.org/tests/view/66356326b4e9bdbc7228b9a0 opt LTC: https://tests.stockfishchess.org/tests/view/663615c673559a8aa8589f8a  And then passed LTC together: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 178278 W: 45039 L: 44979 D: 88260 Ptnml(0-2): 43; 19776; 49460; 19798; 62 https://tests.stockfishchess.org/tests/view/66363f19cdb7cf5da64e22a3  closes https://github.com/official-stockfish/Stockfish/pull/5212  Bench: 2198243,True,6,2024-05-01
Viren6,vondele,2024-05-05 10:53:58+00:00,Introduce Quadruple Extensions  This patch introduces quadruple extensions; with the new condition of not ttPv. It also generalises all margins; so that extensions can still occur if conditions are only partially fulfilled; but with a stricter margin.  Failed STC: LLR: -2.94 (-2.94;2.94) <0.00;2.00> Total: 16096 W: 3984 L: 4228 D: 7884 Ptnml(0-2): 72; 2067; 4002; 1847; 60 https://tests.stockfishchess.org/tests/view/66316422d01fb9ac9bcdbdcd  Passed VVLTC 1: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 96660 W: 24550 L: 24210 D: 47900 Ptnml(0-2): 5; 8776; 30426; 9120; 3 https://tests.stockfishchess.org/tests/view/66361f2c74fa3f41ef2ee091  Passed VVLTC 2: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 80546 W: 20495 L: 20120 D: 39931 Ptnml(0-2): 6; 7477; 24929; 7858; 3 https://tests.stockfishchess.org/tests/view/66350cf739ba8e443112b3fa  closes https://github.com/official-stockfish/Stockfish/pull/5211  bench 2233743,True,6,2024-05-01
Vizvezdenec,vondele,2024-05-05 10:42:30+00:00,Add extra bonuses to some moves that forced a fail low  The previous patch on this idea was giving bonuses to this moves if best value of search is far below current static evaluation. This patch does similar thing but adds extra bonus when best value of search is far below static evaluation before previous move.  Passed STC: https://tests.stockfishchess.org/tests/view/66355fc819566d64b481d6a4 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 454144 W: 116575 L: 115656 D: 221913 Ptnml(0-2): 1060; 53410; 117215; 54325; 1062  Passed LTC: https://tests.stockfishchess.org/tests/view/6635c61a73559a8aa858012d LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 136578 W: 34858 L: 34335 D: 67385  closes https://github.com/official-stockfish/Stockfish/pull/5209  Bench: 1614825,True,6,2024-05-01
cj5716,vondele,2024-05-05 10:36:20+00:00,Remove PSQT-only mode  Passed STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 94208 W: 24270 L: 24112 D: 45826 Ptnml(0-2): 286; 11186; 24009; 11330; 293 https://tests.stockfishchess.org/tests/view/6635ddd773559a8aa8582826  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 114960 W: 29107 L: 28982 D: 56871 Ptnml(0-2): 37; 12683; 31924; 12790; 46 https://tests.stockfishchess.org/tests/view/663604a973559a8aa85881ed  closes #5214  Bench 1653939,True,6,2024-05-01
Disservin,vondele,2024-05-05 10:30:28+00:00,Clear Workers after changing the network  ensures internal state (e.g. accumulator cache) is consistent with network  closes https://github.com/official-stockfish/Stockfish/pull/5204  No functional change,True,6,2024-05-01
mstembera,Disservin,2024-05-01 12:17:32+00:00,Accumulator cache bugfix and cleanup  STC: https://tests.stockfishchess.org/tests/view/663068913a05f1bf7a511dc2 LLR: 2.98 (-2.94;2.94) <-1.75;0.25> Total: 70304 W: 18211 L: 18026 D: 34067 Ptnml(0-2): 232; 7966; 18582; 8129; 243  1) Fixes a bug introduced in    https://github.com/official-stockfish/Stockfish/pull/5194. Only one    psqtOnly flag was used for two perspectives which was causing    wrong entries to be cleared and marked. 2) The finny caches should be cleared like histories and not at the    start of every search.  closes https://github.com/official-stockfish/Stockfish/pull/5203  No functional change,True,2,2024-05-01
cj5716,Disservin,2024-05-01 12:10:57+00:00,Optimise NNUE Accumulator updates  Passed STC: https://tests.stockfishchess.org/tests/view/662e3c6a5e9274400985a741 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 86176 W: 22284 L: 21905 D: 41987 Ptnml(0-2): 254; 9572; 23051; 9963; 248  closes https://github.com/official-stockfish/Stockfish/pull/5202  No functional change,True,2,2024-05-01
Ciekce,Disservin,2024-05-01 12:10:57+00:00,Avoid unnecessary creation of accumulator cache  Saves a (currently) 800 KB allocation and deallocation when running `eval`; not particularly significant and zero impact on play but not necessary either.  closes https://github.com/official-stockfish/Stockfish/pull/5201  No functional change,True,2,2024-05-01
dubslow,Disservin,2024-05-01 12:10:50+00:00,Use capture history to better judge which sacrifices to explore  This idea has been bouncing around a while. @Vizvezdenec tried it a couple years ago in Stockfish without results; but its recent arrival in Ethereal inspired him and thence me to try it afresh in Stockfish.  (Also factor out the now-common code with futpruning for captures.)  STC: https://tests.stockfishchess.org/tests/view/662355bc3fe04ce4cefc18ac LLR: 2.92 (-2.94;2.94) <0.00;2.00> Total: 45760 W: 11970 L: 11640 D: 22150 Ptnml(0-2): 124; 5371; 11625; 5571; 189  LTC: https://tests.stockfishchess.org/tests/view/662dda396115ff6764c817c9 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 243828 W: 62042 L: 61287 D: 120499 Ptnml(0-2): 211; 27202; 66329; 27965; 207  closes https://github.com/official-stockfish/Stockfish/pull/5200  Bench: 1480008,True,2,2024-05-01
locutus2,Disservin,2024-04-28 19:46:45+00:00,More reduction at cut nodes which are not a former PV node  But the tt move and first killer are excluded.  This idea is based on following LMR condition tuning https://tests.stockfishchess.org/tests/view/66228bed3fe04ce4cefc0c71 by using only the two largest terms P[0] and P[1].  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 173248 W: 45091 L: 44565 D: 83592 Ptnml(0-2): 693; 20534; 43673; 21002; 722 https://tests.stockfishchess.org/tests/view/6629603b3fe04ce4cefc7d37  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 722394 W: 183231 L: 181487 D: 357676 Ptnml(0-2): 462; 80650; 197252; 82348; 485 https://tests.stockfishchess.org/tests/view/662cbe45d46f72253dcff7bf  closes https://github.com/official-stockfish/Stockfish/pull/5199  Bench: 1619613,True,6,2024-04-01
locutus2,Disservin,2024-04-28 19:43:46+00:00,Simplify non-pawn material divisor to a constant  Passed STC: https://tests.stockfishchess.org/tests/view/662942603fe04ce4cefc7aba LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 272832 W: 70456 L: 70497 D: 131879 Ptnml(0-2): 1020; 32619; 69154; 32628; 995  Passed LTC: https://tests.stockfishchess.org/tests/view/662dfe3b6115ff6764c829eb LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 100254 W: 25446 L: 25303 D: 49505 Ptnml(0-2): 121; 11292; 27166; 11419; 129  closes https://github.com/official-stockfish/Stockfish/pull/5198  Bench: 1544645,True,6,2024-04-01
cj5716,Disservin,2024-04-28 19:36:34+00:00,Penalise the TT move in multicut  Passed STC: LLR: 2.99 (-2.94;2.94) <0.00;2.00> Total: 185504 W: 48079 L: 47533 D: 89892 Ptnml(0-2): 716; 21866; 46988; 22520; 662 https://tests.stockfishchess.org/tests/view/662d9e1d6115ff6764c7f83d  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 75612 W: 19351 L: 18948 D: 37313 Ptnml(0-2): 46; 8363; 20592; 8752; 53 https://tests.stockfishchess.org/tests/view/662dc9dc6115ff6764c80fea  closes https://github.com/official-stockfish/Stockfish/pull/5195  Bench: 1415435,True,6,2024-04-01
mstembera,Disservin,2024-04-28 19:35:48+00:00,Combine remove and add in update_accumulator_refresh_cache()  Combine remove and add in update_accumulator_refresh_cache(). Move remove before add to match other parts of the code.  STC: https://tests.stockfishchess.org/tests/view/662d96dc6115ff6764c7f4ca LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 364032 W: 94421 L: 93624 D: 175987 Ptnml(0-2): 1261; 41983; 94811; 42620; 1341  closes https://github.com/official-stockfish/Stockfish/pull/5194  Bench: 1836777,True,6,2024-04-01
mstembera,Disservin,2024-04-28 19:30:19+00:00,Cache small net w/ psqtOnly support  Caching the small net in the same way as the big net allows them to share the same code path and completely removes update_accumulator_refresh().  STC: https://tests.stockfishchess.org/tests/view/662bfb5ed46f72253dcfed85 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 151712 W: 39252 L: 39158 D: 73302 Ptnml(0-2): 565; 17474; 39683; 17570; 564  closes https://github.com/official-stockfish/Stockfish/pull/5194  Bench: 1836777,True,6,2024-04-01
vondele,Disservin,2024-04-28 19:27:28+00:00,Output some basic info about the used networks  Adds size in memory as well as layer sizes as in  info string NNUE evaluation using nn-ae6a388e4a1a.nnue (132MiB; (22528; 3072; 15; 32; 1)) info string NNUE evaluation using nn-baff1ede1f90.nnue (6MiB; (22528; 128; 15; 32; 1))  For example; the size in MiB is useful to keep the fishtest memory sizes up-to-date; the L1-L3 sizes give a useful hint about the architecture used.  closes https://github.com/official-stockfish/Stockfish/pull/5193  No functional change,True,6,2024-04-01
Disservin,Disservin,2024-04-28 19:26:36+00:00,Fix missing initialization of AccumulatorCaches in Eval::trace  Add a constructor to `AccumulatorCaches` instead of just calling `clear(networks)` to prevent similar issues from appearing in the future.  fixes https://github.com/official-stockfish/Stockfish/issues/5190  closes https://github.com/official-stockfish/Stockfish/pull/5191  No functional change,True,6,2024-04-01
xoto10,Disservin,2024-04-28 19:26:25+00:00,Use less time on recaptures  Credit for the idea goes to peregrine on discord.  Passed STC 10+0.1: https://tests.stockfishchess.org/tests/view/662652623fe04ce4cefc48cf LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 75712 W: 19793 L: 19423 D: 36496 Ptnml(0-2): 258; 8487; 20023; 8803; 285  Passed LTC 60+0.6: https://tests.stockfishchess.org/tests/view/6627495e3fe04ce4cefc59b6 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 49788 W: 12743 L: 12404 D: 24641 Ptnml(0-2): 29; 5141; 14215; 5480; 29  The code was updated slightly and tested for non-regression against the original code at STC:  LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 41952 W: 10912 L: 10698 D: 20342 Ptnml(0-2): 133; 4825; 10835; 5061; 122 https://tests.stockfishchess.org/tests/view/662d84f56115ff6764c7e438  closes https://github.com/official-stockfish/Stockfish/pull/5189  Bench: 1836777,True,6,2024-04-01
gab8192,Disservin,2024-04-24 16:38:20+00:00,"Implement accumulator refresh table  For each thread persist an accumulator cache for the network; where each cache contains multiple entries for each of the possible king squares. When the accumulator needs to be refreshed; the cached entry is used to more efficiently update the accumulator; instead of rebuilding it from scratch. This idea; was first described by Luecx (author of Koivisto) and is commonly referred to as ""Finny Tables"".  When the accumulator needs to be refreshed; instead of filling it with biases and adding every piece from scratch; we...  1. Take the `AccumulatorRefreshEntry` associated with the new king bucket 2. Calculate the features to activate and deactivate (from differences    between bitboards in the entry and bitboards of the actual position) 3. Apply the updates on the refresh entry 4. Copy the content of the refresh entry accumulator to the accumulator    we were refreshing 5. Copy the bitboards from the position to the refresh entry; to match    the newly updated accumulator  Results at STC: https://tests.stockfishchess.org/tests/view/662301573fe04ce4cefc1386 (first version) https://tests.stockfishchess.org/tests/view/6627fa063fe04ce4cefc6560 (final)  Non-Regression between first and final: https://tests.stockfishchess.org/tests/view/662801e33fe04ce4cefc660a  STC SMP: https://tests.stockfishchess.org/tests/view/662808133fe04ce4cefc667c  closes https://github.com/official-stockfish/Stockfish/pull/5183  No functional change",True,2,2024-04-01
FauziAkram,Disservin,2024-04-24 16:24:01+00:00,Tune Search Parameters  Parameters Tune; adding also another tunable parameter (npmDiv) to be variable for different nets (bignet; smallnet; psqtOnly smallnet). P.s: The changed values are only the parameters where there is agreement among the different time controls; so in other words; the tunings are telling us that changing these specific values to this specific direction is good in all time controls; so there shouldn't be a high risk of regressing at longer time controls.  Passed STC: LLR: 2.97 (-2.94;2.94) <0.00;2.00> Total: 39552 W: 10329 L: 9999 D: 19224 Ptnml(0-2): 156; 4592; 9989; 4844; 195 https://tests.stockfishchess.org/tests/view/661be9a0bd68065432a088c0  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 56394 W: 14439 L: 14078 D: 27877 Ptnml(0-2): 30; 6152; 15480; 6497; 38 https://tests.stockfishchess.org/tests/view/661c746296961e72eb565406  closes https://github.com/official-stockfish/Stockfish/pull/5187  Bench: 1836777,True,2,2024-04-01
Disservin,Disservin,2024-04-24 16:20:55+00:00,Restore NPS output for Perft  Previously it was possible to also get the node counter after running a bench with perft; i.e. `./stockfish bench 1 1 5 current perft`; caused by a small regression from the uci refactoring.  ``` Nodes searched: 4865609  =========================== Total time (ms) : 18 Nodes searched  : 4865609 Nodes/second    : 270311611 ````  closes https://github.com/official-stockfish/Stockfish/pull/5188  No functional change,True,2,2024-04-01
cj5716,vondele,2024-04-21 12:50:04+00:00,"Tweak TT aging and replacement strategies  We change the definition of ""age"" from ""age of this position"" to ""age of this TT entry"". In this way; despite being on the same position; when we save into TT; we always prefer the new entry as compared to the old one.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 152256 W: 39597 L: 39110 D: 73549 Ptnml(0-2): 556; 17562; 39398; 18063; 549 https://tests.stockfishchess.org/tests/view/6620faee3fe04ce4cefbf215  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 51564 W: 13242 L: 12895 D: 25427 Ptnml(0-2): 24; 5464; 14463; 5803; 28 https://tests.stockfishchess.org/tests/view/66231ab53fe04ce4cefc153e  closes #5184  Bench 1479416",True,6,2024-04-01
Disservin,vondele,2024-04-21 12:49:11+00:00,Move ALSR change to CI Workflow file  It makes more sense to not (potentially) change the developers alsr entropy setting to make the test run through. This should be an active choice even if the test then might fail locally for them.  closes https://github.com/official-stockfish/Stockfish/pull/5182  No functional change,True,6,2024-04-01
vondele,vondele,2024-04-21 12:46:01+00:00,Improve CI  the recent refactoring has shown some limitations of our testing; hence we add a couple of more tests including: * expected mate score * expected mated score * expected in TB win score * expected in TB loss score * expected info line output * expected info line output (wdl)  closes https://github.com/official-stockfish/Stockfish/pull/5181  No functional change,True,6,2024-04-01
robertnurnberg,vondele,2024-04-21 12:40:02+00:00,update the WDL model  The patch only changes the displayed cp and wdl values.  closes https://github.com/official-stockfish/Stockfish/pull/5178  No functional change,True,6,2024-04-01
gahtan-syarif,vondele,2024-04-21 12:38:16+00:00,fix clang compiler warning for avx512 build  Initialize variable in constexpr function to get rid of clang compiler warning for avx512 build.  closes https://github.com/official-stockfish/Stockfish/pull/5176  Non-functional change,True,6,2024-04-01
Vizvezdenec,vondele,2024-04-21 12:35:54+00:00,Trivial cleanup  Make naming and declaration of futilityValue in search consistent between different places.  closes https://github.com/official-stockfish/Stockfish/pull/5165  No functional change.,True,6,2024-04-01
Disservin,vondele,2024-04-21 12:35:01+00:00,Refactor elapsed time checks in search  Small improvement of the elapsed time usage in search; makes the code easier to read overall. Also Search::Worker::iterative_deepening() now only checks the elapsed time once; instead of 3 times in a row.  Non Regression STC: https://tests.stockfishchess.org/tests/view/6617005d5a4693796d965c3c LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 61024 W: 16002 L: 15806 D: 29216 Ptnml(0-2): 243; 6874; 16102; 7030; 263  closes https://github.com/official-stockfish/Stockfish/pull/5163  No functional change,True,6,2024-04-01
Disservin,vondele,2024-04-21 12:32:26+00:00,Update outdated comments  closes https://github.com/official-stockfish/Stockfish/pull/5158  No functional change,True,6,2024-04-01
Disservin,vondele,2024-04-13 20:05:19+00:00,Fix wrong sign for 200 TB score  Fix another case of 9032c6cbe74ccf7e8963755501e7e6cc473ae471  *    TB values can have a distance of 0; mainly when we are in a tb position but haven't found mate. *    Add a missing whitespace to UCIEngine::on_update_no_moves()  Closes https://github.com/official-stockfish/Stockfish/pull/5172  No functional change,True,5,2024-04-01
Disservin,vondele,2024-04-12 17:37:39+00:00,Remove duplicated Position object in UCIEngine  Also fixes searchmoves.  Drop the need of a Position object in uci.cpp.  A side note; it is still required for the static functions; but these should be moved to a different namespace/class later on; since sf kinda relies on them.  closes https://github.com/official-stockfish/Stockfish/pull/5169  No functional change,True,4,2024-04-01
peregrineshahin,vondele,2024-04-12 16:11:54+00:00,"Fix some more UCI output  further fall-out of the refactoring; fixes:  * the position object in UCI is not never getting updated if position token is used * duplicate string of "" wdl ""  See also:  https://discord.com/channels/435943710472011776/1032922913499783169/1228227522945351690 https://discord.com/channels/435943710472011776/813919248455827515/1228288106449338398  closes https://github.com/official-stockfish/Stockfish/pull/5168  No functional change  Co-Authored-By: disservin <45608332+disservin@users.noreply.github.com>",True,4,2024-04-01
robertnurnberg,vondele,2024-04-12 07:30:34+00:00,Fix wrong mate sign  introduced yesterday by the UCI refactoring 9032c6cbe  fixes #5166 closes https://github.com/official-stockfish/Stockfish/pull/5167  No functional change,True,4,2024-04-01
FauziAkram,vondele,2024-04-11 20:47:40+00:00,Simplify the depth-dependent part of the best value adjustment formula in main search  Passed STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 139648 W: 36171 L: 36061 D: 67416 Ptnml(0-2): 545; 16685; 35282; 16739; 573 https://tests.stockfishchess.org/tests/view/660d953b8ff4a059828d625d  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 222894 W: 56519 L: 56505 D: 109870 Ptnml(0-2): 112; 25145; 60971; 25055; 164 https://tests.stockfishchess.org/tests/view/660fd4afbfeb43334bf7d558  closes https://github.com/official-stockfish/Stockfish/pull/5164  bench: 1479416,True,3,2024-04-01
gab8192,vondele,2024-04-11 20:43:00+00:00,Remove an useless assignment  The assignment (ss + 1)->excludedMove = Move::none() can be simplified away because when that line is reached; (ss + 1)->excludedMove is always already none. The only moment stack[x]->excludedMove is modified; is during singular search; but it is reset to none right after the singular search is finished.  closes https://github.com/official-stockfish/Stockfish/pull/5153  No functional change,True,3,2024-04-01
Disservin,vondele,2024-04-11 20:41:35+00:00,Remove COMPILER from Makefile  The same functionality is available by using COMPCXX and having another variable which does the same is just confusing. There was only one mention on Stockfish Wiki about this which has been changed to COMPCXX.  closes https://github.com/official-stockfish/Stockfish/pull/5154  No functional change,True,3,2024-04-01
mstembera,vondele,2024-04-11 20:38:38+00:00,Avoid permuting inputs during transform()  Avoid permuting inputs during transform() and instead do it once at load time. Affects AVX2 and newer Intel architectures only.  https://tests.stockfishchess.org/tests/view/661306613eb00c8ccc0033c7 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 108480 W: 28319 L: 27898 D: 52263 Ptnml(0-2): 436; 12259; 28438; 12662; 445  speedups measured such as e.g.  ``` Result of 100 runs ================== base (./stockfish.master       ) =    1241128  +/- 3757 test (./stockfish.patch        ) =    1247713  +/- 3689 diff                             =      +6585  +/- 2583  speedup        = +0.0053 P(speedup > 0) =  1.0000 ```  closes https://github.com/official-stockfish/Stockfish/pull/5160  No functional change,True,3,2024-04-01
XInTheDark,vondele,2024-04-11 20:23:52+00:00,VVLTC search tune  Parameters were tuned in 3 stages:  * Using an earlier L1-3072 net; and with triple extension margin manually set to 0: https://tests.stockfishchess.org/tests/view/65ffdf5d0ec64f0526c544f2 (~30k games) * Continue tuning; but with the previous master net (L1-2560). https://tests.stockfishchess.org/tests/view/660663f00ec64f0526c59c41 (~27k games) * Starting with the parameters from step 2; use the current L1-3072 net; and allow the triple extension margin to be tuned starting from 0: https://tests.stockfishchess.org/tests/view/660c16b8216a13d9498e7536 (40k games)  Passed VVLTC 1st sprt: https://tests.stockfishchess.org/tests/view/66115eacbfeb43334bf7eddd LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 27138 W: 7045 L: 6789 D: 13304 Ptnml(0-2): 1; 2421; 8471; 2673; 3  Passed VVLTC 2nd sprt: https://tests.stockfishchess.org/tests/view/661483623eb00c8ccc0049c1 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 26242 W: 6807 L: 6535 D: 12900 Ptnml(0-2): 0; 2353; 8143; 2625; 0  STC Elo estimate: https://tests.stockfishchess.org/tests/view/66175ca55a4693796d96608c Elo: -10.53 � 2.4 (95%) LOS: 0.0% Total: 21584 W: 5294 L: 5948 D: 10342 Ptnml(0-2): 102; 2937; 5363; 2293; 97 nElo: -19.99 � 4.7 (95%) PairsRatio: 0.79  closes https://github.com/official-stockfish/Stockfish/pull/5162  Bench: 1381387,True,3,2024-04-01
Disservin,Disservin,2024-04-05 19:03:58+00:00,Transform search output to engine callbacks  Part 2 of the Split UCI into UCIEngine and Engine refactor. This creates function callbacks for search to use when an update should occur. The benching in uci.cpp for example does this to extract the total nodes searched.  No functional change,False,4,2024-04-01
Disservin,Disservin,2024-04-03 22:15:17+00:00,"Split UCI into UCIEngine and Engine  This is another refactor which aims to decouple uci from stockfish. A new engine class manages all engine related logic and uci is a ""small"" wrapper around it.  In the future we should also try to remove the need for the Position object in the uci and replace the options with an actual options struct instead of using a map. Also convert the std::string's in the Info structs a string_view.  closes #5147  No functional change",True,2,2024-04-01
Viren6,vondele,2024-04-02 06:49:48+00:00,Update NNUE architecture to SFNNv9 and net nn-ae6a388e4a1a.nnue  Part 1: PyTorch Training; linrock  Trained with a 10-stage sequence from scratch; starting in May 2023: https://github.com/linrock/nnue-tools/blob/master/exp-sequences/3072-10stage-SFNNv9.yml  While the training methods were similar to the L1-2560 training sequence; the last two stages introduced min-v2 binpacks; where bestmove capture and in-check position scores were not zeroed during minimization; for compatibility with skipping SEE >= 0 positions and future research.  Training data can be found at: https://robotmoon.com/nnue-training-data  This net was tested at epoch 679 of the 10th training stage: https://tests.stockfishchess.org/tests/view/65f32e460ec64f0526c48dbc  Part 2: SPSA Training; Viren6  The net was then SPSA tuned. This consisted of the output weights (32 * 8) and biases (8) as well as the L3 biases (32 * 8) and L2 biases (16 * 8); totalling 648 params in total.  The SPSA tune can be found here: https://tests.stockfishchess.org/tests/view/65fc33ba0ec64f0526c512e3  With the help of Disservin ; the initial weights were extracted with: https://github.com/Viren6/Stockfish/tree/new228  The net was saved with the tuned weights using: https://github.com/Viren6/Stockfish/tree/new241  Earlier nets of the SPSA failed STC compared to the base 3072 net of part 1: https://tests.stockfishchess.org/tests/view/65ff356e0ec64f0526c53c98 Therefore it is suspected that the SPSA at VVLTC has added extra scaling on top of the scaling of increasing the L1 size.  Passed VVLTC 1: https://tests.stockfishchess.org/tests/view/6604a9020ec64f0526c583da LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 53042 W: 13554 L: 13256 D: 26232 Ptnml(0-2): 12; 5147; 15903; 5449; 10  Passed VVLTC 2: https://tests.stockfishchess.org/tests/view/660ad1b60ec64f0526c5dd23 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 17506 W: 4574 L: 4315 D: 8617 Ptnml(0-2): 1; 1567; 5362; 1818; 5  STC Elo estimate: https://tests.stockfishchess.org/tests/view/660b834d01aaec5069f87cb0 Elo: -7.66 � 3.8 (95%) LOS: 0.0% Total: 9618 W: 2440 L: 2652 D: 4526 Ptnml(0-2): 80; 1281; 2261; 1145; 42 nElo: -13.94 � 6.9 (95%) PairsRatio: 0.87  closes https://tests.stockfishchess.org/tests/view/660b834d01aaec5069f87cb0  bench 1823302  Co-Authored-By: Linmiao Xu <lin@robotmoon.com>,True,1,2024-04-01
vondele,vondele,2024-03-30 11:38:02+00:00,Avoid a note related to an ABI change  current master triggers a gcc note: parameter passing for argument of type 'std::pair<double; double>' when C++17 is enabled changed to match C++14 in GCC 10.1  while this is inconsequential; and just informative  https://gcc.gnu.org/bugzilla/show_bug.cgi?id=111516 we can easily avoid it.  closes https://github.com/official-stockfish/Stockfish/pull/5145  No functional change,True,5,2024-03-01
Disservin,vondele,2024-03-29 12:13:07+00:00,Improve prerelease creation workflow  In the last couple of months we sometimes saw duplicated prereleases uploaded to GitHub; possibly due to some racy behavior when concurrent jobs create a prerelease. This now creates an empty prerelease at the beginning of the CI and the binaries are later just attached to this one.  closes https://github.com/official-stockfish/Stockfish/pull/5144  No functional change,True,4,2024-03-01
vondele,vondele,2024-03-29 12:12:20+00:00,Fix usage of abs vs std::abs  close https://github.com/official-stockfish/Stockfish/pull/5143  No functional change,True,4,2024-03-01
xu-shawn,vondele,2024-03-29 09:18:40+00:00,Simplify NMP Condition  Remove eval >= ss->staticEval condition for Null Move Pruning.  Passed non-regression STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 44000 W: 11420 L: 11202 D: 21378 Ptnml(0-2): 174; 5243; 10978; 5401; 204 https://tests.stockfishchess.org/tests/live_elo/6603ee490ec64f0526c57984  Passed non-regression LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 82956 W: 20978 L: 20818 D: 41160 Ptnml(0-2): 54; 9353; 22499; 9523; 49 https://tests.stockfishchess.org/tests/live_elo/660464b50ec64f0526c5804d  closes https://github.com/official-stockfish/Stockfish/pull/5142  Bench 1759189,True,4,2024-03-01
Vizvezdenec,vondele,2024-03-29 09:15:17+00:00,Adjust best value after a pruned quiet move  Logic somewhat similar to how we adjust best value after pruned captures in qsearch; but in search this patch does it after pruned quiet moves and also to not full scale of futility value but to smth in between best value and futility value.  Passed STC: https://tests.stockfishchess.org/tests/view/6601cf900ec64f0526c55c30 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 59936 W: 15722 L: 15369 D: 28845 Ptnml(0-2): 182; 7097; 15112; 7340; 237  Passed LTC: https://tests.stockfishchess.org/tests/view/66029b2d0ec64f0526c566f1 LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 118362 W: 29953 L: 29460 D: 58949 Ptnml(0-2): 68; 13159; 32249; 13622; 83  closes https://github.com/official-stockfish/Stockfish/pull/5141  bench 1772608,True,4,2024-03-01
xoto10,vondele,2024-03-29 09:09:42+00:00,Vary time use with eval  Adjust time use depending on the current eval.  Passed STC : LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 101696 W: 26651 L: 26238 D: 48807 Ptnml(0-2): 400; 11602; 26459; 11959; 428 https://tests.stockfishchess.org/tests/live_elo/660187a50ec64f0526c557f6  Passed LTC : LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 60648 W: 15550 L: 15187 D: 29911 Ptnml(0-2): 40; 6356; 17171; 6715; 42 https://tests.stockfishchess.org/tests/live_elo/660298ed0ec64f0526c566d0  Values were found using two tunes with the final values taken from the ltc tune after 62k games : stc - https://tests.stockfishchess.org/tests/view/65fb526b0ec64f0526c50694 ltc - https://tests.stockfishchess.org/tests/view/65fd36e60ec64f0526c5214b  Ideas for future work;    * tune these values with the other TM adjustments   * try narrower bands   * calculate adjustment for exact eval by interpolation  closes https://github.com/official-stockfish/Stockfish/pull/5138  No functional change,True,4,2024-03-01
gahtan-syarif,Disservin,2024-03-26 17:17:00+00:00,Remove material imbalance from nnue eval  Passed non-reg STC: https://tests.stockfishchess.org/tests/view/65fdf11f0ec64f0526c52b57 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 76480 W: 19893 L: 19712 D: 36875 Ptnml(0-2): 339; 9107; 19157; 9308; 329  Passed non-reg LTC: https://tests.stockfishchess.org/tests/view/65fee22e0ec64f0526c53885 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 150948 W: 38078 L: 37988 D: 74882 Ptnml(0-2): 111; 16997; 41148; 17127; 91  closes https://github.com/official-stockfish/Stockfish/pull/5135  Bench: 2103324,True,1,2024-03-01
FauziAkram,Disservin,2024-03-26 17:17:00+00:00,Tweak the stats bonus and malus  For depth 1 we don't have a negative score anymore.  Passed STC: https://tests.stockfishchess.org/tests/view/65fb055c0ec64f0526c5024f LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 117120 W: 30468 L: 30023 D: 56629 Ptnml(0-2): 526; 13759; 29539; 14216; 520  Passed LTC: https://tests.stockfishchess.org/tests/view/65fdca4b0ec64f0526c5293f LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 54816 W: 13955 L: 13595 D: 27266 Ptnml(0-2): 30; 6046; 14897; 6404; 31  closes https://github.com/official-stockfish/Stockfish/pull/5134  Bench: 1876428,True,1,2024-03-01
Disservin,Disservin,2024-03-26 17:17:00+00:00,Add functionality to export small net  Usage ``` export_net <filenameBigNet> <filenameSmallNet> ```  closes https://github.com/official-stockfish/Stockfish/pull/5133  No functional change,True,1,2024-03-01
mstembera,Disservin,2024-03-26 17:06:49+00:00,Update nnue_feature_transformer.h  Unroll update_accumulator_refresh to process two active indices simultaneously.  The compiler might not unroll effectively because the number of active indices isn't known at compile time.  STC https://tests.stockfishchess.org/tests/view/65faa8850ec64f0526c4fca9 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 130464 W: 33882 L: 33431 D: 63151 Ptnml(0-2): 539; 14591; 34501; 15082; 519  closes https://github.com/official-stockfish/Stockfish/pull/5125  No functional change,True,1,2024-03-01
XInTheDark,vondele,2024-03-22 15:44:06+00:00,VVLTC search tune  This set of parameters was derived from 3 tuning attempts:      https://tests.stockfishchess.org/tests/view/65d19ab61d8e83c78bfd8436 (80+0.8 x8; ~40k games)     Then tuned with one of linrock's early L1-3072 nets:     https://tests.stockfishchess.org/tests/view/65def7b04b19edc854ebdec8 (VVLTC; ~36k games)     Starting from the result of this tuning; the parameters were then tuned with the current master net:     https://tests.stockfishchess.org/tests/view/65f11c420ec64f0526c46fc4 (VVLTC; ~45k games)  Additionally; at the start of the third tuning phase; 2 parameters were manually changed:      Notably; the triple extension margin was decreased from 78 to 22. This idea was given by Vizvezdenec:     https://tests.stockfishchess.org/tests/view/65f0a2360ec64f0526c46752.     The PvNode extension margin was also adjusted from 50 to 40.  This tune also differs from previous tuning attempts by tuning the evaluation thresholds for smallnet and psqt-only. The former was increased through the tuning; and this is hypothesized to scale better at VVLTC; although there is not much evidence of it.  Passed VVLTC 1st sprt: https://tests.stockfishchess.org/tests/view/65f6761d0ec64f0526c4be88 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 44688 W: 11421 L: 11140 D: 22127 Ptnml(0-2): 1; 4170; 13722; 4449; 2  Passed VVLTC 2nd sprt: https://tests.stockfishchess.org/tests/view/65fa31a30ec64f0526c4f611 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 27450 W: 7057 L: 6778 D: 13615 Ptnml(0-2): 4; 2545; 8346; 2828; 2  STC Elo estimate: https://tests.stockfishchess.org/tests/view/65fd3e540ec64f0526c521ae Elo: -7.84 � 1.8 (95%) LOS: 0.0% Total: 40000 W: 9899 L: 10802 D: 19299 Ptnml(0-2): 203; 5221; 10025; 4378; 173 nElo: -14.91 � 3.4 (95%) PairsRatio: 0.84  closes https://github.com/official-stockfish/Stockfish/pull/5130  Bench: 1876107,True,4,2024-03-01
Disservin,Disservin,2024-03-20 15:36:18+00:00,Add cmath header to movepick.h  No functional change,True,2,2024-03-01
gahtan-syarif,Disservin,2024-03-20 15:29:35+00:00,Remove reduction increase on repetition  Passed non-reg STC: https://tests.stockfishchess.org/tests/view/65f89ae30ec64f0526c4e0ff LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 173568 W: 45005 L: 44936 D: 83627 Ptnml(0-2): 684; 19878; 45628; 19873; 721  Passed non-reg LTC: https://tests.stockfishchess.org/tests/view/65fa0f370ec64f0526c4f42d LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 21138 W: 5432 L: 5216 D: 10490 Ptnml(0-2): 13; 2107; 6112; 2325; 12  closes https://github.com/official-stockfish/Stockfish/pull/5123  Bench: 2109005,False,2,2024-03-01
gahtan-syarif,Disservin,2024-03-20 15:29:35+00:00,Evaluation adjustment for different eval types  Gives different eval scaling parameters for the three different types of evaluation (bignet; smallnet; psqtOnly).  Passed STC: https://tests.stockfishchess.org/tests/view/65f4b0020ec64f0526c4a3bd LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 168064 W: 43507 L: 42987 D: 81570 Ptnml(0-2): 662; 19871; 42445; 20393; 661  Passed LTC: https://tests.stockfishchess.org/tests/view/65f6be1a0ec64f0526c4c361 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 162564 W: 41188 L: 40604 D: 80772 Ptnml(0-2): 120; 18112; 44216; 18732; 102  closes https://github.com/official-stockfish/Stockfish/pull/5122  Bench: 2113576,True,2,2024-03-01
robertnurnberg,Disservin,2024-03-20 15:29:35+00:00,"Base WDL model on material count and normalize evals dynamically  This PR proposes to change the parameter dependence of Stockfish's internal WDL model from full move counter to material count. In addition it ensures that an evaluation of 100 centipawns always corresponds to a 50% win probability at fishtest LTC; whereas for master this holds only at move number 32. See also https://github.com/official-stockfish/Stockfish/pull/4920 and the discussion therein.  The new model was fitted based on about 340M positions extracted from 5.6M fishtest LTC games from the last three weeks; involving SF versions from e67cc979fd2c0e66dfc2b2f2daa0117458cfc462 (SF 16.1) to current master.  The involved commands are for [WDL_model](https://github.com/official-stockfish/WDL_model) are: ``` ./updateWDL.sh --firstrev e67cc979fd2c0e66dfc2b2f2daa0117458cfc462 python scoreWDL.py updateWDL.json --plot save --pgnName update_material.png --momType ""material"" --momTarget 58 --materialMin 10 --modelFitting optimizeProbability ```  The anchor `58` for the material count value was chosen to be as close as possible to the observed average material count of fishtest LTC games at move 32 (`43`); while not changing the value of `NormalizeToPawnValue` compared to the move-based WDL model by more than 1.  The patch only affects the displayed cp and wdl values.  closes https://github.com/official-stockfish/Stockfish/pull/5121  No functional change",True,2,2024-03-01
Disservin,Disservin,2024-03-20 15:29:35+00:00,Fix header name in Makefile  No functional change,True,2,2024-03-01
Disservin,Disservin,2024-03-20 15:15:37+00:00,Consistent use of anonymous namespace  Also change `bindThisThread` to match the current code style for function naming.  closes https://github.com/official-stockfish/Stockfish/pull/5118  No functional change,True,2,2024-03-01
Vizvezdenec,Disservin,2024-03-20 15:14:00+00:00,Clamp history bonus to stats range  Before; one always had to keep track of the bonus one assigns to a history to stop the stats from overflowing. This is a quality of life improvement. Since this would often go unnoticed during benching.  Passed non-regression bounds: https://tests.stockfishchess.org/tests/view/65ef2af40ec64f0526c44cbc LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 179232 W: 46513 L: 46450 D: 86269 Ptnml(0-2): 716; 20323; 47452; 20432; 693  closes https://github.com/official-stockfish/Stockfish/pull/5116  No functional change,True,2,2024-03-01
Disservin,Disservin,2024-03-14 21:14:11+00:00,Fix false positives from ThreadSanitizer  Since Linux Kernel 6.5 we are getting false positives from the ci; lower the ALSR entropy to disable ALSR; which works as a temporary workaround.  https://github.com/google/sanitizers/issues/1716 https://bugs.launchpad.net/ubuntu/+source/linux/+bug/2056762  closes https://github.com/official-stockfish/Stockfish/pull/5115  No functional change,True,3,2024-03-01
cj5716,Disservin,2024-03-14 21:13:14+00:00,Make effort part of RootMove struct  Also includes several small cleanups.  Passed STC: https://tests.stockfishchess.org/tests/view/65f15cfe0ec64f0526c473a0 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 71136 W: 18456 L: 18273 D: 34407 Ptnml(0-2): 311; 8014; 18708; 8251; 284  closes https://github.com/official-stockfish/Stockfish/pull/5114  No functional change,True,3,2024-03-01
TierynnB,Disservin,2024-03-14 21:12:53+00:00,Sudden Death - Improve TM  Due to the 50 estimated move horizon; once a sudden death game got below 1 second; the time allocation for optimumTime would go into the negative and SF would start instamoving.  To counter this; once limits.time is below 1 second; the move horizon will start decreasing; at a rate of 1 move per 20ms. This was just what seemed a reasonable rate of decay.  Fishtest sudden death TC 5+0 https://tests.stockfishchess.org/tests/live_elo/65ee2cdf0ec64f0526c43bbb LLR: 2.99 (-2.94;2.94) <0.00;2.00> Total: 3348 W: 1070 L: 727 D:1551 Ptnml(0-2): 46; 277; 738; 514; 99  Fishtest SD TC 10+0 https://tests.stockfishchess.org/tests/live_elo/65ee401e0ec64f0526c43cf7 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 3780 W: 1097 L: 808 D: 1875 Ptnml(0-2): 11; 353; 919; 550; 57  Neutral Non-Regression STC 10+0.1 https://tests.stockfishchess.org/tests/live_elo/65ee45ff0ec64f0526c43d68 LLR: 2.95 (-2.94;2.94) <-1.75; 0.25> Total: 123616 W: 32054 L: 31927 D:59635 Ptnml(0-2): 493; 14323; 32105; 14338; 549  Neutral Non-Regression LTC 60+0.6 https://tests.stockfishchess.org/tests/live_elo/65ef1eec0ec64f0526c44bc4 LLR: 2.95 (-2.94;2.94) <-1.75; 0.25> Total: 130482 W: 32961 L: 32855 D:64666 Ptnml(0-2): 88; 13412; 38123; 13542; 76  closes https://github.com/official-stockfish/Stockfish/pull/5112  Bench: 2002517,True,3,2024-03-01
Vizvezdenec,Disservin,2024-03-14 21:08:48+00:00,Give more bonuses to quiet move that caused a fail low  Give extra bonus if search result is far below static evaluation of position.  Passed STC: https://tests.stockfishchess.org/tests/view/65edf1250ec64f0526c43787 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 90816 W: 23713 L: 23307 D: 43796 Ptnml(0-2): 401; 10725; 22742; 11147; 393  Passed LTC: https://tests.stockfishchess.org/tests/view/65ef5ed70ec64f0526c450af LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 66618 W: 16950 L: 16565 D: 33103 Ptnml(0-2): 35; 7372; 18139; 7699; 64  closes https://github.com/official-stockfish/Stockfish/pull/5111  Bench: 2002517,True,3,2024-03-01
Disservin,Disservin,2024-03-12 18:09:50+00:00,Fix Raspberry Pi Compilation  Reported by @Torom over discord.  > dev build fails on Raspberry Pi 5 with clang  ``` clang++ -o stockfish benchmark.o bitboard.o evaluate.o main.o misc.o movegen.o movepick.o position.o search.o thread.o timeman.o tt.o uci.o ucioption.o tune.o tbprobe.o nnue_misc.o half_ka_v2_hm.o network.o  -fprofile-instr-generate -latomic -lpthread  -Wall -Wcast-qual -fno-exceptions -std=c++17 -fprofile-instr-generate  -pedantic -Wextra -Wshadow -Wmissing-prototypes -Wconditional-uninitialized -DUSE_PTHREADS -DNDEBUG -O3 -funroll-loops -DIS_64BIT -DUSE_POPCNT -DUSE_NEON=8 -march=armv8.2-a+dotprod -DUSE_NEON_DOTPROD -DGIT_SHA=627974c9 -DGIT_DATE=20240312 -DARCH=armv8-dotprod -flto=full /tmp/lto-llvm-e9300e.o: in function `_GLOBAL__sub_I_network.cpp': ld-temp.o:(.text.startup+0x704c): relocation truncated to fit: R_AARCH64_LDST64_ABS_LO12_NC against symbol `gEmbeddedNNUEBigEnd' defined in .rodata section in /tmp/lto-llvm-e9300e.o /usr/bin/ld: ld-temp.o:(.text.startup+0x704c): warning: one possible cause of this error is that the symbol is being referenced in the indicated code as if it had a larger alignment than was declared where it was defined ld-temp.o:(.text.startup+0x7068): relocation truncated to fit: R_AARCH64_LDST64_ABS_LO12_NC against symbol `gEmbeddedNNUESmallEnd' defined in .rodata section in /tmp/lto-llvm-e9300e.o /usr/bin/ld: ld-temp.o:(.text.startup+0x7068): warning: one possible cause of this error is that the symbol is being referenced in the indicated code as if it had a larger alignment than was declared where it was defined clang: error: linker command failed with exit code 1 (use -v to see invocation) make[2]: *** [Makefile:1051: stockfish] Error 1 make[2]: Leaving directory '/home/torsten/chess/Stockfish_master/src' make[1]: *** [Makefile:1058: clang-profile-make] Error 2 make[1]: Leaving directory '/home/torsten/chess/Stockfish_master/src' make: *** [Makefile:886: profile-build] Error 2 ```  closes https://github.com/official-stockfish/Stockfish/pull/5106  No functional change,True,1,2024-03-01
FauziAkram,Disservin,2024-03-12 15:47:11+00:00,Search + Eval + Movepick Tune  Passed STC: https://tests.stockfishchess.org/tests/view/65ef15220ec64f0526c44b04 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 24480 W: 6459 L: 6153 D: 11868 Ptnml(0-2): 101; 2798; 6184; 3008; 149  Passed LTC: https://tests.stockfishchess.org/tests/view/65ef4bac0ec64f0526c44f50 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 53316 W: 13561 L: 13203 D: 26552 Ptnml(0-2): 27; 5925; 14408; 6259; 39  closes https://github.com/official-stockfish/Stockfish/pull/5104  Bench: 1715522,True,1,2024-03-01
FauziAkram,Disservin,2024-03-12 15:43:10+00:00,Simplify increaseDepth to boolean expression  Non-functional Simplification; maintaining the same logic as before. Big thanks to @peregrineshahin for helping with the code.  Passed non-regression bounds: https://tests.stockfishchess.org/tests/view/65ec93860ec64f0526c42375 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 101088 W: 26196 L: 26047 D: 48845 Ptnml(0-2): 405; 11580; 26473; 11633; 453  closes https://github.com/official-stockfish/Stockfish/pull/5103  No functional change,True,1,2024-03-01
Disservin,Disservin,2024-03-12 15:41:08+00:00,"Refactor Network Usage  Continuing from PR #4968; this update improves how Stockfish handles network usage; making it easier to manage and modify networks in the future.  With the introduction of a dedicated Network class; creating networks has become straightforward. See uci.cpp: ```cpp NN::NetworkBig({EvalFileDefaultNameBig; ""None""; """"}; NN::embeddedNNUEBig) ```  The new `Network` encapsulates all network-related logic; significantly reducing the complexity previously required to support multiple network types; such as the distinction between small and big networks #4915.  Non-Regression STC: https://tests.stockfishchess.org/tests/view/65edd26c0ec64f0526c43584 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 33760 W: 8887 L: 8661 D: 16212 Ptnml(0-2): 143; 3795; 8808; 3961; 173  Non-Regression SMP STC: https://tests.stockfishchess.org/tests/view/65ed71970ec64f0526c42fdd LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 59088 W: 15121 L: 14931 D: 29036 Ptnml(0-2): 110; 6640; 15829; 6880; 85  Compiled with `make -j profile-build` ``` bash ./bench_parallel.sh ./stockfish ./stockfish-nnue 13 50  sf_base =  1568540 +/-   7637 (95%) sf_test =  1573129 +/-   7301 (95%) diff    =     4589 +/-   8720 (95%) speedup = 0.29260% +/- 0.556% (95%) ```  Compiled with `make -j build` ``` bash ./bench_parallel.sh ./stockfish ./stockfish-nnue 13 50  sf_base =  1472653 +/-   7293 (95%) sf_test =  1491928 +/-   7661 (95%) diff    =    19275 +/-   7154 (95%) speedup = 1.30886% +/- 0.486% (95%) ```  closes https://github.com/official-stockfish/Stockfish/pull/5100  No functional change",True,1,2024-03-01
gahtan-syarif,Disservin,2024-03-11 09:08:40+00:00,Simplify opponentWorsening condition  Passed non-reg STC: https://tests.stockfishchess.org/tests/view/65ea18650ec64f0526c4033a LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 226624 W: 58601 L: 58589 D: 109434 Ptnml(0-2): 1030; 27193; 56819; 27275; 995  Passed non-reg LTC: https://tests.stockfishchess.org/tests/view/65eb7a220ec64f0526c4161a LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 243882 W: 61462 L: 61469 D: 120951 Ptnml(0-2): 197; 27559; 66419; 27586; 180  closes https://github.com/official-stockfish/Stockfish/pull/5102  Bench: 1601012,True,0,2024-03-01
XInTheDark,Disservin,2024-03-11 09:04:37+00:00,VVLTC search tune  Result of 32k games of tuning at 60+0.6 8-thread. Link to the tuning attempt: https://tests.stockfishchess.org/tests/view/65def7b04b19edc854ebdec8  Passed VVLTC first SPRT: https://tests.stockfishchess.org/tests/view/65e51b53416ecd92c162ab7f LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 37570 W: 9613 L: 9342 D: 18615 Ptnml(0-2): 2; 3454; 11601; 3727; 1  Passed VVLTC second SPRT: https://tests.stockfishchess.org/tests/view/65e87d1c0ec64f0526c3eb39 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 123158 W: 31463 L: 31006 D: 60689 Ptnml(0-2): 5; 11589; 37935; 12044; 6  Note: The small net and psqt-only thresholds have been moved to evaluate.h. The reasoning is that these values are used in both `evaluate.cpp` and `evaluate_nnue.cpp`; and thus unifying their usage avoids inconsistencies during testing; where one occurrence is changed without the other (this happened during the search tune SPRT).  closes https://github.com/official-stockfish/Stockfish/pull/5101  Bench: 1741218,True,0,2024-03-01
Disservin,Disservin,2024-03-11 08:02:13+00:00,Assorted cleanups  - fix naming convention for `workingDirectory` - use type alias for `EvalFiles` everywhere - move `ponderMode` into `LimitsType` - move limits parsing into standalone static function  closes https://github.com/official-stockfish/Stockfish/pull/5098  No functional change,True,0,2024-03-01
robertnurnberg,Disservin,2024-03-07 20:10:33+00:00,Fix wrong constant usage in go mate  Fixes an oversight in https://github.com/official-stockfish/Stockfish/pull/5094  In theory; master could stop search when run with `go mate 247` and return a TB loss (not a mate score). Also fixes the spelling of opponenWorsening.  closes https://github.com/official-stockfish/Stockfish/pull/5096  No functional change,True,3,2024-03-01
XInTheDark,Disservin,2024-03-07 19:08:00+00:00,VLTC time management tune  Result of 35k games of SPSA tuning at 180+1.8. Tuning attempt can be found here: https://tests.stockfishchess.org/tests/view/65e40599f2ef6c733362b03b  Passed VLTC 180+1.8: https://tests.stockfishchess.org/tests/view/65e5a6f5416ecd92c162b5d4 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 31950 W: 8225 L: 7949 D: 15776 Ptnml(0-2): 3; 3195; 9309; 3459; 9  Passed VLTC 240+2.4: https://tests.stockfishchess.org/tests/view/65e714de0ec64f0526c3d1f1 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 65108 W: 16558 L: 16202 D: 32348 Ptnml(0-2): 7; 6366; 19449; 6728; 4  closes https://github.com/official-stockfish/Stockfish/pull/5095  Bench: 1714391,True,3,2024-03-01
peregrineshahin,Disservin,2024-03-07 18:58:33+00:00,Fix `go mate x` in multithreading  Fixes two issues with master for go mate x:  - when running go mate x in losing positions; master always goes to the   maximal depth; arguably against what the UCI protocol demands  - when running go mate x in winning positions with multiple   threads; master may return non-mate scores from the search (this issue   is present in stockfish since at least sf16) The issues are fixed by   (a) also checking if score is mate -x and by (b) only letting   mainthread stop the search for go mate x commands; and by not looking   for a best thread but using mainthread as per the default. Related:     niklasf/python-chess#1070  More diagnostics can be found here peregrineshahin#6 (comment)  closes https://github.com/official-stockfish/Stockfish/pull/5094  No functional change  Co-Authored-By: Robert N�rnberg <28635489+robertnurnberg@users.noreply.github.com>,True,3,2024-03-01
Vizvezdenec,Disservin,2024-03-07 18:56:30+00:00,Introduce double extensions for PV nodes  Our double/triple extensions were allowed only for non-pv nodes. This patch allows them to be done for PV nodes; with some stricter conditions.  Passed STC: https://tests.stockfishchess.org/tests/view/65d657ec1d8e83c78bfddab8 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 339424 W: 88097 L: 87318 D: 164009 Ptnml(0-2): 1573; 39935; 85729; 41090; 1385  Passed LTC: https://tests.stockfishchess.org/tests/view/65dd63824b19edc854ebc433 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 459564 W: 115812 L: 114614 D: 229138 Ptnml(0-2): 248; 51441; 125173; 52705; 215  closes https://github.com/official-stockfish/Stockfish/pull/5093  Bench: 1714391,True,3,2024-03-01
rn5f107s2,Disservin,2024-03-07 18:55:51+00:00,Reduce futility_margin if opponents last move was bad  This reduces the futiltiy_margin if our opponents last move was bad by around ~1/3 when not improving and ~1/2.7 when improving; the idea being to retroactively futility prune moves that were played; but turned out to be bad.  A bad move is being defined as their staticEval before their move being lower as our staticEval now is. If the depth is 2 and we are improving the opponent worsening flag is not set; in order to not risk having a too low futility_margin; due to the fact that when these conditions are met the futility_margin already drops quite low.  Passed STC: https://tests.stockfishchess.org/tests/live_elo/65e3977bf2ef6c733362aae3 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 122432 W: 31884 L: 31436 D: 59112 Ptnml(0-2): 467; 14404; 31035; 14834; 476  Passed LTC: https://tests.stockfishchess.org/tests/live_elo/65e47f40f2ef6c733362b6d2 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 421692 W: 106572 L: 105452 D: 209668 Ptnml(0-2): 216; 47217; 114865; 48327; 221  closes https://github.com/official-stockfish/Stockfish/pull/5092  Bench: 1565939,True,3,2024-03-01
linrock,Disservin,2024-03-07 18:53:48+00:00,Update default main net to nn-1ceb1ade0001.nnue  Created by retraining the previous main net `nn-b1a57edbea57.nnue` with: - some of the same options as before:   - ranger21; more WDL skipping; 15% more loss when Q is too high - removal of the huge 514G pre-interleaved binpack - removal of SF-generated dfrc data (dfrc99-16tb7p-filt-v2.min.binpack) - interleaving many binpacks at training time - training with some bestmove capture positions where SEE < 0 - increased usage of torch.compile to speed up training by up to 40%  ```yaml experiment-name: 2560--S10-dfrc0-to-dec2023-skip-more-wdl-15p-more-loss-high-q-see-ge0-sk28 nnue-pytorch-branch: linrock/nnue-pytorch/r21-more-wdl-skip-15p-more-loss-high-q-skip-see-ge0-torch-compile-more start-from-engine-test-net: True  early-fen-skipping: 28 training-dataset:   # similar; not the exact same as:   # https://github.com/official-stockfish/Stockfish/pull/4635   - /data/S5-5af/leela96.v2.min.binpack   - /data/S5-5af/test60-2021-11-12-novdec-12tb7p.v6-dd.min.binpack   - /data/S5-5af/test77-2021-12-dec-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test78-2022-01-to-05-jantomay-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test78-2022-06-to-09-juntosep-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test79-2022-04-apr-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test79-2022-05-may-16tb7p.v6-dd.min.binpack    - /data/S5-5af/test80-2022-06-jun-16tb7p.v6-dd.min.unmin.binpack   - /data/S5-5af/test80-2022-07-jul-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test80-2022-08-aug-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test80-2022-09-sep-16tb7p.v6-dd.min.unmin.binpack   - /data/S5-5af/test80-2022-10-oct-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test80-2022-11-nov-16tb7p.v6-dd.min.binpack    - /data/S5-5af/test80-2023-01-jan-16tb7p.v6-sk20.min.binpack   - /data/S5-5af/test80-2023-02-feb-16tb7p.v6-dd.min.binpack   - /data/S5-5af/test80-2023-03-mar-2tb7p.min.unmin.binpack   - /data/S5-5af/test80-2023-04-apr-2tb7p.binpack   - /data/S5-5af/test80-2023-05-may-2tb7p.min.dd.binpack    # https://github.com/official-stockfish/Stockfish/pull/4782   - /data/S6-1ee1aba5ed/test80-2023-06-jun-2tb7p.binpack   - /data/S6-1ee1aba5ed/test80-2023-07-jul-2tb7p.min.binpack    # https://github.com/official-stockfish/Stockfish/pull/4972   - /data/S8-baff1edbea57/test80-2023-08-aug-2tb7p.v6.min.binpack   - /data/S8-baff1edbea57/test80-2023-09-sep-2tb7p.binpack   - /data/S8-baff1edbea57/test80-2023-10-oct-2tb7p.binpack    # https://github.com/official-stockfish/Stockfish/pull/5056   - /data/S9-b1a57edbea57/test80-2023-11-nov-2tb7p.binpack   - /data/S9-b1a57edbea57/test80-2023-12-dec-2tb7p.binpack  num-epochs: 800 lr: 4.375e-4 gamma: 0.995 start-lambda: 1.0 end-lambda: 0.7 ```  This particular net was reached at epoch 759. Use of more torch.compile decorators in nnue-pytorch model.py than in the previous main net training run sped up training by up to 40% on Tesla gpus when using recent pytorch compiled with cuda 12: https://github.com/linrock/nnue-tools/blob/7fb9831/Dockerfile  Skipping positions with bestmove captures where static exchange evaluation is >= 0 is based on the implementation from Sopel's NNUE training & experimentation log: https://docs.google.com/document/d/1gTlrr02qSNKiXNZ_SuO4-RjK4MXBiFlLE6jvNqqMkAY Experiment 293 - only skip captures with see>=0  Positions with bestmove captures where score == 0 are always skipped for compatibility with minimized binpacks; since the original minimizer sets scores to 0 for slight improvements in compression.  The trainer branch used was: https://github.com/linrock/nnue-pytorch/tree/r21-more-wdl-skip-15p-more-loss-high-q-skip-see-ge0-torch-compile-more  Binpacks were renamed to be sorted chronologically by default when sorted by name. The binpack data are otherwise the same as binpacks with similar names in the prior naming convention.  Training data can be found at: https://robotmoon.com/nnue-training-data/  Passed STC: https://tests.stockfishchess.org/tests/view/65e3ddd1f2ef6c733362ae5c LLR: 2.92 (-2.94;2.94) <0.00;2.00> Total: 149792 W: 39153 L: 38661 D: 71978 Ptnml(0-2): 675; 17586; 37905; 18032; 698  Passed LTC: https://tests.stockfishchess.org/tests/view/65e4d91c416ecd92c162a69b LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 64416 W: 16517 L: 16135 D: 31764 Ptnml(0-2): 38; 7218; 17313; 7602; 37  closes https://github.com/official-stockfish/Stockfish/pull/5090  Bench: 1373183,True,3,2024-03-01
FauziAkram,Disservin,2024-03-07 18:53:48+00:00,Update elo estimates  Tests used to change the elo worth of some functions:  https://tests.stockfishchess.org/tests/view/65c3f69dc865510db0283eef https://tests.stockfishchess.org/tests/view/65c3f935c865510db0283f2a https://tests.stockfishchess.org/tests/view/65d1489f1d8e83c78bfd7dbf https://tests.stockfishchess.org/tests/view/65ce9d361d8e83c78bfd4951 https://tests.stockfishchess.org/tests/view/65cfcd901d8e83c78bfd6184  closes https://github.com/official-stockfish/Stockfish/pull/5089  No functional change,True,3,2024-03-01
FauziAkram,Disservin,2024-03-07 18:49:01+00:00,Simplify Time Management  Instead of having a formula for using extra time with larger increments. Simply set it to 1 when the increment is lower than 0.5s and to 1.1 when the increment is higher.  The values can later on be further improved.  Passed STC: https://tests.stockfishchess.org/tests/view/65d25d3c1d8e83c78bfd9293 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 27488 W: 7077 L: 6848 D: 13563 Ptnml(0-2): 96; 3041; 7267; 3218; 122  Passed LTC: https://tests.stockfishchess.org/tests/view/65d2a72c1d8e83c78bfd97fa LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 137568 W: 34612 L: 34512 D: 68444 Ptnml(0-2): 60; 14672; 39221; 14770; 61  Passed VLTC: https://tests.stockfishchess.org/tests/view/65d7d7d39b2da0226a5a205b LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 139650 W: 35229 L: 35134 D: 69287 Ptnml(0-2): 33; 14227; 41218; 14306; 41  Passed also the TCEC TC style suggested by vondele: https://tests.stockfishchess.org/tests/view/65e4ca73416ecd92c162a57d LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 134150 W: 34278 L: 34163 D: 65709 Ptnml(0-2): 561; 15727; 34444; 15722; 621  closes https://github.com/official-stockfish/Stockfish/pull/5076  Bench: 1553115,True,3,2024-03-01
gahtan-syarif,vondele,2024-03-03 14:45:13+00:00,Simplify extension when ttMove is assumed to fail high over current beta  Simplify extension value to -3 when ttMove is assumed to fail high over current beta.  Passed non-reg STC: https://tests.stockfishchess.org/tests/view/65d66ed81d8e83c78bfddcba LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 235136 W: 60711 L: 60708 D: 113717 Ptnml(0-2): 969; 27904; 59874; 27797; 1024  Passed non-reg LTC: https://tests.stockfishchess.org/tests/view/65da2994944f2a78d4733107 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 662850 W: 166161 L: 166602 D: 330087 Ptnml(0-2): 394; 74895; 181274; 74482; 380  closes https://github.com/official-stockfish/Stockfish/pull/5088  Bench: 1553115,True,6,2024-03-01
gahtan-syarif,vondele,2024-03-03 14:42:17+00:00,Simplify IIR  Simplified depth reduction for PV nodes without a ttMove to 3.  Passed STC non-reg: https://tests.stockfishchess.org/tests/view/65d1a90a1d8e83c78bfd855a LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 363168 W: 93648 L: 93791 D: 175729 Ptnml(0-2): 1557; 43692; 91221; 43565; 1549  Passed LTC non-reg: https://tests.stockfishchess.org/tests/view/65d5612d1d8e83c78bfdc8e2 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 58818 W: 14946 L: 14761 D: 29111 Ptnml(0-2): 36; 6595; 15962; 6780; 36  closes https://github.com/official-stockfish/Stockfish/pull/5062  Bench: 1505827,True,6,2024-03-01
mstembera,vondele,2024-03-03 14:29:58+00:00,Only evaluate the PSQT part of the small net for large evals.  Thanks to Viren6 for suggesting to set complexity to 0.  STC https://tests.stockfishchess.org/tests/view/65d7d6709b2da0226a5a203f LLR: 2.92 (-2.94;2.94) <0.00;2.00> Total: 328384 W: 85316 L: 84554 D: 158514 Ptnml(0-2): 1414; 39076; 82486; 39766; 1450  LTC https://tests.stockfishchess.org/tests/view/65dce6d290f639b028a54d2e LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 165162 W: 41918 L: 41330 D: 81914 Ptnml(0-2): 102; 18332; 45124; 18922; 101  closes https://github.com/official-stockfish/Stockfish/pull/5083  bench: 1504003,True,6,2024-03-01
Disservin,vondele,2024-03-03 14:21:57+00:00,Document TT code more  Slight refactor of the TT code with the goal to make it easier to understand / tweak.  Passed Non-Regression STC: https://tests.stockfishchess.org/tests/view/65d51e401d8e83c78bfdc427 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 56416 W: 14750 L: 14550 D: 27116 Ptnml(0-2): 227; 6386; 14796; 6558; 241  closes https://github.com/official-stockfish/Stockfish/pull/5061  No functional change,True,6,2024-03-01
gahtan-syarif,vondele,2024-03-03 14:18:13+00:00,Join conditions for move sorting heuristics  closes https://github.com/official-stockfish/Stockfish/pull/5078  No functional change.,True,6,2024-03-01
Disservin,vondele,2024-03-03 14:09:46+00:00,Update Actions to Node20  ensure our CI continues to run after Node16 is obsolote on github.  closes https://github.com/official-stockfish/Stockfish/pull/5074  No functional change,True,6,2024-03-01
Disservin,vondele,2024-03-03 14:07:32+00:00,Make binaries executable again in CI  closes https://github.com/official-stockfish/Stockfish/pull/5072  No functional change,True,6,2024-03-01
Disservin,vondele,2024-03-03 14:01:29+00:00,Restore development  closes https://github.com/official-stockfish/Stockfish/pull/5073  No functional change,True,6,2024-03-01
Disservin,Disservin,2024-02-24 17:15:04+00:00,Stockfish 16.1  Official release version of Stockfish 16.1  Bench: 1303971  ---  Stockfish 16.1  Today; we have the pleasure to announce Stockfish 16.1. As always; you can freely download it at https://stockfishchess.org/download and use it in the GUI of your choice[1].  Don't forget to join our Discord server[2] to get in touch with the community of developers and users of the project!  *Quality of chess play*  In our testing against its predecessor; Stockfish 16.1 shows a notable improvement in performance; with an Elo gain of up to 27 points and winning over 2 times more game pairs[3] than it loses.  *Update highlights*  *Improved evaluation*  - Updated neural network architecture: The neural network architecture has   undergone two updates and is currently in its 8th version[4]. - Removal of handcrafted evaluation (HCE): This release marks the removal of the   traditional handcrafted evaluation and the transition to a fully neural   network-based approach[5]. - Dual NNUE: For the first time; Stockfish includes a secondary neural   network[6]; used to quickly evaluate positions that are easily decided.  *UCI Options removed*  `Use NNUE` and `UCI_AnalyseMode`[7] have been removed as they no longer had any effect. `SlowMover`[8] has also been removed in favor of `Move Overhead`.  *More binaries*  We now offer 13 new binaries. These new binaries include `avx512`; `vnni256`; `vnni512`; `m1-apple-silicon`; and `armv8-dotprod`; which take advantage of specific CPU instructions for improved performance. For most users; using `sse41-popcnt` (formerly `modern`); `avx2`; or `bmi2` should be enough; but if your CPU supports these new instructions; feel free to try them!  *Development changes*  - Updated testing book: This new book[9]; now derived exclusively from the open   Lichess database[10]; is 10 times larger than its predecessor; and has been   used to test potential improvements to Stockfish over the past few months. - Consolidation of repositories: Aiming to simplify access to our resources; we   have moved most Stockfish-related repositories into the official Stockfish   organization[11] on GitHub. - Growing maintainer team: We welcome Disservin[12] to the team of maintainers   of the project! This extra pair of hands will ensure the lasting success of   Stockfish.  *Thank you*  The Stockfish project builds on a thriving community of enthusiasts (thanks everybody!) who contribute their expertise; time; and resources to build a free and open-source chess engine that is robust; widely available; and very strong.  We would like to express our gratitude for the 10k stars[13] that light up our GitHub project! Thank you for your support and encouragement � your recognition means a lot to us.  We invite our chess fans to join the Fishtest testing framework[14]; and programmers to contribute to the project either directly to Stockfish[15] (C++); to Fishtest[16] (HTML; CSS; JavaScript; and Python); to our trainer nnue-pytorch[17] (C++ and Python); or to our website[18] (HTML; CSS/SCSS; and JavaScript).  The Stockfish team  [1] https://github.com/official-stockfish/Stockfish/wiki/Download-and-usage#download-a-chess-gui [2] https://discord.gg/GWDRS3kU6R [3] https://tests.stockfishchess.org/tests/view/65d666051d8e83c78bfddbd8 [4] https://github.com/official-stockfish/nnue-pytorch/blob/master/docs/nnue.md#sfnnv8-architecture [5] https://github.com/official-stockfish/Stockfish/commit/af110e0 [6] https://github.com/official-stockfish/Stockfish/commit/584d9ef [7] https://github.com/official-stockfish/Stockfish/commit/c53d2ec [8] https://github.com/official-stockfish/Stockfish/commit/536d692 [9] https://github.com/official-stockfish/books/commit/426eca4 [10] https://database.lichess.org/ [11] https://github.com/official-stockfish/ [12] https://github.com/Disservin [13] https://github.com/official-stockfish/Stockfish/stargazers [14] https://github.com/official-stockfish/fishtest/wiki/Running-the-worker [15] https://github.com/official-stockfish/Stockfish [16] https://github.com/official-stockfish/fishtest [17] https://github.com/official-stockfish/nnue-pytorch [18] https://github.com/official-stockfish/stockfish-web,True,5,2024-02-01
robertnurnberg,Disservin,2024-02-24 16:59:41+00:00,"Update the WDL model  Based on 130M positions from 2.1M games.  ``` Look recursively in directory pgns for games from SPRT tests using books matching ""UHO_4060_v..epd|UHO_Lichess_4852_v1.epd"" for SF revisions between 8e75548f2a10969c1c9211056999efbcebe63f9a (from 2024-02-17 17:11:46 +0100) and HEAD (from 2024-02-17 17:13:07 +0100). Based on 127920843 positions from 2109240 games; NormalizeToPawnValue should change from 345 to 356. ```  The patch only affects the UCI-reported cp and wdl values.  closes https://github.com/official-stockfish/Stockfish/pull/5070  No functional change",True,5,2024-02-01
Disservin,Disservin,2024-02-24 16:58:44+00:00,Update Top CPU Contributors  closes https://github.com/official-stockfish/Stockfish/pull/5069  No functional change,True,5,2024-02-01
Disservin,Disservin,2024-02-24 16:57:49+00:00,Expose EvalFileSmall option for small net  Since https://github.com/official-stockfish/fishtest/pull/1870 has been merged it's time for this update.  5k Fixed Games showed no problems. https://tests.stockfishchess.org/tests/view/65d9cc274c0e22b904f574d7  closes https://github.com/official-stockfish/Stockfish/pull/5068  No functional change,True,5,2024-02-01
cj5716,Disservin,2024-02-17 16:13:07+00:00,Simplify PV node reduction  Reduce less on PV nodes even with an upperbound TT entry.  Passed STC: https://tests.stockfishchess.org/tests/view/65cb3a861d8e83c78bfd0497 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 118752 W: 30441 L: 30307 D: 58004 Ptnml(0-2): 476; 14179; 29921; 14335; 465  Passed LTC: https://tests.stockfishchess.org/tests/view/65cd3b951d8e83c78bfd2b0d LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 155058 W: 38549 L: 38464 D: 78045 Ptnml(0-2): 85; 17521; 42219; 17632; 72  closes https://github.com/official-stockfish/Stockfish/pull/5057  Bench: 1303971,True,5,2024-02-01
linrock,Disservin,2024-02-17 16:11:46+00:00,Update default main net to nn-b1a57edbea57.nnue  Created by retraining the previous main net `nn-baff1edbea57.nnue` with: - some of the same options as before: ranger21; more WDL skipping - the addition of T80 nov+dec 2023 data - increasing loss by 15% when prediction is too high; up from 10% - use of torch.compile to speed up training by over 25%  ```yaml experiment-name: 2560--S9-514G-T80-augtodec2023-more-wdl-skip-15p-more-loss-high-q-sk28  training-dataset:   # https://github.com/official-stockfish/Stockfish/pull/4782   - /data/S6-514G-1ee1aba5ed.binpack   - /data/test80-aug2023-2tb7p.v6.min.binpack   - /data/test80-sep2023-2tb7p.binpack   - /data/test80-oct2023-2tb7p.binpack   - /data/test80-nov2023-2tb7p.binpack   - /data/test80-dec2023-2tb7p.binpack early-fen-skipping: 28  start-from-engine-test-net: True nnue-pytorch-branch: linrock/nnue-pytorch/r21-more-wdl-skip-15p-more-loss-high-q-torch-compile  num-epochs: 1000 lr: 4.375e-4 gamma: 0.995 start-lambda: 1.0 end-lambda: 0.7 ```  Epoch 819 trained with the above config led to this PR. Use of torch.compile decorators in nnue-pytorch model.py was found to speed up training by at least 25% on Ampere gpus when using recent pytorch compiled with cuda 12: https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch  See recent main net PRs for more info on - ranger21 and more WDL skipping: https://github.com/official-stockfish/Stockfish/pull/4942 - increasing loss when Q is too high: https://github.com/official-stockfish/Stockfish/pull/4972  Training data can be found at: https://robotmoon.com/nnue-training-data/  Passed STC: https://tests.stockfishchess.org/tests/view/65cd76151d8e83c78bfd2f52 LLR: 2.98 (-2.94;2.94) <0.00;2.00> Total: 78336 W: 20504 L: 20115 D: 37717 Ptnml(0-2): 317; 9225; 19721; 9562; 343  Passed LTC: https://tests.stockfishchess.org/tests/view/65ce5be61d8e83c78bfd43e9 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 41016 W: 10492 L: 10159 D: 20365 Ptnml(0-2): 22; 4533; 11071; 4854; 28  closes https://github.com/official-stockfish/Stockfish/pull/5056  Bench: 1351997,True,5,2024-02-01
cj5716,Disservin,2024-02-17 16:10:13+00:00,Simplify TT PV reduction  This also removes some incorrect fail-high logic.  Passed STC: https://tests.stockfishchess.org/tests/view/65cb3b641d8e83c78bfd04a9 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 87968 W: 22634 L: 22468 D: 42866 Ptnml(0-2): 315; 10436; 22323; 10588; 322  Passed LTC: https://tests.stockfishchess.org/tests/view/65cccee21d8e83c78bfd222c LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 70794 W: 17846 L: 17672 D: 35276 Ptnml(0-2): 44; 7980; 19189; 8126; 58  closes https://github.com/official-stockfish/Stockfish/pull/5055  Bench: 1474424,True,5,2024-02-01
gahtan-syarif,Disservin,2024-02-17 16:08:01+00:00,Remove penalty for quiet ttMove that fails low  Passed STC non-reg: https://tests.stockfishchess.org/tests/view/65c691a7c865510db0286e6e LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 234336 W: 60258 L: 60255 D: 113823 Ptnml(0-2): 966; 28141; 58918; 28210; 933  Passed LTC non-reg: https://tests.stockfishchess.org/tests/view/65c8d0d31d8e83c78bfcd4a6 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 235206 W: 59134 L: 59132 D: 116940 Ptnml(0-2): 135; 26908; 63517; 26906; 137  https://github.com/official-stockfish/Stockfish/pull/5054  Bench: 1287996,True,5,2024-02-01
Disservin,Disservin,2024-02-14 20:39:31+00:00,Use node counting to early stop search  This introduces a form of node counting which can be used to further tweak the usage of our search time. The current approach stops the search when almost all nodes are searched on a single move.  The idea originally came from Koivisto; but the implemention is a bit different; Koivisto scales the optimal time by the nodes effort and then determines if the search should be stopped. We just scale down the `totalTime` and stop the search if we exceed it and the effort is large enough.  Passed STC: https://tests.stockfishchess.org/tests/view/65c8e0661d8e83c78bfcd5ec LLR: 2.97 (-2.94;2.94) <0.00;2.00> Total: 88672 W: 22907 L: 22512 D: 43253 Ptnml(0-2): 310; 10163; 23041; 10466; 356  Passed LTC: https://tests.stockfishchess.org/tests/view/65ca632b1d8e83c78bfcf554 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 170856 W: 42910 L: 42320 D: 85626 Ptnml(0-2): 104; 18337; 47960; 18919; 108  closes https://github.com/official-stockfish/Stockfish/pull/5053  Bench: 1198939,True,2,2024-02-01
TierynnB,Disservin,2024-02-14 20:38:17+00:00,Refactor timeman.cpp  Move optExtra; optConstant and maxConstant into lower scope.  closes https://github.com/official-stockfish/Stockfish/pull/5052  No functional change,True,2,2024-02-01
XInTheDark,Disservin,2024-02-14 20:27:55+00:00,VVLTC search tune  Search parameters were tuned using 16k games at VVLTC. They were tuned starting with the new parameters (in search only) of PR #5039.  Passed VVLTC: https://tests.stockfishchess.org/tests/view/65c8a8fc1d8e83c78bfcd163 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 20826 W: 5355 L: 5100 D: 10371 Ptnml(0-2): 1; 1941; 6275; 2194; 2  Passed 2nd VVLTC: https://tests.stockfishchess.org/tests/view/65cadc2d1d8e83c78bfcfdaf LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 17710 W: 4611 L: 4352 D: 8747 Ptnml(0-2): 1; 1586; 5422; 1845; 1  STC Elo estimate: https://tests.stockfishchess.org/tests/view/65cb6aed1d8e83c78bfd0802 Elo: -1.46 � 1.8 (95%) LOS: 5.5% Total: 40000 W: 10267 L: 10435 D: 19298 Ptnml(0-2): 200; 4860; 10023; 4742; 175 nElo: -2.77 � 3.4 (95%) PairsRatio: 0.97  Bench: 1198939,True,2,2024-02-01
Disservin,Disservin,2024-02-11 19:13:19+00:00,Format code using clang-format  No functional change,True,6,2024-02-01
gahtan-syarif,Disservin,2024-02-11 18:58:35+00:00,Remove quiet tt move extensions  Passed STC: https://tests.stockfishchess.org/tests/view/65c6934cc865510db0286e90 LLR: 2.99 (-2.94;2.94) <-1.75;0.25> Total: 54016 W: 14065 L: 13854 D: 26097 Ptnml(0-2): 231; 6381; 13581; 6576; 239  Passed LTC: https://tests.stockfishchess.org/tests/view/65c72b91c865510db0287a1a LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 55098 W: 13850 L: 13658 D: 27590 Ptnml(0-2): 37; 6257; 14777; 6433; 45  closes https://github.com/official-stockfish/Stockfish/pull/5049  Bench: 1027182,True,6,2024-02-01
mstembera,Disservin,2024-02-11 18:55:26+00:00,Improve thread voting inefficiencies  Initialize the unordered map to a reasonable number of buckets and make the move hashes well distributed. For more see https://github.com/official-stockfish/Stockfish/pull/4958#issuecomment-1937351190 Also make bestThreadPV and newThreadPV references so we don't copy entire vectors.  closes https://github.com/official-stockfish/Stockfish/pull/5048  No functional change,True,6,2024-02-01
Vizvezdenec,Disservin,2024-02-11 18:53:45+00:00,Adjust best value in main search depending on depth  This patch does similar thing to how it's done for qsearch - in case of fail high adjust result to lower value. Difference is that it is done only for non-pv nodes and it's depth dependent - so lower depth entries will have bigger adjustment and higher depth entries will have smaller adjustment.  Passed STC: https://tests.stockfishchess.org/tests/view/65c3c0cbc865510db0283b21 LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 112032 W: 29142 L: 28705 D: 54185 Ptnml(0-2): 479; 13152; 28326; 13571; 488  Passed LTC: https://tests.stockfishchess.org/tests/view/65c52e62c865510db02855d5 LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 132480 W: 33457 L: 32936 D: 66087 Ptnml(0-2): 67; 14697; 36222; 15156; 98  closes https://github.com/official-stockfish/Stockfish/pull/5047  Bench: 1168241,True,6,2024-02-01
Disservin,Disservin,2024-02-11 18:52:00+00:00,Assorted cleanups  Assorted cleanups  closes https://github.com/official-stockfish/Stockfish/pull/5046  No functional change  Co-Authored-By: Shahin M. Shahin <41402573+peregrineshahin@users.noreply.github.com> Co-Authored-By: cj5716 <125858804+cj5716@users.noreply.github.com>,True,6,2024-02-01
GoldenRare,Disservin,2024-02-11 18:46:55+00:00,Remove unnecessary assignments related to adjusted static evaluation  In both search and qsearch; there are instances where we do unadjustedStaticEval = ss->staticEval = eval/bestValue = tte->eval(); but immediately after re-assign ss-static and eval/bestValue to some new value; which makes the initial assignment redundant.  closes https://github.com/official-stockfish/Stockfish/pull/5045  No functional change,True,6,2024-02-01
Disservin,Disservin,2024-02-11 18:40:33+00:00,Update CI actions  - Update codeql to v3 - Switch from dev-drprasad to native github cli - Update softprops/action-gh-release to node 20 commit  `thollander/actions-comment-pull-request` needs to be bumped to node20 too; but the author hasnt done so atm  closes https://github.com/official-stockfish/Stockfish/pull/5044  No functional change,True,6,2024-02-01
mstembera,Disservin,2024-02-09 18:06:25+00:00,Fix the alignment of the transformer buffer  Fixes the issue mentioned in https://github.com/official-stockfish/Stockfish/commit/584d9efedcde330eeb96a99215552ddfb06f52ba#r138417600. Thanks to @cj5716 and @peregrineshahin for spotting this!  closes https://github.com/official-stockfish/Stockfish/pull/5042  No functional change,True,4,2024-02-01
XInTheDark,Disservin,2024-02-09 18:06:25+00:00,Remove check extension  Passed simplification STC: https://tests.stockfishchess.org/tests/view/65c38d2ac865510db02836cf LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 52288 W: 13578 L: 13371 D: 25339 Ptnml(0-2): 197; 6171; 13265; 6250; 261  Passed simplification LTC: https://tests.stockfishchess.org/tests/view/65c4470ec865510db0284473 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 44958 W: 11255 L: 11055 D: 22648 Ptnml(0-2): 37; 4962; 12274; 5176; 30  closes https://github.com/official-stockfish/Stockfish/pull/5041  Bench: 1116591,True,4,2024-02-01
gahtan-syarif,Disservin,2024-02-09 18:06:25+00:00,Simplify opponent movecount reduction  This removes the reduction decrease that occured when the previous ply had a movecount greater than 7.  Passed STC: https://tests.stockfishchess.org/tests/view/65c3f6dac865510db0283ef6 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 11968 W: 3205 L: 2953 D: 5810 Ptnml(0-2): 38; 1310; 3064; 1506; 66  Passed LTC: https://tests.stockfishchess.org/tests/view/65c42377c865510db0284217 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 35676 W: 9113 L: 8905 D: 17658 Ptnml(0-2): 22; 3893; 9802; 4097; 24  closes https://github.com/official-stockfish/Stockfish/pull/5040  Bench: 1148379,True,4,2024-02-01
cj5716,Disservin,2024-02-09 18:06:25+00:00,Remove simple eval  With the recent introduction of the dual NNUE; the need for simple eval is no longer there.  Passed STC: https://tests.stockfishchess.org/tests/view/65c1f735c865510db0281652 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 85312 W: 22009 L: 21837 D: 41466 Ptnml(0-2): 334; 10155; 21567; 10205; 395  Passed LTC: https://tests.stockfishchess.org/tests/view/65c2d64bc865510db0282810 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 49956 W: 12596 L: 12402 D: 24958 Ptnml(0-2): 28; 5553; 13624; 5743; 30  closes https://github.com/official-stockfish/Stockfish/pull/5037  Bench 1213676,True,4,2024-02-01
locutus2,Disservin,2024-02-09 18:06:25+00:00,Tweak capture scoring for move ordering  Move divisor from capture scoring to good capture check and sligthly increase it.  This has several effects: - its a speedup because for quience and probcut   search the division now never happens. For main   search its delayed and can be avoided if a good   capture triggers a cutoff - through the higher resolution of scores we have   a more granular sorting  STC: https://tests.stockfishchess.org/tests/view/65bf2a93c865510db027dc27 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 470016 W: 122150 L: 121173 D: 226693 Ptnml(0-2): 2133; 55705; 118374; 56644; 2152  LTC: https://tests.stockfishchess.org/tests/view/65c1d16dc865510db0281339 LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 98988 W: 25121 L: 24667 D: 49200 Ptnml(0-2): 77; 10998; 26884; 11464; 71  closes https://github.com/official-stockfish/Stockfish/pull/5036  Bench: 1233867,True,4,2024-02-01
Disservin,Disservin,2024-02-09 18:06:25+00:00,Refactor the CI workflows  This refactors the CI workflows to group some logic and makes sure that all (pre)release binaries are actually tested.  The screenshot below shows the execution logic of the reworked ci; https://github.com/Disservin/Stockfish/actions/runs/7773581379. You can also hover over the cards to see the execution flow.  The `matrix.json` and `arm_matrix.json` define the binaries which will be uploaded to GitHub. Afterwards a matrix is created and each job compiles a profile guided build for that arch and uploads that as an artifact to GitHub. The Binaries/ARM_Binaries workflow's are called when the previous step has been completed; and uploads all artifacts to the (pre)release.  This also fixes some indentations and renames the workflows; see https://github.com/official-stockfish/Stockfish/actions; where every workflow is called `Stockfish` vs https://github.com/Disservin/Stockfish/actions. It also increases the parallel compilation used for make from `-j2 to -j4`.  It now also prevents the prerelease action from running on forks.  A test release can be viewed here https://github.com/Disservin/Stockfish/releases.  closes https://github.com/official-stockfish/Stockfish/pull/5035  No functional change,True,4,2024-02-01
FauziAkram,Disservin,2024-02-09 18:06:24+00:00,Assorted trivial cleanups  Renaming doubleExtensions variable to multiExtensions; since now we have also triple extensions.  Some extra cleanups.  Recent tests used to measure the elo worth: https://tests.stockfishchess.org/tests/view/659fd0c379aa8af82b96abc3 https://tests.stockfishchess.org/tests/view/65a8f3da79aa8af82b9751e3 https://tests.stockfishchess.org/tests/view/65b51824c865510db0272740 https://tests.stockfishchess.org/tests/view/65b58fbfc865510db0272f5b  closes https://github.com/official-stockfish/Stockfish/pull/5032  No functional change,True,4,2024-02-01
XInTheDark,vondele,2024-02-03 16:40:07+00:00,VVLTC search tune  Search parameters were tuned at 60+0.6 8-thread. Link to the tuning attempt: https://tests.stockfishchess.org/tests/view/65b84e8dc865510db0276030  The most significant change is the triple extension parameter; from 200 to 78. This presumably improves scaling. Additionally; the value < singularBeta - 2 condition for double extensions was removed. This can simply be considered a parameter tweak from 2 to 0.  Passed VVLTC: https://tests.stockfishchess.org/tests/view/65baec69c865510db0278f19 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 26136 W: 6564 L: 6305 D: 13267 Ptnml(0-2): 2; 2413; 7977; 2676; 0  Passed VVLTC vs passed PR #5027: https://tests.stockfishchess.org/tests/view/65bc2adfc865510db027a561 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 52968 W: 13372 L: 13046 D: 26550 Ptnml(0-2): 4; 4944; 16265; 5264; 7  STC Elo estimate: https://tests.stockfishchess.org/tests/view/65be5514c865510db027cbc5  closes https://github.com/official-stockfish/Stockfish/pull/5029  Bench: 1478189,True,5,2024-02-01
gab8192,vondele,2024-02-03 16:30:41+00:00,Simplify LMR condition  Apply LMR on captures the same way it is applied on quiets  Passed Non-Reg STC: https://tests.stockfishchess.org/tests/view/65bbf39bc865510db027a14a LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 77152 W: 19970 L: 19791 D: 37391 Ptnml(0-2): 304; 9159; 19496; 9288; 329  Passed Non-Reg LTC: https://tests.stockfishchess.org/tests/view/65bc8889c865510db027ac9e LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 103230 W: 25997 L: 25858 D: 51375 Ptnml(0-2): 71; 11687; 27958; 11830; 69  Hit rate of removed condition (!ss->ttPv || !capture || (cutNode && (ss - 1)->moveCount > 1)) Total 1253801 Hits 1228904 Hit Rate (%) 98.0143  Hit rate of previous LMR (depth >= 2 && moveCount > 1 + rootNode && ...) Total 1253801 Hits 727234 Hit Rate (%) 58.0023  Hit rate of simplified LMR (depth >= 2 && moveCount > 1 + rootNode) Total 1201839 Hits 713540 Hit Rate (%) 59.3707  closes https://github.com/official-stockfish/Stockfish/pull/5028  Bench: 1438224,True,5,2024-02-01
Viren6,vondele,2024-02-03 16:26:42+00:00,Introduce Triple Extensions  This replaces singularquietLMR with triple instead of double extending non-capture ttmoves that have value far below singularBeta. This threshold value is initially set to 200; there is scope for more scaling by reducing it as occured with double extensions.  Passed STC: https://tests.stockfishchess.org/tests/view/65b683b8c865510db0274074 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 222912 W: 58141 L: 57535 D: 107236 Ptnml(0-2): 1063; 26244; 56154; 27014; 981  Passed LTC: https://tests.stockfishchess.org/tests/view/65bae6d4c865510db0278eb5 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 66306 W: 16825 L: 16440 D: 33041 Ptnml(0-2): 40; 7374; 17952; 7735; 52  closes https://github.com/official-stockfish/Stockfish/pull/5027  bench 1394701,True,5,2024-02-01
FauziAkram,vondele,2024-02-03 16:09:05+00:00,Simplify the extension formula  Simplify the extension formula in the case of cutNode by removing the depth condition and always setting extension to -2.  Passed STC: LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 277280 W: 70760 L: 70802 D: 135718 Ptnml(0-2): 971; 31775; 73153; 31807; 934 https://tests.stockfishchess.org/tests/view/65ad08f779aa8af82b979dd6  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 452976 W: 112992 L: 113215 D: 226769 Ptnml(0-2): 266; 51041; 124112; 50788; 281 https://tests.stockfishchess.org/tests/view/65ae466fc865510db026a760  closes https://github.com/official-stockfish/Stockfish/pull/5021  Bench: 1492957,True,5,2024-02-01
Disservin,vondele,2024-02-03 15:55:10+00:00,Add Apple Silicon Runners to CI  GitHub CI runners are available for macOS 14; these runners are using apple silicon chips (M1). https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/  closes https://github.com/official-stockfish/Stockfish/pull/5025  No functional change,True,5,2024-02-01
Disservin,vondele,2024-02-03 15:50:31+00:00,Refactor pv printing  Also fix the case which is currently printing depth 0.  fixes #5019 closes https://github.com/official-stockfish/Stockfish/pull/5020  No functional change,True,5,2024-02-01
Disservin,vondele,2024-02-03 15:43:23+00:00,Simplify array initializations  also retire a few std::memset calls.  Passed non-regresion STC: https://tests.stockfishchess.org/tests/view/65b8e162c865510db0276901 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 97504 W: 25294 L: 25140 D: 47070 Ptnml(1-2): 378; 11102; 25667; 11198; 407  closes https://github.com/official-stockfish/Stockfish/pull/5018  No functional change,True,5,2024-02-01
Viren6,Disservin,2024-01-26 20:15:07+00:00,Use ttPv in depth condition of singular extensions  This replaces the PvNode condition and tte Pv call previously with using the precomputed ttPv; and also removes the multiplier of 2.  This new depth condition occurs with approximately equal frequency (47%) to the old depth condition (measured when the other conditions in the if are true); so non-linear scaling behaviour isn't expected.  Passed Non-Reg STC: https://tests.stockfishchess.org/tests/view/65b0e132c865510db026da27 LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 243232 W: 62432 L: 62437 D: 118363 Ptnml(0-2): 910; 28937; 61900; 28986; 883  Passed Non-Reg LTC: https://tests.stockfishchess.org/tests/view/65b2053bc865510db026eea1 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 190596 W: 47666 L: 47618 D: 95312 Ptnml(0-2): 115; 21710; 51596; 21766; 111  closes https://github.com/official-stockfish/Stockfish/pull/5015  Bench: 1492957,True,4,2024-01-01
wcdbmv,Disservin,2024-01-26 20:00:41+00:00,Move OnChange callback in Option ctors  Parameter 'f' is passed by value and only copied once. Moving it to avoid unnecessary copies.  closes https://github.com/official-stockfish/Stockfish/pull/5014  No functional change,True,4,2024-01-01
Vizvezdenec,Disservin,2024-01-26 19:55:16+00:00,Do more double extensions  Parameter tweak from Black Marlin chess engine. Choose a significantly lower value that triggers in 95% of cases; compared to the usual 84% in standard benchmark runs.  Since the introduction by https://github.com/official-stockfish/Stockfish/commit/33a858eaa1f792b3413384a3d0993dba36aca92e this constant has only decreased in value over time. 2-16-17-18-21-22-25-26-52-71-75-93-140  Failed STC really fast: https://tests.stockfishchess.org/tests/view/65b11d05c865510db026df7b LLR: -2.94 (-2.94;2.94) <0.00;2.00> Total: 13216 W: 3242 L: 3485 D: 6489 Ptnml(0-2): 50; 1682; 3371; 1471; 34  Was reasonable at LTC:  https://tests.stockfishchess.org/tests/view/65b13e20c865510db026e210 Elo: 1.18 � 1.5 (95%) LOS: 94.3% Total: 50000 W: 12517 L: 12347 D: 25136 Ptnml(0-2): 31; 5598; 13579; 5754; 38 nElo: 2.45 � 3.0 (95%) PairsRatio: 1.03  Passed VLTC with STC bounds: https://tests.stockfishchess.org/tests/view/65b18870c865510db026e769 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 30456 W: 7726 L: 7448 D: 15282 Ptnml(0-2): 6; 3111; 8717; 3387; 7  Passed VVLTC with LTC bounds: https://tests.stockfishchess.org/tests/view/65b20b95c865510db026eef0 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 36134 W: 9158 L: 8859 D: 18117 Ptnml(0-2): 3; 3455; 10850; 3758; 1  closes https://github.com/official-stockfish/Stockfish/pull/5013  Bench: 1503692,True,4,2024-01-01
Disservin,Disservin,2024-01-26 19:52:26+00:00,Move perft out of search  This splits the logic of search and perft. Before; threads were started; which then constructed a search object; which then started perft and returned immediately. All of this is unnecessary; instead uci should start perft right away.  closes https://github.com/official-stockfish/Stockfish/pull/5008  No functional change,True,4,2024-01-01
FauziAkram,Disservin,2024-01-26 19:44:16+00:00,Refactor history score calculation  Passed STC: https://tests.stockfishchess.org/tests/view/65ad08b179aa8af82b979dd1 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 161376 W: 41582 L: 41498 D: 78296 Ptnml(0-2): 633; 19354; 40611; 19476; 614  Passed LTC: https://tests.stockfishchess.org/tests/view/65af966fc865510db026c0f0 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 116526 W: 29269 L: 29143 D: 58114 Ptnml(0-2): 71; 13252; 31509; 13342; 89  closes https://github.com/official-stockfish/Stockfish/pull/5006  Bench: 1317504,True,4,2024-01-01
FauziAkram,Disservin,2024-01-26 19:40:22+00:00,Remove redundant max operation on lmrDepth  Removed a restriction that prohibited history heuristics sum in futility pruning to exceed some negative value.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 279040 W: 71095 L: 71143 D: 136802 Ptnml(0-2): 949; 33574; 70474; 33622; 901 https://tests.stockfishchess.org/tests/view/65aaef4c79aa8af82b977631  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 75156 W: 18884 L: 18715 D: 37557 Ptnml(0-2): 52; 8445; 20408; 8628; 45 https://tests.stockfishchess.org/tests/view/65ae7ef3c865510db026abf5  closes https://github.com/official-stockfish/Stockfish/pull/5004  Bench: 1566543,True,4,2024-01-01
XInTheDark,Disservin,2024-01-21 11:49:30+00:00,VLTC search tune  Search parameters were tuned using 152k games at 180+1.8.  Passed VLTC: https://tests.stockfishchess.org/tests/view/65a7a81979aa8af82b973a20 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 117338 W: 29244 L: 28848 D: 59246 Ptnml(0-2): 24; 12474; 33267; 12890; 14  Passed VVLTC: https://tests.stockfishchess.org/tests/view/65ab246679aa8af82b977982 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 28164 W: 7239 L: 6957 D: 13968 Ptnml(0-2): 3; 2651; 8490; 2937; 1  STC Elo estimate: https://tests.stockfishchess.org/tests/view/65ac7c0979aa8af82b9792a6 Elo: -0.53 � 2.0 (95%) LOS: 30.4% Total: 30000 W: 7688 L: 7734 D: 14578 Ptnml(0-2): 102; 3617; 7614; 3559; 108 nElo: -1.03 � 3.9 (95%) PairsRatio: 0.99  closes https://github.com/official-stockfish/Stockfish/pull/5003  Bench: 1235377,True,6,2024-01-01
robertnurnberg,Disservin,2024-01-21 11:45:03+00:00,Update the WDL model  Update the internal WDL model. After the dual net merge; the internal evaluations have drifted upwards a bit. With this PR `NormalizeToPawnValue` changes from `328` to `345`.  The new model was fitted based on about 200M positions extracted from 3.4M fishtest LTC games from the last two weeks; involving SF versions from 6deb88728fb141e853243c2873ad0cda4dd19320 to current master.  Apart from the WDL model parameter update; this PR implements the following changes:  WDL Model: - an incorrect 8-move shift in master's WDL model has been fixed - the polynomials `p_a` and `p_b` are fitted over the move range [8; 120] - the coefficients for `p_a` and `p_b` are optimized by maximizing the   probability of predicting the observed outcome (credits to @vondele)  SF code: - for wdl values; move will be clamped to `max(8; min(120; move))` - no longer clamp the internal eval to [-4000;4000] - compute `NormalizeToPawnValue` with `round`; not `trunc`  The PR only affects displayed `cp` and `wdl` values.  closes https://github.com/official-stockfish/Stockfish/pull/5002  No functional change,True,6,2024-01-01
peregrineshahin,Disservin,2024-01-21 11:42:28+00:00,Refactor get_best_thread  Make get_best_thread function easier to understand.  Passed non-reg SMP STC: https://tests.stockfishchess.org/tests/view/65a91c6679aa8af82b975500 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 186000 W: 46379 L: 46325 D: 93296 Ptnml(0-2): 269; 21374; 49634; 21480; 243  closes https://github.com/official-stockfish/Stockfish/pull/5001  No functional change,True,6,2024-01-01
rn5f107s2,Disservin,2024-01-21 11:42:07+00:00,Reduce futility_margin further when improving  The idea of this is to unroll the futility_margin calculation to allow for the improving flag to have a greater effect on the futility margin. The current factor is 1.5 instead of the previous 1 resulting in a deduction of an extra margin/2 from futilit_margin if improving. The chosen value was not tuned; meaning that there is room for tweaking it. This patch is partially inspired by @Vizvezdenec; who; although quite different in execution; tested another idea where the futility_margin is lowered further when improving [1].  [1]: (first take) https://tests.stockfishchess.org/tests/view/65a56b1879aa8af82b97164b  Passed STC: https://tests.stockfishchess.org/tests/live_elo/65a8bfc179aa8af82b974e3c LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 161152 W: 41321 L: 40816 D: 79015 Ptnml(0-2): 559; 19030; 40921; 19479; 587  Passed rebased LTC: https://tests.stockfishchess.org/tests/live_elo/65a8b9ef79aa8af82b974dc0 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 96024 W: 24172 L: 23728 D: 48124 Ptnml(0-2): 56; 10598; 26275; 11012; 71  closes https://github.com/official-stockfish/Stockfish/pull/5000  Bench: 1281703,True,6,2024-01-01
Viren6,Disservin,2024-01-21 11:33:08+00:00,Refactor ttPv reduction conditions  closes https://github.com/official-stockfish/Stockfish/pull/4999  No functional change,True,6,2024-01-01
Disservin,Disservin,2024-01-21 11:21:01+00:00,Refactor NativeThread start_routine  Removes the free function and fixes the formatting for the function call.  closes https://github.com/official-stockfish/Stockfish/pull/4995  No functional change,True,6,2024-01-01
Viren6,Disservin,2024-01-17 17:56:37+00:00,Improve ttPv reduction  This patch allows a partial reduction decrease when a node is likely to fail low; and increases the reduction decrease when a node has failed high.  Passed STC: https://tests.stockfishchess.org/tests/view/65a626e779aa8af82b9722bc LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 157824 W: 40332 L: 39835 D: 77657 Ptnml(0-2): 543; 18617; 40098; 19108; 546  Passed LTC: https://tests.stockfishchess.org/tests/view/65a7290279aa8af82b97328a LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 57228 W: 14475 L: 14111 D: 28642 Ptnml(0-2): 34; 6278; 15633; 6628; 41  closes https://github.com/official-stockfish/Stockfish/pull/4994  Bench: 1364759,True,2,2024-01-01
FauziAkram,Disservin,2024-01-17 17:55:44+00:00,Remove threatenedByPawn from rook threat  Can be simplified away.  Passed STC: https://tests.stockfishchess.org/tests/view/65a3fa4179aa8af82b96face LLR: 2.92 (-2.94;2.94) <-1.75;0.25> Total: 30592 W: 7903 L: 7674 D: 15015 Ptnml(0-2): 96; 3590; 7711; 3787; 112  Passed LTC: https://tests.stockfishchess.org/tests/view/65a42b9a79aa8af82b96fe88 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 73656 W: 18382 L: 18212 D: 37062 Ptnml(0-2): 47; 8287; 19981; 8475; 38  closes https://github.com/official-stockfish/Stockfish/pull/4993  Bench: 1430061,True,2,2024-01-01
Unknown,Disservin,2024-01-17 17:51:03+00:00,Refactor code for correcting unadjustedStaticEval  Passed non-regression STC: https://tests.stockfishchess.org/tests/live_elo/65a4df6a79aa8af82b970ca0 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 43328 W: 11103 L: 10892 D: 21333 Ptnml(0-2): 120; 4920; 11407; 5063; 154  https://github.com/official-stockfish/Stockfish/pull/4992  No functional change,True,2,2024-01-01
Torom,Disservin,2024-01-17 17:32:20+00:00,Fix dotprod detection  This fixes the detection of dotprod capable CPUs. Previously it looked for the `dotprod` flag; but this does not exist (https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/arch/arm64/kernel/cpuinfo.c#n50). The correct flag that specifies the dotprod capability is the `asimddp` flag.  fixes #4931  closes https://github.com/official-stockfish/Stockfish/pull/4991  No functional change,True,2,2024-01-01
peregrineshahin,Disservin,2024-01-17 17:12:16+00:00,Fix mated-in behaviour  This addresses the issue where Stockfish may output non-proven checkmate scores if the search is prematurely halted; either due to a time control or node limit; before it explores other possibilities where the checkmate score could have been delayed or refuted.  The fix also replaces staving off from proven mated scores in a multithread environment making use of the threads instead of a negative effect with multithreads (1t was better in proving mated in scores than more threads).  Issue reported on mate tracker repo by and this PR is co-authored with @robertnurnberg Special thanks to @AndyGrant for outlining that a fix is eventually possible.  Passed Adj off SMP STC: https://tests.stockfishchess.org/tests/view/65a125d779aa8af82b96c3eb LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 303256 W: 75823 L: 75892 D: 151541 Ptnml(0-2): 406; 35269; 80395; 35104; 454  Passed Adj off SMP LTC: https://tests.stockfishchess.org/tests/view/65a37add79aa8af82b96f0f7 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 56056 W: 13951 L: 13770 D: 28335 Ptnml(0-2): 11; 5910; 16002; 6097; 8  Passed all tests in matetrack without any better mate for opponent found in 1t and multithreads.  Fixed bugs in https://github.com/official-stockfish/Stockfish/pull/4976  closes https://github.com/official-stockfish/Stockfish/pull/4990  Bench: 1308279  Co-Authored-By: Robert N�rnberg <28635489+robertnurnberg@users.noreply.github.com>,True,2,2024-01-01
Disservin,Disservin,2024-01-17 17:06:20+00:00,Update installation guide links in CONTRIBUTING.md  Link to more user friendly installation guides; these are shorter and easier to follow.  closes https://github.com/official-stockfish/Stockfish/pull/4985  No functional change,True,2,2024-01-01
Disservin,Disservin,2024-01-17 17:05:00+00:00,Remove global TB variables from search.cpp  Follow up cleanup of #4968; removes the global variables from search and instead uses a dedicated tb config struct.  closes https://github.com/official-stockfish/Stockfish/pull/4982  No functional change,True,2,2024-01-01
mstembera,Disservin,2024-01-17 17:04:29+00:00,Remove some outdated SIMD functions  Since https://github.com/official-stockfish/Stockfish/pull/4391 the x2 SIMD functions no longer serve any useful purpose.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/659cf42579aa8af82b966d55 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 67392 W: 17222 L: 17037 D: 33133 Ptnml(0-2): 207; 7668; 17762; 7851; 208  closes https://github.com/official-stockfish/Stockfish/pull/4974  No functional change,True,2,2024-01-01
Disservin,Disservin,2024-01-14 09:46:13+00:00,Add ignoreRevsFile to CONTRIBUTING.md  closes https://github.com/official-stockfish/Stockfish/pull/4980  No functional change,True,6,2024-01-01
Disservin,Disservin,2024-01-14 09:46:13+00:00,Remove the dependency on a Worker from evaluate  Also remove dead code; `rootSimpleEval` is no longer used since the introduction of dual net. `iterBestValue` is also no longer used in evaluate and can be reduced to a local variable.  closes https://github.com/official-stockfish/Stockfish/pull/4979  No functional change,True,6,2024-01-01
Disservin,Disservin,2024-01-14 09:46:13+00:00,Fix UCI options  Fixes the type for 'Clear Hash' and uses MAX_MOVES for 'MultiPV' as we had before.  No functional change,True,6,2024-01-01
Disservin,Disservin,2024-01-13 23:30:06+00:00,Remove unused method  init() is no longer used; and was previously replaced by the clear function.  fixes https://github.com/official-stockfish/Stockfish/issues/4981  No functional change,True,5,2024-01-01
mstembera,Disservin,2024-01-13 18:40:53+00:00,Simplify bad quiets  The main difference is that instead of returning the first bad quiet as a good one we fall through. This is actually more correct and simpler to implement.  Non regression STC: https://tests.stockfishchess.org/tests/view/659bbb3479aa8af82b964ec7 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 150944 W: 38399 L: 38305 D: 74240 Ptnml(0-2): 485; 18042; 38298; 18188; 459  Non regression LTC: https://tests.stockfishchess.org/tests/view/659c6e6279aa8af82b9660eb LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 192060 W: 47871 L: 47823 D: 96366 Ptnml(0-2): 144; 21912; 51845; 22010; 119  The cutoff is now -8K instead of -7.5K. -7.5K failed. https://tests.stockfishchess.org/tests/view/659a1f4b79aa8af82b962a0e This was likely a false negative.  closes https://github.com/official-stockfish/Stockfish/pull/4975  Bench: 1308279,True,5,2024-01-01
FauziAkram,Disservin,2024-01-13 18:40:53+00:00,Remove threatenedByPawn term for queen threats  Passed STC: https://tests.stockfishchess.org/tests/view/659d614c79aa8af82b9677d0 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 151776 W: 38690 L: 38597 D: 74489 Ptnml(0-2): 522; 17841; 39015; 18042; 468  Passed LTC: https://tests.stockfishchess.org/tests/view/659d94d379aa8af82b967cb2 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 91908 W: 23075 L: 22924 D: 45909 Ptnml(0-2): 70; 10311; 25037; 10470; 66  closes https://github.com/official-stockfish/Stockfish/pull/4977  Bench: 1266493,True,5,2024-01-01
Disservin,Disservin,2024-01-13 18:40:53+00:00,Refactor global variables  This aims to remove some of the annoying global structure which Stockfish has.  Overall there is no major elo regression to be expected.  Non regression SMP STC (paused; early version): https://tests.stockfishchess.org/tests/view/65983d7979aa8af82b9608f1 LLR: 0.23 (-2.94;2.94) <-1.75;0.25> Total: 76232 W: 19035 L: 19096 D: 38101 Ptnml(0-2): 92; 8735; 20515; 8690; 84  Non regression STC (early version): https://tests.stockfishchess.org/tests/view/6595b3a479aa8af82b95da7f LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 185344 W: 47027 L: 46972 D: 91345 Ptnml(0-2): 571; 21285; 48943; 21264; 609  Non regression SMP STC: https://tests.stockfishchess.org/tests/view/65a0715c79aa8af82b96b7e4 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 142936 W: 35761 L: 35662 D: 71513 Ptnml(0-2): 209; 16400; 38135; 16531; 193  These global structures/variables add hidden dependencies and allow data to be mutable from where it shouldn't it be (i.e. options). They also prevent Stockfish from internal selfplay; which would be a nice thing to be able to do; i.e. instantiate two Stockfish instances and let them play against each other. It will also allow us to make Stockfish a library; which can be easier used on other platforms.  For consistency with the old search code; `thisThread` has been kept; even though it is not strictly necessary anymore. This the first major refactor of this kind (in recent time); and future changes are required; to achieve the previously described goals. This includes cleaning up the dependencies; transforming the network to be self contained and coming up with a plan to deal with proper tablebase memory management (see comments for more information on this).  The removal of these global structures has been discussed in parts with Vondele and Sopel.  closes https://github.com/official-stockfish/Stockfish/pull/4968  No functional change,True,5,2024-01-01
linrock,Disservin,2024-01-08 17:34:36+00:00,Update default main net to nn-baff1edbea57.nnue  Created by retraining the previous main net nn-b1e55edbea57.nnue with: - some of the same options as before: ranger21 optimizer; more WDL   skipping - adding T80 aug filter-v6; sep; and oct 2023 data to the previous best   dataset - increasing training loss for positions where predicted win rates were   higher than estimated match results from training data position scores  ```yaml experiment-name: 2560--S8-r21-more-wdl-skip-10p-more-loss-high-q-sk28  training-dataset:   # https://github.com/official-stockfish/Stockfish/pull/4782   - /data/S6-1ee1aba5ed.binpack   - /data/test80-aug2023-2tb7p.v6.min.binpack   - /data/test80-sep2023-2tb7p.binpack   - /data/test80-oct2023-2tb7p.binpack early-fen-skipping: 28  start-from-engine-test-net: True nnue-pytorch-branch: linrock/nnue-pytorch/r21-more-wdl-skip-10p-more-loss-high-q  num-epochs: 1000 lr: 4.375e-4 gamma: 0.995 start-lambda: 1.0 end-lambda: 0.7 ```  Training data can be found at: https://robotmoon.com/nnue-training-data/  Training loss was increased by 10% for positions where predicted win rates were higher than suggested by the win rate model based on the training data; by multiplying with: ((qf > pt) * 0.1 + 1). This was a variant of experiments from Sopel's NNUE training & experimentation log: https://docs.google.com/document/d/1gTlrr02qSNKiXNZ_SuO4-RjK4MXBiFlLE6jvNqqMkAY Experiment 302 - increase loss when prediction too high; vondele�s idea Experiment 309 - increase loss when prediction too high; normalize in a batch  Passed STC: https://tests.stockfishchess.org/tests/view/6597a21c79aa8af82b95fd5c LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 148320 W: 37960 L: 37475 D: 72885 Ptnml(0-2): 542; 17565; 37383; 18206; 464  Passed LTC: https://tests.stockfishchess.org/tests/view/659834a679aa8af82b960845 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 55188 W: 13955 L: 13592 D: 27641 Ptnml(0-2): 34; 6162; 14834; 6535; 29  closes https://github.com/official-stockfish/Stockfish/pull/4972  Bench: 1219824,True,0,2024-01-01
Disservin,Disservin,2024-01-08 17:33:38+00:00,Cleanup Evalfile handling  This cleans up the EvalFile handling after the merge of #4915; which has become a bit confusing on what it is actually doing.  closes https://github.com/official-stockfish/Stockfish/pull/4971  No functional change,True,0,2024-01-01
Disservin,Disservin,2024-01-07 20:41:52+00:00,Prefix abs with std::,True,6,2024-01-01
linrock,Disservin,2024-01-07 20:20:15+00:00,Update smallnet to nn-baff1ede1f90.nnue with wider eval range  Created by training an L1-128 net from scratch with a wider range of evals in the training data and wld-fen-skipping disabled during training. The differences in this training data compared to the first dual nnue PR are:  - removal of all positions with 3 pieces - when piece count >= 16; keep positions with simple eval above 750 - when piece count < 16; remove positions with simple eval above 3000  The asymmetric data filtering was meant to flatten the training data piece count distribution; which was previously heavily skewed towards positions with low piece counts.  Additionally; the simple eval range where the smallnet is used was widened to cover more positions previously evaluated by the big net and simple eval.  ```yaml experiment-name: 128--S1-hse-S7-v4-S3-v1-no-wld-skip  training-dataset:   - /data/hse/S3/leela96-filt-v2.min.high-simple-eval-1k.binpack   - /data/hse/S3/dfrc99-16tb7p-eval-filt-v2.min.high-simple-eval-1k.binpack   - /data/hse/S3/test80-apr2022-16tb7p.min.high-simple-eval-1k.binpack    - /data/hse/S7/test60-2020-2tb7p.v6-3072.high-simple-eval-v4.binpack   - /data/hse/S7/test60-novdec2021-12tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack    - /data/hse/S7/test77-nov2021-2tb7p.v6-3072.min.high-simple-eval-v4.binpack   - /data/hse/S7/test77-dec2021-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test77-jan2022-2tb7p.high-simple-eval-v4.binpack    - /data/hse/S7/test78-jantomay2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test78-juntosep2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack    - /data/hse/S7/test79-apr2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test79-may2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack    - /data/hse/S7/test80-may2022-16tb7p.high-simple-eval-v4.binpack   - /data/hse/S7/test80-jun2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test80-jul2022-16tb7p.v6-dd.min.high-simple-eval-v4.binpack   - /data/hse/S7/test80-aug2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test80-sep2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test80-oct2022-16tb7p.v6-dd.high-simple-eval-v4.binpack   - /data/hse/S7/test80-nov2022-16tb7p-v6-dd.min.high-simple-eval-v4.binpack    - /data/hse/S7/test80-jan2023-3of3-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test80-feb2023-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-v4.binpack   - /data/hse/S7/test80-mar2023-2tb7p.v6-sk16.min.high-simple-eval-v4.binpack   - /data/hse/S7/test80-apr2023-2tb7p-filter-v6-sk16.min.high-simple-eval-v4.binpack   - /data/hse/S7/test80-may2023-2tb7p.v6.min.high-simple-eval-v4.binpack   - /data/hse/S7/test80-jun2023-2tb7p.v6-3072.min.high-simple-eval-v4.binpack   - /data/hse/S7/test80-jul2023-2tb7p.v6-3072.min.high-simple-eval-v4.binpack   - /data/hse/S7/test80-aug2023-2tb7p.v6.min.high-simple-eval-v4.binpack   - /data/hse/S7/test80-sep2023-2tb7p.high-simple-eval-v4.binpack   - /data/hse/S7/test80-oct2023-2tb7p.high-simple-eval-v4.binpack  wld-fen-skipping: False start-from-engine-test-net: False  nnue-pytorch-branch: linrock/nnue-pytorch/L1-128 engine-test-branch: linrock/Stockfish/L1-128-nolazy engine-base-branch: linrock/Stockfish/L1-128  num-epochs: 500 start-lambda: 1.0 end-lambda: 1.0 ```  Experiment yaml configs converted to easy_train.sh commands with: https://github.com/linrock/nnue-tools/blob/4339954/yaml_easy_train.py  Binpacks interleaved at training time with: https://github.com/official-stockfish/nnue-pytorch/pull/259  FT weights permuted with 10k positions from fishpack32.binpack with: https://github.com/official-stockfish/nnue-pytorch/pull/254  Data filtered for high simple eval positions (v4) with: https://github.com/linrock/Stockfish/blob/b9c8440/src/tools/transform.cpp#L640-L675  Training data can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move of L1-128 smallnet (nnue-only eval) vs. L1-128 trained on standard S1 data: nn-epoch319.nnue : -241.7 +/- 3.2  Passed STC vs. 36db936: https://tests.stockfishchess.org/tests/view/6576b3484d789acf40aabbfe LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 21920 W: 5680 L: 5381 D: 10859 Ptnml(0-2): 82; 2488; 5520; 2789; 81  Passed LTC vs. DualNNUE #4915: https://tests.stockfishchess.org/tests/view/65775c034d789acf40aac7e3 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 147606 W: 36619 L: 36063 D: 74924 Ptnml(0-2): 98; 16591; 39891; 17103; 120  closes https://github.com/official-stockfish/Stockfish/pull/4919  Bench: 1438336,True,6,2024-01-01
linrock,Disservin,2024-01-07 20:15:52+00:00,Dual NNUE with L1-128 smallnet  Credit goes to @mstembera for: - writing the code enabling dual NNUE:   https://github.com/official-stockfish/Stockfish/pull/4898 - the idea of trying L1-128 trained exclusively on high simple eval   positions  The L1-128 smallnet is: - epoch 399 of a single-stage training from scratch - trained only on positions from filtered data with high material   difference   - defined by abs(simple_eval) > 1000  ```yaml experiment-name: 128--S1-only-hse-v2  training-dataset:   - /data/hse/S3/dfrc99-16tb7p-eval-filt-v2.min.high-simple-eval-1k.binpack   - /data/hse/S3/leela96-filt-v2.min.high-simple-eval-1k.binpack   - /data/hse/S3/test80-apr2022-16tb7p.min.high-simple-eval-1k.binpack    - /data/hse/S7/test60-2020-2tb7p.v6-3072.high-simple-eval-1k.binpack   - /data/hse/S7/test60-novdec2021-12tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack    - /data/hse/S7/test77-nov2021-2tb7p.v6-3072.min.high-simple-eval-1k.binpack   - /data/hse/S7/test77-dec2021-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test77-jan2022-2tb7p.high-simple-eval-1k.binpack    - /data/hse/S7/test78-jantomay2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test78-juntosep2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack    - /data/hse/S7/test79-apr2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test79-may2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack    # T80 2022   - /data/hse/S7/test80-may2022-16tb7p.high-simple-eval-1k.binpack   - /data/hse/S7/test80-jun2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test80-jul2022-16tb7p.v6-dd.min.high-simple-eval-1k.binpack   - /data/hse/S7/test80-aug2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test80-sep2022-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test80-oct2022-16tb7p.v6-dd.high-simple-eval-1k.binpack   - /data/hse/S7/test80-nov2022-16tb7p-v6-dd.min.high-simple-eval-1k.binpack    # T80 2023   - /data/hse/S7/test80-jan2023-3of3-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test80-feb2023-16tb7p-filter-v6-dd.min-mar2023.unmin.high-simple-eval-1k.binpack   - /data/hse/S7/test80-mar2023-2tb7p.v6-sk16.min.high-simple-eval-1k.binpack   - /data/hse/S7/test80-apr2023-2tb7p-filter-v6-sk16.min.high-simple-eval-1k.binpack   - /data/hse/S7/test80-may2023-2tb7p.v6.min.high-simple-eval-1k.binpack   - /data/hse/S7/test80-jun2023-2tb7p.v6-3072.min.high-simple-eval-1k.binpack   - /data/hse/S7/test80-jul2023-2tb7p.v6-3072.min.high-simple-eval-1k.binpack   - /data/hse/S7/test80-aug2023-2tb7p.v6.min.high-simple-eval-1k.binpack   - /data/hse/S7/test80-sep2023-2tb7p.high-simple-eval-1k.binpack   - /data/hse/S7/test80-oct2023-2tb7p.high-simple-eval-1k.binpack  start-from-engine-test-net: False  nnue-pytorch-branch: linrock/nnue-pytorch/L1-128 engine-test-branch: linrock/Stockfish/L1-128-nolazy engine-base-branch: linrock/Stockfish/L1-128  num-epochs: 500 lambda: 1.0 ```  Experiment yaml configs converted to easy_train.sh commands with: https://github.com/linrock/nnue-tools/blob/4339954/yaml_easy_train.py  Binpacks interleaved at training time with: https://github.com/official-stockfish/nnue-pytorch/pull/259  Data filtered for high simple eval positions with: https://github.com/linrock/nnue-data/blob/32d6a68/filter_high_simple_eval_plain.py https://github.com/linrock/Stockfish/blob/61dbfe/src/tools/transform.cpp#L626-L655  Training data can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move of L1-128 smallnet (nnue-only eval) vs. L1-128 trained on standard S1 data: nn-epoch399.nnue : -318.1 +/- 2.1  Passed STC: https://tests.stockfishchess.org/tests/view/6574cb9d95ea6ba1fcd49e3b LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 62432 W: 15875 L: 15521 D: 31036 Ptnml(0-2): 177; 7331; 15872; 7633; 203  Passed LTC: https://tests.stockfishchess.org/tests/view/6575da2d4d789acf40aaac6e LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 64830 W: 16118 L: 15738 D: 32974 Ptnml(0-2): 43; 7129; 17697; 7497; 49  closes https://github.com/official-stockfish/Stockfish/pulls  Bench: 1330050  Co-Authored-By: mstembera <5421953+mstembera@users.noreply.github.com>,True,6,2024-01-01
mstembera,Disservin,2024-01-07 12:41:50+00:00,Introduce BAD_QUIET movepicker stage  Split quiets into good and bad as we do with captures. When we find the first quiet move below a certain threshold that has been sorted we consider all subsequent quiets bad.  Inspired by @locutus2 idea to skip bad captures.  Passed STC: https://tests.stockfishchess.org/tests/view/6597759f79aa8af82b95fa17 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 138688 W: 35566 L: 35096 D: 68026 Ptnml(0-2): 476; 16367; 35183; 16847; 471  Passed LTC: https://tests.stockfishchess.org/tests/view/6598583c79aa8af82b960ad0 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 84108 W: 21468 L: 21048 D: 41592 Ptnml(0-2): 38; 9355; 22858; 9755; 48  closes https://github.com/official-stockfish/Stockfish/pull/4970  Bench: 1336907,True,6,2024-01-01
Disservin,Disservin,2024-01-07 12:38:55+00:00,Add .git-blame-ignore-revs  Add a `.git-blame-ignore-revs` file which can be used to skip specified commits when blaming; this is useful to ignore formatting commits; like clang-format #4790.  Github blame automatically supports this file format; as well as other third party tools. Git itself needs to be told about the file name to work; the following command will add it to the current git repo. `git config blame.ignoreRevsFile .git-blame-ignore-revs`; alternatively one has to specify it with every blame. `git blame --ignore-revs-file .git-blame-ignore-revs search.cpp`  Supported since git 2.23.  closes https://github.com/official-stockfish/Stockfish/pull/4969  No functional change,True,6,2024-01-01
Vizvezdenec,Disservin,2024-01-07 12:37:28+00:00,Tweak usage of correction history  Instead of using linear formula use quadratic one. Maximum impact of correction history is doubled this way; it breaks even with previous formula on half of maximum value.  Passed STC: https://tests.stockfishchess.org/tests/view/659591e579aa8af82b95d7e8 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 225216 W: 57616 L: 57019 D: 110581 Ptnml(0-2): 747; 26677; 57201; 27198; 785  Passed LTC: https://tests.stockfishchess.org/tests/view/6596ee0b79aa8af82b95f08a LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 73314 W: 18524 L: 18125 D: 36665 Ptnml(0-2): 41; 8159; 19875; 8524; 58  closes https://github.com/official-stockfish/Stockfish/pull/4967  Bench: 1464785,True,6,2024-01-01
miguel-l,Disservin,2024-01-07 12:37:12+00:00,Remove unneeded operator overload macros  Only Direction type is using two of the enable overload macros. Aside from this; only two of the overloads are even being used.  Therefore; we can just define the needed overloads and remove the macros.  closes https://github.com/official-stockfish/Stockfish/pull/4966  No functional change.,True,6,2024-01-01
FauziAkram,Disservin,2024-01-04 14:56:53+00:00,Remove redundant int cast  Remove a redundant int cast in the calculation of fwdOut. The variable OutputType is already defined as std::int32_t; which is an integer type; making the cast unnecessary.  closes https://github.com/official-stockfish/Stockfish/pull/4961  No functional change,True,3,2024-01-01
Disservin,Disservin,2024-01-04 14:54:23+00:00,Use type aliases instead of enums for Value types  The primary rationale behind this lies in the fact that enums were not originally designed to be employed in the manner we currently utilize them.  The Value enum was used like a type alias throughout the code and was often misused. Furthermore; changing the underlying size of the enum to int16_t broke everything; mostly because of the operator overloads for the Value enum; were causing data to be truncated. Since Value is now a type alias; the operator overloads are no longer required.  Passed Non-Regression STC: https://tests.stockfishchess.org/tests/view/6593b8bb79aa8af82b95b401 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 235296 W: 59919 L: 59917 D: 115460 Ptnml(0-2): 743; 27085; 62054; 26959; 807  closes https://github.com/official-stockfish/Stockfish/pull/4960  No functional change,True,3,2024-01-01
RainRat,Disservin,2024-01-04 14:51:56+00:00,Fix typo in tbprobe.cpp  closes https://github.com/official-stockfish/Stockfish/pull/4959  No functional change,True,3,2024-01-01
Disservin,Disservin,2024-01-04 14:51:04+00:00,Change the Move enum to a class  This changes the Move enum to a class; this way all move related functions can be moved into the class and be more self contained.  closes https://github.com/official-stockfish/Stockfish/pull/4958  No functional change,True,3,2024-01-01
Viren6,Disservin,2024-01-04 14:49:33+00:00,Modify ttPV reduction  This patch modifies ttPV reduction by reducing 1 more unless ttValue is above alpha.  Inspired from @pb00068 https://tests.stockfishchess.org/tests/view/658060796a3b4f6202215f1f  Passed STC: https://tests.stockfishchess.org/tests/view/6591867679aa8af82b958328 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 37856 W: 9727 L: 9407 D: 18722 Ptnml(0-2): 99; 4444; 9568; 4672; 145  Passed LTC: https://tests.stockfishchess.org/tests/view/6591d9b679aa8af82b958a6c LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 128256 W: 32152 L: 31639 D: 64465 Ptnml(0-2): 64; 14364; 34772; 14851; 77  closes https://github.com/official-stockfish/Stockfish/pull/4957  Bench: 1176235,True,3,2024-01-01
FauziAkram,Disservin,2024-01-04 14:47:37+00:00,Simplification of partial_insertion_sort formula.  Passed STC: https://tests.stockfishchess.org/tests/view/6590110879aa8af82b9562e9 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 134880 W: 34468 L: 34355 D: 66057 Ptnml(0-2): 476; 16060; 34220; 16243; 441  Passed LTC: https://tests.stockfishchess.org/tests/view/659156ca79aa8af82b957f07 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 60780 W: 15179 L: 14996 D: 30605 Ptnml(0-2): 27; 6847; 16464; 7020; 32  closes https://github.com/official-stockfish/Stockfish/pull/4955  Bench: 1338331,True,3,2024-01-01
Disservin,Disservin,2024-01-04 14:47:10+00:00,Update copyright year  closes https://github.com/official-stockfish/Stockfish/pull/4954  No functional change,True,3,2024-01-01
Disservin,Disservin,2024-01-04 14:45:33+00:00,Silence security alert warning about possible infinite loop  As some have noticed; a security alert has been complaining about a for loop in our TB code for quite some now. Though it was never a real issue; so not of high importance.  A few lines earlier the symlen vector is resized `d->symlen.resize(number<uint16_t; LittleEndian>(data));` while this code seems odd at first; it resizes the array to at most (2 << 16) - 1 elements; basically making the infinite loop issue impossible to occur.  closes https://github.com/official-stockfish/Stockfish/pull/4953  No functional change,True,3,2024-01-01
bftjoe,Disservin,2024-01-04 14:45:03+00:00,Lower MultiPV max to MAX_MOVES  Link max value of MultiPV to that of MAX_MOVES which is 256  closes https://github.com/official-stockfish/Stockfish/pull/4951  No functional change,True,3,2024-01-01
Disservin,Disservin,2024-01-01 01:31:25+00:00,Fix formatting in search.cpp  fixes the formatting for 1fe562fdf32c153f82929660197f8b97469f76b4,True,0,2024-01-01
locutus2,Disservin,2023-12-31 19:09:09+00:00,Tweak static eval history update  Modify the applied static eval bonus for main and pawn history with different factors for positive and negative values.  Passed STC: https://tests.stockfishchess.org/tests/view/659132e179aa8af82b957bb0 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 12512 W: 3308 L: 3027 D: 6177 Ptnml(0-2): 32; 1372; 3189; 1609; 54  Passed LTC: https://tests.stockfishchess.org/tests/view/65913e3d79aa8af82b957cd2 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 35946 W: 9128 L: 8809 D: 18009 Ptnml(0-2): 19; 3879; 9862; 4190; 23  closes https://github.com/official-stockfish/Stockfish/pull/4952  Bench: 1392883,True,6,2023-12-01
Vizvezdenec,Disservin,2023-12-31 19:00:06+00:00,Introduce static evaluation correction history  Idea from Caissa (https://github.com/Witek902/Caissa) chess engine.  With given pawn structure collect data with how often search result and by how much it was better / worse than static evalution of position and use it to adjust static evaluation of positions with given pawn structure. Details:  1. excludes positions with fail highs and moves producing it being a capture; 2. update value is function of not only difference between best value and static    evaluation but also is multiplied by linear function of depth; 3. maximum update value is maximum value of correction history divided by 2; 4. correction history itself is divided by 32 when applied so maximum value of    static evaluation adjustment is 32 internal units.  Passed STC: https://tests.stockfishchess.org/tests/view/658fc7b679aa8af82b955cac LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 128672 W: 32757 L: 32299 D: 63616 Ptnml(0-2): 441; 15241; 32543; 15641; 470  Passed LTC: https://tests.stockfishchess.org/tests/view/65903f6979aa8af82b9566f1 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 97422 W: 24626 L: 24178 D: 48618 Ptnml(0-2): 41; 10837; 26527; 11245; 61  closes https://github.com/official-stockfish/Stockfish/pull/4950  Bench: 1157852,True,6,2023-12-01
FauziAkram,Disservin,2023-12-31 18:58:10+00:00,Mark square_bb() as constexpr  closes https://github.com/official-stockfish/Stockfish/pull/4949  No functional change,True,6,2023-12-01
FauziAkram,Disservin,2023-12-31 18:57:34+00:00,Simplify the improving flag calculation  Passed STC: https://tests.stockfishchess.org/tests/view/658ec29979aa8af82b9547f6 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 93408 W: 23747 L: 23587 D: 46074 Ptnml(0-2): 340; 11178; 23527; 11300; 359  Passed LTC: https://tests.stockfishchess.org/tests/view/658f73e479aa8af82b9555b6 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 64026 W: 15984 L: 15806 D: 32236 Ptnml(0-2): 31; 7113; 17552; 7281; 36  closes https://github.com/official-stockfish/Stockfish/pull/4948  Bench: 1143749,True,6,2023-12-01
FauziAkram,Disservin,2023-12-31 18:54:27+00:00,Cleanup comments  Tests used to derive some Elo worth comments: https://tests.stockfishchess.org/tests/view/656a7f4e136acbc573555a31 https://tests.stockfishchess.org/tests/view/6585fb455457644dc984620f  closes https://github.com/official-stockfish/Stockfish/pull/4945  No functional change,True,6,2023-12-01
topse,Disservin,2023-12-31 18:51:04+00:00,"Update Makefile for android x86-64 builds  For developing an Android GUI it can be helpful to use the Emulator on Windows. Therefor an android_x86-64 library of Stockfish is needed. It would be nice to compile it ""out-of-the-box"".  This change is originally suggested by Craftyawesome  closes https://github.com/official-stockfish/Stockfish/pull/4927  No functional change",True,6,2023-12-01
peregrineshahin,Disservin,2023-12-30 11:19:48+00:00,Fix scores from reverse futility pruning  This fixes futility pruning return values after recent tweaks; `eval` is guaranteed to be less than the mate-in range but it can be as low value such that the average between eval and beta can still fall in the mated-in range when beta is as low in mated range. i.e. (eval + beta) / 2 being at mated-range which can break mates.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/658f3eed79aa8af82b955139 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 117408 W: 29891 L: 29761 D: 57756 Ptnml(0-2): 386; 13355; 31120; 13429; 414  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/658f8b7a79aa8af82b9557bd LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 60240 W: 14962 L: 14786 D: 30492 Ptnml(0-2): 22; 6257; 17390; 6425; 26  changes signature at higher depth e.g. `128 1 15`  closes https://github.com/official-stockfish/Stockfish/pull/4944  Bench: 1304666,True,5,2023-12-01
linrock,Disservin,2023-12-30 10:08:03+00:00,Update default net to nn-b1e55edbea57.nnue  Created by retraining the master big net `nn-0000000000a0.nnue` on the same dataset with the ranger21 optimizer and more WDL skipping at training time.  More WDL skipping is meant to increase lambda accuracy and train on fewer misevaluated positions where position scores are unlikely to correlate with game outcomes. Inspired by: - repeated reports in discord #events-discuss about SF misplaying due to wrong endgame   evals; possibly due to Leela's endgame weaknesses reflected in training data - an attempt to reduce the skewed dataset piece count distribution where there   are much more positions with less than 16 pieces; since the target piece count   distribution in the trainer is symmetric around 16  The faster convergence seen with ranger21 is meant to: - prune experiment ideas more quickly since fewer epochs are needed to reach elo maxima - research faster potential trainings by shortening each run  ```yaml experiment-name: 2560-S7-Re-514G-ranger21-more-wdl-skip training-dataset: /data/S6-514G.binpack early-fen-skipping: 28  start-from-engine-test-net: True nnue-pytorch-branch: linrock/nnue-pytorch/r21-more-wdl-skip  num-epochs: 1200 lr: 4.375e-4 gamma: 0.995 start-lambda: 1.0 end-lambda: 0.7 ```  Experiment yaml configs converted to easy_train.sh commands with: https://github.com/linrock/nnue-tools/blob/4339954/yaml_easy_train.py  Implementations based off of Sopel's NNUE training & experimentation log: https://docs.google.com/document/d/1gTlrr02qSNKiXNZ_SuO4-RjK4MXBiFlLE6jvNqqMkAY - Experiment 336 - ranger21 https://github.com/Sopel97/nnue-pytorch/tree/experiment_336 - Experiment 351 - more WDL skipping  The version of the ranger21 optimizer used is: https://github.com/lessw2020/Ranger21/blob/b507df6/ranger21/ranger21.py  The dataset is the exact same as in: https://github.com/official-stockfish/Stockfish/pull/4782  Local elo at 25k nodes per move: nn-epoch619.nnue : 6.2 +/- 4.2  Passed STC: https://tests.stockfishchess.org/tests/view/658a029779aa8af82b94fbe6 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 46528 W: 11985 L: 11650 D: 22893 Ptnml(0-2): 154; 5489; 11688; 5734; 199  Passed LTC: https://tests.stockfishchess.org/tests/view/658a448979aa8af82b95010f LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 265326 W: 66378 L: 65574 D: 133374 Ptnml(0-2): 153; 30175; 71254; 30877; 204  This was additionally tested with the latest DualNNUE and passed SPRTs:  Passed STC vs. https://github.com/official-stockfish/Stockfish/pull/4919 https://tests.stockfishchess.org/tests/view/658bcd5c79aa8af82b951846 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 296128 W: 76273 L: 75554 D: 144301 Ptnml(0-2): 1223; 35768; 73617; 35979; 1477  Passed LTC vs. https://github.com/official-stockfish/Stockfish/pull/4919 https://tests.stockfishchess.org/tests/view/658c988d79aa8af82b95240f LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 75618 W: 19085 L: 18680 D: 37853 Ptnml(0-2): 45; 8420; 20497; 8779; 68  closes https://github.com/official-stockfish/Stockfish/pull/4942  Bench: 1304666,True,5,2023-12-01
FauziAkram,Disservin,2023-12-30 10:05:19+00:00,Refactor bestvalue adjustment in qsearch  closes https://github.com/official-stockfish/Stockfish/pull/4935  No functional change,True,5,2023-12-01
Vizvezdenec,Disservin,2023-12-30 10:01:32+00:00,Adjust value returned after TT cutoff  Instead of returning value from TT in case of a fail high return mix between it and beta.  Passed STC: https://tests.stockfishchess.org/tests/view/658465395457644dc98446c7 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 220704 W: 56404 L: 55811 D: 108489 Ptnml(0-2): 750; 26214; 55921; 26627; 840  Passed LTC: https://tests.stockfishchess.org/tests/view/6585c3f55457644dc9845db9 LLR: 2.97 (-2.94;2.94) <0.50;2.50> Total: 124980 W: 31169 L: 30658 D: 63153 Ptnml(0-2): 57; 14147; 33603; 14594; 89  closes https://github.com/official-stockfish/Stockfish/pull/4934  Bench: 1191093,True,5,2023-12-01
peregrineshahin,Disservin,2023-12-30 09:57:48+00:00,Fix wrong mate/tb scores from probCut  This fixes returning wrong mated-in scores; or losing a proven mate-in score from probCut after recent tweaks. The issue reported by @cj5716 on discord.  Passed non-reg STC: https://tests.stockfishchess.org/tests/view/6583c36b5457644dc9843afe LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 295936 W: 75011 L: 75075 D: 145850 Ptnml(0-2): 978; 33947; 78146; 33955; 942  Passed non-reg LTC: https://tests.stockfishchess.org/tests/view/658513075457644dc98451cd LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 55932 W: 13970 L: 13786 D: 28176 Ptnml(0-2): 33; 5933; 15837; 6143; 20  closes https://github.com/official-stockfish/Stockfish/pull/4933  Bench: 1308739,True,5,2023-12-01
FauziAkram,Disservin,2023-12-22 10:51:08+00:00,Tweak quiet move bonus  Improving quiet move bonus by replacing bestvalue and alpha comparison; with checking the statScore of the previous search step instead.  Inspired by @locutus2  Passed STC: https://tests.stockfishchess.org/tests/view/657f22fb893104ee25b614e8 LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 51296 W: 13121 L: 12774 D: 25401 Ptnml(0-2): 225; 5986; 12868; 6355; 214  Passed LTC: https://tests.stockfishchess.org/tests/view/658024a2893104ee25b62587 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 82758 W: 20606 L: 20189 D: 41963 Ptnml(0-2): 51; 9149; 22555; 9580; 44  closes https://github.com/official-stockfish/Stockfish/pull/4930  Bench: 1312822,True,4,2023-12-01
Disservin,Disservin,2023-12-22 10:48:43+00:00,"Revert ""Adjust stand pat in qsearch on pv nodes""  This reverts commit d9ec82e7438716671168d78eee26fae327249e8c.  Bench: 1249544",True,4,2023-12-01
Vizvezdenec,Disservin,2023-12-19 17:22:10+00:00,Adjust return value in qsearch after fail high  Instead of returning strict fail soft fail high return value between value from search and beta (somewhat by analogy to futility pruning and probcut).  This seems to be somewhat depth sensitive heuristic which performed much worse at LTC while performing much better at STC if it is more aggressive; passed version is the least aggressive one.  Passed STC: https://tests.stockfishchess.org/tests/view/657b06414d789acf40ab1475 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 212352 W: 53900 L: 53315 D: 105137 Ptnml(0-2): 809; 25236; 53520; 25783; 828  Passed LTC: https://tests.stockfishchess.org/tests/view/657ce36f393ac02e79120a7c LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 319362 W: 79541 L: 78630 D: 161191 Ptnml(0-2): 202; 35839; 86709; 36708; 223  closes https://github.com/official-stockfish/Stockfish/pull/4928  Bench: 974739,True,1,2023-12-01
FauziAkram,Disservin,2023-12-19 17:22:10+00:00,Use std::abs over abs  closes https://github.com/official-stockfish/Stockfish/pull/4926 closes https://github.com/official-stockfish/Stockfish/pull/4909  No functional change  Co-Authored-By: fffelix-huang <72808219+fffelix-huang@users.noreply.github.com>,True,1,2023-12-01
FauziAkram,Disservin,2023-12-19 17:22:10+00:00,Improvement of Time Management Parameters  Passed STC: https://tests.stockfishchess.org/tests/view/6579c5574d789acf40aaf914 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 44672 W: 11354 L: 11030 D: 22288 Ptnml(0-2): 140; 5033; 11685; 5319; 159  Passed LTC: https://tests.stockfishchess.org/tests/view/657ad7f44d789acf40ab105e LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 40932 W: 10275 L: 9950 D: 20707 Ptnml(0-2): 21; 4316; 11473; 4629; 27  Passed non-regression Sudden death 10+0: https://tests.stockfishchess.org/tests/view/657b9b9e393ac02e7911f1a8 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 21384 W: 5171 L: 4925 D: 11288 Ptnml(0-2): 112; 2420; 5409; 2612; 139  closes https://github.com/official-stockfish/Stockfish/pull/4923  No functional change,True,1,2023-12-01
Vizvezdenec,Disservin,2023-12-19 17:22:10+00:00,Adjust stand pat in qsearch on pv nodes  Instead of immediately returning a fail high do this only at non-pv nodes; for pv nodes adjust bestValue to value between alpha and beta and continue searching. Idea is to do it the same way as it's done in search where we don't return positive beta cutoffs after ttHits / zero window search at PvNodes and instead fully search lines.  Passed STC: https://tests.stockfishchess.org/tests/view/65739b0af09ce1261f122f33 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 189216 W: 48142 L: 47598 D: 93476 Ptnml(0-2): 584; 22463; 48051; 22845; 665  Passed LTC: https://tests.stockfishchess.org/tests/view/657701214d789acf40aac194 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 82506 W: 20689 L: 20269 D: 41548 Ptnml(0-2): 56; 9236; 22268; 9618; 75  Two issues had to be resolved:     - in rare cases it set alpha to the same value as beta and thus broke some asserts;     - messed up with returning tb win values.        Fix passed non-regression LTC vs this patch:       https://tests.stockfishchess.org/tests/view/6578113b4d789acf40aad544       LLR: 2.96 (-2.94;2.94) <-1.75;0.25>       Total: 277308 W: 68839 L: 68880 D: 139589       Ptnml(0-2): 167; 31580; 75212; 31517; 178  closes https://github.com/official-stockfish/Stockfish/pull/4922  Bench: 1069503  Co-Authored-By: Muzhen Gaming <61100393+XInTheDark@users.noreply.github.com> Co-Authored-By: Shahin M. Shahin <41402573+peregrineshahin@users.noreply.github.com> Co-Authored-By: fffelix-huang <72808219+fffelix-huang@users.noreply.github.com>,True,1,2023-12-01
XInTheDark,Disservin,2023-12-14 17:50:51+00:00,"Remove UCI_AnalyseMode Option  Simplify away the useless option; as documented: ""An option handled by your GUI. This currently doesn't do anything.""  The option was originally added with the introduction of contempt (https://github.com/official-stockfish/Stockfish/commit/e9aeaad05266ca557a9496b5a17b4c5f82f0e946); but it is now no longer used.  closes https://github.com/official-stockfish/Stockfish/pull/4918  No functional change",True,3,2023-12-01
FauziAkram,Disservin,2023-12-14 17:44:46+00:00,Remove SlowMover Option  The SlowMover option allows users to modify the timeLeft variant; impacting the engine's time management. However; this feature; while theoretically flexible; doesn't offer substantial benefits. Instead; it introduces the risk of non-experienced users altering values without a clear understanding of the effects; potentially leading to a weaker engine.  The vast majority of SF users don't use it anyway; and based on tests conducted by fauzi several months ago suggest that changing it would only lose Elo.  Examples: https://tests.stockfishchess.org/tests/view/651f309bac57711436726bba https://tests.stockfishchess.org/tests/view/651fea29ac57711436727d85 https://tests.stockfishchess.org/tests/view/65257c343125598fc7eb68a1 https://tests.stockfishchess.org/tests/view/652296c83125598fc7eb2ad7 Tune: https://tests.stockfishchess.org/tests/view/652a70313125598fc7ebd706 (keeping the value at 100; zz2)  closes https://github.com/official-stockfish/Stockfish/pull/4917  No functional change,True,3,2023-12-01
Disservin,Disservin,2023-12-14 17:43:02+00:00,Fix action deprecation warning for dev-drprasad  closes https://github.com/official-stockfish/Stockfish/pull/4914  No functional change,True,3,2023-12-01
KatyushaScarlet,Disservin,2023-12-14 17:41:53+00:00,Add loongarch64 support  Adding support for LoongArch64 architecture. Tested on Loongson 3A6000 EVB Board. Since Loongson's SIMD extended instruction set ([LSX](https://gcc.gnu.org/onlinedocs/gcc/LoongArch-SX-Vector-Intrinsics.html); [LASX](https://gcc.gnu.org/onlinedocs/gcc/LoongArch-ASX-Vector-Intrinsics.html)) is already supported by GCC; more optimizations are being developed.  Here's the benchmark result for Loongson 3A6000 (4c8t; 2.5Ghz) without SIMD optimizations. ``` Total time (ms) : 17903 Nodes searched  : 1244386 Nodes/second    : 69507 ```  closes https://github.com/official-stockfish/Stockfish/pull/4913  No functional change,True,3,2023-12-01
peregrineshahin,Disservin,2023-12-14 17:36:45+00:00,Track seldepth in qsearch too  Sometimes if we count the reported PV length; it turns out to be longer than the selective depth reported. This fixes this behavior by applying the selective depth to qsearch since we do report PVs from it as well.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/656cf5b66980e15f69c7499d LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 223648 W: 56372 L: 56356 D: 110920 Ptnml(0-2): 710; 25580; 59231; 25590; 713  closes https://github.com/official-stockfish/Stockfish/pull/4903  No functional change,True,3,2023-12-01
peregrineshahin,Disservin,2023-12-14 17:35:38+00:00,Fix TB score output in UCI without using TB  This is a rewrite of the fix introduced for https://github.com/official-stockfish/Stockfish/issues/4413 in https://github.com/official-stockfish/Stockfish/pull/4591 by @windfishballad it targets only the relevant part of this issue that returns TB scores (CP 20000) without using TB due to the downgrading of potentially false mates from the TT to an optimal TB score.  the difference is that it is a much clearer code that introduces a separate TB_VALUE constant to account for a correct distance from the TB_VALUE with MAX_PLY.  the originally posted position in the issue does not trigger the problem anymore; so here is a new position to test: ``` position fen 3k4/8/8/8/8/8/3BN3/3K4 w - - 0 1 go infinite ```  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/65578994136acbc57353b258 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 119264 W: 29993 L: 29863 D: 59408 Ptnml(0-2): 372; 13692; 31379; 13812; 377  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/6558323f136acbc57353c1ca LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 237834 W: 58791 L: 58792 D: 120251 Ptnml(0-2): 193; 26200; 66111; 26241; 172  fixes https://github.com/official-stockfish/Stockfish/issues/4413 closes https://github.com/official-stockfish/Stockfish/pull/4591 closes https://github.com/official-stockfish/Stockfish/pull/4882  Bench: 1305821,True,3,2023-12-01
XInTheDark,Disservin,2023-12-10 22:23:28+00:00,VLTC Search parameters tune  The SPSA tuning was done for 44k games at 120+1.2. https://tests.stockfishchess.org/tests/view/656ee2a76980e15f69c7767f.  Note that the tune was originally done in combination with the recent dual NNUE idea (see #4910).  VLTC: https://tests.stockfishchess.org/tests/view/65731ccbf09ce1261f12246e LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 52806 W: 13069 L: 12760 D: 26977 Ptnml(0-2): 19; 5498; 15056; 5815; 15  VLTC SMP: https://tests.stockfishchess.org/tests/view/65740ffaf09ce1261f1239ba LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 27630 W: 6934 L: 6651 D: 14045 Ptnml(0-2): 1; 2643; 8243; 2928; 0  Estimated close to neutral at LTC: https://tests.stockfishchess.org/tests/view/6575485a8ec68176cf7d9423 Elo: -0.59 � 1.8 (95%) LOS: 26.6% Total: 32060 W: 7859 L: 7913 D: 16288 Ptnml(0-2): 20; 3679; 8676; 3645; 10 nElo: -1.21 � 3.8 (95%) PairsRatio: 0.99  closes https://github.com/official-stockfish/Stockfish/pull/4912  Bench: 1283323,True,6,2023-12-01
ppigazzini,Disservin,2023-12-10 22:18:21+00:00,Simplify the code to get the native flags  closes https://github.com/official-stockfish/Stockfish/pull/4908  No functional change,True,6,2023-12-01
TarasVuk,Disservin,2023-12-10 22:17:14+00:00,Remove moveMalus  Passed STC: https://tests.stockfishchess.org/tests/view/656e0bb86980e15f69c763fa LLR: 3.15 (-2.94;2.94) <-1.75;0.25> Total: 123008 W: 30973 L: 30831 D: 61204 Ptnml(0-2): 368; 14032; 32568; 14162; 374  closes https://github.com/official-stockfish/Stockfish/pull/4905  No functional change,True,6,2023-12-01
Disservin,Disservin,2023-12-10 22:16:12+00:00,"Revert ""Temporarily disable CI include checks""  This reverts commit 8f65953583a2abc34041b087120a378e22d0509d.  closes https://github.com/official-stockfish/Stockfish/pull/4904  No functional change",True,6,2023-12-01
FauziAkram,Disservin,2023-12-04 10:33:58+00:00,Remove cutNode condition  cutNode condition seems to be irrelevant.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 24224 W: 6206 L: 5970 D: 12048 Ptnml(0-2): 69; 2818; 6122; 3014; 89 https://tests.stockfishchess.org/tests/view/65686910136acbc5735529ec  Passed LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 236538 W: 58624 L: 58622 D: 119292 Ptnml(0-2): 136; 26955; 64091; 26945; 142 https://tests.stockfishchess.org/tests/view/6568925a136acbc573552d8f  closes https://github.com/official-stockfish/Stockfish/pull/4901  Bench: 1244386,True,0,2023-12-01
ppigazzini,Disservin,2023-12-04 10:27:28+00:00,Update GitHub workflows  - Use the latest version of the actions - Use commit hash for actions from little providers - Update Intel SDE to 9.27  closes https://github.com/official-stockfish/Stockfish/pull/4900  No functional change,True,0,2023-12-01
UniQP,Disservin,2023-12-04 10:26:09+00:00,Temporarily disable CI include checks  The include checks currently fail because of broken LLVM nightly packages: https://github.com/llvm/llvm-project/issues/73402.  closes https://github.com/official-stockfish/Stockfish/pull/4899  No functional change,True,0,2023-12-01
lonfom169,Disservin,2023-12-02 10:46:44+00:00,Tweak return value in futility pruning  In futility pruning; return the average between eval and beta.  Passed STC: https://tests.stockfishchess.org/tests/view/65680bb6136acbc5735521d7 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 15200 W: 3926 L: 3642 D: 7632 Ptnml(0-2): 36; 1699; 3867; 1941; 57  Passed LTC: https://tests.stockfishchess.org/tests/view/656817fc136acbc573552304 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 200376 W: 49700 L: 49036 D: 101640 Ptnml(0-2): 110; 22584; 54137; 23246; 111  closes https://github.com/official-stockfish/Stockfish/pull/4897  Bench: 1403703,False,5,2023-12-01
cj5716,Disservin,2023-12-02 10:45:38+00:00,Remove recaptures stage in qsearch  Simplify an old commit https://github.com/official-stockfish/Stockfish/commit/72760c05c64d1fb2bb71c2ac54acfbeecf513b87.  Search is not stuck on the test position given r1n1n1b1/1P1P1P1P/1N1N1N2/2RnQrRq/2pKp3/3BNQbQ/k7/4Bq2 w - - 0 1  Passed STC: https://tests.stockfishchess.org/tests/view/6567050d136acbc573550919 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 236160 W: 59475 L: 59475 D: 117210 Ptnml(0-2): 841; 28266; 59816; 28366; 791  Passed LTC: https://tests.stockfishchess.org/tests/view/6567d133136acbc573551c78 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 201690 W: 49630 L: 49593 D: 102467 Ptnml(0-2): 128; 23214; 54122; 23255; 126  closes https://github.com/official-stockfish/Stockfish/pull/4896  Bench: 1604361,True,5,2023-12-01
TarasVuk,Disservin,2023-12-02 10:41:31+00:00,Skip LMR for 2nd move at the root only  This patch reverts commit by Vizvezdenec: https://github.com/official-stockfish/Stockfish/commit/27139dedac14af400f5b18e2ab50aca3f8cf0e33  Passed STC: https://tests.stockfishchess.org/tests/view/65660b4a136acbc57354f13d LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 301952 W: 76271 L: 76344 D: 149337 Ptnml(0-2): 1053; 36293; 76348; 36238; 1044  Passed LTC: https://tests.stockfishchess.org/tests/view/656738ab136acbc573550e39 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 25050 W: 6283 L: 6063 D: 12704 Ptnml(0-2): 10; 2756; 6775; 2972; 12  closes https://github.com/official-stockfish/Stockfish/pull/4895  Bench: 1722961,True,5,2023-12-01
FauziAkram,Disservin,2023-12-02 10:40:36+00:00,Simplify quietMoveMalus malus  Use a simple depth instead of depth + 1 in the quietMoveMalus formula.  Passed STC: https://tests.stockfishchess.org/tests/view/65636bf0136acbc57354b662 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 105248 W: 26680 L: 26532 D: 52036 Ptnml(0-2): 409; 12590; 26481; 12732; 412  Passed LTC: https://tests.stockfishchess.org/tests/view/6563b5db136acbc57354bcab LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 204204 W: 50200 L: 50166 D: 103838 Ptnml(0-2): 123; 23331; 55145; 23395; 108  closes https://github.com/official-stockfish/Stockfish/pull/4893  Bench: 1717495,True,5,2023-12-01
cj5716,Disservin,2023-12-02 10:38:18+00:00,Simplify promotion move generation  closes https://github.com/official-stockfish/Stockfish/pull/4892  No functional change,True,5,2023-12-01
FauziAkram,Disservin,2023-12-02 10:35:28+00:00,Simplify doDeeperSearch  Removing dependence on d simplifies the doDeeperSearch formula and eliminates a variable that is not necessary in this context.  Passed STC: https://tests.stockfishchess.org/tests/view/65647980136acbc57354c9f6 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 37440 W: 9558 L: 9334 D: 18548 Ptnml(0-2): 127; 4439; 9375; 4641; 138  Passed LTC: https://tests.stockfishchess.org/tests/view/6564c3f0136acbc57354d126 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 113946 W: 27993 L: 27864 D: 58089 Ptnml(0-2): 67; 12975; 30783; 13058; 90  closes https://github.com/official-stockfish/Stockfish/pull/4888  Bench: 1427733,True,5,2023-12-01
XInTheDark,Disservin,2023-12-02 10:30:47+00:00,Simplify move history reduction  Recent VLTC search tuning has suggested that the depth limit can be increased by a lot. This patch simplifies away the depth-based bonus from statScore reduction; making the divisor a constant.  Passed STC: https://tests.stockfishchess.org/tests/view/656201f5136acbc573549791 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 91520 W: 23130 L: 22967 D: 45423 Ptnml(0-2): 282; 10947; 23141; 11106; 284  Passed LTC: https://tests.stockfishchess.org/tests/view/6562b43a136acbc57354a581 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 352902 W: 86796 L: 86917 D: 179189 Ptnml(0-2): 190; 40227; 95741; 40100; 193  closes https://github.com/official-stockfish/Stockfish/pull/4886  Bench: 1297179,True,5,2023-12-01
locutus2,Disservin,2023-12-02 10:23:15+00:00,Simplify history update.  Removal of the slowdown factor from the history update formula with corresponding adjustment of the stat bonus used in the search.  Passed STC: https://tests.stockfishchess.org/tests/view/655e1079136acbc573544744 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 128096 W: 32355 L: 32235 D: 63506 Ptnml(0-2): 466; 15187; 32573; 15405; 417  Passed LTC: https://tests.stockfishchess.org/tests/view/655f4e60136acbc573546266 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 50652 W: 12653 L: 12459 D: 25540 Ptnml(0-2): 28; 5666; 13751; 5846; 35  closes https://github.com/official-stockfish/Stockfish/pull/4883  Bench: 1303857,True,5,2023-12-01
FauziAkram,Disservin,2023-11-20 18:10:38+00:00,Reformat some comments  Tests used to derive some Elo worth comments:  https://tests.stockfishchess.org/tests/view/653cf6b7cc309ae83956263a https://tests.stockfishchess.org/tests/view/655250b7136acbc573534711 https://tests.stockfishchess.org/tests/view/65525767136acbc5735347b9 https://tests.stockfishchess.org/tests/view/65525aa1136acbc573534801  closes https://github.com/official-stockfish/Stockfish/pull/4879  No functional change,True,0,2023-11-01
FauziAkram,Disservin,2023-11-20 18:00:47+00:00,Remove doEvenDeeperSearch  Passed STC: LLR: 2.98 (-2.94;2.94) <-1.75;0.25> Total: 51040 W: 13014 L: 12804 D: 25222 Ptnml(0-2): 166; 6032; 12917; 6236; 169 https://tests.stockfishchess.org/tests/view/65525aa1136acbc573534801  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 165168 W: 40863 L: 40789 D: 83516 Ptnml(0-2): 73; 18783; 44792; 18869; 67 https://tests.stockfishchess.org/tests/view/65535af5136acbc573535c84  closes https://github.com/official-stockfish/Stockfish/pull/4880  Bench: 1477007,True,0,2023-11-01
FauziAkram,Disservin,2023-11-20 17:59:01+00:00,Change depth - 1 to newDepth  Replacing 'depth - 1' with 'newDepth' in the singularbeta formula utilizes existing variables more succinctly.  closes https://github.com/official-stockfish/Stockfish/pull/4876  No functional change,True,0,2023-11-01
locutus2,vondele,2023-11-16 08:10:20+00:00,Fix undefined behavior in search.  We use following line to clamp the search depth in some range: Depth d = std::clamp(newDepth - r; 1; newDepth + 1);  Through negative extension its possible that the maximum value becomes smaller than the minimum value but then the behavior is undefined (see https://en.cppreference.com/w/cpp/algorithm/clamp). So replace this line with a safe implementation.  Remark: We have in recent master already one line where up to 3 negative extensions are possible which could trigger this undefined behavior but this can only be happen for completed depth > 24 so its not discovered by our default bench. Recent negative extension tests by @fauzi shows then this undefined behavior with wrong bench numbers.  closes https://github.com/official-stockfish/Stockfish/pull/4877  No functional change,True,3,2023-11-01
vondele,vondele,2023-11-16 08:01:57+00:00,CI updates  - updates the SDE action to v2.2 - removes the linux x86-32 builds; which were almost unused;   and the build process under SDE started failing recently;   possibly related to glibc update (The futex facility returned an unexpected error code.)  closes https://github.com/official-stockfish/Stockfish/pull/4875  No functional change,True,3,2023-11-01
vondele,Disservin,2023-11-15 18:35:14+00:00,Symmetrize optimism  Removes some additional parameters; making the term more logical at the same time.  Passed STC: https://tests.stockfishchess.org/tests/view/6550e896136acbc5735328ed LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 271104 W: 68441 L: 68480 D: 134183 Ptnml(0-2): 827; 32590; 68816; 32433; 886  Passed LTC: https://tests.stockfishchess.org/tests/view/65523858136acbc5735344f7 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 198954 W: 49250 L: 49211 D: 100493 Ptnml(0-2): 93; 22565; 54117; 22614; 88  closes https://github.com/official-stockfish/Stockfish/pull/4874  Bench: 1334248,False,2,2023-11-01
TarasVuk,Disservin,2023-11-15 18:32:59+00:00,Introduce recapture extensions  When in a PV-node this patch extends ttMove if it is a recapture and has a good history.  Passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 83840 W: 21560 L: 21166 D: 41114 Ptnml(0-2): 343; 9905; 21027; 10305; 340 https://tests.stockfishchess.org/tests/view/654f4b02136acbc5735308ab  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 165318 W: 41068 L: 40476 D: 83774 Ptnml(0-2): 98; 18670; 44517; 19290; 84 https://tests.stockfishchess.org/tests/view/654fde04136acbc5735314e0  closes https://github.com/official-stockfish/Stockfish/pull/4872  Bench: 1393911,True,2,2023-11-01
linrock,vondele,2023-11-11 14:26:56+00:00,Simplify away optimism average score offset params  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/654abf6b136acbc57352ac4b LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 49664 W: 12687 L: 12477 D: 24500 Ptnml(0-2): 138; 5840; 12703; 5976; 175  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/654b638e136acbc57352b961 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 347166 W: 85561 L: 85676 D: 175929 Ptnml(0-2): 206; 39569; 94150; 39450; 208  closes https://github.com/official-stockfish/Stockfish/pull/4871  bench 1257641,True,5,2023-11-01
locutus2,vondele,2023-11-07 07:28:43+00:00,Double weight of pawn history for quiet move ordering.  I measured on my 1000 position bench the average additional added pawn history per depth. This shows on average negative value with even smaller values with increaing depth.  A linear regression against depth get following formula:  -1960 - 130 * depth  For compensation add this to the used sort limit to maintain roughly the same proportion of sorted quiet moves.  Remarks: 1. using no compensation failed here https://tests.stockfishchess.org/tests/view/6547664f136acbc5735265f0 2. using only the compensation failed at LTC:    passed STC: https://tests.stockfishchess.org/tests/view/65477457136acbc5735266f8    failed LTC: https://tests.stockfishchess.org/tests/view/65487fc8136acbc573527d1c  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 98528 W: 25109 L: 24699 D: 48720 Ptnml(0-2): 334; 11586; 25009; 12006; 329 https://tests.stockfishchess.org/tests/view/65475873136acbc5735264f7  LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 69726 W: 17467 L: 17073 D: 35186 Ptnml(0-2): 39; 7814; 18769; 8196; 45 https://tests.stockfishchess.org/tests/view/6547e759136acbc573527071  closes https://github.com/official-stockfish/Stockfish/pull/4866  Bench: 1379422,True,1,2023-11-01
Unknown,vondele,2023-11-07 07:23:11+00:00,Remove pawn history from ProbCut constructor  use same style as other history tables  Passed STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 184672 W: 46953 L: 46896 D: 90823 Ptnml(0-2): 604; 21095; 48887; 21140; 610 https://tests.stockfishchess.org/tests/view/654766b4136acbc573526602  closes https://github.com/official-stockfish/Stockfish/pull/4865  No functional change,True,1,2023-11-01
TarasVuk,vondele,2023-11-05 18:54:59+00:00,Use stat_malus when decreasing stats  This patch applies stat_bonus when increasing and stat_malus when decreasing stats.  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 133792 W: 34221 L: 33758 D: 65813 Ptnml(0-2): 477; 15764; 33959; 16211; 485 https://tests.stockfishchess.org/tests/view/654699f3136acbc5735256b2  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 67374 W: 16912 L: 16523 D: 33939 Ptnml(0-2): 42; 7528; 18171; 7891; 55 https://tests.stockfishchess.org/tests/view/65474558136acbc5735263ab  closes https://github.com/official-stockfish/Stockfish/pull/4864  bench: 1114417,True,6,2023-11-01
FauziAkram,vondele,2023-11-05 18:53:15+00:00,Set reduction to 0 if the move is a TT move  The reduction formula currently decreases by 1 if the move is a TT move. This changes this by just setting the reduction to 0 instead.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 83136 W: 21145 L: 20758 D: 41233 Ptnml(0-2): 279; 9772; 21090; 10137; 290 https://tests.stockfishchess.org/tests/view/653c0fbacc309ae839561584  Passed LTC: LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 273150 W: 67987 L: 67171 D: 137992 Ptnml(0-2): 155; 30730; 73966; 31592; 132 https://tests.stockfishchess.org/tests/view/653d9d02cc309ae839562fdf  closes https://github.com/official-stockfish/Stockfish/pull/4863  bench: 1110556,True,6,2023-11-01
peregrineshahin,vondele,2023-11-05 18:51:02+00:00,Enhance some comments  This documents some code and makes some hard code easier to understand for new developers.  closes https://github.com/official-stockfish/Stockfish/pull/4862  No functional change,True,6,2023-11-01
FauziAkram,vondele,2023-11-04 16:34:35+00:00,Tweaking the futility pruning formula  Huge credit goes also to candirufish; as the idea was first tried by him; and then tuned by me at multiple phases.  Tweaking the futility pruning formula to be a bit more selective about when pruning is applied. Adjust the value added to the static eval based on the bestValue relative to ss->staticEval. If bestValue is significantly lower; we add a larger value.  Passed STC: LLR: 2.98 (-2.94;2.94) <0.00;2.00> Total: 37120 W: 9590 L: 9266 D: 18264 Ptnml(0-2): 130; 4301; 9385; 4603; 141 https://tests.stockfishchess.org/tests/view/6544cf90136acbc573523247  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 49632 W: 12381 L: 12033 D: 25218 Ptnml(0-2): 30; 5429; 13549; 5779; 29 https://tests.stockfishchess.org/tests/view/65453bc1136acbc573523a3c  closes https://github.com/official-stockfish/Stockfish/pull/4861  bench: 1107118,True,5,2023-11-01
Vizvezdenec,vondele,2023-11-03 21:50:05+00:00,Update pawn history based on static eval difference  Use the same logic as in main history but with 1/4 multiplier.  Passed STC: https://tests.stockfishchess.org/tests/view/653c1282cc309ae8395615bf LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 306624 W: 77811 L: 77094 D: 151719 Ptnml(0-2): 975; 36411; 77830; 37114; 982  Passed LTC: https://tests.stockfishchess.org/tests/view/654258e2cc309ae83956818d LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 99150 W: 24681 L: 24228 D: 50241 Ptnml(0-2): 56; 11107; 26792; 11568; 52  closes https://github.com/official-stockfish/Stockfish/pull/4859  bench 1330590,True,4,2023-11-01
locutus2,vondele,2023-11-03 21:47:31+00:00,Remove razoring history update.  The recently commit 'Rewarding Quiet Moves that Enable Razoring' add a history update if razoring. But its contains also many tuned values all over the search. Following tests shows that the tuned values and not the added history update is responsible for the elo gain. So remove later.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 29376 W: 7641 L: 7410 D: 14325 Ptnml(0-2): 100; 3411; 7451; 3610; 116 https://tests.stockfishchess.org/tests/view/653c9fe1cc309ae839562070  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 242922 W: 59879 L: 59885 D: 123158 Ptnml(0-2): 129; 27764; 65688; 27744; 136 https://tests.stockfishchess.org/tests/view/653d06cbcc309ae839562735  closes https://github.com/official-stockfish/Stockfish/pull/4858  Bench: 1286104,True,4,2023-11-01
FauziAkram,vondele,2023-11-03 21:40:43+00:00,Simplifying two formulas  by eliminating two multiplication operations.  Passed STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 60000 W: 15193 L: 14996 D: 29811 Ptnml(0-2): 199; 7100; 15215; 7277; 209 https://tests.stockfishchess.org/tests/view/653beb69cc309ae83956129d  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 122910 W: 30471 L: 30353 D: 62086 Ptnml(0-2): 68; 13961; 33271; 14095; 60 https://tests.stockfishchess.org/tests/view/653c5848cc309ae839561ae7  closes https://github.com/official-stockfish/Stockfish/pull/4857  bench: 1216779,True,4,2023-11-01
cj5716,vondele,2023-11-03 21:39:04+00:00,Prefetch TT entries in probcut  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 101344 W: 25893 L: 25491 D: 49960 Ptnml(0-2): 303; 11350; 26991; 11698; 330 https://tests.stockfishchess.org/tests/view/6540daa6cc309ae83956669b  slight speedup: ``` Result of 100 runs ================== base (./stockfish.master       ) =    1170705  +/- 3133 test (./stockfish.patch        ) =    1174545  +/- 2895 diff                             =      +3841  +/- 3196  speedup        = +0.0033 P(speedup > 0) =  0.9907 ```  closes https://github.com/official-stockfish/Stockfish/pull/4856  No functional change,True,4,2023-11-01
XInTheDark,vondele,2023-10-30 06:51:27+00:00,Introduce asymmetric optimism  Introduce asymmetric optimism for both side to move and opponent. Parameter tuning was done with 200k LTC games.  STC: https://tests.stockfishchess.org/tests/view/653cc08fcc309ae8395622b3 LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 98336 W: 25074 L: 24661 D: 48601 Ptnml(0-2): 339; 11612; 24890; 11951; 376  LTC: https://tests.stockfishchess.org/tests/view/653db595cc309ae839563140 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 83244 W: 20760 L: 20339 D: 42145 Ptnml(0-2): 51; 9306; 22498; 9705; 62  closes https://github.com/official-stockfish/Stockfish/pull/4853  Bench: 1371690,True,0,2023-10-01
cj5716,vondele,2023-10-30 06:49:15+00:00,Small cleanups  Corrects some incorrect or outdated comments. Credit is shared with yaneurao (see 38e830a#commitcomment-131131500) and locutus2  closes #4852  No functional change.,True,0,2023-10-01
Disservin,Disservin,2023-10-27 16:35:52+00:00,remove outdated comment  Bench: 1258079,True,4,2023-10-01
Disservin,Disservin,2023-10-27 15:33:59+00:00,Format Code  No functional change,True,4,2023-10-01
FauziAkram,Disservin,2023-10-27 15:32:19+00:00,Rewarding Quiet Moves that Enable Razoring  The main idea of the patch comes from @peregrineshahin : https://tests.stockfishchess.org/tests/view/65205363ac57711436728781  Another small idea (tuning) comes from @Vizvezdenec https://tests.stockfishchess.org/tests/view/652e071ade6d262d08d318f4 And a long phases of tuning and tests was done by me in order to make the patch be able to pass both tests.  The idea; as mentioned by Peregrine is that in our standard code; if no best move found after searching all moves; we give a bonus to the previous move that caused the fail high. So in razoring we assume no bestmove will be found so we might as well do the same.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 82336 W: 20997 L: 20610 D: 40729 Ptnml(0-2): 288; 9710; 20753; 10161; 256 https://tests.stockfishchess.org/tests/view/6538fafbcc309ae83955d8f0  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 46584 W: 11753 L: 11411 D: 23420 Ptnml(0-2): 21; 5133; 12642; 5475; 21 https://tests.stockfishchess.org/tests/view/653a3f2ccc309ae83955f223  closes https://github.com/official-stockfish/Stockfish/pull/4850  Bench: 1258079  Co-Authored-By: Shahin M. Shahin <41402573+peregrineshahin@users.noreply.github.com>,True,4,2023-10-01
Vizvezdenec,Disservin,2023-10-27 15:24:25+00:00,Introduce pawn structure based history  Original idea by Seer chess engine https://github.com/connormcmonigle/seer-nnue; coding done by @Disservin; code refactoring done by @locutus2 to match the style of other histories.  This patch introduces pawn structure based history; which assings moves values based on last digits of pawn structure hash and piece type of moved piece and landing square of the move. Idea is that good places for pieces are quite often determined by pawn structure of position. Used in 3 different places - sorting of quiet moves; sorting of quiet check evasions and in history based pruning in search.  Passed STC: https://tests.stockfishchess.org/tests/view/65391d08cc309ae83955dbaf LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 155488 W: 39408 L: 38913 D: 77167 Ptnml(0-2): 500; 18427; 39408; 18896; 513  Passed LTC: https://tests.stockfishchess.org/tests/view/653a36a2cc309ae83955f181 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 70110 W: 17548 L: 17155 D: 35407 Ptnml(0-2): 33; 7859; 18889; 8230; 44  closes https://github.com/official-stockfish/Stockfish/pull/4849  Bench: 1257882  Co-Authored-By: Disservin <disservin.social@gmail.com> Co-Authored-By: Stefan Geschwentner <locutus2@users.noreply.github.com>,True,4,2023-10-01
TarasVuk,Disservin,2023-10-27 15:16:28+00:00,Simplify futility pruning formula  closes https://github.com/official-stockfish/Stockfish/pull/4848  No functional change,True,4,2023-10-01
linrock,vondele,2023-10-24 15:46:18+00:00,Update 5 search params for pruning at shallow depth  Found by spsa tuning at 45+0.45 with:  ``` int fpcEvalOffset = 188; int fpcLmrDepthMult = 206; int histDepthMult = -3232; int histDenom = 5793; int fpEvalOffset = 115; int negSeeDepthMultSq = -27; TUNE(SetRange(0; 394); fpcEvalOffset); TUNE(SetRange(0; 412); fpcLmrDepthMult); TUNE(SetRange(-6464; -1616); histDepthMult); TUNE(SetRange(2896; 11586); histDenom); TUNE(SetRange(0; 230); fpEvalOffset); TUNE(SetRange(-54; 0); negSeeDepthMultSq); ```  Passed STC: https://tests.stockfishchess.org/tests/view/6535551de746e058e6c0165d LLR: 2.98 (-2.94;2.94) <0.00;2.00> Total: 109056 W: 28025 L: 27599 D: 53432 Ptnml(0-2): 357; 12669; 28038; 13119; 345  Passed LTC: https://tests.stockfishchess.org/tests/view/65364c6ff127f3553505175d LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 61290 W: 15316 L: 14941 D: 31033 Ptnml(0-2): 34; 6849; 16498; 7236; 28  closes https://github.com/official-stockfish/Stockfish/pull/4847  bench 1167412,True,1,2023-10-01
vondele,vondele,2023-10-24 15:43:05+00:00,Cleanup comments and some code reorg.  passed STC: https://tests.stockfishchess.org/tests/view/6536dc7dcc309ae83955b04d LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 58048 W: 14693 L: 14501 D: 28854 Ptnml(0-2): 200; 6399; 15595; 6669; 161  closes https://github.com/official-stockfish/Stockfish/pull/4846  No functional change,True,1,2023-10-01
cj5716,vondele,2023-10-24 15:42:13+00:00,Small formatting improvements  Changes some C style casts to C++ style; and fixes some incorrect comments and variable names.  closes #4845  No functional change,True,1,2023-10-01
vondele,Disservin,2023-10-23 18:39:48+00:00,Follow up Makefile changes for clang-format  as reported on various OS; these changes help portability  closes https://github.com/official-stockfish/Stockfish/pull/4844  No functional change.,True,0,2023-10-01
XInTheDark,Disservin,2023-10-23 18:39:48+00:00,Time management improvements  1. Tune time management parameters. 2. Scale the optimum time and maximum time parameters based on the amount of    time left; using a logarithmic scale.  Many acknowledgements to @FauziAkram for tuning the parameters and for the original idea (see https://tests.stockfishchess.org/tests/view/652f0356de6d262d08d333c5).  STC: https://tests.stockfishchess.org/tests/view/6533938fde6d262d08d39e4d LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 44320 W: 11301 L: 10982 D: 22037 Ptnml(0-2): 146; 4810; 11920; 5147; 137  LTC: https://tests.stockfishchess.org/tests/view/653477e4de6d262d08d3ae06 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 146442 W: 37338 L: 36811 D: 72293 Ptnml(0-2): 60; 14975; 42645; 15460; 81  Verification runs: 3+0.03: https://tests.stockfishchess.org/tests/view/65364e7ef127f3553505178a 10+0: https://tests.stockfishchess.org/tests/view/65364e9ff127f3553505178f 180+1.8: https://tests.stockfishchess.org/tests/view/65364ec3f127f35535051794  closes https://github.com/official-stockfish/Stockfish/pull/4843  No functional change.  Co-Authored-By: FauziAkram <11150271+FauziAkram@users.noreply.github.com>,True,0,2023-10-01
Disservin,Disservin,2023-10-23 18:39:48+00:00,remove blank line between function and it's description  - remove the blank line between the declaration of the function and it's   comment; leads to better IDE support when hovering over a function to see it's   description - remove the unnecessary duplication of the function name in the functions   description - slightly refactored code for lsb; msb in bitboard.h There are still a few   things we can be improved later on; move the description of a function where   it was declared (instead of implemented) and add descriptions to functions   which are behind macros ifdefs  closes https://github.com/official-stockfish/Stockfish/pull/4840  No functional change,True,0,2023-10-01
Disservin,Disservin,2023-10-23 18:39:48+00:00,use expanded variables for shell commands  Performance improvement for the shell commands in the Makefile. By using expanded variables; the shell commands are only evaluated once; instead of every time they are used.  closes https://github.com/official-stockfish/Stockfish/pull/4838  No functional change,True,0,2023-10-01
MinetaS,Disservin,2023-10-23 18:39:48+00:00,Fix a compiler bug on Clang 15+ with AVX-512  fixes https://github.com/official-stockfish/Stockfish/issues/4450 closes https://github.com/official-stockfish/Stockfish/pull/4830  No functional change.,True,0,2023-10-01
TarasVuk,vondele,2023-10-22 14:16:02+00:00,Simplify futilityBase formula  This patch replaces std::min(ss->staticEval; bestValue) with ss->staticEval in the futilityBase formula. Original idea by Vizvezdenec: https://tests.stockfishchess.org/tests/view/64ce66795b17f7c21c0d85f3  Passed STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 116928 W: 29925 L: 29793 D: 57210 Ptnml(0-2): 399; 13558; 30446; 13634; 427 https://tests.stockfishchess.org/tests/view/653285aade6d262d08d385dd  Passed LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 50868 W: 12947 L: 12757 D: 25164 Ptnml(0-2): 30; 5414; 14355; 5606; 29 https://tests.stockfishchess.org/tests/view/65336ffbde6d262d08d39ba0  closes https://github.com/official-stockfish/Stockfish/pull/4837  bench: 1241996,True,6,2023-10-01
Disservin,vondele,2023-10-22 14:06:27+00:00,add clang-format  This introduces clang-format to enforce a consistent code style for Stockfish.  Having a documented and consistent style across the code will make contributing easier for new developers; and will make larger changes to the codebase easier to make.  To facilitate formatting; this PR includes a Makefile target (`make format`) to format the code; this requires clang-format (version 17 currently) to be installed locally.  Installing clang-format is straightforward on most OS and distros (e.g. with https://apt.llvm.org/; brew install clang-format; etc); as this is part of quite commonly used suite of tools and compilers (llvm / clang).  Additionally; a CI action is present that will verify if the code requires formatting; and comment on the PR as needed. Initially; correct formatting is not required; it will be done by maintainers as part of the merge or in later commits; but obviously this is encouraged.  fixes https://github.com/official-stockfish/Stockfish/issues/3608 closes https://github.com/official-stockfish/Stockfish/pull/4790  Co-Authored-By: Joost VandeVondele <Joost.VandeVondele@gmail.com>,True,6,2023-10-01
mstembera,vondele,2023-10-21 08:37:27+00:00,Scale down stat bonus  STC https://tests.stockfishchess.org/tests/view/652eff58de6d262d08d33353 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 88224 W: 22618 L: 22228 D: 43378 Ptnml(0-2): 282; 10177; 22783; 10609; 261  LTC https://tests.stockfishchess.org/tests/view/652fd13bde6d262d08d3481a LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 143508 W: 36674 L: 36142 D: 70692 Ptnml(0-2): 92; 15240; 40534; 15820; 68  Reduces the stat bonus by 20%. Maybe future patches can tune the actual bonus calculations for different histories.  closes https://github.com/official-stockfish/Stockfish/pull/4836  bench: 1185932,True,5,2023-10-01
TarasVuk,vondele,2023-10-21 08:34:12+00:00,Subtract the margin from the value returned by ProbCut  This patch subtracts the margin from the value returned by ProbCut.  Passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 46112 W: 11940 L: 11610 D: 22562 Ptnml(0-2): 131; 5318; 11842; 5620; 145 https://tests.stockfishchess.org/tests/view/652ea42ade6d262d08d329dd  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 86880 W: 22192 L: 21776 D: 42912 Ptnml(0-2): 43; 9213; 24510; 9633; 41 https://tests.stockfishchess.org/tests/view/652f70ffde6d262d08d33e8d  closes https://github.com/official-stockfish/Stockfish/pull/4835  bench: 1135313,True,5,2023-10-01
FauziAkram,vondele,2023-10-21 08:31:51+00:00,Removing history condition  Removing the bad history condition from the skip futility pruning formula.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 142688 W: 36420 L: 36317 D: 69951 Ptnml(0-2): 481; 16653; 36970; 16762; 478 https://tests.stockfishchess.org/tests/view/65270a663125598fc7eb8c67  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 435378 W: 110723 L: 110925 D: 213730 Ptnml(0-2): 278; 47251; 122788; 47139; 233 https://tests.stockfishchess.org/tests/view/6528595f3125598fc7eba8f5  closes https://github.com/official-stockfish/Stockfish/pull/4834  Bench: 1110579,True,5,2023-10-01
mstembera,vondele,2023-10-21 08:28:55+00:00,Remove outdated Tile naming.  cleanup variable naming after  #4816  closes #4833  No functional change,True,5,2023-10-01
peregrineshahin,vondele,2023-10-21 08:26:09+00:00,Cleanup qsearch continuation histories  Only (ss-1) and (ss-2) are used in qsearch.  closes https://github.com/official-stockfish/Stockfish/pull/4828  No functional change,True,5,2023-10-01
FauziAkram,vondele,2023-10-21 08:25:03+00:00,Standardize Comments  use double slashes (//) only for comments.  closes #4820  No functional change.,True,5,2023-10-01
snicolet,vondele,2023-10-21 08:15:48+00:00,Reformat some comments and conditions  closes https://github.com/official-stockfish/Stockfish/pull/4814  No functional change,True,5,2023-10-01
peregrineshahin,vondele,2023-10-21 08:01:26+00:00,Fix greater than TB scores in null move pruning.  This patch is a simplification and a fix to dealing with null moves scores that returns proven mates or TB scores by preventing 'null move pruning' if the nullvalue is in that range.  Current solution downgrades nullValues on the non-PV node but the value can be used in a transposed PV-node to the same position afterwards (Triangulation); the later is prone to propagate a wrong score (96.05) to root that will not be refuted unless we search further.  Score of (96.05) can be obtained be two methods;  maxim static-eval returned on Pv update (mostly qSearch) this downgrade (clamp) in NMP and theoretically can happen with or without TBs but the second scenario is more dangerous than the first. This fixes the reproducible case in very common scenarios with TBs as shown in the debugging at discord.  Fixes: #4699  Passed STC: https://tests.stockfishchess.org/tests/view/64c1eca8dc56e1650abba6f9 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 670048 W: 171132 L: 171600 D: 327316 Ptnml(0-2): 2134; 75687; 179820; 75279; 2104  Passed LTC: https://tests.stockfishchess.org/tests/view/64c5e130dc56e1650abc0438 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 92868 W: 23642 L: 23499 D: 45727 Ptnml(0-2): 52; 9509; 27171; 9648; 54  closes https://github.com/official-stockfish/Stockfish/pull/4715  Bench: 1327410,True,5,2023-10-01
Vizvezdenec,vondele,2023-10-14 14:52:35+00:00,Use more continuation histories.  This patch allows stats updates and movepicker bonuses for continuation history 3 plies deep - so counter counter move. Updates and movepicker usage are done with 1/4 multiplier compared to other histories.  Passed STC: https://tests.stockfishchess.org/tests/view/6528f28d3125598fc7ebb5a3 LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 161344 W: 41369 L: 40868 D: 79107 Ptnml(0-2): 535; 18720; 41679; 19185; 553  Passed LTC: https://tests.stockfishchess.org/tests/view/652a397a3125598fc7ebd1d6 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 48564 W: 12556 L: 12215 D: 23793 Ptnml(0-2): 25; 5149; 13595; 5486; 27  closes https://github.com/official-stockfish/Stockfish/pull/4827  bench 1327410,True,5,2023-10-01
XInTheDark,Disservin,2023-10-10 15:45:32+00:00,Search parameters tune at 180+1.8  Passed VLTC: https://tests.stockfishchess.org/tests/view/65200c58ac577114367280bc LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 146180 W: 37407 L: 36988 D: 71785 Ptnml(0-2): 21; 14474; 43675; 14905; 15  Passed VLTC SMP: https://tests.stockfishchess.org/tests/view/652403da3125598fc7eb4b6d LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 57580 W: 15061 L: 14739 D: 27780 Ptnml(0-2): 2; 5001; 18460; 5327; 0  closes https://github.com/official-stockfish/Stockfish/pull/4826  Bench: 1099336,True,1,2023-10-01
TarasVuk,vondele,2023-10-08 05:56:07+00:00,Skip futility pruning if ttMove has bad history  Passed STC: LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 52416 W: 13465 L: 13128 D: 25823 Ptnml(0-2): 128; 6024; 13604; 6287; 165 https://tests.stockfishchess.org/tests/view/651fadd4ac577114367277bf  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 87348 W: 22234 L: 21818 D: 43296 Ptnml(0-2): 38; 9240; 24698; 9664; 34 https://tests.stockfishchess.org/tests/view/65201932ac57711436728218  closes https://github.com/official-stockfish/Stockfish/pull/4825  bench: 1246560,True,6,2023-10-01
gab8192,vondele,2023-10-08 05:52:16+00:00,Avoid recomputing moveCountPruning  In search; when moveCountPruning becomes true; it can never turn false again.  Passed STC https://tests.stockfishchess.org/tests/view/652075ceac57711436728aac LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 136448 W: 34923 L: 34472 D: 67053 Ptnml(0-2): 420; 15094; 36767; 15501; 442  closes https://github.com/official-stockfish/Stockfish/pull/4823  Non functional change,True,6,2023-10-01
candirufish,vondele,2023-10-08 05:50:03+00:00,Razor more if ss+1 cutoffCnt > 3  STC: LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 221760 W: 56726 L: 56144 D: 108890 Ptnml(0-2): 655; 25453; 58123; 25953; 696 https://tests.stockfishchess.org/tests/view/651d34dbcff46e538ee05d91  LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 130326 W: 33188 L: 32681 D: 64457 Ptnml(0-2): 69; 13949; 36620; 14456; 69 https://tests.stockfishchess.org/tests/view/651f844eac577114367273d5  closes https://github.com/official-stockfish/Stockfish/pull/4822  bench: 1291708,True,6,2023-10-01
locutus2,vondele,2023-10-08 05:46:26+00:00,Simplify collection of bad moves for history updates.  1. collect only the first 32 moves searched and ignore the rest. So late bad moves get no further negative history updates. 2. collect now for quiet moves also at most 32 bad moves  STC: https://tests.stockfishchess.org/tests/view/6517b3aeb3e74811c8af5651 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 51168 W: 13013 L: 12810 D: 25345 Ptnml(0-2): 120; 6006; 13186; 6095; 177  LTC: https://tests.stockfishchess.org/tests/view/651adafecff46e538ee02734 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 109866 W: 27786 L: 27656 D: 54424 Ptnml(0-2): 52; 11816; 31069; 11942; 54  closes https://github.com/official-stockfish/Stockfish/pull/4818  Bench: 1338617,True,6,2023-10-01
mstembera,vondele,2023-10-08 05:42:39+00:00,Optimize the most common update accumalator cases w/o tiling  In the most common case where we only update a single state it's faster to not use temporary accumulation registers and tiling. (Also includes a couple of small cleanups.)  passed STC https://tests.stockfishchess.org/tests/view/651918e3cff46e538ee0023b LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 34944 W: 8989 L: 8687 D: 17268 Ptnml(0-2): 88; 3743; 9512; 4037; 92  A simpler version https://tests.stockfishchess.org/tests/view/65190dfacff46e538ee00155 also passed but this version is stronger still https://tests.stockfishchess.org/tests/view/6519b95fcff46e538ee00fa2  closes https://github.com/official-stockfish/Stockfish/pull/4816  No functional change,True,6,2023-10-01
snicolet,vondele,2023-10-08 05:41:16+00:00,Remove one test in the move loop  Simplification passed STC test: https://tests.stockfishchess.org/tests/view/6519fc91cff46e538ee014f6 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 191264 W: 48550 L: 48501 D: 94213 Ptnml(0-2): 576; 21529; 51392; 21540; 595  closes #4815  Non functional change,True,6,2023-10-01
robertnurnberg,vondele,2023-10-08 05:38:13+00:00,Update links in license  matches https://www.gnu.org/licenses/gpl-3.0.txt  closes https://github.com/official-stockfish/Stockfish/pull/4813  No functional change,True,6,2023-10-01
Unknown,vondele,2023-10-08 05:37:01+00:00,Remove handcrafted MMX code  too small a benefit to maintain this old target  closes https://github.com/official-stockfish/Stockfish/pull/4804  No functional change,True,6,2023-10-01
linrock,Disservin,2023-09-29 20:30:27+00:00,Update default net to nn-0000000000a0.nnue  This is a later epoch from the same experiment that led to the previous master net. In training stage 6; max-epoch was raised to 1;200 near the end of the first 1;000 epochs.  For more details; see https://github.com/official-stockfish/Stockfish/pull/4795  Local elo at 25k nodes per move (vs. L1-2048 nn-1ee1aba5ed4c.nnue) ep1079 : 15.6 +/- 1.2  Passed STC: https://tests.stockfishchess.org/tests/view/651503b3b3e74811c8af1e2a LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 29408 W: 7607 L: 7304 D: 14497 Ptnml(0-2): 97; 3277; 7650; 3586; 94  Passed LTC: https://tests.stockfishchess.org/tests/view/651585ceb3e74811c8af2a5f LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 73164 W: 18828 L: 18440 D: 35896 Ptnml(0-2): 30; 7749; 20644; 8121; 38  closes https://github.com/official-stockfish/Stockfish/pull/4810  Bench: 1453057,True,4,2023-09-01
cj5716,Disservin,2023-09-29 20:28:34+00:00,Skip moves-loop pruning in qsearch if we have only pawns  At first my idea was only to cover movecount and futility pruning; but @peregrineshahin suggested to test it on all moves-loop pruning and it worked.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 167968 W: 42970 L: 42480 D: 82518 Ptnml(0-2): 444; 18324; 46002; 18726; 488 https://tests.stockfishchess.org/tests/view/6511181a55b420c569d0d54c  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 40794 W: 10496 L: 10182 D: 20116 Ptnml(0-2): 12; 4021; 12025; 4319; 20 https://tests.stockfishchess.org/tests/view/6512ccc4b3e74811c8aee86c  closes https://github.com/official-stockfish/Stockfish/pull/4809  Bench: 1338472,True,4,2023-09-01
UniQP,Disservin,2023-09-29 20:22:40+00:00,Use C++17 variable templates for type traits  The C++17 variable templates are slightly more readable and allow us to remove the typename keyword in a few cases.  closes https://github.com/official-stockfish/Stockfish/pull/4806  No functional change,True,4,2023-09-01
Unknown,Disservin,2023-09-29 20:19:08+00:00,Remove unused see_ge() code  closes https://github.com/official-stockfish/Stockfish/pull/4805  No functional change,True,4,2023-09-01
FauziAkram,Disservin,2023-09-29 20:18:17+00:00,Improve grammar of comments  closes https://github.com/official-stockfish/Stockfish/pull/4801  No functional change,True,4,2023-09-01
FauziAkram,Disservin,2023-09-29 20:12:46+00:00,Simplify pawn count in evaluation  This simplifies the evaluation by removing the unnecessary pawn count term when combining nnue and optimism values.  Passed STC LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 61472 W: 15748 L: 15554 D: 30170 Ptnml(0-2): 191; 7123; 15933; 7279; 210 https://tests.stockfishchess.org/tests/view/650c34cf7ca0d3f7bbf264ff  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 81264 W: 20657 L: 20500 D: 40107 Ptnml(0-2): 30; 8713; 22997; 8854; 38 https://tests.stockfishchess.org/tests/view/650cc30efb151d43ae6d5987  closes https://github.com/official-stockfish/Stockfish/pull/4800  Bench: 1530568,True,4,2023-09-01
Beanie496,Disservin,2023-09-29 20:07:10+00:00,Increment minor section number from 3.7.1 to 3.8.1.  Pext has nothing to do with git commit sha/date; so separate the two sub-sections.  closes https://github.com/official-stockfish/Stockfish/pull/4785  No functional change,True,4,2023-09-01
vondele,vondele,2023-09-24 18:04:42+00:00,Explicitly invoke shell  in some cases the permission on the script might be incorrect (zip downloads?). Explicitly invoke the shell  closes https://github.com/official-stockfish/Stockfish/pull/4803  No functional change,True,6,2023-09-01
linrock,vondele,2023-09-22 17:26:16+00:00,Update NNUE architecture to SFNNv8: L1-2560 nn-ac1dbea57aa3.nnue  Creating this net involved: - a 6-stage training process from scratch. The datasets used in stages 1-5 were fully minimized. - permuting L1 weights with https://github.com/official-stockfish/nnue-pytorch/pull/254  A strong epoch after each training stage was chosen for the next. The 6 stages were:  ``` 1. 400 epochs; lambda 1.0; default LR and gamma    UHOx2-wIsRight-multinet-dfrc-n5000 (135G)      nodes5000pv2_UHO.binpack      data_pv-2_diff-100_nodes-5000.binpack      wrongIsRight_nodes5000pv2.binpack      multinet_pv-2_diff-100_nodes-5000.binpack      dfrc_n5000.binpack  2. 800 epochs; end-lambda 0.75; LR 4.375e-4; gamma 0.995; skip 12    LeelaFarseer-T78juntoaugT79marT80dec.binpack (141G)      T60T70wIsRightFarseerT60T74T75T76.binpack      test78-junjulaug2022-16tb7p.no-db.min.binpack      test79-mar2022-16tb7p.no-db.min.binpack      test80-dec2022-16tb7p.no-db.min.binpack  3. 800 epochs; end-lambda 0.725; LR 4.375e-4; gamma 0.995; skip 20    leela93-v1-dfrc99-v2-T78juntosepT80jan-v6dd-T78janfebT79aprT80aprmay.min.binpack      leela93-filt-v1.min.binpack      dfrc99-16tb7p-filt-v2.min.binpack      test78-juntosep2022-16tb7p-filter-v6-dd.min-mar2023.binpack      test80-jan2023-3of3-16tb7p-filter-v6-dd.min-mar2023.binpack      test78-janfeb2022-16tb7p.min.binpack      test79-apr2022-16tb7p.min.binpack      test80-apr2022-16tb7p.min.binpack      test80-may2022-16tb7p.min.binpack  4. 800 epochs; end-lambda 0.7; LR 4.375e-4; gamma 0.995; skip 24    leela96-dfrc99-v2-T78juntosepT79mayT80junsepnovjan-v6dd-T80mar23-v6-T60novdecT77decT78aprmayT79aprT80may23.min.binpack      leela96-filt-v2.min.binpack      dfrc99-16tb7p-filt-v2.min.binpack      test78-juntosep2022-16tb7p-filter-v6-dd.min-mar2023.binpack      test79-may2022-16tb7p.filter-v6-dd.min.binpack      test80-jun2022-16tb7p.filter-v6-dd.min.binpack      test80-sep2022-16tb7p.filter-v6-dd.min.binpack      test80-nov2022-16tb7p.filter-v6-dd.min.binpack      test80-jan2023-3of3-16tb7p-filter-v6-dd.min-mar2023.binpack      test80-mar2023-2tb7p.v6-sk16.min.binpack      test60-novdec2021-16tb7p.min.binpack      test77-dec2021-16tb7p.min.binpack      test78-aprmay2022-16tb7p.min.binpack      test79-apr2022-16tb7p.min.binpack      test80-may2023-2tb7p.min.binpack  5. 960 epochs; end-lambda 0.7; LR 4.375e-4; gamma 0.995; skip 28    Increased max-epoch to 960 near the end of the first 800 epochs    5af11540bbfe dataset: https://github.com/official-stockfish/Stockfish/pull/4635  6. 1000 epochs; end-lambda 0.7; LR 4.375e-4; gamma 0.995; skip 28    Increased max-epoch to 1000 near the end of the first 800 epochs    1ee1aba5ed dataset: https://github.com/official-stockfish/Stockfish/pull/4782 ```  L1 weights permuted with: ```bash python3 serialize.py $nnue $nnue_permuted \   --features=HalfKAv2_hm \   --ft_optimize \   --ft_optimize_data=/data/fishpack32.binpack \   --ft_optimize_count=10000 ```  Speed measurements from 100 bench runs at depth 13 with profile-build x86-64-avx2: ``` sf_base =  1329051 +/-   2224 (95%) sf_test =  1163344 +/-   2992 (95%) diff    =  -165706 +/-   4913 (95%) speedup = -12.46807% +/- 0.370% (95%) ```  Training data can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move (vs. L1-2048 nn-1ee1aba5ed4c.nnue) ep959 : 16.2 +/- 2.3  Failed 10+0.1 STC: https://tests.stockfishchess.org/tests/view/6501beee2cd016da89abab21 LLR: -2.92 (-2.94;2.94) <0.00;2.00> Total: 13184 W: 3285 L: 3535 D: 6364 Ptnml(0-2): 85; 1662; 3334; 1440; 71  Failed 180+1.8 VLTC: https://tests.stockfishchess.org/tests/view/6505cf9a72620bc881ea908e LLR: -2.94 (-2.94;2.94) <0.00;2.00> Total: 64248 W: 16224 L: 16374 D: 31650 Ptnml(0-2): 26; 6788; 18640; 6650; 20  Passed 60+0.6 th 8 VLTC SMP (STC bounds): https://tests.stockfishchess.org/tests/view/65084a4618698b74c2e541dc LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 90630 W: 23372 L: 23033 D: 44225 Ptnml(0-2): 13; 8490; 27968; 8833; 11  Passed 60+0.6 th 8 VLTC SMP: https://tests.stockfishchess.org/tests/view/6501d45d2cd016da89abacdb LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 137804 W: 35764 L: 35276 D: 66764 Ptnml(0-2): 31; 13006; 42326; 13522; 17  closes https://github.com/official-stockfish/Stockfish/pull/4795  bench 1246812,True,4,2023-09-01
locutus2,vondele,2023-09-22 17:25:57+00:00,Remove VALUE_KNOWN_WIN.  After removing classic evaluation VALUE_KNOWN_WIN is not anymore returned explicit evaluation. So remove and replace it with VALUE_TB_WIN_IN_MAX_PLY.  Measurement on my big bench (bench 16 1 16 pos1000.fen) verifies that at least with current net the calculated evaluation lies always in the open interval  (-VALUE_KNOWN_WIN; VALUE_KNOWN_WIN). So i consider this a non-functional change. But to be safe i tested this also at LTC as requested by Stephane Nicolet.  STC: https://tests.stockfishchess.org/tests/view/64f9db40eaf01be8259a6ed5 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 455296 W: 115981 L: 116217 D: 223098 Ptnml(0-2): 1415; 50835; 123420; 50527; 1451  LTC: https://tests.stockfishchess.org/tests/view/650bfd867ca0d3f7bbf25feb LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 35826 W: 9170 L: 8973 D: 17683 Ptnml(0-2): 12; 3523; 10645; 3722; 11  closes https://github.com/official-stockfish/Stockfish/pull/4792  Bench: 1603079,True,4,2023-09-01
Unknown,vondele,2023-09-22 17:15:34+00:00,Reduce SIMD register count from 32 to 16  in the case of avx512 and vnni512 archs.  Up to 17% speedup; depending on the compiler; e.g.  ``` AMD pro 7840u (zen4 phoenix apu 4nm) bash bench_parallel.sh ./stockfish_avx512_gcc13 ./stockfish_avx512_pr_gcc13 20 10 sf_base =  1077737 +/-   8446 (95%) sf_test =  1264268 +/-   8543 (95%) diff    =   186531 +/-   4280 (95%) speedup =  17.308% +/- 0.397% (95%) ```  Prior to this patch; it appears gcc spills registers.  closes https://github.com/official-stockfish/Stockfish/pull/4796  No functional change,True,4,2023-09-01
cj5716,vondele,2023-09-22 17:14:29+00:00,Make casting styles consistent  Make casting styles consistent with the rest of the code.  closes https://github.com/official-stockfish/Stockfish/pull/4793  No functional change,True,4,2023-09-01
UniQP,vondele,2023-09-22 17:12:53+00:00,Let CI check C++ includes  The commit adds a CI workflow that uses the included-what-you-use (IWYU) tool to check for missing or superfluous includes in .cpp files and their corresponding .h files. This means that some .h files (especially in the nnue folder) are not checked yet.  The CI setup looks like this: - We build IWYU from source to include some yet unreleased fixes.   This IWYU version targets LLVM 17. Thus; we get the latest release   candidate of LLVM 17 from LLVM's nightly packages. - The Makefile now has an analyze target that just build the object   files (without linking) - The CI uses the analyze target with the IWYU tool as compiler to   analyze the compiled .cpp file and its corresponding .h file. - If IWYU suggests a change the build fails (-Xiwyu --error). - To avoid false positives we use LLVM's libc++ as standard library - We have a custom mappings file that adds some mappings that are   missing in IWYU's default mappings  We also had to add one IWYU pragma to prevent a false positive in movegen.h.  https://github.com/official-stockfish/Stockfish/pull/4783  No functional change,True,4,2023-09-01
snicolet,vondele,2023-09-22 17:09:20+00:00,Export makefile ARCH in binary  Example of the `./stockfish compiler` command:  Compiled by                : g++ (GNUC) 10.3.0 on Apple Compilation architecture   : x86-64-bmi2 Compilation settings       : 64bit BMI2 AVX2 SSE41 SSSE3 SSE2 POPCNT Compiler __VERSION__ macro : 10.3.0  closes https://github.com/official-stockfish/Stockfish/pull/4789  no functional change,True,4,2023-09-01
vondele,vondele,2023-09-22 17:06:37+00:00,Enable a default native ARCH  uses a posix compatible script to find the native arch. (based on ppigazzini's https://github.com/ppigazzini/stockfish-downloader ) use that native arch by default; no changes if ARCH is specified explicitly.  SF can now be compiled in an optimal way simply using  make -j profile-build  closes https://github.com/official-stockfish/Stockfish/pull/4777  No functional change,True,4,2023-09-01
Unknown,vondele,2023-09-22 17:03:47+00:00,Sparse impl of affine_transform_non_ssse3()  deal with the general case  About a 8.6% speedup (for general arch)  Results for 200 tests for each version:              Base      Test      Diff     Mean    141741    153998    -12257     StDev   2990      3042      3742  p-value: 0.999 speedup: 0.086  closes https://github.com/official-stockfish/Stockfish/pull/4786  No functional change,True,4,2023-09-01
peregrineshahin,vondele,2023-09-22 17:02:18+00:00,Reorder some lines  Now that qsearch has its own repetition detection we can flip the order of lines and remove the guard of depth < 0 which is not needed after reordering (i.e. it was there to prevent checking repetition again at depth ==0).  Passed STC: https://tests.stockfishchess.org/tests/view/6502ecbb2cd016da89abc3fb LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 69536 W: 17668 L: 17490 D: 34378 Ptnml(0-2): 190; 7652; 18929; 7784; 213  Passed LTC: https://tests.stockfishchess.org/tests/view/6505ce9072620bc881ea9086 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 52116 W: 13294 L: 13113 D: 25709 Ptnml(0-2): 26; 5176; 15471; 5361; 24  closes https://github.com/official-stockfish/Stockfish/pull/4791  No functional change,True,4,2023-09-01
snicolet,snicolet,2023-09-11 21:19:06+00:00,Reformat some comments  Also include the bench to make Continuation Integration happy on Github.  Bench: 1603079,True,0,2023-09-01
UniQP,Disservin,2023-09-11 20:46:01+00:00,Cleanup code after dropping ICC support in favor of ICX  The commit removes all uses of ICC's __INTEL_COMPILER macro and other references to ICC. It also adds ICX info to the compiler command and fixes two typos in Makefile's help output.  closes https://github.com/official-stockfish/Stockfish/pull/4769  No functional change,False,0,2023-09-01
linrock,Disservin,2023-09-11 20:37:39+00:00,Update default net to nn-1ee1aba5ed4c.nnue  Created by retraining the master net on a dataset composed by: - adding Leela data from T60 jul-dec 2020; T77 nov 2021; T80 jun-jul 2023 - deduplicating and unminimizing parts of the dataset before interleaving  Trained initially with max epoch 800; then increased near the end of training twice. First to 960; then 1200. After training; post-processing involved: - greedy permuting L1 weights with https://github.com/official-stockfish/Stockfish/pull/4620 - greedy 2- and 3- cycle permuting with https://github.com/official-stockfish/Stockfish/pull/4640    python3 easy_train.py \     --experiment-name 2048-retrain-S6-sk28 \     --training-dataset /data/S6.binpack \     --early-fen-skipping 28 \     --start-from-engine-test-net True \     --max_epoch 1200 \     --lr 4.375e-4 \     --gamma 0.995 \     --start-lambda 1.0 \     --end-lambda 0.7 \     --tui False \     --seed $RANDOM \     --gpus 0  In the list of datasets below; periods in the filename represent the sequence of steps applied to arrive at the particular binpack. For example:  test77-dec2021-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack 1. test77 dec2021 data rescored with 16 TB of syzygy tablebases during data conversion 2. filtered with csv_filter_v6_dd.py - v6 filtering and deduplication in one step 3. minimized with the original mar2023 implementation of `minimize_binpack` in    the tools branch 4. unminimized by removing all positions with score == 32002 (`VALUE_NONE`)  Binpacks were: - filtered with: https://github.com/linrock/nnue-data - unminimized with: https://github.com/linrock/Stockfish/tree/tools-unminify - deduplicated with: https://github.com/linrock/Stockfish/tree/tools-dd    DATASETS=(     leela96-filt-v2.min.unminimized.binpack     dfrc99-16tb7p-eval-filt-v2.min.unminimized.binpack      # most of the 0dd1cebea57 v6-dd dataset (without test80-jul2022)     # https://github.com/official-stockfish/Stockfish/pull/4606     test60-novdec2021-12tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test77-dec2021-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test78-jantomay2022-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test78-juntosep2022-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test79-apr2022-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test79-may2022-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test80-jun2022-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test80-aug2022-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test80-sep2022-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test80-oct2022-16tb7p.filter-v6-dd.min.binpack     test80-nov2022-16tb7p.filter-v6-dd.min.binpack     test80-jan2023-3of3-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack     test80-feb2023-16tb7p.filter-v6-dd.min-mar2023.unminimized.binpack      # older Leela data; recently converted     test60-octnovdec2020-2tb7p.min.unminimized.binpack     test60-julaugsep2020-2tb7p.min.binpack     test77-nov2021-2tb7p.min.dd.binpack      # newer Leela data     test80-mar2023-2tb7p.min.unminimized.binpack     test80-apr2023-2tb7p.filter-v6-sk16.min.unminimized.binpack     test80-may2023-2tb7p.min.dd.binpack     test80-jun2023-2tb7p.min.binpack     test80-jul2023-2tb7p.binpack   )   python3 interleave_binpacks.py ${DATASETS[@]} /data/S6.binpack  Training data can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move: nn-epoch1059 : 2.7 +/- 1.6  Passed STC: https://tests.stockfishchess.org/tests/view/64fc8d705dab775b5359db42 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 168352 W: 43216 L: 42704 D: 82432 Ptnml(0-2): 599; 19672; 43134; 20160; 611  Passed LTC: https://tests.stockfishchess.org/tests/view/64fd44a75dab775b5359f065 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 154194 W: 39436 L: 38881 D: 75877 Ptnml(0-2): 78; 16577; 43238; 17120; 84  closes https://github.com/official-stockfish/Stockfish/pull/4782  Bench: 1603079,True,0,2023-09-01
Vizvezdenec,Disservin,2023-09-11 20:36:26+00:00,Do more futility pruning in qsearch  This patch introduces a third futility pruning heuristic in qsearch. The idea is that the static exchange evaluation is much worse than the difference between futility base and alpha. Thus we can assume that the probability of the move being good enough to beat alpha is low so it can be pruned.  Passed STC: https://tests.stockfishchess.org/tests/view/64fc982a5dab775b5359dc83 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 36576 W: 9484 L: 9170 D: 17922 Ptnml(0-2): 121; 4119; 9495; 4431; 122  Passed LTC: https://tests.stockfishchess.org/tests/view/64fcc7935dab775b5359e1a9 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 135408 W: 34556 L: 34041 D: 66811 Ptnml(0-2): 56; 14462; 38165; 14953; 68  closes https://github.com/official-stockfish/Stockfish/pull/4781  Bench: 1330793,True,0,2023-09-01
cj5716,Disservin,2023-09-11 20:30:57+00:00,Simplify cutnode depth condition  With this patch; the depth condition for the cutnodes reduction is loosened from tte->depth() >= depth + 3 to just tte->depth() >= depth.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 101152 W: 25830 L: 25682 D: 49640 Ptnml(0-2): 312; 11788; 26258; 11876; 342 https://tests.stockfishchess.org/tests/view/64fd15635dab775b5359eaa6  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 82542 W: 20980 L: 20824 D: 40738 Ptnml(0-2): 42; 8795; 23440; 8953; 41 https://tests.stockfishchess.org/tests/view/64fda3545dab775b5359fbf1  closes https://github.com/official-stockfish/Stockfish/pull/4780  Bench: 1479029,True,0,2023-09-01
UniQP,Disservin,2023-09-11 20:15:22+00:00,Cleanup git checkout actions  We now fetch only the current commit for jobs that don't need the git history. For the Prerelease job; we don't checkout the code at all.  closes https://github.com/official-stockfish/Stockfish/pull/4779  No functional change,True,0,2023-09-01
Sopel97,Disservin,2023-09-11 20:11:30+00:00,Prevent usage of AVX-512 for the last layer.  Add more static checks regarding the SIMD width match.  STC: https://tests.stockfishchess.org/tests/view/64f5c568a9bc5a78c669e70e LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 125216 W: 31756 L: 31636 D: 61824 Ptnml(0-2): 327; 13993; 33848; 14113; 327  Fixes a bug introduced in 2f2f45f; where with AVX-512 the weights and input to the last layer were being read out of bounds. Now AVX-512 is only used for the layers it can be used for. Additional static assertions have been added to prevent more errors like this in the future.  closes https://github.com/official-stockfish/Stockfish/pull/4773  No functional change,True,0,2023-09-01
UniQP,Disservin,2023-09-11 20:07:55+00:00,"Avoid ""using namespace std""  This is a cleanup PR that prepares the automatic checking of missing or superfluous #include directives via the include-what-you-use (IWYU) tool on the CI. Unfortunately; IWYU proposes additional includes for ""namespace std"" although we don't need them.  To avoid the problem; the commit removes all ""using namespace std"" statements from the code and directly uses the std:: prefix instead. Alternatively; we could add specific usings (e.g. ""using std::string"") foreach used type. Also; a mix of both approaches would be possible. I decided for the prefix approach because most of the files were already using the std:: prefixes despite the ""using namespace std"".  closes https://github.com/official-stockfish/Stockfish/pull/4772  No functional change",True,0,2023-09-01
snicolet,snicolet,2023-09-03 07:28:16+00:00,Introduce simple_eval() for lazy evaluations  This patch implements the pure materialistic evaluation called simple_eval() to gain a speed-up during Stockfish search.  We use the so-called lazy evaluation trick: replace the accurate but slow NNUE network evaluation by the super-fast simple_eval() if the position seems to be already won (high material advantage). To guard against some of the most obvious blunders introduced by this idea; this patch uses the following features which will raise the lazy evaluation threshold in some situations:  - avoid lazy evals on shuffling branches in the search tree - avoid lazy evals if the position at root already has a material imbalance - avoid lazy evals if the search value at root is already winning/losing.  Moreover; we add a small random noise to the simple_eval() term. This idea (stochastic mobility in the minimax tree) was worth about 200 Elo in the pure simple_eval() player on Lichess.  Overall; the current implementation in this patch evaluates about 2% of the leaves in the search tree lazily.  --------------------------------------------  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 60352 W: 15585 L: 15234 D: 29533 Ptnml(0-2): 216; 6906; 15578; 7263; 213 https://tests.stockfishchess.org/tests/view/64f1d9bcbd9967ffae366209  LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 35106 W: 8990 L: 8678 D: 17438 Ptnml(0-2): 14; 3668; 9887; 3960; 24 https://tests.stockfishchess.org/tests/view/64f25204f5b0c54e3f04c0e7  verification run at VLTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 74362 W: 19088 L: 18716 D: 36558 Ptnml(0-2): 6; 7226; 22348; 7592; 9 https://tests.stockfishchess.org/tests/view/64f2ecdbf5b0c54e3f04d3ae  All three tests above were run with adjudication off; we also verified that there was no regression on matetracker (thanks Disservin!).  ----------------------------------------------  closes https://github.com/official-stockfish/Stockfish/pull/4771  Bench: 1393714,True,6,2023-09-01
FauziAkram,snicolet,2023-09-03 07:10:27+00:00,Rename one variable  To enhance code clarity and prevent potential confusion with the 'r' variable assigned to reduction later in the code; this pull request renames it to 'reductionScale' when we use the same name in the reduction() function.  Using distinct variable names for separate functions improves code readability and maintainability.  closes https://github.com/official-stockfish/Stockfish/pull/4765  No functional change,True,6,2023-09-01
Unknown,snicolet,2023-09-03 06:57:43+00:00,Simplify slider_blocker calculation  Now that classical evaluation was removed; we can adapt this method to the needs of set_check_info.  STC: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 298176 W: 75802 L: 75868 D: 146506 Ptnml(0-2): 908; 33608; 80192; 33402; 978 https://tests.stockfishchess.org/tests/view/64e70b899009777747557b43  closes https://github.com/official-stockfish/Stockfish/pull/4753  no functional change,True,6,2023-09-01
Disservin,snicolet,2023-09-03 06:40:08+00:00,"Simplify README  The UCI protocol is rather technical and has little value in our README. Instead it should be explained in our wiki. ""Contributing"" is moved above ""Compiling Stockfish"" to make it more prominent.  Also move the CONTRIBUTING.md into the root directory and include it in the distributed artifacts/releases.  closes https://github.com/official-stockfish/Stockfish/pull/4766  No functional change",True,6,2023-09-01
Disservin,snicolet,2023-09-03 06:24:51+00:00,"Cleanup includes  Reorder a few includes; include ""position.h"" where it was previously missing and apply include-what-you-use suggestions. Also make the order of the includes consistent; in the following way:  1. Related header (for .cpp files) 2. A blank line 3. C/C++ headers 4. A blank line 5. All other header files  closes https://github.com/official-stockfish/Stockfish/pull/4763 fixes https://github.com/official-stockfish/Stockfish/issues/4707  No functional change",True,6,2023-09-01
ttruscott,snicolet,2023-09-03 06:07:59+00:00,Omit two unneeded tests  These redundant tests were intended as a speed-up; but they do not seem to provide any speed anymore.  STC: https://tests.stockfishchess.org/tests/view/64e9079c85e3e95030fd8259 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 134688 W: 34338 L: 34226 D: 66124 Ptnml(0-2): 426; 15122; 36124; 15258; 414  closes https://github.com/official-stockfish/Stockfish/pull/4767  No functional change,True,6,2023-09-01
snicolet,vondele,2023-08-24 06:11:17+00:00,Play turbulent when defending; simpler when attacking  This patch decays a little the evaluation (up to a few percent) for positions which have a large complexity measure (material imbalance; positional compensations; etc).  This may have nice consequences on the playing style; as it modifies the search differently for attack and defense; both effects being desirable:  - to see the effect on positions when Stockfish is defending; let us suppose for instance that the side to move is Stockfish and the nnue evaluation on the principal variation is -100 : this patch will decay positions with an evaluation of -103 (say) to the same level; provided they have huge material imbalance or huge positional compensation. In other words; chaotic positions with an evaluation of -103 are now comparable in our search tree to stable positions with an evaluation of -100; and chaotic positions with an evaluation of -102 are now preferred to stable positions with an evaluation of -100.  - the effect on positions when Stockfish is attacking is the opposite. Let us suppose for instance that the side to move is Stockfish and the nnue evaluation on the principal variation is +100 : this patch will decay the evaluation to +97 if the positions on the principal variation have huge material imbalance or huge positional compensation. In other words; stable positions with an evaluation of +97 are now comparable in our search tree to chaotic positions with an evaluation of +100; and stable positions with an evaluation of +98 are now preferred to chaotic positions with an evaluation of +100.  So the effect of this small change of evaluation on the playing style is that Stockfish should now play a little bit more turbulent when defending; and choose slightly simpler lines when attacking.  passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 268448 W: 68713 L: 68055 D: 131680 Ptnml(0-2): 856; 31514; 68943; 31938; 973 https://tests.stockfishchess.org/tests/view/64e252bb99700912526653ed  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 141060 W: 36066 L: 35537 D: 69457 Ptnml(0-2): 71; 15179; 39522; 15666; 92 https://tests.stockfishchess.org/tests/view/64e4447a9009777747553725  closes https://github.com/official-stockfish/Stockfish/pull/4762  Bench: 1426295,True,3,2023-08-01
peregrineshahin,snicolet,2023-08-22 09:32:51+00:00,Reduce repetitions branches  Increase reduction on retrying a move we just retreated that falls in a repetition: if current move can be the same move from previous previous turn then we retreated that move on the previous turn; this patch increases reduction if retrying that move results in a repetition.  How to continue from there? Maybe we some variants of this idea could bring Elo too (only testing the destination square; or triangulations; etc.)  Passed STC: https://tests.stockfishchess.org/tests/view/64e1aede883cbb7cbd9ad976 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 424000 W: 108675 L: 107809 D: 207516 Ptnml(0-2): 1296; 47350; 113896; 48108; 1350  Passed LTC: https://tests.stockfishchess.org/tests/view/64e32d629970091252666872 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 89682 W: 22976 L: 22569 D: 44137 Ptnml(0-2): 39; 8843; 26675; 9240; 44  closes https://github.com/official-stockfish/Stockfish/pull/4757  bench: 1574347,True,1,2023-08-01
cj5716,snicolet,2023-08-22 09:22:15+00:00,Do more full window searches  Remove the value < beta condition for doing full window searches. As an added bonus the condition for full-window search is now much more similar to other fail-soft engines.  Passed STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 244608 W: 62286 L: 62294 D: 120028 Ptnml(0-2): 758; 28772; 63214; 28840; 720 https://tests.stockfishchess.org/tests/view/64d72d365b17f7c21c0e6675  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 311460 W: 78909 L: 78985 D: 153566 Ptnml(0-2): 129; 33959; 87656; 33831; 155 https://tests.stockfishchess.org/tests/view/64dca2265b17f7c21c0ee06c  closes https://github.com/official-stockfish/Stockfish/pull/4755  Bench: 1624221,True,1,2023-08-01
gcp,snicolet,2023-08-22 09:14:19+00:00,Simplify Square Clipped ReLU code.  Squared numbers are never negative; so barring any wraparound there is no need to clamp to 0. From reading the code; there's no obvious way to get wraparound; so the entire operation can be simplified away. Updated original truncated code comments to be sensible.  Verified by running ./stockfish bench 128 1 24 and by the following test:  STC: https://tests.stockfishchess.org/tests/view/64da4db95b17f7c21c0eabe7 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 60224 W: 15425 L: 15236 D: 29563 Ptnml(0-2): 195; 6576; 16382; 6763; 196  closes https://github.com/official-stockfish/Stockfish/pull/4751  No functional change,True,1,2023-08-01
snicolet,snicolet,2023-08-22 08:59:39+00:00,Fix some tabs in Makefile  Avoid mixing spaces and tabs for indentation in Makefile  closes https://github.com/official-stockfish/Stockfish/pull/4759  No functional change,True,1,2023-08-01
vondele,snicolet,2023-08-22 08:53:49+00:00,Update links to fishtest  Fishtest has moved to https://github.com/official-stockfish/fishtest/  closes https://github.com/official-stockfish/Stockfish/pull/4758  No functional change,True,1,2023-08-01
Matthies,snicolet,2023-08-22 08:43:51+00:00,Allow compilation on Raspi (for ARMv8)  Current master fails to compile for ARMv8 on Raspi cause gcc (version 10.2.1) does not like to cast between signed and unsigned vector types. This patch fixes it by using unsigned vector pointer for ARM to avoid implicite cast.  closes https://github.com/official-stockfish/Stockfish/pull/4752  No functional change,True,1,2023-08-01
snicolet,snicolet,2023-08-22 08:39:03+00:00,Fix some 'possible loss of data' warnings  Patch by Maxim Masiutin  closes https://github.com/official-stockfish/Stockfish/pull/4440  No functional change,True,1,2023-08-01
Disservin,Disservin,2023-08-16 19:25:42+00:00,Add -funroll-loops to CXXFLAGS  Optimize profiling data accuracy by enabling -funroll-loops during the profile generation phase; in addition to its default activation by -fprofile-use. This seems to produce a slightly faster binary; for most compilers.  make -j profile-build ARCH=x86-64-avx2  sf_base =  1392875 +/-   5905 (95%) sf_test =  1402332 +/-   7303 (95%) diff    =     9457 +/-   4413 (95%) speedup = 0.67896% +/- 0.317% (95%)  STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 34784 W: 8970 L: 8665 D: 17149 Ptnml(0-2): 115; 3730; 9405; 4019; 123 https://tests.stockfishchess.org/tests/view/64d944815b17f7c21c0e92e1  closes https://github.com/official-stockfish/Stockfish/pull/4750  No functional change,True,2,2023-08-01
XInTheDark,Disservin,2023-08-16 19:24:58+00:00,Simplify PvNode Reduction  Remove the depth condition for PvNode reduction.  Simplification STC: https://tests.stockfishchess.org/tests/view/64d308fa5b17f7c21c0e0303 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 38976 W: 10106 L: 9889 D: 18981 Ptnml(0-2): 129; 4479; 10040; 4726; 114  Simplification LTC: https://tests.stockfishchess.org/tests/view/64d457db5b17f7c21c0e236f LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 156402 W: 39727 L: 39645 D: 77030 Ptnml(0-2): 71; 17143; 43696; 17215; 76  closes https://github.com/official-stockfish/Stockfish/pull/4747  Bench: 1493904,True,2,2023-08-01
SzilBalazs,Disservin,2023-08-16 19:24:58+00:00,Fix dead link to compression algorithm in tbprobe  closes https://github.com/official-stockfish/Stockfish/pull/4746  No functional change,True,2,2023-08-01
Disservin,Disservin,2023-08-16 19:24:54+00:00,Add CONTRIBUTING.md  closes https://github.com/official-stockfish/Stockfish/pull/4741  No functional change,True,2,2023-08-01
Unknown,Disservin,2023-08-13 09:59:06+00:00,Simplify material difference in evaluate  STC: https://tests.stockfishchess.org/tests/view/64d166235b17f7c21c0ddc15 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 100032 W: 25698 L: 25547 D: 48787 Ptnml(0-2): 308; 11748; 25771; 11863; 326  LTC: https://tests.stockfishchess.org/tests/view/64d28c085b17f7c21c0df775 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 123870 W: 31463 L: 31348 D: 61059 Ptnml(0-2): 63; 13487; 34719; 13604; 62  Besides rebasing I replaced PawnValueMg w/ 126 explicitly to decouple from https://tests.stockfishchess.org/tests/view/64d212de5b17f7c21c0debbb by @peregrineshahin which also passed. #4734  closes https://github.com/official-stockfish/Stockfish/pull/4731  Bench: 1447866,True,6,2023-08-01
peregrineshahin,Disservin,2023-08-13 09:58:08+00:00,Simplify pieceValue to one phase.  Simplifies the usage of pieceValues to mg values with the exception of pawnValues; After the removal of PSQT.  passed STC: https://tests.stockfishchess.org/tests/view/64d147845b17f7c21c0dd86c LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 197248 W: 50168 L: 50125 D: 96955 Ptnml(0-2): 651; 23029; 51222; 23070; 652  passed LTC: https://tests.stockfishchess.org/tests/view/64d212de5b17f7c21c0debbb LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 181170 W: 45949 L: 45893 D: 89328 Ptnml(0-2): 84; 19656; 51052; 19706; 87  closes https://github.com/official-stockfish/Stockfish/pull/4734  Bench: 1494401,True,6,2023-08-01
snicolet,Disservin,2023-08-13 09:52:47+00:00,Simplify SEE pruning for captures  It seems that the current search is smart enough to allow us to remove (again) the block of code that checks for discovered attacks after the first pruning condition for captures.  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 278848 W: 70856 L: 70903 D: 137089 Ptnml(0-2): 960; 32829; 71894; 32780; 961 https://tests.stockfishchess.org/tests/view/64d0af095b17f7c21c0dc440  LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 100704 W: 25564 L: 25425 D: 49715 Ptnml(0-2): 56; 10858; 28381; 11005; 52 https://tests.stockfishchess.org/tests/view/64d293e85b17f7c21c0df844  closes https://github.com/official-stockfish/Stockfish/pull/4736  Bench: 1470572,True,6,2023-08-01
FauziAkram,Disservin,2023-08-13 09:48:32+00:00,Simplify prior countermove bonus  Swapping a multiplication operation between two terms with a simple constant  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 60512 W: 15424 L: 15231 D: 29857 Ptnml(0-2): 200; 6985; 15712; 7140; 219 https://tests.stockfishchess.org/tests/view/64d2addf5b17f7c21c0dfae6  Passed LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 108456 W: 27545 L: 27414 D: 53497 Ptnml(0-2): 63; 11629; 30698; 11790; 48 https://tests.stockfishchess.org/tests/view/64d3ab6e5b17f7c21c0e1188  closes https://github.com/official-stockfish/Stockfish/pull/4738  Bench: 1636213,True,6,2023-08-01
ppigazzini,Disservin,2023-08-13 09:47:52+00:00,Check compiler for docker builds in CI  closes https://github.com/official-stockfish/Stockfish/pull/4739  No functional change,True,6,2023-08-01
peregrineshahin,Disservin,2023-08-13 09:44:17+00:00,Detect repetitions before they happen in qsearch  Passed STC: https://tests.stockfishchess.org/tests/view/64d495995b17f7c21c0e29ed LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 340288 W: 86664 L: 85910 D: 167714 Ptnml(0-2): 1030; 38855; 89697; 39455; 1107  Passed LTC: https://tests.stockfishchess.org/tests/view/64d5e1085b17f7c21c0e4ab5 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 193230 W: 49235 L: 48606 D: 95389 Ptnml(0-2): 98; 20432; 54921; 21071; 93  closes https://github.com/official-stockfish/Stockfish/pull/4742  Bench: 1579576,True,6,2023-08-01
cj5716,Disservin,2023-08-13 09:40:35+00:00,Simplify a depth condition  As the negative extension term has sensitive scaling; it would make more sense to allow more negative extension also at lower depth; and not just a region between low and high depth.  Passed STC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 124096 W: 31611 L: 31485 D: 61000 Ptnml(0-2): 422; 14437; 32205; 14561; 423 https://tests.stockfishchess.org/tests/view/64d205d75b17f7c21c0dea82  Passed LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 387882 W: 97840 L: 97993 D: 192049 Ptnml(0-2): 198; 42004; 109668; 41895; 176 https://tests.stockfishchess.org/tests/view/64d333f85b17f7c21c0e06c6  closes https://github.com/official-stockfish/Stockfish/pull/4743  Bench: 1542357,True,6,2023-08-01
Vizvezdenec,Disservin,2023-08-13 09:38:24+00:00,Give extra bonus to main history for moves that caused a fail low. #4744  Current master gives this type of bonuses to continuation history; this patch also gives them to main history.  Passed STC: https://tests.stockfishchess.org/tests/view/64d4802a5b17f7c21c0e27b3 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 480768 W: 122767 L: 121798 D: 236203 Ptnml(0-2): 1563; 56190; 123834; 57309; 1488  Passed LTC: https://tests.stockfishchess.org/tests/view/64d7e4c05b17f7c21c0e7456 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 32052 W: 8329 L: 8022 D: 15701 Ptnml(0-2): 19; 3335; 9015; 3634; 23  closes https://github.com/official-stockfish/Stockfish/pull/4744  Bench: 1711793,True,6,2023-08-01
vondele,Disservin,2023-08-13 09:34:00+00:00,Update sanitizer CI to ubuntu 22.04  might fix the tsan errors  closes https://github.com/official-stockfish/Stockfish/pull/4745  No functional change,True,6,2023-08-01
vondele,snicolet,2023-08-11 17:27:46+00:00,Improve testing coverage; remove unused code  a) Add further tests to CI to cover most features. This uncovered a potential race in case setoption was sent between two searches. As the UCI protocol requires this sent to be went the engine is not searching; setoption now ensures that this is the case.  b) Remove some unused code  closes https://github.com/official-stockfish/Stockfish/pull/4730  No functional change,False,4,2023-08-01
Sopel97,snicolet,2023-08-11 17:20:29+00:00,Fix Makefile for incorrect nnue file  If an incorrect network file is present at the start of the compilation stage; the Makefile script now correctly removes it before trying to download a clean version.  closes https://github.com/official-stockfish/Stockfish/pull/4726  No functional change,True,4,2023-08-01
aesrentai,Disservin,2023-08-09 16:27:16+00:00,Remove all references to Score type  Score is obsolete with the removal of psqt.  No functional change.  Signed-off-by: Cody Ho <codyho@stanford.edu>  closes https://github.com/official-stockfish/Stockfish/pull/4724,True,2,2023-08-01
Vizvezdenec,snicolet,2023-08-07 05:24:11+00:00,Adjust futility pruning base in qsearch  Current master used value from transposition table there if it existed; this patch uses minimum between this tt value and the static eval instead (this thus is closer to the main search function; which uses the static eval).  Passed STC: https://tests.stockfishchess.org/tests/view/64cd57285b17f7c21c0d6a8c LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 252544 W: 64671 L: 64039 D: 123834 Ptnml(0-2): 839; 29207; 65575; 29785; 866  Passed LTC: https://tests.stockfishchess.org/tests/view/64cf6c915b17f7c21c0d9fcb LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 60150 W: 15374 L: 15012 D: 29764 Ptnml(0-2): 24; 6321; 17024; 6681; 25  closes https://github.com/official-stockfish/Stockfish/pull/4725  Bench: 1573024,True,0,2023-08-01
FauziAkram,snicolet,2023-08-06 20:25:58+00:00,"Tweak formula for pruning moves losing material  Simplify the ""Prune moves with negative SEE"" formula; by removing one multiplication and subtraction operation.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 214272 W: 54596 L: 54572 D: 105104 Ptnml(0-2): 741; 25160; 55320; 25164; 751 https://tests.stockfishchess.org/tests/view/64c430d1dc56e1650abbdbf6  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 238380 W: 60600 L: 60601 D: 117179 Ptnml(0-2): 132; 26069; 66791; 26064; 134 https://tests.stockfishchess.org/tests/view/64c81f155b17f7c21c0cee2b  closes https://github.com/official-stockfish/Stockfish/pull/4721  bench: 1655337",True,6,2023-08-01
linrock,snicolet,2023-08-06 20:16:52+00:00,"Remove classical psqt  Based on vondele's deletepsqt branch: https://github.com/vondele/Stockfish/commit/369f5b051  This huge simplification uses a weighted material differences instead of the positional piece square tables (psqt) in the semi-classical complexity calculation. Tuned weights using spsa at 45+0.45 with:  int pawnMult = 100; int knightMult = 325; int bishopMult = 350; int rookMult = 500; int queenMult = 900; TUNE(SetRange(0; 200); pawnMult); TUNE(SetRange(0; 650); knightMult); TUNE(SetRange(0; 700); bishopMult); TUNE(SetRange(200; 800); rookMult); TUNE(SetRange(600; 1200); queenMult);  The values obtained via this tuning session were for a model where the psqt replacement formula was always from the point of view of White; even if the side to move was Black. We re-used the same values for an implementation with a psqt replacement from the point of view of the side to move; testing the result both on our standard book on positions with a strong White bias; and an alternate book with positions with a strong Black bias.  We note that with the patch the last use of the venerable ""Score"" type disappears in Stockfish codebase (the Score type was used in classical evaluation to get a tampered eval interpolating values smoothly from the early midgame stage to the endgame stage). We leave it to another commit to clean all occurrences of Score in the code and the comments.  -------  Passed non-regression LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 142542 W: 36264 L: 36168 D: 70110 Ptnml(0-2): 76; 15578; 39856; 15696; 65 https://tests.stockfishchess.org/tests/view/64c8cb495b17f7c21c0cf9f8  Passed non-regression LTC (with a book with Black bias): https://tests.stockfishchess.org/tests/view/64c8f9295b17f7c21c0cfdaf LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 494814 W: 125565 L: 125827 D: 243422 Ptnml(0-2): 244; 53926; 139346; 53630; 261  ------  closes https://github.com/official-stockfish/Stockfish/pull/4713  Bench: 1655985",True,6,2023-08-01
AndrovT,snicolet,2023-08-06 19:22:37+00:00,Implement AffineTransformSparseInput for armv8  Implements AffineTransformSparseInput layer for the NNUE evaluation for the armv8 and armv8-dotprod architectures. We measured some nice speed improvements via 10 runs of our benchmark:  armv8; Cortex-X1                  :   18.5% speed-up armv8; Cortex-A76                 :   13.2% speed-up armv8-dotprod; Cortex-X1          :   27.1% speed-up armv8-dotprod; Cortex-A76         :   12.1% speed-up armv8; Cortex-A72; Raspberry Pi 4 :    8.2% speed-up (thanks Torom!)  closes https://github.com/official-stockfish/Stockfish/pull/4719  No functional change,True,6,2023-08-01
ppigazzini,snicolet,2023-08-06 19:17:33+00:00,Add new CPU archs in CI Tests workflow  Add CPU archs: armv8-dotprod; riscv64 and ppc64le. The last two archs are built using QEMU multiarch docker container.  References: https://docs.docker.com/build/building/multi-platform/ https://github.com/docker/setup-buildx-action https://github.com/docker/setup-qemu-action https://github.com/tonistiigi/binfmt https://stackoverflow.com/questions/72444103/what-does-running-the-multiarch-qemu-user-static-does-before-building-a-containe  closes https://github.com/official-stockfish/Stockfish/pull/4718  No functional change,True,6,2023-08-01
niklasf,snicolet,2023-08-06 19:14:39+00:00,Identify NEON_DOTPROD in compiler_info()  closes https://github.com/official-stockfish/Stockfish/pull/4712  No functional change,True,6,2023-08-01
rn5f107s2,snicolet,2023-07-28 22:56:26+00:00,Malus during move ordering for putting pieces en prise  The original idea is the reverse of a previous patch [1] which added bonuses in our move picker to moves escaping threats. In this patch; in addition to bonuses for evading threats; we apply penalties to moves moving to threatened squares.  Further tweaks of that basic idea resulted in this specific version which further increases the penalty of moves moving to squares threatend depending on the piece threatening it. So for example a queen moving to a square attacked by a pawn would receive a larger penalty than a queen moving to square attacked by a rook.  [1]: https://github.com/official-stockfish/Stockfish/commit/08e0f52b77edb929989c68c49e954b9bc5d7d67e  --------  Passed STC: https://tests.stockfishchess.org/tests/live_elo/64c11269dc56e1650abb935d LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 95552 W: 24654 L: 24250 D: 46648 Ptnml(0-2): 322; 11098; 24562; 11442; 352  Passed LTC: https://tests.stockfishchess.org/tests/live_elo/64c2004ddc56e1650abba8b3 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 190230 W: 48806 L: 48178 D: 93246 Ptnml(0-2): 90; 20439; 53453; 21019; 114  -------  closes https://github.com/official-stockfish/Stockfish/pull/4711  Bench: 1350831,True,4,2023-07-01
snicolet,snicolet,2023-07-28 21:38:49+00:00,Improve some comments  - clarify the examples for the bench command - typo  in search.cpp  closes https://github.com/official-stockfish/Stockfish/pull/4710  No functional change,True,4,2023-07-01
Unknown,snicolet,2023-07-28 21:24:42+00:00,Remove unused return type from propagate()  Also make two get_weight_index() static methods constexpr; for consistency with the other static get_hash_value() method right above. Tested for speed by user Torom (thanks).  closes https://github.com/official-stockfish/Stockfish/pull/4708  No functional change,True,4,2023-07-01
FauziAkram,snicolet,2023-07-25 14:43:35+00:00,Simplify one multicut extension  Simplify away the ttValue <= alpha extension in the multicut block.  Passed STC: LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 318336 W: 81307 L: 81398 D: 155631 Ptnml(0-2): 1088; 37291; 82469; 37264; 1056 https://tests.stockfishchess.org/tests/view/64b8589fdc56e1650abad61d  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 89388 W: 22925 L: 22775 D: 43688 Ptnml(0-2): 34; 9635; 25210; 9777; 38 https://tests.stockfishchess.org/tests/view/64bc41d0dc56e1650abb29cb  closes https://github.com/official-stockfish/Stockfish/pull/4709  bench: 1604592,True,1,2023-07-01
stouset,snicolet,2023-07-24 22:13:38+00:00,Remove Zobrist::noPawns  Zobrist::noPawns is no longer used.  closes https://github.com/official-stockfish/Stockfish/pull/4344  no functional change,True,0,2023-07-01
locutus2,snicolet,2023-07-24 00:23:43+00:00,Simplify TT cutoff  Remove the exact bound condition from TT depth check.  STC: https://tests.stockfishchess.org/tests/view/64b30b320cdec37b957359e9 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 332928 W: 84895 L: 85003 D: 163030 Ptnml(0-2): 1242; 39200; 85604; 39260; 1158  LTC: https://tests.stockfishchess.org/tests/view/64b74e2adc56e1650abac0b6 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 92946 W: 23628 L: 23482 D: 45836 Ptnml(0-2): 38; 10033; 26192; 10165; 45  closes https://github.com/official-stockfish/Stockfish/pull/4702  Bench: 1601764,True,0,2023-07-01
windfishballad,snicolet,2023-07-24 00:09:44+00:00,Simplify some qsearch conditions  Use the assert which ensures that beta == alpha+1 at PVNodes to simplify a little bit the conditions further down in the code.  passed STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 56160 W: 14370 L: 14173 D: 27617 Ptnml(0-2): 210; 6192; 15076; 6395; 207 https://tests.stockfishchess.org/tests/view/64bc769cdc56e1650abb2e26  closes https://tests.stockfishchess.org/tests/view/64bc769cdc56e1650abb2e26  No functional change,True,0,2023-07-01
vondele,snicolet,2023-07-23 23:56:20+00:00,Check clock more often  This patch changes the frequency with which the time is checked; changing frequency from every 1024 counted nodes to every 512 counted nodes. The master value was tuned for the old classical eval; the patch takes the roughly 2x slowdown in nps with SFNNUEv7 into account. This could reduce a bit the losses on time on fishtest; but they are probably unrelated.  passed STC: https://tests.stockfishchess.org/tests/view/64bb8ae5dc56e1650abb1b11 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 76576 W: 19677 L: 19501 D: 37398 Ptnml(0-2): 274; 8592; 20396; 8736; 290  closes https://github.com/official-stockfish/Stockfish/pull/4704  No functional change,True,6,2023-07-01
Vizvezdenec,vondele,2023-07-19 19:40:38+00:00,Do more futility pruning for cutNodes that are not in TT  This is somewhat similar to IIR for cutnodes but instead of reducing depth for cutnodes that don't have tt move we reduce margin multiplier in futility pruning for cutnodes that are not in TT.  Passed STC: https://tests.stockfishchess.org/tests/view/64b244b90cdec37b95734c5b LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 75552 W: 19404 L: 19029 D: 37119 Ptnml(0-2): 233; 8806; 19378; 9071; 288  Passed LTC: https://tests.stockfishchess.org/tests/view/64b3ae5a0cdec37b95736516 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 104988 W: 27152 L: 26697 D: 51139 Ptnml(0-2): 41; 11259; 29446; 11700; 48  closes https://github.com/official-stockfish/Stockfish/pull/4700  bench 1727577,True,2,2023-07-01
Unknown,vondele,2023-07-19 19:39:51+00:00,Remove inline assembly  closes https://github.com/official-stockfish/Stockfish/pull/4698  No functional change,True,2,2023-07-01
aesrentai,vondele,2023-07-19 19:38:39+00:00,Unused code cleanup  closes https://github.com/official-stockfish/Stockfish/pull/4696  No functional change,True,2,2023-07-01
jorgectf,vondele,2023-07-19 19:36:38+00:00,Add CodeQL workflow  add CI tooling to detect security bugs.  closes https://github.com/official-stockfish/Stockfish/pull/4659  No functional change,True,2,2023-07-01
rn5f107s2,vondele,2023-07-18 06:10:11+00:00,Removes a few Bitboards and functions  No longer used  closes https://github.com/official-stockfish/Stockfish/pull/4695  No functional change,True,1,2023-07-01
robertnurnberg,vondele,2023-07-18 06:09:52+00:00,remove evalType from bench  no longer used  closes https://github.com/official-stockfish/Stockfish/pull/4694  No functional change,True,1,2023-07-01
vondele,vondele,2023-07-16 20:27:13+00:00,Switch to macos 13 for CI  allows for building x86-64-avx2 and x86-64-bmi2 binaries for mac  install coreutils show hardware capabilities as seen by the compilers move some tests from sse41 to avx2 as platforms support it  closes https://github.com/official-stockfish/Stockfish/pull/4692  No functional change,True,6,2023-07-01
vondele,vondele,2023-07-16 15:47:25+00:00,Deprecate the x86-64-modern arch  Explicitly describe the architecture as deprecated; it remains available as its current alias x86-64-sse41-popcnt  CPUs that support just this instruction set are now years old; any few years old Intel or AMD CPU supports x86-64-avx2. However; naming things 'modern' doesn't age well; so instead use explicit names.  Adjust CI accordingly. Wiki; fishtest; downloader done as well.  closes https://github.com/official-stockfish/Stockfish/pull/4691  No functional change.,True,6,2023-07-01
Vizvezdenec,vondele,2023-07-16 13:18:41+00:00,Remove improvement variable  No longer used in a meaningful way. Improve comments.  Closes https://github.com/official-stockfish/Stockfish/pull/4688  No functional change,True,6,2023-07-01
Unknown,vondele,2023-07-16 13:16:14+00:00,Remove pawnKey from StateInfo  Remove pawnKey since it is not used anymore.  Passed Non-regression STC: https://tests.stockfishchess.org/tests/view/64b023110cdec37b9573265c LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 334848 W: 85440 L: 85545 D: 163863 Ptnml(0-2): 1134; 38101; 89075; 37964; 1150  closes https://github.com/official-stockfish/Stockfish/pull/4687  No functional change,True,6,2023-07-01
vondele,vondele,2023-07-16 13:14:50+00:00,Consolidate to centipawns conversion  avoid doing this calculations in multiple places.  closes https://github.com/official-stockfish/Stockfish/pull/4686  No functional change,True,6,2023-07-01
vondele,vondele,2023-07-16 13:13:24+00:00,Remove some CI parts not yet working  downgrading compiler didn't work for windows build. Stick to gcc 13 for now. Windows x86-32 not a 32bit binary; remove.  closes https://github.com/official-stockfish/Stockfish/pull/4685  No functional change,True,6,2023-07-01
AndrovT,vondele,2023-07-16 13:12:21+00:00,remove large input specialization  Removes unused large input specialization for dense affine transform. It has been obsolete since #4612 was merged.  closes https://github.com/official-stockfish/Stockfish/pull/4684  No functional change,True,6,2023-07-01
linrock,vondele,2023-07-15 07:16:09+00:00,Reintroduce nnue eval pawn count multipliers again  With separate multipliers for nnue eval and optimism scaling. This patch used 4 out of 7 params tuned with spsa at 30+0.3 using this tuning config:  Value LazyThreshold1 = Value(3622); Value LazyThreshold2 = Value(1962); int psqThresh = 2048; int nnueNpmBase = 945; int nnuePcMult = 0; int optNpmBase = 150; int optPcMult = 0; TUNE(SetRange(3322; 3922); LazyThreshold1); TUNE(SetRange(1662; 2262); LazyThreshold2); TUNE(SetRange(1748; 2348); psqThresh); TUNE(SetRange(745; 1145); nnueNpmBase); TUNE(SetRange(-16; 16); nnuePcMult); TUNE(SetRange(0; 300); optNpmBase); TUNE(SetRange(-16; 16); optPcMult);  Passed STC: https://tests.stockfishchess.org/tests/view/64a5a9b402cd07745c60ed07 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 173632 W: 44417 L: 43903 D: 85312 Ptnml(0-2): 547; 20025; 45068; 20719; 457  Passed LTC: https://tests.stockfishchess.org/tests/view/64a972a302cd07745c6136af LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 277644 W: 70955 L: 70147 D: 136542 Ptnml(0-2): 193; 29902; 77787; 30784; 156  closes https://github.com/official-stockfish/Stockfish/pull/4681  bench 1556301,True,5,2023-07-01
vondele,vondele,2023-07-15 07:15:16+00:00,Build and test more binaries in CI  use a fixed compiler on Linux and Windows (right now gcc 11). build avxvnni on Windows (Linux needs updated core utils) build x86-32 on Linux (Windows needs other mingw) fix a Makefile issue where a failed PGOBENCH would not stop the build reuse the WINE_PATH for SDE as we do for QEMU use WINE_PATH variable also for the signature verify the bench for each of the binaries do not build x86-64-avx2 on macos  closes https://github.com/official-stockfish/Stockfish/pull/4682  No functional change,True,5,2023-07-01
FauziAkram,vondele,2023-07-15 07:13:02+00:00,Use more expressive names for bonus1 and bonus2  closes https://github.com/official-stockfish/Stockfish/pull/4683  No functional change,True,5,2023-07-01
vondele,vondele,2023-07-13 06:21:17+00:00,Generate binaries for more advanced architectures  use intel's Software Development Emulator (SDE) in the actions that build the binaries. This allows for building on Windows and Linux binaries for - x86-64-avx512 - x86-64-vnni256 - x86-64-vnni512  (x86-64-avxvnni needs more recent gcc in the actions)  also build x86-64-avx2 on macos.  closes https://github.com/official-stockfish/Stockfish/pull/4679  No functional change,True,3,2023-07-01
Unknown,vondele,2023-07-13 06:20:33+00:00,More simplifications and cleanup in affine_transform_sparse_input.h  closes https://github.com/official-stockfish/Stockfish/pull/4677  No functional change,True,3,2023-07-01
UniQP,vondele,2023-07-13 06:19:37+00:00,Cleanup code after removal of classical evaluation  This includes the following changes: - Remove declaration of removed global variable - Adapt string that mentions removed UCI option  closes https://github.com/official-stockfish/Stockfish/pull/4675  No functional change,True,3,2023-07-01
vondele,vondele,2023-07-11 20:56:49+00:00,Remove classical evaluation  since the introduction of NNUE (first released with Stockfish 12); we have maintained the classical evaluation as part of SF in frozen form. The idea that this code could lead to further inputs to the NN or search did not materialize. Now; after five releases; this PR removes the classical evaluation from SF. Even though this evaluation is probably the best of its class; it has become unimportant for the engine's strength; and there is little need to maintain this code (roughly 25% of SF) going forward; or to expend resources on trying to improve its integration in the NNUE eval.  Indeed; it had still a very limited use in the current SF; namely for the evaluation of positions that are nearly decided based on material difference; where the speed of the classical evaluation outweights its inaccuracies. This impact on strength is small; roughly 2Elo; and probably decreasing in importance as the TC grows.  Potentially; removal of this code could lead to the development of techniques to have faster; but less accurate NN evaluation; for certain positions.  STC https://tests.stockfishchess.org/tests/view/64a320173ee09aa549c52157 Elo: -2.35 � 1.1 (95%) LOS: 0.0% Total: 100000 W: 24916 L: 25592 D: 49492 Ptnml(0-2): 287; 12123; 25841; 11477; 272 nElo: -4.62 � 2.2 (95%) PairsRatio: 0.95  LTC https://tests.stockfishchess.org/tests/view/64a320293ee09aa549c5215b  Elo: -1.74 � 1.0 (95%) LOS: 0.0% Total: 100000 W: 25010 L: 25512 D: 49478 Ptnml(0-2): 44; 11069; 28270; 10579; 38 nElo: -3.72 � 2.2 (95%) PairsRatio: 0.96  VLTC SMP https://tests.stockfishchess.org/tests/view/64a3207c3ee09aa549c52168  Elo: -1.70 � 0.9 (95%) LOS: 0.0% Total: 100000 W: 25673 L: 26162 D: 48165 Ptnml(0-2): 8; 9455; 31569; 8954; 14 nElo: -3.95 � 2.2 (95%) PairsRatio: 0.95  closes https://github.com/official-stockfish/Stockfish/pull/4674  Bench: 1444646,True,1,2023-07-01
XInTheDark,vondele,2023-07-11 20:55:00+00:00,Simplify PvNode reduction  Simplification STC: https://tests.stockfishchess.org/tests/view/64a415803ee09aa549c539c3 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 37856 W: 9719 L: 9504 D: 18633 Ptnml(0-2): 98; 4277; 9977; 4464; 112  Simplification LTC: https://tests.stockfishchess.org/tests/view/64a5ffe202cd07745c60f360 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 55878 W: 14323 L: 14138 D: 27417 Ptnml(0-2): 21; 5993; 15732; 6166; 27  closes https://github.com/official-stockfish/Stockfish/pull/4673  Bench: 2604965,True,1,2023-07-01
vondele,vondele,2023-07-11 20:53:15+00:00,Fix CI output  closes https://github.com/official-stockfish/Stockfish/pull/4669  No functional change,True,1,2023-07-01
linrock,vondele,2023-07-06 21:03:58+00:00,Update default net to nn-c38c3d8d3920.nnue  This was a later epoch from the same experiment that led to the previous master net. After training; it was prepared the same way:  1. greedy permuting L1 weights with https://github.com/official-stockfish/Stockfish/pull/4620 2. leb128 compression with https://github.com/glinscott/nnue-pytorch/pull/251 3. greedy 2- and 3- cycle permuting with https://github.com/official-stockfish/Stockfish/pull/4640  Local elo at 25k nodes per move (vs. L1-1536 nn-fdc1d0fe6455.nnue): nn-epoch739.nnue : 20.2 +/- 1.7  Passed STC: https://tests.stockfishchess.org/tests/view/64a050b33ee09aa549c4e4c8 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 195552 W: 49977 L: 49430 D: 96145 Ptnml(0-2): 556; 22775; 50607; 23242; 596  Passed LTC: https://tests.stockfishchess.org/tests/view/64a127bd3ee09aa549c4f60c LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 235452 W: 60327 L: 59609 D: 115516 Ptnml(0-2): 119; 25173; 66426; 25887; 121  closes https://github.com/official-stockfish/Stockfish/pull/4666  bench 2427629,True,3,2023-07-01
vondele,vondele,2023-07-06 21:03:16+00:00,Add armv8-dotprod to CI binaries  also generate binaries for more recent Android hardware.  closes https://github.com/official-stockfish/Stockfish/pull/4663  No functional change,True,3,2023-07-01
Unknown,vondele,2023-07-06 21:02:11+00:00,Simplify away lookup_count.  https://tests.stockfishchess.org/tests/view/64a3c1a93ee09aa549c53167 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 32832 W: 8497 L: 8280 D: 16055 Ptnml(0-2): 80; 3544; 8967; 3729; 96  closes https://github.com/official-stockfish/Stockfish/pull/4662  No functional change,True,3,2023-07-01
vondele,vondele,2023-07-06 21:01:27+00:00,Revise extract bench from git log in CI  order commits differently  closes https://github.com/official-stockfish/Stockfish/pull/4668  No functional change,True,3,2023-07-01
ppigazzini,vondele,2023-07-03 18:17:14+00:00,Remove leftover braces for if conditional in CI  closes https://github.com/official-stockfish/Stockfish/pull/4660  No functional change,True,0,2023-07-01
ppigazzini,ppigazzini,2023-07-03 17:07:06+00:00,Extract bench according to wiki instructions  - loop through the commits starting from the latest one - read the bench value from the last match; if any; of the template   in the commit body text  closes https://github.com/official-stockfish/Stockfish/pull/4627  No functional change,False,0,2023-07-01
rn5f107s2,vondele,2023-07-03 16:54:22+00:00,simplified gives check castling  tested verifying perft and bench is unchanged on a larger set of epds for both standard and FRC chess.  Passed non-regression STC: https://tests.stockfishchess.org/tests/live_elo/648587be65ffe077ca123d78 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 153632 W: 41015 L: 40928 D: 71689 Ptnml(0-2): 377; 16077; 43816; 16174; 372  closes https://github.com/official-stockfish/Stockfish/pull/4628  No functional change,True,0,2023-07-01
FauziAkram,vondele,2023-07-03 16:38:41+00:00,Improving grammar and readability of comments  closes https://github.com/official-stockfish/Stockfish/pull/4643  No functional change,True,0,2023-07-01
XInTheDark,vondele,2023-07-03 16:33:27+00:00,Simplify score improvement reduction  Reduce depth by 2 based on score improvement; only for depths 3 to 11.  Simplification STC: https://tests.stockfishchess.org/tests/view/64929a53dc7002ce609c7807 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 238912 W: 63466 L: 63468 D: 111978 Ptnml(0-2): 564; 26262; 65805; 26262; 563  Simplification LTC: https://tests.stockfishchess.org/tests/view/64942e47dc7002ce609c9e07 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 64452 W: 17485 L: 17320 D: 29647 Ptnml(0-2): 19; 6161; 19706; 6316; 24  closes https://github.com/official-stockfish/Stockfish/pull/4637  Bench: 2740142,True,0,2023-07-01
XInTheDark,vondele,2023-07-03 16:27:33+00:00,Simplify away improvement term in null move search  passed STC: https://tests.stockfishchess.org/tests/view/649c0d2edc7002ce609d33b5 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 271104 W: 72181 L: 72217 D: 126706 Ptnml(0-2): 691; 30042; 74129; 29992; 698  passed LTC: https://tests.stockfishchess.org/tests/view/649d0dd7dc7002ce609d4efa LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 183120 W: 49469 L: 49418 D: 84233 Ptnml(0-2): 84; 17636; 56063; 17699; 78  closes https://github.com/official-stockfish/Stockfish/pull/4650  Bench: 2642851,True,0,2023-07-01
peregrineshahin,vondele,2023-07-03 16:24:41+00:00,Fix pruning to (in TB loss) in Null move pruning.  Current logic can apply Null move pruning on a dead-lost position returning an unproven loss (i.e. in TB loss score or mated in losing score) on nonPv nodes.  on a default bench; this can be observed by adding this debugging line: ``` if (nullValue >= beta) {     // Do not return unproven mate or TB scores     nullValue = std::min(nullValue; VALUE_TB_WIN_IN_MAX_PLY-1);     dbg_hit_on(nullValue <= VALUE_TB_LOSS_IN_MAX_PLY); // Hit #0: Total 73983 Hits 1 Hit Rate (%) 0.00135166     if (thisThread->nmpMinPly || depth < 14)         return nullValue; ```  This fixes this very rare issue (happens at ~0.00135166% of the time) by eliminating the need to try Null Move Pruning with dead-lost positions and leaving it to be determined by a normal searching flow.  The previous try to fix was not as safe enough because it was capping the returned value to (out of TB range) thus reviving the dead-lost position based on an artificial clamp (i.e. the in TB score/mate score can be lost on that nonPv node): https://tests.stockfishchess.org/tests/view/649756d5dc7002ce609cd794  Final fix: Passed STC: https://tests.stockfishchess.org/tests/view/649a5446dc7002ce609d1049 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 577280 W: 153613 L: 153965 D: 269702 Ptnml(0-2): 1320; 60594; 165190; 60190; 1346  Passed LTC: https://tests.stockfishchess.org/tests/view/649cd048dc7002ce609d4801 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 246432 W: 66769 L: 66778 D: 112885 Ptnml(0-2): 83; 22105; 78847; 22100; 81  closes https://github.com/official-stockfish/Stockfish/pull/4649  Bench: 2425978,True,0,2023-07-01
Unknown,vondele,2023-07-03 16:20:10+00:00,Simplify lookup_count and clean up pieces().  https://github.com/official-stockfish/Stockfish/pull/4656  No functional change,True,0,2023-07-01
Disservin,vondele,2023-07-03 16:17:20+00:00,Add bmi2 to CI generated binaries  verify bench for avx2 and bmi2 as well  closes https://github.com/official-stockfish/Stockfish/pull/4658  No functional change,True,0,2023-07-01
ppigazzini,vondele,2023-07-02 08:32:36+00:00,Make posix and msys2 shells consistent in CI  In CI; it is typical for the process to halt immediately when an error is encountered. However; with our `shell: bash {0}` configuration; the process continues despite errors for posix shells. This commit updates the behavior of posix and msys2 shells to ensure consistency in terms of pipeline exit codes and stop conditions. We adopt the most appropriate default behavior as recommended by the GitHub documentation.  Update the code that searches for the bench value in the git log: - to be compatible with the new shell settings - to retry the value from the first line that contains   only the template and spaces/tabs/newlines  see also  https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference https://github.com/msys2/setup-msys2/blob/main/main.js  closes https://github.com/official-stockfish/Stockfish/pull/4653  No functional change,True,6,2023-07-01
linrock,vondele,2023-07-01 11:34:30+00:00,Update NNUE architecture to SFNNv7 with larger L1 size of 2048  Creating this net involved: - a 5-step training process from scratch - greedy permuting L1 weights with https://github.com/official-stockfish/Stockfish/pull/4620 - leb128 compression with https://github.com/glinscott/nnue-pytorch/pull/251 - greedy 2- and 3- cycle permuting with https://github.com/official-stockfish/Stockfish/pull/4640  The 5 training steps were:  1. 400 epochs; lambda 1.0; lr 9.75e-4    UHOx2-wIsRight-multinet-dfrc-n5000-largeGensfen-d9.binpack (178G)      nodes5000pv2_UHO.binpack      data_pv-2_diff-100_nodes-5000.binpack      wrongIsRight_nodes5000pv2.binpack      multinet_pv-2_diff-100_nodes-5000.binpack      dfrc_n5000.binpack      large_gensfen_multipvdiff_100_d9.binpack    ep399 chosen as start model for step2  2. 800 epochs; end-lambda 0.75; skip 16    LeelaFarseer-T78juntoaugT79marT80dec.binpack (141G)      T60T70wIsRightFarseerT60T74T75T76.binpack      test78-junjulaug2022-16tb7p.no-db.min.binpack      test79-mar2022-16tb7p.no-db.min.binpack      test80-dec2022-16tb7p.no-db.min.binpack    ep559 chosen as start model for step3  3. 800 epochs; end-lambda 0.725; skip 20    leela96-dfrc99-v2-T80dectofeb-sk20-mar-v6-T77decT78janfebT79apr.binpack (223G)      leela96-filt-v2.min.binpack      dfrc99-16tb7p-eval-filt-v2.min.binpack      test80-dec2022-16tb7p-filter-v6-sk20.min-mar2023.binpack      test80-jan2023-16tb7p-filter-v6-sk20.min-mar2023.binpack      test80-feb2023-16tb7p-filter-v6-sk20.min-mar2023.binpack      test80-mar2023-2tb7p-filter-v6.min.binpack      test77-dec2021-16tb7p.no-db.min.binpack      test78-janfeb2022-16tb7p.no-db.min.binpack      test79-apr2022-16tb7p.no-db.min.binpack    ep499 chosen as start model for step4  4. 800 epochs; end-lambda 0.7; skip 24    0dd1cebea57 dataset https://github.com/official-stockfish/Stockfish/pull/4606    ep599 chosen as start model for step5  5. 800 epochs; end-lambda 0.7; skip 28    same dataset as step4    ep619 became nn-1b951f8b449d.nnue  For the final step5 training:  python3 easy_train.py \   --experiment-name L1-2048-S5-sameData-sk28-S4-0dd1cebea57-shuffled-S3-leela96-dfrc99-v2-T80dectofeb-sk20-mar-v6-T77decT78janfebT79apr-sk20-S2-LeelaFarseerT78T79T80-ep399-S1-UHOx2-wIsRight-multinet-dfrc-n5000-largeGensfen-d9 \   --training-dataset /data/leela96-dfrc99-T60novdec-v2-T80juntonovjanfebT79aprmayT78jantosepT77dec-v6dd-T80apr.binpack \   --early-fen-skipping 28 \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes-L1-2048 \   --engine-test-branch linrock/Stockfish/L1-2048 \   --start-from-engine-test-net False \   --start-from-model /data/experiments/experiment_L1-2048-S4-0dd1cebea57-shuffled-S3-leela96-dfrc99-v2-T80dectofeb-sk20-mar-v6-T77decT78janfebT79apr-sk20-S2-LeelaFarseerT78T79T80-ep399-S1-UHOx2-wIsRight-multinet-dfrc-n5000-largeGensfen-d9/training/run_0/nn-epoch599.nnue   --max_epoch 800 \   --lr 4.375e-4 \   --gamma 0.995 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --tui False \   --seed $RANDOM \   --gpus 0  SF training data components for the step1 dataset: https://drive.google.com/drive/folders/1yLCEmioC3Xx9KQr4T7uB6GnLm5icAYGU  Leela training data for steps 2-5 can be found at: https://robotmoon.com/nnue-training-data/  Due to larger L1 size and slower inference; the speed penalty loses elo at STC. Measurements from 100 bench runs at depth 13 with x86-64-modern on Intel Core i5-1038NG7 2.00GHz:  sf_base =  1240730  +/-   3443 (95%) sf_test =  1153341  +/-   2832 (95%) diff    =   -87388  +/-   1616 (95%) speedup = -7.04330% +/- 0.130% (95%)  Local elo at 25k nodes per move (vs. L1-1536 nn-fdc1d0fe6455.nnue): nn-epoch619.nnue : 21.1 +/- 3.2  Failed STC: https://tests.stockfishchess.org/tests/view/6498ee93dc7002ce609cf979 LLR: -2.95 (-2.94;2.94) <0.00;2.00> Total: 11680 W: 3058 L: 3299 D: 5323 Ptnml(0-2): 44; 1422; 3149; 1181; 44  LTC: https://tests.stockfishchess.org/tests/view/649b32f5dc7002ce609d20cf Elo: 0.68 � 1.5 (95%) LOS: 80.5% Total: 40000 W: 10887 L: 10809 D: 18304 Ptnml(0-2): 36; 3938; 11958; 4048; 20 nElo: 1.50 � 3.4 (95%) PairsRatio: 1.02  Passed VLTC 180+1.8: https://tests.stockfishchess.org/tests/view/64992b43dc7002ce609cfd20 LLR: 3.06 (-2.94;2.94) <0.00;2.00> Total: 38086 W: 10612 L: 10338 D: 17136 Ptnml(0-2): 9; 3316; 12115; 3598; 5  Passed VLTC SMP 60+0.6 th 8: https://tests.stockfishchess.org/tests/view/649a21fedc7002ce609d0c7d LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 38936 W: 11091 L: 10820 D: 17025 Ptnml(0-2): 1; 2948; 13305; 3207; 7  closes https://github.com/official-stockfish/Stockfish/pull/4646  Bench: 2505168,True,5,2023-07-01
cj5716,vondele,2023-07-01 11:06:49+00:00,Negative extension on cutNodes based on depth  This patch was inspired by candirufish original attempt at negative extensions here that failed yellow: https://tests.stockfishchess.org/tests/view/6486529065ffe077ca124f32  I tested some variations of the idea and tuned a depth condition for a modified version of it here https://tests.stockfishchess.org/tests/view/648db80a91c58631ce31fe00 after noticing abnormal scaling (ie many passed STC but not LTC) After some small tweaks I got the final version here  Passed STC: LLR: 2.98 (-2.94;2.94) <0.00;2.00> Total: 122208 W: 32776 L: 32350 D: 57082 Ptnml(0-2): 310; 13250; 33553; 13686; 305 https://tests.stockfishchess.org/tests/view/64997934dc7002ce609d01e3  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 145092 W: 39617 L: 39115 D: 66360 Ptnml(0-2): 54; 13691; 44552; 14197; 52 https://tests.stockfishchess.org/tests/view/649a1c5ddc7002ce609d0bff  closes https://github.com/official-stockfish/Stockfish/pull/4644  Bench: 2637784,True,5,2023-07-01
snicolet,vondele,2023-07-01 11:01:28+00:00,Document the LEB128 patch  Add some comments and harmonize style for the LEB128 patch.  closes https://github.com/official-stockfish/Stockfish/pull/4642  No functional change,True,5,2023-07-01
Ergodice,vondele,2023-07-01 10:59:28+00:00,Update default net to nn-a3d1bfca1672.nnue  faster permutation of master net weights  Activation data taken from https://drive.google.com/drive/folders/1Ec9YuuRx4N03GPnVPoQOW70eucOKngQe?usp=sharing Permutation found using https://github.com/Ergodice/nnue-pytorch/blob/836387a0e5e690431d404158c46648710f13904d/ftperm.py See also https://github.com/glinscott/nnue-pytorch/pull/254  The algorithm greedily selects 2- and 3-cycles that can be permuted to increase the number of runs of zeroes. The percent of zero runs from the master net increased from 68.46 to 70.11 from 2-cycles and only increased to 70.32 when considering 3-cycles. Interestingly; allowing both halves of L1 to intermix when creating zero runs can give another 0.5% zero-run density increase with this method.  Measured speedup:  ``` CPU: 16 x AMD Ryzen 9 3950X 16-Core Processor Result of 50 runs  base (./stockfish.master ) = 1561556 +/- 5439 test (./stockfish.patch ) = 1575788 +/- 5427 diff = +14231 +/- 2636  speedup = +0.0091 P(speedup > 0) = 1.0000 ```  closes https://github.com/official-stockfish/Stockfish/pull/4640  No functional change,True,5,2023-07-01
vondele,vondele,2023-07-01 10:52:31+00:00,Restore development  closes https://github.com/official-stockfish/Stockfish/pull/4651  No functional change,True,5,2023-07-01
vondele,vondele,2023-06-29 06:00:10+00:00,Stockfish 16  Official release version of Stockfish 16  Bench: 2593605  ---  Stockfish 16  A new major release of Stockfish is now available at  https://stockfishchess.org/download/  *Quality of chess play*  Stockfish continues to demonstrate its ability to discover superior moves with remarkable speed. In self-play against Stockfish 15; this new release gains up to 50 Elo[1] and wins up to 12 times more game pairs[2] than it loses. In major chess engine tournaments; Stockfish reliably tops the rankings[3] winning the TCEC season 24 Superfinal; Swiss; Fischer Random; and Double Random Chess tournaments and the CCC 19 Bullet; 20 Blitz; and 20 Rapid competitions. Leela Chess Zero[4] was the challenger in most finals; putting top-engine chess now firmly in the hands of teams embracing free and open-source software.  *Progress made*  This updated version of Stockfish introduces several enhancements; including an upgraded neural net architecture (SFNNv6)[5]; improved implementation; and refined parameterization. The ongoing utilization of Leela�s data combined with a novel inference approach exploiting sparsity[6]; and network compression[7] ensure a speedy evaluation and modest binary sizes while allowing for more weights and higher accuracy. The search has undergone more optimization; leading to improved performance; particularly in longer analyses[8]. Additionally; the Fishtest framework has been improved and is now able to run the tests needed to validate new ideas with 10000s of CPU cores.  *Usability improvements*  Stockfish now comes with documentation; found in the wiki folder when downloading it or on GitHub[9]. Additionally; Stockfish now includes a clear and consistent forced tablebase win score; displaying a value of 200 minus the number of plies required to reach a tablebase win[10]. Furthermore; the UCI_Elo option; to reduce its strength; has been calibrated[11]. It is worth noting that the evaluation system remains consistent with Stockfish 15.1[12]; maintaining the choice that 100cp means a 50% chance of winning the game against an equal opponent[13]. Finally; binaries of our latest development version are now provided continuously as pre-releases on GitHub making it easier for enthusiasts to download the latest and strongest version of the program[14]; we thank Roman Korba for having provided a similar service for a long time.  *Thank you*  The success of the Stockfish project relies on the vibrant community of passionate enthusiasts (we appreciate each and every one of you!) who generously contribute their knowledge; time; and resources. Together; this dedicated community works towards the common goal of developing a powerful; freely accessible; and open-source chess engine. We invite all chess enthusiasts to join the Fishtest testing framework and contribute to the project[15].  The Stockfish team  [1] https://tests.stockfishchess.org/tests/view/649409f0dc7002ce609c99cc [2] https://tests.stockfishchess.org/tests/view/649409d7dc7002ce609c99c6 [3] https://en.wikipedia.org/wiki/Stockfish_(chess)#Competition_results [4] https://lczero.org/ [5] https://github.com/official-stockfish/Stockfish/commit/c1fff71 [6] https://github.com/official-stockfish/Stockfish/commit/38e6166 [7] https://github.com/official-stockfish/Stockfish/commit/a46087e [8] https://github.com/official-stockfish/Stockfish/commit/472e726 [9] https://github.com/official-stockfish/Stockfish/wiki/ [10] https://github.com/official-stockfish/Stockfish/commit/def2966 [11] https://github.com/official-stockfish/Stockfish/commit/a08b8d4 [12] https://github.com/official-stockfish/Stockfish/commit/52e84e4 [13] https://github.com/official-stockfish/Stockfish/wiki/Stockfish-FAQ#interpretation-of-the-stockfish-evaluation [14] https://github.com/official-stockfish/Stockfish/releases?q=prerelease%3Atrue [15] https://stockfishchess.org/get-involved/,False,3,2023-06-01
linrock,vondele,2023-06-22 08:33:19+00:00,Update default net to nn-5af11540bbfe.nnue  Created by retraining the sparsified master net (nn-cd2ff4716c34.nnue) on a 100% minified dataset including Leela transformers data from T80 may2023.  Weights permuted with the exact methods and code in: https://github.com/official-stockfish/Stockfish/pull/4620  LEB128 compression done with the new serialize.py param in: https://github.com/glinscott/nnue-pytorch/pull/251  Initially trained with max epoch 800. Around epoch 780; training was paused and max epoch raised to 960.  python3 easy_train.py \   --experiment-name L1-1536-sparse-master-retrain \   --training-dataset /data/leela96-dfrc99-v2-T60novdecT77decT78jantosepT79aprmayT80juntonovjan-v6dd-T80febtomay2023.min.binpack \   --early-fen-skipping 27 \   --start-from-engine-test-net True \   --max_epoch 960 \   --lr 4.375e-4 \   --gamma 0.995 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --tui False \   --seed $RANDOM \   --gpus 0  For preparing the training dataset (interleaved size 328G):  python3 interleave_binpacks.py \   leela96-filt-v2.min.binpack \   dfrc99-16tb7p-eval-filt-v2.min.binpack \   filt-v6-dd-min/test60-novdec2021-12tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test77-dec2021-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test78-jantomay2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test78-juntosep2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test79-apr2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test79-may2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test80-jun2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test80-jul2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test80-aug2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test80-sep2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test80-oct2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test80-nov2022-16tb7p-filter-v6-dd.min.binpack \   filt-v6-dd-min/test80-jan2023-16tb7p-filter-v6-dd.min.binpack \   test80-2023/test80-feb2023-16tb7p-no-db.min.binpack \   test80-2023/test80-mar2023-2tb7p-no-db.min.binpack \   test80-2023/test80-apr2023-2tb7p-no-db.min.binpack \   test80-2023/test80-may2023-2tb7p-no-db.min.binpack \   /data/leela96-dfrc99-v2-T60novdecT77decT78jantosepT79aprmayT80juntonovjan-v6dd-T80febtomay2023.min.binpack  Minified binpacks and Leela T80 training data from 2023 available at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move: nn-epoch879.nnue : 3.9 +/- 5.7  Passed STC: https://tests.stockfishchess.org/tests/view/64928c1bdc7002ce609c7690 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 72000 W: 19242 L: 18889 D: 33869 Ptnml(0-2): 182; 7787; 19716; 8126; 189  Passed LTC: https://tests.stockfishchess.org/tests/view/64930a37dc7002ce609c82e3 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 54552 W: 14978 L: 14647 D: 24927 Ptnml(0-2): 23; 5123; 16650; 5460; 20  closes https://github.com/official-stockfish/Stockfish/pull/4635  bench 2593605,True,3,2023-06-01
peregrineshahin,vondele,2023-06-22 08:26:17+00:00,Fix Potential in TB cutoffs for NMP.  Removes the second dependency on beta and caps the return value to VALUE_TB_WIN_IN_MAX_PLY - 1  Earlier tests:  STC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 193632 W: 51372 L: 51326 D: 90934 Ptnml(0-2): 447; 20111; 55687; 20091; 480 https://tests.stockfishchess.org/tests/view/6486ee4465ffe077ca125bc1  LTC: LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 331758 W: 89538 L: 89624 D: 152596 Ptnml(0-2): 114; 30121; 105516; 29993; 135 https://tests.stockfishchess.org/tests/view/6489401af42a44347ed7be42  updated constant: LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 100260 W: 27143 L: 27017 D: 46100 Ptnml(0-2): 34; 8842; 32248; 8976; 30 https://tests.stockfishchess.org/tests/view/6492fcafdc7002ce609c818c  closes: https://github.com/official-stockfish/Stockfish/pull/4632 fixes: https://github.com/official-stockfish/Stockfish/issues/4598  bench: 2370027,True,3,2023-06-01
vondele,vondele,2023-06-22 08:17:44+00:00,Update winrate model with June data  Retained 748191776 scored positions for analysis  const int NormalizeToPawnValue = 328; Corresponding spread = 60; Corresponding normalized spread = 0.18337766691628035; Draw rate at 0.0 eval at move 32 = 0.9914715947898592;  closes https://github.com/official-stockfish/Stockfish/pull/4636  No functional change,True,3,2023-06-01
vondele,vondele,2023-06-22 08:15:51+00:00,Update top CPU contributors  closes https://github.com/official-stockfish/Stockfish/pull/4629  No functional change,True,3,2023-06-01
Disservin,vondele,2023-06-20 16:50:12+00:00,Fix failing CI of pull requests  adds a guard to prevent pull requests from trying to delete the previous pre-release  closing https://github.com/official-stockfish/Stockfish/pull/4631  No functional change.,True,1,2023-06-01
joergoster,vondele,2023-06-20 08:47:07+00:00,Fix indentation in qsearch.  https://github.com/official-stockfish/Stockfish/pull/4630  No functional change.,True,1,2023-06-01
Disservin,vondele,2023-06-20 06:55:54+00:00,create prereleases upon push to master  using github actions; create a prerelease for the latest commit to master. As such a development version will be available on github; in addition to the latest release.  closes https://github.com/official-stockfish/Stockfish/pull/4622  No functional change,True,1,2023-06-01
Unknown,vondele,2023-06-19 19:37:23+00:00,Compressed network parameters  Implemented LEB128 (de)compression for the feature transformer. Reduces embedded network size from 70 MiB to 39 Mib.  The new nn-78bacfcee510.nnue corresponds to the master net compressed.  closes https://github.com/official-stockfish/Stockfish/pull/4617  No functional change,False,0,2023-06-01
cj5716,vondele,2023-06-16 17:14:58+00:00,Small cleanup  This non-functional change keeps formatting consistent.  closes https://github.com/official-stockfish/Stockfish/pull/4623  Bench 2370027,True,4,2023-06-01
AndrovT,vondele,2023-06-14 16:36:39+00:00,Permute master net weights to increase sparsity  Activation data collection using https://github.com/AndrovT/Stockfish/commit/ac468039ab544b03ad9a22c859a4217729c10a77 run as  bench 16 1 13 varied_1000.epd depth NNUE log.bin  on FENs from https://gist.github.com/AndrovT/7eae6918eb50764227e2bafe7938953c.  Permutation found using https://gist.github.com/AndrovT/359c831b7223c637e9156b01eb96949e. Uses a greedy algorithm that goes sequentially through the output positions and chooses a neuron for that position such that the number of nonzero quartets is the smallest.  Net weights permuted using https://gist.github.com/AndrovT/9e3fbaebb7082734dc84d27e02094cb3.  Benchmark:  Result of 100 runs of 'bench 16 1 13 default depth NNUE' ======================================================== base (...kfish-master) =     885869  +/- 7395 test (./stockfish    ) =     895885  +/- 7368 diff                   =     +10016  +/- 2984  speedup        = +0.0113 P(speedup > 0) =  1.0000  Passed STC: https://tests.stockfishchess.org/tests/view/648866c4713491385c804728 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 126784 W: 34003 L: 33586 D: 59195 Ptnml(0-2): 283; 13001; 36437; 13358; 313  closes https://github.com/official-stockfish/Stockfish/pull/4620  No functional change.,True,2,2023-06-01
peregrineshahin,vondele,2023-06-14 16:34:57+00:00,Consistent bench extraction with fishtest.  Consistent with recent fishtest commit https://github.com/glinscott/fishtest/commit/c0d174396f7fb1c0b3243aaa6cc73769079f3ff9  closes https://github.com/official-stockfish/Stockfish/pull/4619  No functional change,True,2,2023-06-01
Viren6,vondele,2023-06-14 16:33:56+00:00,Remove setting of static to none if in check in qsearch  Small simplification  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/6487924d713491385c8034ae LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 59616 W: 15885 L: 15703 D: 28028 Ptnml(0-2): 144; 6130; 17086; 6296; 152  closes https://github.com/official-stockfish/Stockfish/pull/4618  No functional change.,True,2,2023-06-01
Matthies,vondele,2023-06-13 06:45:25+00:00,Fix for MSVC compilation.  MSVC needs two more explicit casts to compile new affine_transform_sparse_input. See https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#text=_mm256_castsi256_ps and https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#text=_mm_castsi128_ps  closes https://github.com/official-stockfish/Stockfish/pull/4616  No functional change,True,1,2023-06-01
snicolet,vondele,2023-06-13 06:42:55+00:00,Clean-up code indentation in qsearch  closes https://github.com/official-stockfish/Stockfish/pull/4615  No functional change,True,1,2023-06-01
Vizvezdenec,vondele,2023-06-12 19:17:31+00:00,Improve comments  Fix comments for IIR; also document non-linear scaling in extensions. Also add explicitly the bench; to fix an issue after the last commit.  closes https://github.com/official-stockfish/Stockfish/pull/4614  bench 2370027,True,0,2023-06-01
AndrovT,vondele,2023-06-12 18:41:27+00:00,Use block sparse input for the first layer.  Use block sparse input for the first fully connected layer on architectures with at least SSSE3.  Depending on the CPU architecture; this yields a speedup of up to 10%; e.g.  ``` Result of 100 runs of 'bench 16 1 13 default depth NNUE'  base (...ockfish-base) =     959345  +/- 7477 test (...ckfish-patch) =    1054340  +/- 9640 diff                   =     +94995  +/- 3999  speedup        = +0.0990 P(speedup > 0) =  1.0000  CPU: 8 x AMD Ryzen 7 5700U with Radeon Graphics Hyperthreading: on ```  Passed STC: https://tests.stockfishchess.org/tests/view/6485aa0965ffe077ca12409c LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 8864 W: 2479 L: 2223 D: 4162 Ptnml(0-2): 13; 829; 2504; 1061; 25  This commit includes a net with reordered weights; to increase the likelihood of block sparse inputs; but otherwise equivalent to the previous master net (nn-ea57bea57e32.nnue).  Activation data collected with https://github.com/AndrovT/Stockfish/tree/log-activations; running bench 16 1 13 varied_1000.epd depth NNUE on this data. Net parameters permuted with https://gist.github.com/AndrovT/9e3fbaebb7082734dc84d27e02094cb3.  closes https://github.com/official-stockfish/Stockfish/pull/4612  No functional change,True,0,2023-06-01
vondele,vondele,2023-06-12 18:35:44+00:00,Add network export to CI  verify the network written by export_net matches the original  closes https://github.com/official-stockfish/Stockfish/pull/4613  No functional change,True,0,2023-06-01
linrock,snicolet,2023-06-11 13:23:52+00:00,"Update default net to nn-ea57bea57e32.nnue  Created by retraining an earlier epoch (ep659) of the experiment that led to the first SFNNv6 net: - First retrained on the nn-0dd1cebea573 dataset - Then retrained with skip 20 on a smaller dataset containing unfiltered Leela data - And then retrained again with skip 27 on the nn-0dd1cebea573 dataset  The equivalent 7-step training sequence from scratch that led here was:  1. max-epoch 400; lambda 1.0; constant LR 9.75e-4; T79T77-filter-v6-dd.min.binpack    ep379 chosen for retraining in step2  2. max-epoch 800; end-lambda 0.75; T60T70wIsRightFarseerT60T74T75T76.binpack    ep679 chosen for retraining in step3  3. max-epoch 800; end-lambda 0.75; skip 28; nn-e1fb1ade4432 dataset    ep799 chosen for retraining in step4  4. max-epoch 800; end-lambda 0.7; skip 28; nn-e1fb1ade4432 dataset    ep759 became nn-8d69132723e2.nnue (first SFNNv6 net)    ep659 chosen for retraining in step5  5. max-epoch 800; end-lambda 0.7; skip 28; nn-0dd1cebea573 dataset    ep759 chosen for retraining in step6  6. max-epoch 800; end-lambda 0.7; skip 20; leela-dfrc-v2-T77decT78janfebT79aprT80apr.binpack    ep639 chosen for retraining in step7  7. max-epoch 800; end-lambda 0.7; skip 27; nn-0dd1cebea573 dataset    ep619 became nn-ea57bea57e32.nnue  For the last retraining (step7):  python3 easy_train.py   --experiment-name L1-1536-Re6-masterShuffled-ep639-sk27-Re5-leela-dfrc-v2-T77toT80small-Re4-masterShuffled-ep659-Re3-sameAs-Re2-leela96-dfrc99-16t-v2-T60novdecT80juntonovjanfebT79aprmayT78jantosepT77dec-v6dd-Re1-LeelaFarseer-new-T77T79 \   --training-dataset /data/leela96-dfrc99-T60novdec-v2-T80juntonovjanfebT79aprmayT78jantosepT77dec-v6dd-T80apr.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes-L1-1536 \   --early-fen-skipping 27 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --max_epoch 800 \   --start-from-engine-test-net False \   --start-from-model /data/L1-1536-Re5-leela-dfrc-v2-T77toT80small-epoch639.nnue \   --lr 4.375e-4 \   --gamma 0.995 \   --tui False \   --seed $RANDOM \   --gpus ""0;""  For preparing the step6 leela-dfrc-v2-T77decT78janfebT79aprT80apr.binpack dataset:  python3 interleave_binpacks.py \   leela96-filt-v2.binpack \   dfrc99-16tb7p-eval-filt-v2.binpack \   test77-dec2021-16tb7p.no-db.min-mar2023.binpack \   test78-janfeb2022-16tb7p.no-db.min-mar2023.binpack \   test79-apr2022-16tb7p-filter-v6-dd.binpack \   test80-apr2022-16tb7p.no-db.min-mar2023.binpack \   /data/leela-dfrc-v2-T77decT78janfebT79aprT80apr.binpack  The unfiltered Leela data used for the step6 dataset can be found at: https://robotmoon.com/nnue-training-data  Local elo at 25k nodes per move: nn-epoch619.nnue : 2.3 +/- 1.9  Passed STC: https://tests.stockfishchess.org/tests/view/6480d43c6e6ce8d9fc6d7cc8 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 40992 W: 11017 L: 10706 D: 19269 Ptnml(0-2): 113; 4400; 11170; 4689; 124  Passed LTC: https://tests.stockfishchess.org/tests/view/648119ac6e6ce8d9fc6d8208 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 129174 W: 35059 L: 34579 D: 59536 Ptnml(0-2): 66; 12548; 38868; 13050; 55  closes https://github.com/official-stockfish/Stockfish/pull/4611  bench: 2370027",True,6,2023-06-01
pb00068,snicolet,2023-06-11 13:13:57+00:00,Reintroduce SEE verification against discovered attacks  Reintroduces https://github.com/official-stockfish/Stockfish/pull/4453 along with https://github.com/official-stockfish/Stockfish/pull/4469  Leaving out https://github.com/official-stockfish/Stockfish/pull/4533 https://github.com/official-stockfish/Stockfish/pull/4572  Passed STC: https://tests.stockfishchess.org/tests/view/647d8c37726f6b400e408a0a LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 143168 W: 38346 L: 37892 D: 66930 Ptnml(0-2): 352; 15672; 39164; 15962; 434  Passed LTC: https://tests.stockfishchess.org/tests/view/647ee8c528c4431bcb58e432 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 71538 W: 19560 L: 19190 D: 32788 Ptnml(0-2): 49; 6905; 21499; 7259; 57  closes https://github.com/official-stockfish/Stockfish/pull/4609  bench: 2595430,True,6,2023-06-01
cj5716,snicolet,2023-06-11 13:05:54+00:00,Simplify multiplier for improvement  This simplifies a `* 99 / 1300` term into just `/ 13`.  Passed non-regression STC: LLR: 2.92 (-2.94;2.94) <-1.75;0.25> Total: 58816 W: 15727 L: 15540 D: 27549 Ptnml(0-2): 149; 6370; 16203; 6517; 169 https://tests.stockfishchess.org/tests/view/647d25e4726f6b400e408165  Passed non-regression LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 154386 W: 41749 L: 41669 D: 70968 Ptnml(0-2): 94; 14992; 46956; 15042; 109 https://tests.stockfishchess.org/tests/view/647d9b3c726f6b400e408b2a  closes https://github.com/official-stockfish/Stockfish/pull/4608  Bench:  2511327,True,6,2023-06-01
linrock,vondele,2023-06-06 19:21:56+00:00,Remove optimism multiplier in nnue eval calculation  The same formula had passed SPRT against an earlier version of master.  Passed non-regression STC vs. d99942f: https://tests.stockfishchess.org/tests/view/6478e76654dd118e1d98f72e LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 118720 W: 31402 L: 31277 D: 56041 Ptnml(0-2): 301; 13148; 32344; 13259; 308  Passed non-regression LTC vs. d99942f: https://tests.stockfishchess.org/tests/view/647a22c154dd118e1d991146 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 74286 W: 20019 L: 19863 D: 34404 Ptnml(0-2): 31; 7189; 22540; 7359; 24  The earlier patch had conflicted with a faster SPRT passer; so this was tested again after rebasing on latest master.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/647d6e46726f6b400e408790 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 166176 W: 44309 L: 44234 D: 77633 Ptnml(0-2): 461; 18252; 45557; 18387; 431  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/647eb00ba268d1bc11255e7b LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 28170 W: 7713 L: 7513 D: 12944 Ptnml(0-2): 14; 2609; 8635; 2817; 10  closes https://github.com/official-stockfish/Stockfish/pull/4607  bench 2503095,True,1,2023-06-01
linrock,vondele,2023-06-06 19:17:36+00:00,"Update default net to nn-0dd1cebea573.nnue  Created by retraining an earlier epoch of the experiment leading to the first SFNNv6 net on a more-randomized version of the nn-e1fb1ade4432.nnue dataset mixed with unfiltered T80 apr2023 data. Trained using early-fen-skipping 28 and max-epoch 960.  The trainer settings and epochs used in the 5-step training sequence leading here were: 1. train from scratch for 400 epochs; lambda 1.0; constant LR 9.75e-4; T79T77-filter-v6-dd.min.binpack 2. retrain ep379; max-epoch 800; end-lambda 0.75; T60T70wIsRightFarseerT60T74T75T76.binpack 3. retrain ep679; max-epoch 800; end-lambda 0.75; skip 28; nn-e1fb1ade4432 dataset 4. retrain ep799; max-epoch 800; end-lambda 0.7; skip 28; nn-e1fb1ade4432 dataset 5. retrain ep439; max-epoch 960; end-lambda 0.7; skip 28; shuffled nn-e1fb1ade4432 + T80 apr2023  This net was epoch 559 of the final (step 5) retraining:  ```bash python3 easy_train.py \   --experiment-name L1-1536-Re4-leela96-dfrc99-T60novdec-v2-T80juntonovjanfebT79aprmayT78jantosepT77dec-v6dd-T80apr-shuffled-sk28 \   --training-dataset /data/leela96-dfrc99-T60novdec-v2-T80juntonovjanfebT79aprmayT78jantosepT77dec-v6dd-T80apr.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes-L1-1536 \   --early-fen-skipping 28 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --max_epoch 960 \   --start-from-engine-test-net False \   --start-from-model /data/L1-1536-Re3-nn-epoch439.nnue \   --engine-test-branch linrock/Stockfish/L1-1536 \   --lr 4.375e-4 \   --gamma 0.995 \   --tui False \   --seed $RANDOM \   --gpus ""0;"" ```  During data preparation; most binpacks were unminimized by removing positions with score 32002 (`VALUE_NONE`). This makes the tradeoff of increasing dataset filesize on disk to increase the randomness of positions in interleaved datasets. The code used for unminimizing is at: https://github.com/linrock/Stockfish/tree/tools-unminify  For preparing the dataset used in this experiment:  ```bash python3 interleave_binpacks.py \   leela96-filt-v2.binpack \   dfrc99-16tb7p-eval-filt-v2.binpack \   filt-v6-dd-min/test60-novdec2021-12tb7p-filter-v6-dd.min-mar2023.unmin.binpack \   filt-v6-dd-min/test80-aug2022-16tb7p-filter-v6-dd.min-mar2023.unmin.binpack \   filt-v6-dd-min/test80-sep2022-16tb7p-filter-v6-dd.min-mar2023.unmin.binpack \   filt-v6-dd-min/test80-jun2022-16tb7p-filter-v6-dd.min-mar2023.unmin.binpack \   filt-v6-dd/test80-jul2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test80-oct2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test80-nov2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd-min/test80-jan2023-3of3-16tb7p-filter-v6-dd.min-mar2023.unmin.binpack \   filt-v6-dd-min/test80-feb2023-16tb7p-filter-v6-dd.min-mar2023.unmin.binpack \   filt-v6-dd/test79-apr2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test79-may2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd-min/test78-jantomay2022-16tb7p-filter-v6-dd.min-mar2023.unmin.binpack \   filt-v6-dd/test78-juntosep2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test77-dec2021-16tb7p-filter-v6-dd.binpack \   test80-apr2023-2tb7p.binpack \   /data/leela96-dfrc99-T60novdec-v2-T80juntonovjanfebT79aprmayT78jantosepT77dec-v6dd-T80apr.binpack ```  T80 apr2023 data was converted using lc0-rescorer with ~2tb of tablebases and can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move vs. nn-e1fb1ade4432.nnue (L1 size 1024): nn-epoch559.nnue : 25.7 +/- 1.6  Passed STC: https://tests.stockfishchess.org/tests/view/647cd3b87cf638f0f53f9cbb LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 59200 W: 16000 L: 15660 D: 27540 Ptnml(0-2): 159; 6488; 15996; 6768; 189  Passed LTC: https://tests.stockfishchess.org/tests/view/647d58de726f6b400e4085d8 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 58800 W: 16002 L: 15657 D: 27141 Ptnml(0-2): 44; 5607; 17748; 5962; 39  closes https://github.com/official-stockfish/Stockfish/pull/4606  bench 2141197",True,1,2023-06-01
Disservin,vondele,2023-06-06 19:12:24+00:00,Add binaries to releases with github actions  when a release is made with a tag matching sf_* the binaries will also be uploaded to the release as assets.  closes https://github.com/official-stockfish/Stockfish/pull/4596  No functional change.,True,1,2023-06-01
peregrineshahin,vondele,2023-06-06 19:07:43+00:00,Fix no previous moves on root.  guards against no previous move existing if qSearch is called on the root node (i.e. when razoring).  Passed Non-regression STC: https://tests.stockfishchess.org/tests/view/647d242d726f6b400e408143 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 53120 W: 14167 L: 13976 D: 24977 Ptnml(0-2): 109; 5597; 14981; 5740; 133  closes https://github.com/official-stockfish/Stockfish/pull/4604  Bench: 2551691,True,1,2023-06-01
Vizvezdenec,vondele,2023-06-04 21:12:23+00:00,Move internal iterative reduction before probcut  This patch moves IIR before probcut which allows probcut to be produced at lower depths. Comments in IIR are also slightly updated.  Passed STC: https://tests.stockfishchess.org/tests/view/6472d604d29264e4cfa749fd LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 387616 W: 103295 L: 102498 D: 181823 Ptnml(0-2): 976; 42322; 106381; 43187; 942  Passed LTC: https://tests.stockfishchess.org/tests/view/6475eb8c4a36543c4c9f42e8 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 202836 W: 54901 L: 54281 D: 93654 Ptnml(0-2): 85; 19609; 61422; 20205; 97  closes https://github.com/official-stockfish/Stockfish/pull/4597  bench 2551691,False,6,2023-06-01
linrock,vondele,2023-06-04 21:05:28+00:00,Remove static eval threshold for extensions when giving check  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/647685d54a36543c4c9f4f2a LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 114688 W: 30701 L: 30571 D: 53416 Ptnml(0-2): 336; 12708; 31136; 12818; 346  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/64774b02b81f005b572de770 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 107310 W: 28920 L: 28796 D: 49594 Ptnml(0-2): 33; 10427; 32621; 10531; 43  closes https://github.com/official-stockfish/Stockfish/pull/4599  bench 2597974,True,6,2023-06-01
pb00068,vondele,2023-06-04 21:01:14+00:00,Simplify away SEE verification  After 4 simplificatons over PR#4453 the idea does not yield significant improvement anymore. Maybe also https://tests.stockfishchess.org/tests/view/640c88092644b62c3394c1c5 was a fluke.  Passed non-regression bounds:  STC: https://tests.stockfishchess.org/tests/view/64705389c079b6583146d873 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 131936 W: 35040 L: 34930 D: 61966 Ptnml(0-2): 336; 14559; 36035; 14735; 303  LTC: https://tests.stockfishchess.org/tests/view/6471a2ade549d9cf2fb213cd LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 407700 W: 109999 L: 110164 D: 187537 Ptnml(0-2): 279; 39913; 123689; 39632; 337  closes https://github.com/official-stockfish/Stockfish/pull/4595  bench: 2675974,True,6,2023-06-01
linrock,vondele,2023-06-04 20:56:44+00:00,Simplify blending nnue complexity with optimism  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/6478a26d54dd118e1d98f21c LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 241248 W: 64058 L: 64063 D: 113127 Ptnml(0-2): 644; 26679; 65960; 26720; 621  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/647b464854dd118e1d9928b2 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 24336 W: 6658 L: 6451 D: 11227 Ptnml(0-2): 8; 2316; 7312; 2525; 7  closes https://github.com/official-stockfish/Stockfish/pull/4602  bench 2425813,True,6,2023-06-01
XInTheDark,vondele,2023-06-04 20:54:13+00:00,Search tuning at very long time control with new net  The most significant change would be the singularBeta formula. It was first tested by cj5716 (see https://tests.stockfishchess.org/tests/view/647317c9d29264e4cfa74ec7); and I took much inspiration from that idea.  LTC (fixed games): https://tests.stockfishchess.org/tests/view/6479d8da54dd118e1d990b12 Elo: 0.61 � 1.2 (95%) LOS: 83.4% Total: 60000 W: 16278 L: 16172 D: 27550 Ptnml(0-2): 16; 5845; 18179; 5937; 23 nElo: 1.38 � 2.8 (95%) PairsRatio: 1.02  VLTC 180+1.8: https://tests.stockfishchess.org/tests/view/6479da1454dd118e1d990b2b LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 33224 W: 9261 L: 8984 D: 14979 Ptnml(0-2): 5; 2809; 10710; 3080; 8  SMP VLTC 8-thread: https://tests.stockfishchess.org/tests/view/647b0fe354dd118e1d992425 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 61398 W: 17386 L: 17081 D: 26931 Ptnml(0-2): 7; 4571; 21232; 4888; 1  closes https://github.com/official-stockfish/Stockfish/pull/4603  Bench: 2805878,True,6,2023-06-01
Vizvezdenec,vondele,2023-05-31 07:06:30+00:00,Small simplification for probcut in check  Remove depth condition from there as not longer needed.  Passed STC: https://tests.stockfishchess.org/tests/view/647367cad29264e4cfa753e6 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 254336 W: 67830 L: 67847 D: 118659 Ptnml(0-2): 580; 28181; 69697; 28096; 614  Passed LTC: https://tests.stockfishchess.org/tests/view/647576184a36543c4c9f3af7 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 80706 W: 22048 L: 21898 D: 36760 Ptnml(0-2): 28; 7721; 24712; 7857; 35  closes https://github.com/official-stockfish/Stockfish/pull/4594  bench 2381945,True,2,2023-05-01
linrock,vondele,2023-05-31 06:54:38+00:00,Simplify nnue eval complexity calculation  Remove a multiplier when blending nnue complexity with semi-classical complexity.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/6473a71dd29264e4cfa75839 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 124768 W: 33180 L: 33060 D: 58528 Ptnml(0-2): 314; 13797; 34030; 13941; 302  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/6474af3dd29264e4cfa768f4 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 108180 W: 29008 L: 28884 D: 50288 Ptnml(0-2): 29; 10420; 33075; 10530; 36  closes https://github.com/official-stockfish/Stockfish/pull/4592  bench 2316827,True,2,2023-05-01
linrock,vondele,2023-05-31 06:51:22+00:00,"Update NNUE architecture to SFNNv6 with larger L1 size of 1536  Created by training a new net from scratch with L1 size increased from 1024 to 1536. Thanks to Vizvezdenec for the idea of exploring larger net sizes after recent training data improvements.  A new net was first trained with lambda 1.0 and constant LR 8.75e-4. Then a strong net from a later epoch in the training run was chosen for retraining with start-lambda 1.0 and initial LR 4.375e-4 decaying with gamma 0.995. Retraining was performed a total of 3 times; for this 4-step process:  1. 400 epochs; lambda 1.0 on filtered T77+T79 v6 deduplicated data 2. 800 epochs; end-lambda 0.75 on T60T70wIsRightFarseerT60T74T75T76.binpack 3. 800 epochs; end-lambda 0.75 and early-fen-skipping 28 on the master dataset 4. 800 epochs; end-lambda 0.7 and early-fen-skipping 28 on the master dataset  In the training sequence that reached the new nn-8d69132723e2.nnue net; the epochs used for the 3x retraining runs were:  1. epoch 379 trained on T77T79-filter-v6-dd.min.binpack 2. epoch 679 trained on T60T70wIsRightFarseerT60T74T75T76.binpack 3. epoch 799 trained on the master dataset  For training from scratch:  python3 easy_train.py \   --experiment-name new-L1-1536-T77T79-filter-v6dd \   --training-dataset /data/T77T79-filter-v6-dd.min.binpack \   --max_epoch 400 \   --lambda 1.0 \   --start-from-engine-test-net False \   --engine-test-branch linrock/Stockfish/L1-1536 \   --nnue-pytorch-branch linrock/Stockfish/misc-fixes-L1-1536 \   --tui False \   --gpus ""0;"" \   --seed $RANDOM  Retraining commands were similar to each other. For the 3rd retraining run:  python3 easy_train.py \   --experiment-name L1-1536-T77T79-v6dd-Re1-LeelaFarseer-Re2-masterDataset-Re3-sameData \   --training-dataset /data/leela96-dfrc99-v2-T60novdecT80juntonovjanfebT79aprmayT78jantosepT77dec-v6dd.binpack \   --early-fen-skipping 28 \   --max_epoch 800 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --lr 4.375e-4 \   --gamma 0.995 \   --start-from-engine-test-net False \   --start-from-model /data/L1-1536-T77T79-v6dd-Re1-LeelaFarseer-Re2-masterDataset-nn-epoch799.nnue \   --engine-test-branch linrock/Stockfish/L1-1536 \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes-L1-1536 \   --tui False \   --gpus ""0;"" \   --seed $RANDOM  The T77+T79 data used is a subset of the master dataset available at: https://robotmoon.com/nnue-training-data/  T60T70wIsRightFarseerT60T74T75T76.binpack is available at: https://drive.google.com/drive/folders/1S9-ZiQa_3ApmjBtl2e8SyHxj4zG4V8gG  Local elo at 25k nodes per move vs. nn-e1fb1ade4432.nnue (L1 size 1024): nn-epoch759.nnue : 26.9 +/- 1.6  Failed STC https://tests.stockfishchess.org/tests/view/64742485d29264e4cfa75f97 LLR: -2.94 (-2.94;2.94) <0.00;2.00> Total: 13728 W: 3588 L: 3829 D: 6311 Ptnml(0-2): 71; 1661; 3610; 1482; 40  Failing LTC https://tests.stockfishchess.org/tests/view/64752d7c4a36543c4c9f3618 LLR: -1.91 (-2.94;2.94) <0.50;2.50> Total: 35424 W: 9522 L: 9603 D: 16299 Ptnml(0-2): 24; 3579; 10585; 3502; 22  Passed VLTC 180+1.8 https://tests.stockfishchess.org/tests/view/64752df04a36543c4c9f3638 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 47616 W: 13174 L: 12863 D: 21579 Ptnml(0-2): 13; 4261; 14952; 4566; 16  Passed VLTC SMP 60+0.6 th 8 https://tests.stockfishchess.org/tests/view/647446ced29264e4cfa761e5 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 19942 W: 5694 L: 5451 D: 8797 Ptnml(0-2): 6; 1504; 6707; 1749; 5  closes https://github.com/official-stockfish/Stockfish/pull/4593  bench 2222567",True,2,2023-05-01
windfishballad,vondele,2023-05-28 18:05:50+00:00,Removed quadratic term in optimism  Remove term which is quadratic in optimism in the eval. Simplifies and should also remove the bias towards side to move making the eval better for analysis.  STC: https://tests.stockfishchess.org/tests/view/6470a9d8c29e0d4352b0bca5 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 154432 W: 41127 L: 41040 D: 72265 Ptnml(0-2): 380; 17094; 42190; 17163; 389  LTC: https://tests.stockfishchess.org/tests/view/6471e9b3e549d9cf2fb219ef LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 127926 W: 34474 L: 34369 D: 59083 Ptnml(0-2): 43; 12505; 38776; 12582; 57  closes https://github.com/official-stockfish/Stockfish/pull/4590  Bench: 2541211,True,6,2023-05-01
vondele,vondele,2023-05-28 18:03:33+00:00,Update CPU contributors list  update CPU contributors list; the previous update was a couple of months ago; and unfortunately; was not quite accurate for the number of games played.  This version is based clean calculation from the DB and an updated script that tracks things (see https://github.com/glinscott/fishtest/pull/1702).  closes https://github.com/official-stockfish/Stockfish/pull/4589  No functional change,True,6,2023-05-01
cj5716,vondele,2023-05-25 18:49:11+00:00,Remove ss->ttHit condition where ttValue != VALUE_NONE  Simplification is done at 3 separate places in the code. Thanks to peregrineshahin for helping me find 2 of such places. (See original PR #4584)  Passed non-regression test LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 120256 W: 32204 L: 32085 D: 55967 Ptnml(0-2): 292; 12473; 34483; 12584; 296 https://tests.stockfishchess.org/tests/view/646f045968661bfd984325e3  closes https://github.com/official-stockfish/Stockfish/pull/4587  No functional change,True,3,2023-05-01
FauziAkram,vondele,2023-05-25 18:42:43+00:00,Simplify Futility pruning for captures  Passed STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 412928 W: 109433 L: 109620 D: 193875 Ptnml(0-2): 1071; 45929; 112650; 45744; 1070 https://tests.stockfishchess.org/tests/view/6468eac40db5177f2b76ef4d  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 190200 W: 51465 L: 51420 D: 87315 Ptnml(0-2): 58; 18585; 57788; 18592; 77 https://tests.stockfishchess.org/tests/view/646b66520db5177f2b772a84  closes https://github.com/official-stockfish/Stockfish/pull/4583  bench: 2486604,True,3,2023-05-01
FauziAkram,vondele,2023-05-25 18:40:09+00:00,Simplify Prune moves with negative SEE  Passed STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 57760 W: 15472 L: 15286 D: 27002 Ptnml(0-2): 123; 6025; 16430; 6147; 155 https://tests.stockfishchess.org/tests/view/6468eb6b0db5177f2b76ef62  Passed LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 93966 W: 25274 L: 25141 D: 43551 Ptnml(0-2): 33; 8498; 29792; 8623; 37 https://tests.stockfishchess.org/tests/view/6469570b0db5177f2b76f81b  closes: https://github.com/official-stockfish/Stockfish/pull/4579  Bench: 2304063,True,3,2023-05-01
XInTheDark,vondele,2023-05-25 18:37:53+00:00,Simplify delta calculation in aspiration window  Simplification STC: https://tests.stockfishchess.org/tests/view/6468cb200db5177f2b76ecbb LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 220416 W: 58503 L: 58487 D: 103426 Ptnml(0-2): 596; 24384; 60188; 24488; 552  Simplification LTC: https://tests.stockfishchess.org/tests/view/646a15840db5177f2b770704 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 177756 W: 47882 L: 47825 D: 82049 Ptnml(0-2): 55; 17430; 53858; 17473; 62  closes https://github.com/official-stockfish/Stockfish/pull/4581  Bench: 2304063,True,3,2023-05-01
candirufish,vondele,2023-05-25 18:35:13+00:00,More Depth Reduction  Reduce more for depth > 3 and depth < 12  LTC: https://tests.stockfishchess.org/tests/view/646c5abbd1f14fd69a6f2fab LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 197280 W: 53405 L: 52797 D: 91078 Ptnml(0-2): 62; 19025; 59886; 19577; 90  STC: https://tests.stockfishchess.org/tests/view/646bee71d1f14fd69a6f259d LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 100832 W: 26861 L: 26466 D: 47505 Ptnml(0-2): 240; 10985; 27622; 11278; 291  https://github.com/official-stockfish/Stockfish/pull/4585  bench: 2276617,True,3,2023-05-01
Vizvezdenec,vondele,2023-05-20 08:19:03+00:00,Small simplification in low depth pruning  Uncap low depth pruning lmr depth. It's anyway capped for most cases apart from futility pruning for captures - removes one std::min call.  Passed STC: https://tests.stockfishchess.org/tests/view/645e8fa6d55cccb2e64225a1 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 184064 W: 49039 L: 48982 D: 86043 Ptnml(0-2): 462; 20353; 50349; 20402; 466  Passed LTC: https://tests.stockfishchess.org/tests/view/645f4d48d55cccb2e6423335 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 83886 W: 22613 L: 22465 D: 38808 Ptnml(0-2): 31; 8090; 25546; 8252; 24  closes https://github.com/official-stockfish/Stockfish/pull/4566  bench 3201883,True,5,2023-05-01
Unknown,vondele,2023-05-20 08:16:04+00:00,Simplify SEE verfication logic  Passed STC https://tests.stockfishchess.org/tests/view/6461d51887f6567dd4df27d0 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 177056 W: 47181 L: 47118 D: 82757 Ptnml(0-2): 456; 19381; 48792; 19442; 457  Passed LTC https://tests.stockfishchess.org/tests/view/64631a9287f6567dd4df4502 2.94 (-2.94;2.94) <-1.75;0.25> Total: 104346 W: 28062 L: 27935 D: 48349 Ptnml(0-2): 25; 10190; 31631; 10287; 40  closes https://github.com/official-stockfish/Stockfish/pull/4578  bench: 2903251,True,5,2023-05-01
xoto10,vondele,2023-05-20 08:05:19+00:00,Simplify optimism calculation  This change removes one of the constants in the calculation of optimism. It also changes the 2 constants used with the scale value so that they are independent; instead of applying a constant to the scale and then adjusting it again when it is applied to the optimism. This might make the tuning of these constants cleaner and more reliable in the future.  STC 10+0.1 (accidentally run as an Elo gainer: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 154080 W: 41119 L: 40651 D: 72310 Ptnml(0-2): 375; 16840; 42190; 17212; 423 https://tests.stockfishchess.org/tests/live_elo/64653eabf3b1a4e86c317f77  LTC 60+0.6: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 217434 W: 58382 L: 58363 D: 100689 Ptnml(0-2): 66; 21075; 66419; 21088; 69 https://tests.stockfishchess.org/tests/live_elo/6465d077f3b1a4e86c318d6c  closes https://github.com/official-stockfish/Stockfish/pull/4576  bench: 3190961,True,5,2023-05-01
locutus2,vondele,2023-05-20 07:58:51+00:00,Small simplification in history pruning.  Remove the constant term of the history threshold which lowers the chance that pruning occurs. As compensation allow pruning at a slightly higher depth.  Passed STC: https://tests.stockfishchess.org/tests/view/64634c9a87f6567dd4df4901 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 101536 W: 27156 L: 27012 D: 47368 Ptnml(0-2): 266; 11165; 27772; 11289; 276  Passed LTC: https://tests.stockfishchess.org/tests/view/6463d68b17982fde89d2bc2b LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 32154 W: 8741 L: 8543 D: 14870 Ptnml(0-2): 8; 3093; 9687; 3271; 18  Passed LTC: retest on top of VLTC tuning PR 4571 because this changes the history depth factor (use this new factor here) https://tests.stockfishchess.org/tests/view/6467300e165c4b29ec0afd3f LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 99270 W: 26840 L: 26707 D: 45723 Ptnml(0-2): 36; 9753; 29928; 9878; 40  closes https://github.com/official-stockfish/Stockfish/pull/4578  Bench: 2984341,True,5,2023-05-01
XInTheDark,vondele,2023-05-20 07:21:46+00:00,Search tuning at very long time control  Many search parameter changes; tuned (https://tests.stockfishchess.org/tests/view/645e4c67d55cccb2e64220ff) at ~300k games @ VLTC (120+1.2).  Failed STC: https://tests.stockfishchess.org/tests/view/6465fcd77968ca827c1410c2 LLR: -2.95 (-2.94;2.94) <0.00;2.00> Total: 33824 W: 8863 L: 9067 D: 15894 Ptnml(0-2): 89; 3833; 9266; 3641; 83  Neutral LTC: https://tests.stockfishchess.org/tests/view/646385ce87f6567dd4df4e37 Elo: -0.48 +-1.2 (95%) LOS: 22.2% Total: 60000 W: 16235 L: 16318 D: 27447 Ptnml(0-2): 27; 5831; 18366; 5750; 26 nElo: -1.08 +-2.8 (95%) PairsRatio: 0.99  Passed VLTC 180+1.8: https://tests.stockfishchess.org/tests/view/646385f787f6567dd4df4e3e LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 126448 W: 34704 L: 34258 D: 57486 Ptnml(0-2): 9; 10970; 40825; 11406; 14  Passed VLTC SMP 60+0.6 8thread: https://tests.stockfishchess.org/tests/view/646628de884ce93b65df2ac9 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 59456 W: 16791 L: 16487 D: 26178 Ptnml(0-2): 5; 4473; 20467; 4779; 4  closes https://github.com/official-stockfish/Stockfish/pull/4574  Bench: 3347573,True,5,2023-05-01
vondele,vondele,2023-05-20 07:16:46+00:00,Update WLD model  using data of May; recalibrate the WLD model.  closes https://github.com/official-stockfish/Stockfish/pull/4577  No functional change,True,5,2023-05-01
Vizvezdenec,vondele,2023-05-07 20:36:57+00:00,Refine deeper post-lmr searches  This patch improves logic conditions for performing deeper searches after passed LMR.  Instead of exceeding alpha by some margin now it requires to exceed the current best value - which may be lower than alpha (but never bigger since we update alpha with bestvalue if it exceeds alpha).  Passed STC: https://tests.stockfishchess.org/tests/view/6455f78008858de8313775b6 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 209344 W: 55993 L: 55448 D: 97903 Ptnml(0-2): 507; 22798; 57526; 23325; 516  Passed LTC: https://tests.stockfishchess.org/tests/view/64572d46eb75932ccfebff97 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 66288 W: 17867 L: 17514 D: 30907 Ptnml(0-2): 21; 6240; 20269; 6593; 21  closes https://github.com/official-stockfish/Stockfish/pull/4559  bench 3808503,True,6,2023-05-01
Vizvezdenec,vondele,2023-05-07 20:32:21+00:00,Small cleanup  In search remove one condition check and reorder conditions. Removes some code.  Passed non-regression test: https://tests.stockfishchess.org/tests/view/64548fa06206ee34ebf853ad LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 282976 W: 75327 L: 75374 D: 132275 Ptnml(0-2): 604; 29673; 80995; 29598; 618  closes https://github.com/official-stockfish/Stockfish/pull/4557  No functional change,True,6,2023-05-01
peregrineshahin,vondele,2023-05-07 20:31:03+00:00,"Clean up after ""Simplify away complexity in evaluation""  closes https://github.com/official-stockfish/Stockfish/pull/4555  No functional change.",True,6,2023-05-01
Vizvezdenec,vondele,2023-05-05 05:12:47+00:00,Reduce more if current node has a lot of refuted moves.  This patch refines idea of cutoff count - in master we reduce more if current node has at least 4 moves that are refuted by search; this patch increases this count by 1 if refutation happened without having a tt move.  Passed STC: https://tests.stockfishchess.org/tests/view/645363c36206ee34ebf8191d LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 67616 W: 18220 L: 17874 D: 31522 Ptnml(0-2): 142; 7346; 18504; 7656; 160  Passed LTC: https://tests.stockfishchess.org/tests/view/6453a0ea6206ee34ebf82796 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 195228 W: 52741 L: 52140 D: 90347 Ptnml(0-2): 53; 18718; 59482; 19297; 64  closes https://github.com/official-stockfish/Stockfish/pull/4556  bench 3448916,True,4,2023-05-01
candirufish,vondele,2023-05-03 18:41:33+00:00,Adjust reductions  Decrease further on cutNodes with tte->depth() >= depth + 3 condition.  LTC: https://tests.stockfishchess.org/tests/view/644dc84bccf5e93df5e50c13 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 155346 W: 42184 L: 41660 D: 71502 Ptnml(0-2): 59; 14765; 47504; 15283; 62  STC: https://tests.stockfishchess.org/tests/view/644d05de68e01d8194cd9bbb LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 121888 W: 32868 L: 32444 D: 56576 Ptnml(0-2): 332; 13273; 33343; 13631; 365  closes https://github.com/official-stockfish/Stockfish/pull/4552  bench: 3739675,True,2,2023-05-01
linrock,vondele,2023-05-03 18:37:57+00:00,Update 7 eval and optimism params  Params found using spsa at 30+0.3 with this tuning config:  ``` // evaluate.cpp int nnueOptScaleBase = 1001; int nnueComplexityMult = 406; int nnueComplexityOptOffset = 424; int evalOptComplexityOffset = 272; int evalOptScaleOffset = 748; TUNE(SetRange(801; 1201); nnueOptScaleBase); TUNE(SetRange(306; 506); nnueComplexityMult); TUNE(SetRange(324; 524); nnueComplexityOptOffset); TUNE(SetRange(172; 372); evalOptComplexityOffset); TUNE(SetRange(648; 848); evalOptScaleOffset);  // search.cpp int searchOptBase = 120; int searchOptDenom = 161; TUNE(SetRange(20; 220); searchOptBase); TUNE(SetRange(111; 211); searchOptDenom); ```  Passed STC: https://tests.stockfishchess.org/tests/view/644dda8accf5e93df5e50cbe LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 136800 W: 36682 L: 36237 D: 63881 Ptnml(0-2): 353; 14910; 37492; 15229; 416  Passed LTC: https://tests.stockfishchess.org/tests/view/644eaedb3f31c3bbe4a3d345 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 64548 W: 17624 L: 17272 D: 29652 Ptnml(0-2): 33; 6112; 19631; 6466; 32  closes https://github.com/official-stockfish/Stockfish/pull/4550  bench 3670343,True,2,2023-05-01
linrock,vondele,2023-04-25 06:19:00+00:00,"Update default net to nn-e1fb1ade4432.nnue  Created by retraining nn-dabb1ed23026.nnue with a dataset composed of:  * The previous best dataset (nn-1ceb1a57d117.nnue dataset) * Adding de-duplicated T80 data from feb2023 and the last 10 days of jan2023; filtered with v6-dd  Initially trained with the same options as the recent master net (nn-1ceb1a57d117.nnue). Around epoch 890; training was manually stopped and max epoch increased to 1000.  ``` python3 easy_train.py \   --experiment-name leela96-dfrc99-T60novdec-v2-T80augsep-v6-T80junjuloctnovjanfebT79aprmayT78jantosepT77dec-v6dd \   --training-dataset /data/leela96-dfrc99-T60novdec-v2-T80augsep-v6-T80junjuloctnovjanfebT79aprmayT78jantosepT77dec-v6dd.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes \   --start-from-engine-test-net True \   --early-fen-skipping 30 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --max_epoch 900 \   --lr 4.375e-4 \   --gamma 0.995 \   --tui False \   --gpus ""0;"" \   --seed $RANDOM ```  The same v6-dd filtering and binpack minimizer was used for preparing the recent nn-1ceb1a57d117.nnue dataset.  ``` python3 interleave_binpacks.py \   leela96-filt-v2.binpack \   dfrc99-filt-v2.binpack \   T60-nov2021-12tb7p-eval-filt-v2.binpack \   T60-dec2021-12tb7p-eval-filt-v2.binpack \   filt-v6/test80-aug2022-16tb7p-filter-v6.min-mar2023.binpack \   filt-v6/test80-sep2022-16tb7p-filter-v6.min-mar2023.binpack \   filt-v6-dd/test80-jun2022-16tb7p-filter-v6-dd.min-mar2023.binpack \   filt-v6-dd/test80-jul2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test80-oct2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test80-nov2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test80-jan2022-3of3-16tb7p-filter-v6-dd.min-mar2023.binpack \   filt-v6-dd/test80-feb2023-16tb7p-filter-v6-dd.min-mar2023.binpack \   filt-v6-dd/test79-apr2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test79-may2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test78-jantomay2022-16tb7p-filter-v6-dd.min-mar2023.binpack \   filt-v6-dd/test78-juntosep2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test77-dec2021-16tb7p-filter-v6-dd.binpack \   /data/leela96-dfrc99-T60novdec-v2-T80augsep-v6-T80junjuloctnovjanfebT79aprmayT78jantosepT77dec-v6dd.binpack ```  Links for downloading the training data components can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move: nn-epoch919.nnue : 2.6 +/- 2.8  Passed STC vs. nn-dabb1ed23026.nnue https://tests.stockfishchess.org/tests/view/644420df94ff3db5625f2af5 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 125960 W: 33898 L: 33464 D: 58598 Ptnml(0-2): 351; 13920; 34021; 14320; 368  Passed LTC vs. nn-1ceb1a57d117.nnue https://tests.stockfishchess.org/tests/view/64469f128d30316529b3dc46 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 24544 W: 6817 L: 6542 D: 11185 Ptnml(0-2): 8; 2252; 7488; 2505; 19  closes https://github.com/official-stockfish/Stockfish/pull/4546  bench 3714847",True,1,2023-04-01
linrock,vondele,2023-04-25 06:17:22+00:00,"Created by retraining the master net with these changes to the dataset:  * Extending v6 filtering to data from T77 dec2021; T79 may2022; and T80 nov2022 * Reducing the number of duplicate positions; prioritizing position scores seen later in time * Using a binpack minimizer to reduce the overall data size  Trained the same way as the previous master net; aside from the dataset changes:  ``` python3 easy_train.py \   --experiment-name leela96-dfrc99-T60novdec-v2-T80augsep-v6-T80junjuloctnovT79aprmayT78jantosepT77dec-v6dd \   --training-dataset /data/leela96-dfrc99-T60novdec-v2-T80augsep-v6-T80junjuloctnovT79aprmayT78jantosepT77dec-v6dd.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes \   --start-from-engine-test-net True \   --early-fen-skipping 30 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --max_epoch 900 \   --lr 4.375e-4 \   --gamma 0.995 \   --tui False \   --gpus ""0;"" \   --seed $RANDOM ```  The new v6-dd filtering reduces duplicate positions by iterating over hourly data files within leela test runs; starting with the most recent; then keeping positions the first time they're seen and ignoring positions that are seen again. This ordering was done with the assumption that position scores seen later in time are generally more accurate than scores seen earlier in the test run. Positions are de-duplicated based on piece orientations; the first token in fen strings.  The binpack minimizer was run with default settings after first merging monthly data into single binpacks.  ``` python3 interleave_binpacks.py \   leela96-filt-v2.binpack \   dfrc99-filt-v2.binpack \   T60-nov2021-12tb7p-eval-filt-v2.binpack \   T60-dec2021-12tb7p-eval-filt-v2.binpack \   filt-v6/test80-aug2022-16tb7p-filter-v6.min-mar2023.binpack \   filt-v6/test80-sep2022-16tb7p-filter-v6.min-mar2023.binpack \   filt-v6-dd/test80-jun2022-16tb7p-filter-v6-dd.min-mar2023.binpack \   filt-v6-dd/test80-jul2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test80-oct2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test80-nov2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test79-apr2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test79-may2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test78-jantomay2022-16tb7p-filter-v6-dd.min-mar2023.binpack \   filt-v6-dd/test78-juntosep2022-16tb7p-filter-v6-dd.binpack \   filt-v6-dd/test77-dec2021-16tb7p-filter-v6-dd.binpack \   /data/leela96-dfrc99-T60novdec-v2-T80augsep-v6-T80junjuloctnovT79aprmayT78jantosepT77dec-v6dd.binpack ```  The code for v6-dd filtering is available along with training data preparation scripts at: https://github.com/linrock/nnue-data  Links for downloading the training data components: https://robotmoon.com/nnue-training-data/  The binpack minimizer is from: #4447  Local elo at 25k nodes per move: nn-epoch859.nnue : 1.2 +/- 2.6  Passed STC: https://tests.stockfishchess.org/tests/view/643aad7db08900ff1bc5a832 LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 565040 W: 150225 L: 149162 D: 265653 Ptnml(0-2): 1875; 62137; 153229; 63608; 1671  Passed LTC: https://tests.stockfishchess.org/tests/view/643ecf2fa43cf30e719d2042 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 1014840 W: 274645 L: 272456 D: 467739 Ptnml(0-2): 515; 98565; 306970; 100956; 414  closes https://github.com/official-stockfish/Stockfish/pull/4545  bench 3476305",True,1,2023-04-01
PedanticHacker,vondele,2023-04-25 06:08:48+00:00,Update AUTHORS  Improved some comments in the AUTHORS file; sort contributors  closes https://github.com/official-stockfish/Stockfish/pull/4520  No functional change,True,1,2023-04-01
locutus2,vondele,2023-04-22 09:04:09+00:00,Less reduction for tt move.  This idea is a result of my second condition combination tuning for reductions: https://tests.stockfishchess.org/tests/view/643ed5573806eca398f06d61  There were used two parameters per combination: one for the 'sign' of the first and the second condition in a combination. Values >= 50 indicate using a condition directly and values <= -50 means use the negation of a condition.  Each condition pair (X;Y) had two occurances dependent of the order of the two conditions: - if X < Y the parameters used for more reduction - if X > Y the parameters used for less reduction - if X = Y then only one condition is present and A[X][X][0]/A[X][X][1] stands for using more/less reduction for only this condition.  The parameter pair A[7][2][0] (value = -94.70) and A[7][2][1] (value = 93.60) was one of the strongest signals with values near 100/-100. Here condition nr. 7 was '(ss+1)->cutoffCnt > 3' and condition nr. 2 'move == ttMove'. For condition nr. 7 the negation is used because A[7][2][0] is negative.  This translates finally to less reduction (because 7 > 2) for tt moves if child cutoffs <= 3.  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 65728 W: 17704 L: 17358 D: 30666 Ptnml(0-2): 184; 7092; 18008; 7354; 226 https://tests.stockfishchess.org/tests/view/643ff767ef2529086a7ed042  LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 139200 W: 37776 L: 37282 D: 64142 Ptnml(0-2): 58; 13241; 42509; 13733; 59 https://tests.stockfishchess.org/tests/view/6440bfa9ef2529086a7edbc7  closes https://github.com/official-stockfish/Stockfish/pull/4538  Bench: 3548023,True,5,2023-04-01
XInTheDark,vondele,2023-04-22 08:59:33+00:00,Simplify away depth condition for aspiration window adjust  Simplification STC: https://tests.stockfishchess.org/tests/view/64351654596a20f264276ded LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 374664 W: 98942 L: 99089 D: 176633 Ptnml(0-2): 1049; 41767; 101878; 41558; 1080  Simplification LTC: https://tests.stockfishchess.org/tests/view/6439499f605991a801b4f684 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 457880 W: 123021 L: 123233 D: 211626 Ptnml(0-2): 166; 44739; 139335; 44541; 159  closes https://github.com/official-stockfish/Stockfish/pull/4534  Bench: 3879281,True,5,2023-04-01
pb00068,vondele,2023-04-22 08:47:51+00:00,Simplification of SEE verification logic  Use same logic for all handled pieces. Don't prune the move if opponent King; Queen; Rook gets a discovered attack while or after the exchanges.  remove an obsolete comment in position.cpp  Passed STC non regression: https://tests.stockfishchess.org/tests/view/6437907594daa91835c290d0 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 107432 W: 28359 L: 28221 D: 50852 Ptnml(0-2): 298; 11724; 29524; 11882; 288  Passed LTC non-regression: https://tests.stockfishchess.org/tests/view/6438ed2ebd1a5470263c51e8 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 236288 W: 63656 L: 63656 D: 108976 Ptnml(0-2): 99; 22960; 72011; 22990; 84  closes https://github.com/official-stockfish/Stockfish/pull/4533  bench: 3741125,True,5,2023-04-01
XInTheDark,vondele,2023-04-22 08:43:29+00:00,Simplify away complexity in evaluation  Simplification STC: https://tests.stockfishchess.org/tests/view/64394bc0605991a801b4f6f0 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 72360 W: 19313 L: 19138 D: 33909 Ptnml(0-2): 206; 7883; 19800; 8112; 179  Simplification LTC: https://tests.stockfishchess.org/tests/view/6439e788c233ce943b6bdac1 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 224992 W: 60665 L: 60654 D: 103673 Ptnml(0-2): 96; 21875; 68526; 21920; 79  closes https://github.com/official-stockfish/Stockfish/pull/4530  Bench: 3709369,True,5,2023-04-01
Torom,vondele,2023-04-22 08:38:25+00:00,Set the length of GIT_SHA to 8 characters  Previously; the length of git commit hashes could vary depending on the git environment.  closes https://github.com/official-stockfish/Stockfish/pull/4527  No functional change,True,5,2023-04-01
MinetaS,vondele,2023-04-22 08:37:14+00:00,Remove some conditions at PV improvement reduction  Non-regression STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 63664 W: 17007 L: 16823 D: 29834 Ptnml(0-2): 163; 6998; 17336; 7162; 173 https://tests.stockfishchess.org/tests/view/6430b124028b029b01ac99f2  Non-regression LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 90016 W: 24399 L: 24258 D: 41359 Ptnml(0-2): 52; 8672; 27405; 8841; 38 https://tests.stockfishchess.org/tests/view/64310e74028b029b01ad3131  closes https://github.com/official-stockfish/Stockfish/pull/4526  Bench: 3661938,True,5,2023-04-01
Vizvezdenec,vondele,2023-04-12 18:45:34+00:00,"Simplify stats assignment for Pv nodes  This patch is a simplification of my recent elo gainer. Logically the Elo gainer didn't make much sense and this patch simplifies it into smth more logical. Instead of assigning negative bonuses to all non-first moves that enter PV nodes we assign positive bonuses in full depth search after LMR only for moves that will result in a fail high - thus not assigning positive bonuses for moves that will go to pv search - so doing ""almost"" the same as we do in master now for them. Logic differs for some other moves; though; but this removes some lines of code.  Passed STC: https://tests.stockfishchess.org/tests/view/642cf5cf77ff3301150dc5ec LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 409320 W: 109124 L: 109308 D: 190888 Ptnml(0-2): 1149; 45385; 111751; 45251; 1124  Passed LTC: https://tests.stockfishchess.org/tests/view/642fe75d20eb941419bde200 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 260336 W: 70280 L: 70303 D: 119753 Ptnml(0-2): 99; 25236; 79528; 25199; 106  closes https://github.com/official-stockfish/Stockfish/pull/4522  Bench:  4286815",True,2,2023-04-01
locutus2,vondele,2023-04-12 18:43:08+00:00,Remove good killer reduction rule.  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 246544 W: 65646 L: 65657 D: 115241 Ptnml(0-2): 706; 27350; 67138; 27405; 673 https://tests.stockfishchess.org/tests/view/642e253277ff3301150e9aa2  LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 165136 W: 44878 L: 44809 D: 75449 Ptnml(0-2): 64; 15991; 50378; 16082; 53 https://tests.stockfishchess.org/tests/view/6430db07028b029b01acd87f  closes https://github.com/official-stockfish/Stockfish/pull/4519  Bench: 3746080,True,2,2023-04-01
dubslow,vondele,2023-04-12 18:40:53+00:00,Remove nmpColor  no benefit seen; neither in game play nor for zugzwang test positions  STC: https://tests.stockfishchess.org/tests/view/642e293977ff3301150e9b55 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 161848 W: 43332 L: 43254 D: 75262 Ptnml(0-2): 418; 16987; 46058; 17021; 440  LTC: https://tests.stockfishchess.org/tests/view/642fea9420eb941419bde296 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 120208 W: 32529 L: 32418 D: 55261 Ptnml(0-2): 35; 11424; 37080; 11525; 40  closes https://github.com/official-stockfish/Stockfish/pull/4511  bench 3979409,True,2,2023-04-01
peregrineshahin,vondele,2023-04-12 18:38:43+00:00,Fix capturing underpromotions issue  Fix underpromotion captures are generated amongst quiets although dealt with as a capture_stage in search; this makes not skipping them when move count pruning kicks-in consistent with updating their histories amongst captures.  Passed STC: https://tests.stockfishchess.org/tests/view/6415579f65775d3b539e7537 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 118896 W: 31678 L: 31553 D: 55665 Ptnml(0-2): 356; 12911; 32793; 13028; 360  Passed LTC: https://tests.stockfishchess.org/tests/view/641633b965775d3b539e9e95 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 126800 W: 34255 L: 34148 D: 58397 Ptnml(0-2): 57; 12216; 38763; 12291; 73  see also discussion in https://github.com/official-stockfish/Stockfish/pull/4436 closes https://github.com/official-stockfish/Stockfish/pull/4452  bench: 3979409,True,2,2023-04-01
linrock,vondele,2023-04-10 09:03:52+00:00,Simplify away nnue scale pawn count multiplier  Removes 2x multipliers in nnue scale calculation along with the pawn count term that was recently reintroduced.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/64305bc720eb941419bdf72e LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 38008 W: 10234 L: 10021 D: 17753 Ptnml(0-2): 96; 4151; 10323; 4312; 122  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/6430b76a028b029b01ac9bfd LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 91232 W: 24686 L: 24547 D: 41999 Ptnml(0-2): 30; 8721; 27986; 8838; 41  closes https://github.com/official-stockfish/Stockfish/pull/4510  bench 4017320,True,0,2023-04-01
maximmasiutin,vondele,2023-04-10 08:56:42+00:00,Do no initialize TM in all cases  Avoid doing full TM initialization if it won't be used; avoids division by zero.  closes https://github.com/official-stockfish/Stockfish/pull/4484  No functional change,True,0,2023-04-01
Unknown,vondele,2023-04-10 08:51:45+00:00,Reduce Position::pieces() overloads  Reduce the number of overloads for pieces() by using a more general template implementation. Secondly simplify some code in search.cpp using the new general functionality.  TC https://tests.stockfishchess.org/tests/view/642ce27877ff3301150dc193 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 269640 W: 71775 L: 71809 D: 126056 Ptnml(0-2): 687; 27294; 78885; 27274; 680  closes https://github.com/official-stockfish/Stockfish/pull/4501  No functional change.,True,0,2023-04-01
maximmasiutin,vondele,2023-04-10 07:29:52+00:00,Made two specializations for affine transform easier to understand.  Added AVX-512 for the specialization for small inputs  closes https://github.com/official-stockfish/Stockfish/pull/4502  No functional change,True,0,2023-04-01
MinetaS,vondele,2023-04-10 07:28:37+00:00,Remove extraReduction  Since bestValue becomes value and beta - alpha is always non-negative; extraReduction is always false; hence it has no effect.  This patch includes small changes to improve readability.  closes https://github.com/official-stockfish/Stockfish/pull/4505  No functional change,True,0,2023-04-01
MinetaS,vondele,2023-04-10 07:27:35+00:00,Use int conversion for Option class  The current implementation generates warnings on MSVC. However; we have no real use cases for double-typed UCI option values now. Also parameter tuning only accepts following three types:    int; Value; Score  closes https://github.com/official-stockfish/Stockfish/pull/4505  No functional change,True,0,2023-04-01
maximmasiutin,vondele,2023-04-10 07:22:15+00:00,Fix linking / character types of windows API calls  ensures large pages can be allocated again.  closes https://github.com/official-stockfish/Stockfish/pull/4509  No functional change,True,0,2023-04-01
vondele,vondele,2023-04-09 13:19:49+00:00,Fix rootComplexity calculation  The calculation of rootComplexity can't call eval when in check. Doing so triggers an assert if compiled in debug mode when the rootpos is evaluated using classical eval.  Fixes https://github.com/official-stockfish/Stockfish/issues/4512  Passed STC: https://tests.stockfishchess.org/tests/view/6432697431feee5c6d306876 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 41096 W: 11017 L: 10815 D: 19264 Ptnml(0-2): 113; 4172; 11780; 4366; 117  Running LTC: https://tests.stockfishchess.org/tests/view/6432974d31feee5c6d306fc0 LLR: 1.76 (-2.94;2.94) <-1.75;0.25> Total: 73200 W: 19792 L: 19728 D: 33680 Ptnml(0-2): 24; 6659; 23182; 6699; 36  closes https://github.com/official-stockfish/Stockfish/pull/4515  No functional change,True,6,2023-04-01
FauziAkram,vondele,2023-04-07 07:56:35+00:00,Depth Tweak and tuning  tunes reduction related parameters; and introduces more reduction on found good moves.  credit for this patch goes also to candirufish Yoshie2000 dubslow peregrineshahin Vizvezdenec  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 38424 W: 10346 L: 10040 D: 18038 Ptnml(0-2): 103; 4111; 10473; 4427; 98 https://tests.stockfishchess.org/tests/view/642ca74277ff3301150db511  Passed LTC: LLR: 2.97 (-2.94;2.94) <0.50;2.50> Total: 136968 W: 37151 L: 36660 D: 63157 Ptnml(0-2): 43; 13052; 41808; 13533; 48 https://tests.stockfishchess.org/tests/view/642d632377ff3301150dddbe  closes https://github.com/official-stockfish/Stockfish/pull/4499  bench: 3672914,True,4,2023-04-01
Vizvezdenec,vondele,2023-04-05 06:23:54+00:00,Assign negative stat bonuses for quiet moves at Pv nodes  This patch assigns negative stat bonuses for quiet moves at pv nodes which are searched at depth greater than this node assumes; so are extended.  Passed STC: https://tests.stockfishchess.org/tests/view/6426198bdb43ab2ba6f9cfa2 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 548944 W: 147287 L: 146254 D: 255403 Ptnml(0-2): 1662; 59772; 150671; 60605; 1762  Passed LTC: https://tests.stockfishchess.org/tests/view/642be4f177ff3301150d892d LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 93352 W: 25400 L: 24994 D: 42958 Ptnml(0-2): 44; 8817; 28547; 9225; 43  closes https://github.com/official-stockfish/Stockfish/pull/4495  bench 5044536,True,2,2023-04-01
XInTheDark,vondele,2023-04-05 06:18:53+00:00,Simplify away piece count condition for useClassical  Simplify away the piece count condition for useClassical. In compensation; the psq requirement is increased by 15%.  Also updated the Elo estimate for useClassical; based on recent testing.  Simplification STC: https://tests.stockfishchess.org/tests/view/642acbb577ff3301150d3ef5 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 51984 W: 13906 L: 13707 D: 24371 Ptnml(0-2): 150; 5638; 14227; 5817; 160  Simplification LTC: https://tests.stockfishchess.org/tests/view/642b9c5777ff3301150d778a LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 119696 W: 32412 L: 32300 D: 54984 Ptnml(0-2): 53; 11529; 36567; 11651; 48  closes https://github.com/official-stockfish/Stockfish/pull/4494  Bench: 5089321,True,2,2023-04-01
FauziAkram,vondele,2023-04-05 06:15:34+00:00,Parameters Tweak  Passed STC LLR: 3.22 (-2.94;2.94) <0.00;2.00> Total: 664048 W: 177526 L: 176301 D: 310221 Ptnml(0-2): 2002; 72968; 180891; 74129; 2034 https://tests.stockfishchess.org/tests/view/64219901db43ab2ba6f901fa  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 77576 W: 21125 L: 20750 D: 35701 Ptnml(0-2): 24; 7350; 23669; 7717; 28 https://tests.stockfishchess.org/tests/view/642abe3377ff3301150d3a16  closes https://github.com/official-stockfish/Stockfish/pull/4493  bench: 4522076,True,2,2023-04-01
dubslow,vondele,2023-04-05 06:13:34+00:00,Simplifiy TM's root complexity  Also requires moving optimism initialization; this is a very early `evaluate()` call.  STC: https://tests.stockfishchess.org/tests/view/6428c39677ff3301150ca0d7 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 51256 W: 13805 L: 13612 D: 23839 Ptnml(0-2): 145; 5283; 14592; 5450; 158  LTC: https://tests.stockfishchess.org/tests/view/64296ff377ff3301150cc519 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 106968 W: 28951 L: 28830 D: 49187 Ptnml(0-2): 47; 9746; 33789; 9843; 59  closes https://github.com/official-stockfish/Stockfish/pull/4492  no functional change,True,2,2023-04-01
miguel-l,vondele,2023-04-05 06:10:34+00:00,Remove unneeded bitboard from MP  Recent simplification has removed the need for an extra bitboard in MP struct. Use a local variable instead.  STC: Passed Non-regression test https://tests.stockfishchess.org/tests/view/64294ae677ff3301150cba16 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 64872 W: 17383 L: 17203 D: 30286 Ptnml(0-2): 179; 6675; 18546; 6859; 177  closes https://github.com/official-stockfish/Stockfish/pull/4490  No functional change.,True,2,2023-04-01
FauziAkram,vondele,2023-04-01 14:28:52+00:00,Decrease Depth more for positions not in TT.  If the position is not in TT; decrease depth by 2 or by 4 if the TT entry for the current position was hit and the stored depth is greater than or equal to the current depth.  Many thanks to Vizvezdenec as the main idea was his.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 70664 W: 18995 L: 18639 D: 33030 Ptnml(0-2): 228; 7712; 19090; 8080; 222 https://tests.stockfishchess.org/tests/view/64258a8bdb43ab2ba6f9b682  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 85040 W: 23227 L: 22836 D: 38977 Ptnml(0-2): 26; 8115; 25867; 8466; 46 https://tests.stockfishchess.org/tests/view/64262057db43ab2ba6f9d0e7  closes https://github.com/official-stockfish/Stockfish/pull/4482  bench: 4380438,True,5,2023-04-01
maximmasiutin,vondele,2023-04-01 14:16:48+00:00,Replace deprecated icc with icx  Replace the deprecated Intel compiler icc with its newer icx variant. This newer compiler is based on clang; and yields good performance. As before; currently only linux is supported.  closes https://github.com/official-stockfish/Stockfish/pull/4478  No functional change,True,5,2023-04-01
MinetaS,vondele,2023-04-01 14:14:30+00:00,Simplify away complexityAverage  Instead of tracking the average of complexity values; calculate complexity of root position at the beginning of the search and use it as a scaling factor in time management.  Passed non-regression STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 58752 W: 15738 L: 15551 D: 27463 Ptnml(0-2): 164; 6194; 16478; 6371; 169 https://tests.stockfishchess.org/tests/view/6423010edb43ab2ba6f9424a  Passed non-regression LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 92872 W: 24865 L: 24729 D: 43278 Ptnml(0-2): 38; 8652; 28929; 8770; 47 https://tests.stockfishchess.org/tests/view/6423c1f0db43ab2ba6f9644f  closes https://github.com/official-stockfish/Stockfish/pull/4472  No functional change,True,5,2023-04-01
vondele,vondele,2023-04-01 13:58:05+00:00,Stringify the git info passed  avoid escaping the string in the Makefile.  Alternative to https://github.com/official-stockfish/Stockfish/pull/4476  closes https://github.com/official-stockfish/Stockfish/pull/4481  No functional change.,True,5,2023-04-01
XInTheDark,vondele,2023-04-01 13:53:46+00:00,"Remove reduction for moving threatened piece  Simplify away ""Decrease reduction if we move a threatened piece"".  Running a dbg_hit_on() shows that this line is only called ~0.12% of the time.  Simplification STC: https://tests.stockfishchess.org/tests/view/641ec2dcdb43ab2ba6f88103 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 146128 W: 39168 L: 39070 D: 67890 Ptnml(0-2): 466; 16117; 39830; 16155; 496  Simplification LTC: https://tests.stockfishchess.org/tests/view/64200689db43ab2ba6f8bca8 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 248016 W: 66703 L: 66714 D: 114599 Ptnml(0-2): 105; 24202; 75406; 24189; 106  closes https://github.com/official-stockfish/Stockfish/pull/4471  Bench: 4961236",True,5,2023-04-01
maximmasiutin,vondele,2023-04-01 13:48:47+00:00,Made advanced Windows API calls dynamically linked  Made advanced Windows API calls (those from Advapi32.dll) dynamically linked to avoid link errors when compiling using Intel icx compiler for Windows.  https://github.com/official-stockfish/Stockfish/pull/4467  No functional change,True,5,2023-04-01
maximmasiutin,vondele,2023-04-01 13:36:08+00:00,Improve compatibility  this makes it easier to compile under MSVC; even though we recommend gcc/clang for production compiles at the moment.  In Win32 API; by default; most null-terminated character strings arguments are of wchar_t (UTF16; formerly UCS16-LE) type; i.e. 2 bytes (at least) per character. So; src/misc.cpp should have proper type. Respectively; for src/syzygy/tbprobe.cpp; in Widows; file paths should be std::wstring rather than std::string. However; this requires a very big number of changes; since the config files are also keeping the 8-bit-per-character std::string strings. Therefore; just one change of using 8-byte-per-character CreateFileA make it compile under MSVC.  closes https://github.com/official-stockfish/Stockfish/pull/4438  No functional change,True,5,2023-04-01
peregrineshahin,vondele,2023-03-29 19:46:23+00:00,Allow PvNode in futility pruning for captures.  Passed non-regression STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 148128 W: 39428 L: 39333 D: 69367 Ptnml(0-2): 492; 16326; 40315; 16457; 474 https://tests.stockfishchess.org/tests/view/641c2dbfdb43ab2ba6f804e8  Passed non-regression LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 376256 W: 100906 L: 101039 D: 174311 Ptnml(0-2): 186; 36697; 114494; 36566; 185 https://tests.stockfishchess.org/tests/view/641d33b2db43ab2ba6f83338  closes https://github.com/official-stockfish/Stockfish/pull/4470  bench: 4935616,True,2,2023-03-01
miguel-l,vondele,2023-03-29 19:43:07+00:00,Clean up repetitive declarations for see_ge  The occupied bitboard is only used in one place and is otherwise thrown away. To simplify use; see_ge function can instead be overloaded. Repetitive declarations for occupied bitboard can be removed.  Passed non-regression test https://tests.stockfishchess.org/tests/view/6421c286db43ab2ba6f908eb LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 48912 W: 13196 L: 13001 D: 22715 Ptnml(0-2): 146; 5003; 13967; 5190; 150  closes https://github.com/official-stockfish/Stockfish/pull/4469  No functional change.,True,2,2023-03-01
linrock,vondele,2023-03-29 19:37:52+00:00,"Update default net to nn-dabb1ed23026.nnue  Created by retraining the master net with these modifications:  * New filtering methods for existing data from T80 sep+oct2022; T79 apr2022; T78 jun+jul+aug+sep2022; T77 dec2021 * Adding new filtered data from T80 aug2022 and T78 apr+may2022 * Increasing early-fen-skipping from 28 to 30  ``` python3 easy_train.py \   --experiment-name leela96-dfrc99-T80novT79mayT60novdec-v2-T80augsepoctT79aprT78aprtosep-v6-T77dec-v3-sk30 \   --training-dataset /data/leela96-dfrc99-T80novT79mayT60novdec-v2-T80augsepoctT79aprT78aprtosep-v6-T77dec-v3.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes \   --start-from-engine-test-net True \   --early-fen-skipping 30 \   --max_epoch 900 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --lr 4.375e-4 \   --gamma 0.995 \   --tui False \   --gpus ""0;"" \   --seed $RANDOM ```  The v3 filtering used for data from T77dec 2021 differs from v2 filtering in that:  * To improve binpack compression; positions after ply 28 were skipped during training by setting position scores to VALUE_NONE (32002) instead of removing them entirely * All early-game positions with ply <= 28 were removed to maximize binpack compression * Only bestmove captures at d6pv2 search were skipped; not 2nd bestmove captures * Binpack compression was repaired for the remaining positions by effectively replacing bestmoves with ""played moves"" to maintain contiguous sequences of positions in the training game data  After improving binpack compression; The T77 dec2021 data size was reduced from 95G to 19G.  The v6 filtering used for data from T80augsepoctT79aprT78aprtosep 2022 differs from v2 in that:  * All positions with only one legal move were removed * Tighter score differences at d6pv2 search were used to remove more positions with only one good move than before * d6pv2 search was not used to remove positions where the best 2 moves were captures  ``` python3 interleave_binpacks.py \   nn-547-dataset/leela96-eval-filt-v2.binpack \   nn-547-dataset/dfrc99-eval-filt-v2.binpack \   nn-547-dataset/test80-nov2022-12tb7p-eval-filt-v2-d6.binpack \   nn-547-dataset/T79-may2022-12tb7p-eval-filt-v2.binpack \   nn-547-dataset/T60-nov2021-12tb7p-eval-filt-v2.binpack \   nn-547-dataset/T60-dec2021-12tb7p-eval-filt-v2.binpack \   filt-v6/test80-aug2022-16tb7p-filter-v6.binpack \   filt-v6/test80-sep2022-16tb7p-filter-v6.binpack \   filt-v6/test80-oct2022-16tb7p-filter-v6.binpack \   filt-v6/test79-apr2022-16tb7p-filter-v6.binpack \   filt-v6/test78-aprmay2022-16tb7p-filter-v6.binpack \   filt-v6/test78-junjulaug2022-16tb7p-filter-v6.binpack \   filt-v6/test78-sep2022-16tb7p-filter-v6.binpack \   filt-v3/test77-dec2021-16tb7p-filt-v3.binpack \   /data/leela96-dfrc99-T80novT79mayT60novdec-v2-T80augsepoctT79aprT78aprtosep-v6-T77dec-v3.binpack ```  The code for the new data filtering methods is available at: https://github.com/linrock/Stockfish/tree/nnue-data-v3/nnue-data  The code for giving hexword names to .nnue files is at: https://github.com/linrock/nnue-namer  Links for downloading the training data components can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move: nn-epoch779.nnue : 0.6 +/- 3.1  Passed STC: https://tests.stockfishchess.org/tests/view/64212412db43ab2ba6f8efb0 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 82256 W: 22185 L: 21809 D: 38262 Ptnml(0-2): 286; 9065; 22067; 9407; 303  Passed LTC: https://tests.stockfishchess.org/tests/view/64223726db43ab2ba6f91d6c LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 30840 W: 8437 L: 8149 D: 14254 Ptnml(0-2): 14; 2891; 9323; 3177; 15  closes https://github.com/official-stockfish/Stockfish/pull/4465  bench 5101970",True,2,2023-03-01
UniQP,vondele,2023-03-29 19:36:27+00:00,Reuse existing functions to read/write array of network parameters  closes https://github.com/official-stockfish/Stockfish/pull/4463  No functional change,True,2,2023-03-01
MinetaS,vondele,2023-03-25 08:25:49+00:00,"Remove non_pawn_material in NNUE::evaluate  After ""Use NNUE complexity in search; retune related parameters"" commit; the effect of non-pawn material adjustment has been nearly diminished. This patch removes pos.non_pawn_material as a simplification; which passed non-regression tests with both STC and LTC.  Passed non-regression STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 75152 W: 20030 L: 19856 D: 35266 Ptnml(0-2): 215; 8281; 20459; 8357; 264 https://tests.stockfishchess.org/tests/view/641ab471db43ab2ba6f7bc58  Passed non-regression LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 193864 W: 51870 L: 51829 D: 90165 Ptnml(0-2): 86; 18968; 58794; 18987; 97 https://tests.stockfishchess.org/tests/view/641b4fe6db43ab2ba6f7db96  closes https://github.com/official-stockfish/Stockfish/pull/4461  Bench: 5020718",True,5,2023-03-01
Vizvezdenec,vondele,2023-03-25 08:22:25+00:00,"Simplify statScore initialization  This patch simplifies initialization of statScore to ""always set it up to 0"" instead of setting it up to 0 two plies deeper. Reason for why it was done in previous way partially was because of LMR usage of previous statScore which was simplified long time ago so it makes sense to make in more simple there.  Passed STC: https://tests.stockfishchess.org/tests/view/641a86d1db43ab2ba6f7b31d LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 115648 W: 30895 L: 30764 D: 53989 Ptnml(0-2): 368; 12741; 31473; 12876; 366  Passed LTC: https://tests.stockfishchess.org/tests/view/641b1c31db43ab2ba6f7d17a LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 175576 W: 47122 L: 47062 D: 81392 Ptnml(0-2): 91; 17077; 53390; 17141; 89  closes https://github.com/official-stockfish/Stockfish/pull/4460  bench 5081969",True,5,2023-03-01
FauziAkram,vondele,2023-03-25 08:20:58+00:00,Update Elo estimates for terms in search  Setting the Elo value of some functions which were not set before. All tests run at 10+0.1 (STC); 25000 games (Same as #4294). Book used: UHO_XXL_+0.90_+1.19.epd  Values are rounded to the nearest non-negative integer.  Test links: https://tests.stockfishchess.org/tests/view/6419ab5b65775d3b539f46c6 https://tests.stockfishchess.org/tests/view/6419adb465775d3b539f4730 https://tests.stockfishchess.org/tests/view/6419ae9c65775d3b539f4756 https://tests.stockfishchess.org/tests/view/6419b03f65775d3b539f47a8 https://tests.stockfishchess.org/tests/view/6419b35d65775d3b539f4860 https://tests.stockfishchess.org/tests/view/6419b6b965775d3b539f48e6 https://tests.stockfishchess.org/tests/view/6419cade65775d3b539f4cd5 https://tests.stockfishchess.org/tests/view/6419cbb565775d3b539f4d01 https://tests.stockfishchess.org/tests/view/6419cc6965775d3b539f4d1e  closes https://github.com/official-stockfish/Stockfish/pull/4459  No functional change,True,5,2023-03-01
Unknown,vondele,2023-03-25 08:17:44+00:00,Verified SEE pruning for capturing and checking moves.  Patch analyzes field after SEE exchanges concluded with a recapture by the opponent: if opponent Queen/Rook/King results under attack after the exchanges; we consider the move sharp and don't prune it.  Important note: By accident I forgot to adjust 'occupied' when the king takes part in the exchanges. As result of this a move is considered sharp too; when opponent king apparently can evade check by recapturing. Surprisingly this seems contribute to patch's strength.  STC: https://tests.stockfishchess.org/tests/view/640b16132644b62c33947397 LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 116400 W: 31239 L: 30817 D: 54344 Ptnml(0-2): 350; 12742; 31618; 13116; 374  LTC: https://tests.stockfishchess.org/tests/view/640c88092644b62c3394c1c5 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 177600 W: 47988 L: 47421 D: 82191 Ptnml(0-2): 62; 16905; 54317; 17436; 80  closes https://github.com/official-stockfish/Stockfish/pull/4453  bench: 5012145,True,5,2023-03-01
Unknown,vondele,2023-03-19 10:29:35+00:00,Remove 'si' StateInfo variable/parameter.  Since st is a member of position we don't need to pass it separately as parameter.  While being there also remove some line in pos_is_ok; where a copy of StateInfo was made by using default copy constructor and then verified it's correctedness by doing a memcmp. There is no point in doing that.  Passed non-regression test https://tests.stockfishchess.org/tests/view/64098d562644b62c33942b35 LLR: 3.24 (-2.94;2.94) <-1.75;0.25> Total: 548960 W: 145834 L: 146134 D: 256992 Ptnml(0-2): 1617; 57652; 156261; 57314; 1636  closes https://github.com/official-stockfish/Stockfish/pull/4444  No functional change,True,6,2023-03-01
Disservin,vondele,2023-03-19 10:27:15+00:00,NNUE namespace cleanup  This patch moves the nnue namespace in the appropiate header that correspondes with the definition. It also makes navigation a bit easier.  closes https://github.com/official-stockfish/Stockfish/pull/4445  No functional change,True,6,2023-03-01
peregrineshahin,vondele,2023-03-19 10:25:48+00:00,Fix null move issue  Fix altering for stats landing on B1 Square after a null move and fix considering counter-moves on A1 for root node.  fixes https://github.com/official-stockfish/Stockfish/issues/4333 by preventing calls to from_sq and to_sq functions over null-moves and none-moves.  closes https://github.com/official-stockfish/Stockfish/pull/4448  bench: 4980082,True,6,2023-03-01
Unknown,vondele,2023-03-14 07:38:02+00:00,Small cleanups  remove some unneeded assignments; typos; incorrect comments; add authors entry.  closes https://github.com/official-stockfish/Stockfish/pull/4417  no functional change,True,1,2023-03-01
Unknown,vondele,2023-03-14 07:29:19+00:00,Remove redundant condition from capture_stage()  Change a non functional promotion check to an assert.  closes https://github.com/official-stockfish/Stockfish/pull/4436  No functional change,True,1,2023-03-01
UniQP,vondele,2023-03-14 07:25:14+00:00,Fix Makefile for clang 16  The clang 16 release will remove the -fexperimental-new-pass-manager flag (see https://github.com/llvm/llvm-project/commit/69b2b7282e92a1b576b7bd26f3b16716a5027e8e). Thus; the commit adapts the Makefile to use this flag only for older clang versions.  closes https://github.com/official-stockfish/Stockfish/pull/4437  No functional change,True,1,2023-03-01
lonfom169,vondele,2023-03-14 07:23:50+00:00,Change mode of incbin.h  Keep incbin.h with the same mode as the other source files.  A mode diff might show up when working with patch files or sending the source code between devices. This patch should fix such behaviour.  closes https://github.com/official-stockfish/Stockfish/pull/4442  No functional change,True,1,2023-03-01
Vizvezdenec,vondele,2023-03-14 07:22:40+00:00,Do more singular extensions  This patch continues trend of last VLTC tuning - as measured by dubslow most of it gains was in lowering marging in calculation of singularBeta. This patch is a manual adjustment on top of it - it lowers multiplier of depth in calculation of singularBeta even further; from 2/3 to 1;5/2;5.  Was negative at STC: https://tests.stockfishchess.org/tests/view/64089c632644b62c3393fc12 Elo: -2.49 +-1.7 (95%) LOS: 0.2% Total: 40000 W: 10601 L: 10888 D: 18511 Ptnml(0-2): 123; 4580; 10875; 4305; 117 nElo: -5.03 +-3.4 (95%) PairsRatio: 0.94  Passed 180+1.8 SPRT: https://tests.stockfishchess.org/tests/view/640096dae74a12625bcf3b33 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 160952 W: 43753 L: 43342 D: 73857 Ptnml(0-2): 25; 13984; 52039; 14411; 17  Passed 60+0.6 8 threads SPRT: https://tests.stockfishchess.org/tests/view/640dca8e65775d3b539cb7f6 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 38824 W: 10825 L: 10554 D: 17445 Ptnml(0-2): 0; 2939; 13268; 3200; 5  closes https://github.com/official-stockfish/Stockfish/pull/4443  bench 4776866,True,1,2023-03-01
dubslow,snicolet,2023-03-13 23:41:42+00:00,More negative extensions on nonsingular nonpv nodes.  Following up the previous gainer also in this nonsingular node section of code. Credit shared with @FauziAkram for realizing this nonsingular node stuff had some potential; and @XInTheDark for reminding us that !PvNodes better handle extensions/reductions than Pv.  Passed STC: https://tests.stockfishchess.org/tests/view/640a7bb32644b62c339457c3 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 136776 W: 36598 L: 36149 D: 64029 Ptnml(0-2): 439; 14834; 37384; 15301; 430  Passed LTC: https://tests.stockfishchess.org/tests/view/640c43a02644b62c3394b23c LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 79536 W: 21363 L: 20984 D: 37189 Ptnml(0-2): 28; 7525; 24285; 7900; 30  closes https://github.com/official-stockfish/Stockfish/pull/4441  Bench: 4444953,True,0,2023-03-01
Vizvezdenec,vondele,2023-03-08 06:16:09+00:00,Do more negative extensions  This patch does negatively extend transposition table move if singular search failed and tt value is not bigger than alpha. Logic is close to what we had before recent simplification of negative extensions but uses or condition instead of and condition.  Passed STC: https://tests.stockfishchess.org/tests/view/6404c8102644b62c33934607 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 119040 W: 31841 L: 31416 D: 55783 Ptnml(0-2): 356; 13070; 32292; 13397; 405  Passed LTC: https://tests.stockfishchess.org/tests/view/6405abda2644b62c33937119 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 47216 W: 12816 L: 12496 D: 21904 Ptnml(0-2): 12; 4500; 14286; 4776; 34  closes https://github.com/official-stockfish/Stockfish/pull/4430  bench 4747020,True,2,2023-03-01
vondele,vondele,2023-03-08 06:14:49+00:00,Fix TB after capture_stage fix  https://github.com/official-stockfish/Stockfish/commit/5c75c1c2fbb7bb4f0bf7c44fb855c415b788cbf7 introduced a capture_stage() function; but TB usage needs a pure capture() function.  closes https://github.com/official-stockfish/Stockfish/pull/4428  No functional change.,True,2,2023-03-01
maximmasiutin,vondele,2023-03-08 06:14:07+00:00,"Clarify the description of the x86-64-vnni256 and x86-64-avxvnni architectures  Now it is clearly explained that ""x86-64-vnni256"" requires full support of AVX512-VNNI; but only 256-bit operands are used.  closes https://github.com/official-stockfish/Stockfish/pull/4427  No functional change",True,2,2023-03-01
vondele,vondele,2023-03-05 15:16:16+00:00,Add CITATION.cff file  Make the stockfish software more easily citable; for example in academic papers.  fixes https://github.com/official-stockfish/Stockfish/issues/4419 closes https://github.com/official-stockfish/Stockfish/pull/4422  No functional change,True,6,2023-03-01
dav1312,vondele,2023-03-05 15:15:12+00:00,Update README.md  Update and simplify the readme; removing duplicated and outdated stuff and pointing to the new wiki  closes https://github.com/official-stockfish/Stockfish/pull/4421  No functional change,True,6,2023-03-01
Disservin,vondele,2023-03-05 15:14:07+00:00,Add wiki to artifacts  snapshot the wiki https://github.com/official-stockfish/stockfish/wiki as part of the artifacts generated. This will allow future release to include the wiki pages as a form of documentation  closes https://github.com/official-stockfish/Stockfish/pull/4420  No functional change,True,6,2023-03-01
Vizvezdenec,vondele,2023-03-05 15:06:03+00:00,Fix duplicated moves generation in movepicker  in a some of cases movepicker returned some moves more than once which lead to them being searched more than once. This bug was possible because of how we use queen promotions - they are generated as a captures but are not included in position function which checks if move is a capture. Thus if any refutation (killer or countermove) was a queen promotion it was searched twice - once as a capture and one as a refutation.  This patch affects various things; namely stats assignments for queen promotions and other moves if best move is queen promotion; also some heuristics in search and qsearch.  With this patch every queen promotion is now considered a capture.  After this patch number of found duplicated moves is 0 during normal 13 depth bench run.  Passed STC: https://tests.stockfishchess.org/tests/view/63f77e01e74a12625bcd87d7 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 80920 W: 21455 L: 21289 D: 38176 Ptnml(0-2): 198; 8839; 22241; 8963; 219  Passed LTC: https://tests.stockfishchess.org/tests/view/63f7e020e74a12625bcd9a76 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 89712 W: 23674 L: 23533 D: 42505 Ptnml(0-2): 24; 8737; 27202; 8860; 33  closes https://github.com/official-stockfish/Stockfish/pull/4405  bench 4681731,True,6,2023-03-01
linrock,vondele,2023-02-27 21:07:52+00:00,"Update default net to nn-52471d67216a.nnue  Created by retraining the master net with modifications to the previous best dataset:  * Improving T80 oct+nov 2022 endgame lambda accuracy by rescoring with 12-16tb of syzygy 7p tablebases * Filtering T78 jun+jul+aug 2022 with d6pv2 search to remove positions with bestmove captures or one good move * Adding T80 sep 2022 data; rescored with 16tb of 7p tablebases; unfiltered  Trained with max-epoch 900; end-lambda 0.7; and early-fen-skipping 28.  ``` python3 easy_train.py \   --experiment-name leela96-dfrc99-T80octnovT79aprmayT78junjulaugT60novdec-filt-v2-T78sep12tb7p-T77decT80sep16tb7p-lambda7-sk28 \   --training-dataset /data/leela96-dfrc99-T80octnovT79aprmayT78junjulaugT60novdec-filt-v2-T78sep12tb7p-T77decT80sep16tb7p.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/easy-train-early-fen-skipping \   --early-fen-skipping 28 \   --start-from-engine-test-net True \   --gpus ""0;"" \   --max_epoch 900 \   --start-lambda 1.0 \   --end-lambda 0.7 \   --gamma 0.995 \   --lr 4.375e-4 \   --tui False \   --seed $RANDOM ```  Training data was rescored and d6pv2 filtered in the same way as recent best datasets. For preparing the merged training dataset:  ``` python3 interleave_binpacks.py \   leela96-eval-filt-v2.binpack \   dfrc99-eval-filt-v2.binpack \   test80-oct2022-16tb7p-eval-filt-v2-d6.binpack \   test80-nov2022-12tb7p-eval-filt-v2-d6.binpack \   T79-apr2022-12tb7p-eval-filt-v2.binpack \   T79-may2022-12tb7p-eval-filt-v2.binpack \   test78-junjulaug2022-16tb7p-eval-filt-v2-d6.binpack \   T60-nov2021-12tb7p-eval-filt-v2.binpack \   T60-dec2021-12tb7p-eval-filt-v2.binpack \   T78-sep2022-12tb7p.binpack \   test77-dec2021-16gb7p.binpack \   test80-sep2022-16tb7p.binpack \   /data/leela96-dfrc99-T80octnovT79aprmayT78junjulaugT60novdec-filt-v2-T78sep12tb7p-T77decT80sep16tb7p.binpack ```  Links for downloading the training data components can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move: nn-epoch839.nnue : 0.6 +/- 1.4  Passed STC: https://tests.stockfishchess.org/tests/view/63f9ab4be74a12625bcdf02e LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 84656 W: 22681 L: 22302 D: 39673 Ptnml(0-2): 271; 9343; 22734; 9696; 284  Passed LTC: https://tests.stockfishchess.org/tests/view/63fa3833e74a12625bce0c0e LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 184664 W: 49933 L: 49344 D: 85387 Ptnml(0-2): 111; 17977; 55561; 18578; 105  closes https://github.com/official-stockfish/Stockfish/pull/4416  bench: 4814343",True,0,2023-02-01
dubslow,vondele,2023-02-27 21:03:50+00:00,Late counter bonus: boost underestimated moves  The idea here is very intuitive: since we've just proven that the move is good; then if it previously had poor stats; boost those stats more than otherwise.  Passed STC: https://tests.stockfishchess.org/tests/view/63fb504ce74a12625bce4154 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 21128 W: 5763 L: 5481 D: 9884 Ptnml(0-2): 52; 2212; 5759; 2484; 57  Passed LTC: https://tests.stockfishchess.org/tests/view/63fb7825e74a12625bce491b LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 91904 W: 24764 L: 24359 D: 42781 Ptnml(0-2): 45; 8735; 27984; 9146; 42  closes https://github.com/official-stockfish/Stockfish/pull/4415  bench 4318808,True,0,2023-02-01
UniQP,vondele,2023-02-27 07:29:47+00:00,Unify type alias declarations  The commit unifies the declaration of type aliases by replacing all typedefs with corresponding using statements.  closing https://github.com/official-stockfish/Stockfish/pull/4412  No functional change,True,0,2023-02-01
locutus2,vondele,2023-02-27 07:28:45+00:00,NNUE accumulator update in probcut.  Call the recently added hint function for NNUE accumulator update after a failed probcut search. In this case we already searched at least some captures and tt move which; however; is not sufficient for a cutoff. So it seems we have a greater chance that the full search will also have no cutoff and hence all moves have to be searched.  STC: https://tests.stockfishchess.org/tests/view/63fa74a4e74a12625bce1823 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 70096 W: 18770 L: 18423 D: 32903 Ptnml(0-2): 191; 7342; 19654; 7651; 210  To be sure that we have no heavy interaction retest on top of #4410.  Rebased STC: https://tests.stockfishchess.org/tests/view/63fb2f62e74a12625bce3b03 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 137688 W: 36790 L: 36349 D: 64549 Ptnml(0-2): 397; 14373; 38919; 14702; 453  closes https://github.com/official-stockfish/Stockfish/pull/4411  No functional change,True,0,2023-02-01
Unknown,vondele,2023-02-27 07:27:26+00:00,Use common_parent_position hint also at PVNodes TT hits.  Credits to Stefan Geschwentner (locutus2) showing that the hint is useful on PvNodes. In contrast to his test; this version avoids to use the hint when in check. I believe checking positions aren't good candidates for the hint because: - evasion moves are rather few; so a checking pos. has much less childs than a normal position - if the king has to move the NNUE eval can't use incremental updates;   so the child nodes have to do a full refresh anyway.  Passed STC: https://tests.stockfishchess.org/tests/view/63f9c5b1e74a12625bcdf585 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 124472 W: 33268 L: 32846 D: 58358 Ptnml(0-2): 350; 12986; 35170; 13352; 378  closes https://github.com/official-stockfish/Stockfish/pull/4410  no functional change,True,0,2023-02-01
lonfom169,vondele,2023-02-27 07:26:29+00:00,Simplify condition in step 15  Remove 'ttValue <= alpha' check for negative extension in singular search. Also apply some small code style changes.  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 127888 W: 33766 L: 33651 D: 60471 Ptnml(0-2): 303; 14082; 35089; 14137; 333 https://tests.stockfishchess.org/tests/view/63f79528e74a12625bcd8c05  LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 89048 W: 23924 L: 23782 D: 41342 Ptnml(0-2): 27; 8635; 27065; 8763; 34 https://tests.stockfishchess.org/tests/view/63f82177e74a12625bcda6f4  LTC (retest): LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 196360 W: 52514 L: 52475 D: 91371 Ptnml(0-2): 103; 19066; 59780; 19151; 80 https://tests.stockfishchess.org/tests/view/63f934bfe74a12625bcdd929  closes https://github.com/official-stockfish/Stockfish/pull/4407  Bench: 5310866,True,0,2023-02-01
Vizvezdenec,vondele,2023-02-24 19:14:44+00:00,Search tuning at very long time control  This patch is a result of tuning session of approximately 100k games at 120+1.2. Biggest changes are in extensions; stat bonus and depth reduction for nodes without a tt move.  Failed STC: https://tests.stockfishchess.org/tests/view/63f72c72e74a12625bcd7938 LLR: -2.94 (-2.94;2.94) <0.00;2.00> Total: 13872 W: 3535 L: 3769 D: 6568 Ptnml(0-2): 56; 1621; 3800; 1419; 40  Close to neutral at LTC: https://tests.stockfishchess.org/tests/view/63f738f5e74a12625bcd7b8a Elo: 0.80 +-1.2 (95%) LOS: 90.0% Total: 60000 W: 16213 L: 16074 D: 27713 Ptnml(0-2): 24; 5718; 18379; 5853; 26 nElo: 1.82 +-2.8 (95%) PairsRatio: 1.02  Passed 180+1.8 VLTC: https://tests.stockfishchess.org/tests/view/63f868f3e74a12625bcdb33e LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 15864 W: 4449 L: 4202 D: 7213 Ptnml(0-2): 1; 1301; 5083; 1544; 3  Passed 60+0.6 8 threads SMP VLTC: https://tests.stockfishchess.org/tests/view/63f8a5d6e74a12625bcdbdb3 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 6288 W: 1821 L: 1604 D: 2863 Ptnml(0-2): 0; 402; 2123; 619; 0  closes https://github.com/official-stockfish/Stockfish/pull/4406  bench 4705194,True,4,2023-02-01
UniQP,vondele,2023-02-24 19:12:53+00:00,Fix typo in method name  closes https://github.com/official-stockfish/Stockfish/pull/4404  No functional change,True,4,2023-02-01
linrock,vondele,2023-02-23 12:27:57+00:00,Reintroduce nnue pawn scaling with lower lazy thresholds  Params found with the nevergrad TBPSA optimizer via nevergrad4sf modified to:  * use SPRT LLR with fishtest STC elo gainer bounds [0; 2] as the objective function * increase the game batch size after each new optimal point is found  The params were the optimal point after TBPSA iteration 7 and 160 nevergrad evaluations with:  * initial batch size of 96 games per evaluation * batch size increase of 64 games after each iteration * a budget of 512 evaluations * TC: fixed 1.5 million nodes per move; no time limit  nevergrad4sf enables optimizing stockfish params with TBPSA: https://github.com/vondele/nevergrad4sf  Using pentanomial game results with smaller game batch sizes was inspired by:  Use of SPRT LLR calculated from pentanomial game results as the objective function was an experiment at maximizing the information from game batches to reduce the computational cost for TBPSA to converge on good parameters.  For the exact code used to find the params: https://github.com/linrock/tuning-fork  Passed STC: https://tests.stockfishchess.org/tests/view/63f4ef5ee74a12625bcd114a LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 66552 W: 17736 L: 17390 D: 31426 Ptnml(0-2): 164; 7229; 18166; 7531; 186  Passed LTC: https://tests.stockfishchess.org/tests/view/63f56028e74a12625bcd2550 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 71264 W: 19150 L: 18787 D: 33327 Ptnml(0-2): 23; 6728; 21771; 7083; 27  closes https://github.com/official-stockfish/Stockfish/pull/4401  bench 3687580,True,3,2023-02-01
vondele,vondele,2023-02-23 12:25:35+00:00,Introduce a function to compute NNUE accumulator  This patch introduces `hint_common_parent_position()` to signal that potentially several child nodes will require an NNUE eval. By populating explicitly the accumulator; these subsequent evaluations can be performed more efficiently.  This was based on the observation that calculating the evaluation in an excluded move position yielded a significant Elo gain; even though the evaluation itself was already available (work by pb00067).  Sopel wrote the code to perform just the accumulator update. This PR is based on cleaned up code that  passed STC: https://tests.stockfishchess.org/tests/view/63f62f9be74a12625bcd4aa0  LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 110368 W: 29607 L: 29167 D: 51594 Ptnml(0-2): 41; 10551; 33572; 10967; 53  and in an the earlier (equivalent) version  passed STC: https://tests.stockfishchess.org/tests/view/63f3c3fee74a12625bcce2a6 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 47552 W: 12786 L: 12467 D: 22299 Ptnml(0-2): 120; 5107; 12997; 5438; 114  passed LTC: https://tests.stockfishchess.org/tests/view/63f45cc2e74a12625bccfa63 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 110368 W: 29607 L: 29167 D: 51594 Ptnml(0-2): 41; 10551; 33572; 10967; 53  closes https://github.com/official-stockfish/Stockfish/pull/4402  Bench: 3726250,True,3,2023-02-01
UniQP,vondele,2023-02-23 12:24:37+00:00,Remove unused macros  closes https://github.com/official-stockfish/Stockfish/pull/4397  No functional change,True,3,2023-02-01
UniQP,vondele,2023-02-23 12:22:03+00:00,Add support for ARM dot product instructions  The sdot instruction computes (and accumulates) a signed dot product; which is quite handy for Stockfish's NNUE code. The instruction is optional for Armv8.2 and Armv8.3; and mandatory for Armv8.4 and above.  The commit adds a new 'arm-dotprod' architecture with enabled dot product support. It also enables dot product support for the existing 'apple-silicon' architecture; which is at least Armv8.5.  The following local speed test was performed on an Apple M1 with ARCH=apple-silicon. I had to remove CPU pinning from the benchmark script. However; the results were still consistent: Checking both binaries against themselves reported a speedup of +0.0000 and +0.0005; respectively.  ``` Result of 100 runs ================== base (...ish.037ef3e1) =    1917997  +/- 7152 test (...fish.dotprod) =    2159682  +/- 9066 diff                   =    +241684  +/- 2923  speedup        = +0.1260 P(speedup > 0) =  1.0000  CPU: 10 x arm Hyperthreading: off ```  Fixes #4193  closes https://github.com/official-stockfish/Stockfish/pull/4400  No functional change,True,3,2023-02-01
dubslow,vondele,2023-02-18 13:01:08+00:00,Remove one `reduction` call  even though bench is unchanged to depth 28; due to adjusting depth in singular extensions this might be functional.  STC: https://tests.stockfishchess.org/tests/view/63ec21affe833123fef34153 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 195712 W: 51625 L: 51581 D: 92506 Ptnml(0-2): 504; 20527; 55779; 20513; 533  LTC: https://tests.stockfishchess.org/tests/view/63ed3487fe833123fef375ed LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 32176 W: 8631 L: 8442 D: 15103 Ptnml(0-2): 5; 2794; 10309; 2967; 13  closes https://github.com/official-stockfish/Stockfish/pull/4395  Bench 4283297,True,5,2023-02-01
dubslow,vondele,2023-02-18 12:34:40+00:00,Simplify late countermove bonus condition  STC: https://tests.stockfishchess.org/tests/view/63d53ac6a67dd929a555e1e2 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 216096 W: 56862 L: 56839 D: 102395 Ptnml(0-2): 648; 24033; 58650; 24082; 635  LTC: https://tests.stockfishchess.org/tests/view/63d7f9a6a67dd929a5565991 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 808512 W: 214060 L: 214610 D: 379842 Ptnml(0-2): 301; 79448; 245293; 78928; 286  closes https://github.com/official-stockfish/Stockfish/pull/4392  Bench: 4283297,True,5,2023-02-01
Unknown,vondele,2023-02-18 12:30:48+00:00,Simplify nnueComplexity calculation.  further simplification after https://github.com/official-stockfish/Stockfish/pull/4377  STC https://tests.stockfishchess.org/tests/view/63e02a3773223e7f52ad8190 LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 359072 W: 94605 L: 94733 D: 169734 Ptnml(0-2): 994; 39874; 97958; 39686; 1024  LTC https://tests.stockfishchess.org/tests/view/63e3fd12b5f425d71f77002a LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 248424 W: 66020 L: 66030 D: 116374 Ptnml(0-2): 113; 24653; 74689; 24645; 112  closes https://github.com/official-stockfish/Stockfish/pull/4390  bench: 4098325,True,5,2023-02-01
MinetaS,vondele,2023-02-18 12:23:18+00:00,"Fix overflow in add_dpbusd_epi32x2  This patch fixes 16bit overflow in *_add_dpbusd_epi32x2 functions; that can be triggered in rare cases depending on the NNUE weights.  While the code leads to some slowdown on affected architectures (most notably avx2); the fix is simpler than some of the other options discussed in https://github.com/official-stockfish/Stockfish/pull/4394  Code suggested by Sopel97.  Result of ""bench 4096 1 30 default depth nnue"":  | Architecture        | master    | patch (gcc) | patch (clang) | |---------------------|-----------|-------------|---------------| | x86-64-vnni512      | 762122798 | 762122798   | 762122798     | | x86-64-avx512       | 769723503 | 762122798   | 762122798     | | x86-64-bmi2         | 769723503 | 762122798   | 762122798     | | x86-64-ssse3        | 769723503 | 762122798   | 762122798     | | x86-64              | 762122798 | 762122798   | 762122798     |  Following architectures will experience ~4% slowdown due to an additional instruction in the middle of hot path:  * x86-64-avx512 * x86-64-bmi2 * x86-64-avx2 * x86-64-sse41-popcnt (x86-64-modern) * x86-64-ssse3 * x86-32-sse41-popcnt  This patch clearly loses Elo against master with both STC and LTC.  Failed non-regression STC (256bit fix only): LLR: -2.95 (-2.94;2.94) <-1.75;0.25> Total: 33528 W: 8769 L: 9049 D: 15710 Ptnml(0-2): 96; 3616; 9600; 3376; 76 https://tests.stockfishchess.org/tests/view/63e6a5b44299542b1e26a485  60+0.6 @ 30000 games: Elo: -1.67 +-1.7 (95%) LOS: 2.8% Total: 30000 W: 7848 L: 7992 D: 14160 Ptnml(0-2): 12; 2847; 9436; 2683; 22 nElo: -3.84 +-3.9 (95%) PairsRatio: 0.95 https://tests.stockfishchess.org/tests/view/63e7ac716d0e1db55f35a660  However; a test against nn-a3dc078bafc7.nnue; which is the latest ""safe"" network not causing the bug; passed with regular bounds.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 160456 W: 42658 L: 42175 D: 75623 Ptnml(0-2): 487; 17638; 43469; 18173; 461 https://tests.stockfishchess.org/tests/view/63e89836d62a5d02b0fa82c8  closes https://github.com/official-stockfish/Stockfish/pull/4391 closes https://github.com/official-stockfish/Stockfish/pull/4394  No functional change",True,5,2023-02-01
Disservin,vondele,2023-02-18 12:14:24+00:00,update cuckoo link  use webarchive to link to the cycle detection paper by Kervinck.  closes https://github.com/official-stockfish/Stockfish/pull/4389  No functional change,True,5,2023-02-01
borg323,vondele,2023-02-18 12:14:05+00:00,Fix build on arm windows  avoids the use of _mm_malloc on arm windows.  fixes #4379 closes https://github.com/official-stockfish/Stockfish/pull/4388  No functional change,True,5,2023-02-01
linrock,vondele,2023-02-09 06:50:27+00:00,"Update default net to nn-1337b1adec5b.nnue  Created by retraining the master net on a dataset composed of:  * Most of the previous best dataset filtered to remove positions likely having only one good move * Adding training data from Leela T77 dec2021 rescored with 16tb of 7-piece tablebases  Trained with end lambda 0.7 and max epoch 900. Positions with ply <= 28 were removed from most of the previous best dataset before training began. A new nnue-pytorch trainer param for skipping early plies was used to skip plies <= 24 in the unfiltered and additional Leela T77 parts of the dataset.  ``` python easy_train.py \   --experiment-name leela96-dfrc99-T80octnovT79aprmayT60novdec-eval-filt-v2-T78augsep-12tb-T77dec-16tb-lambda7-sk24 \   --training-dataset /data/leela96-dfrc99-T80octnovT79aprmayT60novdec-eval-filt-v2-T78augsep-12tb-T77dec-16tb.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/easy-train-early-fen-skipping \   --early-fen-skipping 24 \   --gpus ""0;"" \   --start-from-engine-test-net True \   --start-lambda 1.0 \   --end-lambda 0.7 \   --gamma 0.995 \   --lr 4.375e-4 \   --tui False \   --seed $RANDOM \   --max_epoch 900 ```  The depth6 multipv2 search filtering method is the same as the one used for filtering recent best datasets; with a lower eval difference threshold to remove slightly more positions than before. These parts of the dataset were filtered:  * 96% of T60T70wIsRightFarseerT60T74T75T76.binpack * 99% of dfrc_n5000.binpack * T80 oct + nov 2022 data; no positions with castling flags; rescored with ~600gb 7p tablebases * T79 apr + may 2022 data; rescored with 12tb 7p tablebases * T60 nov + dec 2021 data; rescored with 12tb 7p tablebases  These parts of the dataset were not filtered. Positions with ply <= 24 were skipped during training:  * T78 aug + sep 2022 data; rescored with 12tb 7p tablebases * 84% of T77 dec 2021 data; rescored with 16tb 7p tablebases  The code and exact evaluation thresholds used for data filtering can be found at: https://github.com/linrock/Stockfish/tree/tools-filter-multipv2-eval-diff-t2/src/filter  The exact training data used can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move: nn-epoch859.nnue : 3.5 +/ 1.2  Passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.00> https://tests.stockfishchess.org/tests/view/63dfeefc73223e7f52ad769f Total: 219744 W: 58572 L: 58002 D: 103170 Ptnml(0-2): 609; 24446; 59284; 24832; 701  Passed LTC: https://tests.stockfishchess.org/tests/view/63e268fc73223e7f52ade7b6 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 91256 W: 24528 L: 24121 D: 42607 Ptnml(0-2): 48; 8863; 27390; 9288; 39  closes https://github.com/official-stockfish/Stockfish/pull/4387  bench 3841998",True,3,2023-02-01
dubslow,vondele,2023-02-09 06:46:41+00:00,Update `complexityAverage` in all branches of static eval  STC: https://tests.stockfishchess.org/tests/view/63dda49573223e7f52ad0f8c LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 117416 W: 31173 L: 31049 D: 55194 Ptnml(0-2): 290; 12246; 33533; 12328; 311  LTC: https://tests.stockfishchess.org/tests/view/63dfa90873223e7f52ad69b8 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 44416 W: 11924 L: 11744 D: 20748 Ptnml(0-2): 5; 4036; 13968; 4172; 27  closes https://github.com/official-stockfish/Stockfish/pull/4385  bench 4758694,True,3,2023-02-01
Vizvezdenec,vondele,2023-02-09 06:45:05+00:00,"Cleanup and reorder in qsearch  This patch is a simplification / code normalisation in qsearch.  Adds steps in comments the same way we have in search;  Makes a separate ""pruning"" stage instead of heuristics randomly being spread over qsearch code; Reorders pruning heuristics from least taxing ones to more taxing ones; Removes repeated check for best value not being mated; instead uses 1 check - thus removes some lines of code. Moves prefetch and move setup after pruning - makes no sense to do them if move will actually get pruned.  Passed non-regression test: https://tests.stockfishchess.org/tests/view/63dd2c5ff9a50a69252c1413 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 113504 W: 29898 L: 29770 D: 53836 Ptnml(0-2): 287; 11861; 32327; 11991; 286  https://github.com/official-stockfish/Stockfish/pull/4382  Non-functional change.",True,3,2023-02-01
Disservin,vondele,2023-02-09 06:42:52+00:00,remove unnecessary variable  pinned already has to be true for the bitwise &  closes https://github.com/official-stockfish/Stockfish/pull/4381  No functional change,True,3,2023-02-01
Unknown,vondele,2023-02-03 19:18:50+00:00,Improve excluded move logic  PR consists of 2 improvements on nodes with excludeMove:  1. Remove xoring the posKey with make_key(excludedMove)     Since we never call tte->save anymore with excludedMove;    the unique left purpose of the xoring was to avoid a TT hit.    Nevertheless on a normal bench run this produced ~25 false positives    (key collisions)    To avoid that we now forbid early TT cutoff's with excludeMove    Maybe these accesses to TT with xored key caused useless misses    in the CPU caches (L1; L2 ...)    Now doing the probe with the same key as the enclosing search does;    should hit the CPU cache.  2. Don't probe Tablebases with excludedMove.     This can't be tested on fishtest; but it's obvious that    tablebases don't deliver any information about suboptimal moves.  Side note:    Very surprisingly it looks like we cannot use static eval's from    TT since they slightly differ over time due to changing optimism.    Attempts to use static eval's from TT did loose about 13 ELO.    This is something about to investigate.  LTC: https://tests.stockfishchess.org/tests/view/63dc0f8de9d4cdfbe672d0c6 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 44736 W: 12046 L: 11733 D: 20957 Ptnml(0-2): 12; 4212; 13617; 4505; 22  An analogue of this passed STC & LTC see PR #4374 (thanks Dubslow for reviewing!)  closes https://github.com/official-stockfish/Stockfish/pull/4380  Bench: 4758694,True,4,2023-02-01
XInTheDark,vondele,2023-02-03 19:15:09+00:00,Remove reduced LMR capture bonus  In LMR; simplify away the reduced capture bonus (i.e. if (capture) bonus /= 6).  Non-regression STC: https://tests.stockfishchess.org/tests/view/63da1da9bbadd17b3787dced LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 28152 W: 7521 L: 7296 D: 13335 Ptnml(0-2): 76; 3069; 7568; 3280; 83  Non-regression LTC: https://tests.stockfishchess.org/tests/view/63da6ad4bbadd17b3787e98c LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 52472 W: 14120 L: 13941 D: 24411 Ptnml(0-2): 16; 5071; 15887; 5242; 20  closes https://github.com/official-stockfish/Stockfish/pull/4378  Bench: 4034016,True,4,2023-02-01
Vizvezdenec,vondele,2023-02-03 19:10:08+00:00,Simplify usage of optimism in complexity  This patch removes one condition in optimism usage in complexity; now negative optimism also impacts it.  Passed STC: https://tests.stockfishchess.org/tests/view/63d34f43721fe2bff692fb12 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 204920 W: 54343 L: 54309 D: 96268 Ptnml(0-2): 598; 22648; 55897; 22756; 561  Passed LTC: https://tests.stockfishchess.org/tests/view/63d612a2a67dd929a556075c LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 200712 W: 53207 L: 53172 D: 94333 Ptnml(0-2): 58; 19664; 60901; 19651; 82  closes https://github.com/official-stockfish/Stockfish/pull/4377  bench 4204964,True,4,2023-02-01
MinetaS,vondele,2023-02-03 19:07:56+00:00,Expand statistics tools for engine development  This patch adds more debugging slots up to 32 per type and provide tools to calculate standard deviation and Pearson's correlation coefficient.  However; due to slot being 0 at default; dbg_hit_on(c; b) has to be removed.  Initial idea from snicolet/Stockfish@d8ab604  closes https://github.com/official-stockfish/Stockfish/pull/4354  No functional change,True,4,2023-02-01
Vizvezdenec,vondele,2023-02-02 17:00:14+00:00,Do less SEE pruning in qsearch  Current master prunes all moves with negative SEE values in qsearch. This patch sets constant negative threshold thus allowing some moves with negative SEE values to be searched. Value of threshold is completely arbitrary and can be tweaked - also it as function of depth can be tried. Original idea by author of Alexandria engine.  Passed STC https://tests.stockfishchess.org/tests/view/63d79a59a67dd929a5564976 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 34864 W: 9392 L: 9086 D: 16386 Ptnml(0-2): 113; 3742; 9429; 4022; 126  Passed LTC https://tests.stockfishchess.org/tests/view/63d8074aa67dd929a5565bc2 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 91616 W: 24532 L: 24126 D: 42958 Ptnml(0-2): 32; 8840; 27662; 9238; 36  closes https://github.com/official-stockfish/Stockfish/pull/4376  Bench: 4010877,True,3,2023-02-01
vondele,vondele,2023-02-02 16:58:05+00:00,Update WLD model  update the WLD model with about 400M positions extracted from recent LTC games after the net updates. This ensures that the 50% win rate is again at 1.0 eval.  closes https://github.com/official-stockfish/Stockfish/pull/4373  No functional change.,True,3,2023-02-01
MinetaS,vondele,2023-02-02 16:49:23+00:00,Add -Wconditional-uninitialized when using Clang  Add -Wconditional-uninitialized as it is not controlled by -Wall.  closes https://github.com/official-stockfish/Stockfish/pull/4371  No functional change,True,3,2023-02-01
XInTheDark,vondele,2023-02-02 16:45:57+00:00,Decrease reduction for killer moves with good history  If move is a main killer and we have a good history; decrease reduction.  STC: https://tests.stockfishchess.org/tests/view/63d38b37721fe2bff693069a LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 46688 W: 12542 L: 12222 D: 21924 Ptnml(0-2): 126; 5013; 12769; 5287; 149  LTC: https://tests.stockfishchess.org/tests/view/63d471e2bde6e5f3cb4be5d3 LLR: 2.93 (-2.94;2.94) <0.50;2.50> Total: 130976 W: 35033 L: 34555 D: 61388 Ptnml(0-2): 38; 12551; 39833; 13027; 39  closes https://github.com/official-stockfish/Stockfish/pull/4369  Bench: 4069938,True,3,2023-02-01
MinetaS,vondele,2023-01-28 15:54:30+00:00,Remove maxNextDepth  This patch allows full PV search to have double extensions as well when extension == 1 && doDeeperSearch && doEvenDeeperSearch && !doShallowerSearch is true; which is extremely rare to occur.  Passed non-regression STC (master 3d2381d): LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 370824 W: 97835 L: 97974 D: 175015 Ptnml(0-2): 1073; 38814; 105731; 38767; 1027 https://tests.stockfishchess.org/tests/view/63c89416a83c702aac08314c  Passed non-regression LTC (master 3d2381d): LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 306048 W: 81173 L: 81237 D: 143638 Ptnml(0-2): 117; 27977; 96901; 27911; 118 https://tests.stockfishchess.org/tests/view/63cc4e84344bb01c191b2658  Bench: 4208265,True,5,2023-01-01
dubslow,vondele,2023-01-28 15:50:46+00:00,Remove `previousDepth` in favor of `completedDepth + 2`  Beyond the simplification; this could be considered a bugfix from a certain point of view. However; the effect is very subtle and essentially impossible for users to notice. 5372f81cc8 added about 2 Elo at LTC; but only for second and later `go` commands; now; with this patch; the first `go` command will also benefit from that gain. Games under time controls are unaffected (as per the tests).  STC: https://tests.stockfishchess.org/tests/view/63c3d291330c0d3d051d48a8 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 473792 W: 124858 L: 125104 D: 223830 Ptnml(0-2): 1338; 49653; 135063; 49601; 1241  LTC: https://tests.stockfishchess.org/tests/view/63c8cd56a83c702aac083bc9 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 290728 W: 76926 L: 76978 D: 136824 Ptnml(0-2): 106; 27987; 89221; 27953; 97  closes https://github.com/official-stockfish/Stockfish/pull/4361  bench 4208265,True,5,2023-01-01
UniQP,vondele,2023-01-28 15:49:27+00:00,Remove redundant const qualifiers  The const qualifiers are already implied by the constexpr qualifiers.  closes https://github.com/official-stockfish/Stockfish/pull/4359  No functional change,True,5,2023-01-01
UniQP,vondele,2023-01-28 15:47:52+00:00,Simplify functions to read/write network parameters  closes https://github.com/official-stockfish/Stockfish/pull/4358  No functional change,True,5,2023-01-01
Disservin,vondele,2023-01-28 15:37:29+00:00,Fixed UCI TB win values  This patch results in search values for a TB win/loss to be reported in a way that does not change with normalization; i.e. will be consistent over time.  A value of 200.00 pawns is now reported upon entering a TB won position. Values smaller than 200.00 relate to the distance in plies from the root to the probed position position; with 1 cp being 1 ply distance.  closes https://github.com/official-stockfish/Stockfish/pull/4353  No functional change,True,5,2023-01-01
Vizvezdenec,vondele,2023-01-25 06:51:19+00:00,Rebalance usage of history heuristics in pruning  This patch has multiple effects:  * history heuristics sum in futility pruning now can't exceed some negative value so futility pruning for moves with negative histories should become slightly less aggressive;  * history heuristics are now used in SEE pruning for quiet moves;  Passed STC: https://tests.stockfishchess.org/tests/view/63cde339c93e8828d0f02e3a LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 88424 W: 23681 L: 23303 D: 41440 Ptnml(0-2): 258; 9559; 24219; 9899; 277  Passed LTC: https://tests.stockfishchess.org/tests/view/63ce9009c93e8828d0f04e4f LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 79536 W: 21223 L: 20843 D: 37470 Ptnml(0-2): 22; 7599; 24146; 7979; 22  closes https://github.com/official-stockfish/Stockfish/pull/4355  Bench: 4208265,True,2,2023-01-01
dubslow,vondele,2023-01-25 06:48:39+00:00,`stat_bonus`: replace quadratic with nearly identical line  passed stc: https://tests.stockfishchess.org/tests/view/63ca58c90eefe8694a0c4eac LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 287960 W: 76146 L: 76201 D: 135613 Ptnml(0-2): 947; 31890; 78307; 31943; 893  passed ltc: https://tests.stockfishchess.org/tests/view/63cc8a51344bb01c191b30f0 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 73784 W: 19559 L: 19402 D: 34823 Ptnml(0-2): 33; 7171; 22327; 7328; 33  closes https://github.com/official-stockfish/Stockfish/pull/4352  bench 3990490,True,2,2023-01-01
linrock,vondele,2023-01-23 06:01:32+00:00,"Update default net to nn-bc24c101ada0.nnue  Created by retraining the master net with Leela T78 data from Aug+Sep 2022 added to the previous best dataset. Trained with end lambda 0.7 and started with max epoch 800. All positions with ply <= 28 were skipped:  ``` python easy_train.py \   --experiment-name leela95-dfrc96-filt-only-T80octnov-T60novdecT78augsepT79aprmay-12tb7p-sk28-lambda7 \   --training-dataset /data/leela95-dfrc96-filt-only-T80octnov-T60novdecT78augsepT79aprmay-12tb7p.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes-skip-ply-lteq-28 \   --start-from-engine-test-net True \   --gpus ""0;"" \   --start-lambda 1.0 \   --end-lambda 0.7 \   --gamma 0.995 \   --lr 4.375e-4 \   --tui False \   --seed $RANDOM \   --max_epoch 800 ```  Around epoch 750; training was manually paused and max epoch increased to 950 before resuming. The additional Leela training data from T78 was prepared in the same way as the previous best dataset.  The exact training data used can be found at: https://robotmoon.com/nnue-training-data/  While the local elo ratings during this experiment were much lower than in recent master nets; several later epochs had a consistent elo above zero; and this was hypothesized to represent potential strength at slower time controls.  Local elo at 25k nodes per move leela95-dfrc96-filt-only-T80octnov-T60novdecT78augsepT79aprmay-12tb7p-sk28-lambda7 nn-epoch819.nnue : 0.4 +/- 1.1 (nn-bc24c101ada0.nnue) nn-epoch799.nnue : 0.3 +/- 1.2 nn-epoch759.nnue : 0.3 +/- 1.1 nn-epoch839.nnue : 0.2 +/- 1.4  Passed STC https://tests.stockfishchess.org/tests/view/63cabf6f0eefe8694a0c6013 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 41608 W: 11161 L: 10848 D: 19599 Ptnml(0-2): 116; 4496; 11281; 4781; 130  Passed LTC https://tests.stockfishchess.org/tests/view/63cb1856344bb01c191af263 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 76760 W: 20517 L: 20137 D: 36106 Ptnml(0-2): 34; 7435; 23070; 7799; 42  closes https://github.com/official-stockfish/Stockfish/pull/4351  bench 3941848",True,0,2023-01-01
jonathanmcdermid,vondele,2023-01-22 12:15:46+00:00,apply if constexpr to additional instances  as a form of documentation; and a hint to the compiler.  closes https://github.com/official-stockfish/Stockfish/pull/4345  No functional change,True,6,2023-01-01
stouset,vondele,2023-01-22 09:55:32+00:00,Remove precomputed SquareBB  Bit-shifting is a single instruction; and should be faster than an array lookup on supported architectures. Besides (ever so slightly) speeding up the conversion of a square into a bitboard; we may see minor general performance improvements due to preserving more of the CPU's existing cache.  passed STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 47280 W: 12469 L: 12271 D: 22540 Ptnml(0-2): 128; 4893; 13402; 5087; 130 https://tests.stockfishchess.org/tests/view/63c5cfe618c20f4929c5fe46  Small speedup locally:  ``` Result of  20 runs ================== base (./stockfish.master       ) =    1752135  +/- 10943 test (./stockfish.patch        ) =    1763939  +/- 10818 diff                             =     +11804  +/- 4731  speedup        = +0.0067 P(speedup > 0) =  1.0000  CPU: 16 x AMD Ryzen 9 3950X 16-Core Processor ```  Closes https://github.com/official-stockfish/Stockfish/pull/4343  Bench: 4106793,True,6,2023-01-01
vondele,vondele,2023-01-22 09:54:15+00:00,Update UCI_Elo parameterization  The old parameterization (https://github.com/official-stockfish/Stockfish/pull/2225/files) has now become quite inaccurate. This updates the formula based on updated results with master. The formula is based on a fit of the Elo results for games played between master at various skill levels; and various versions of the Stash engine; which have been ranked at CCRL.  ```    # PLAYER             :  RATING  ERROR  POINTS  PLAYED   (%)    1 master-skill-19    :  3191.1   40.4   940.0    1707    55    2 master-skill-18    :  3170.3   39.3  1343.0    2519    53    3 master-skill-17    :  3141.3   37.8  2282.0    4422    52    4 master-skill-16    :  3111.2   37.1  2773.0    5423    51    5 master-skill-15    :  3069.5   37.2  2728.5    5386    51    6 master-skill-14    :  3024.8   36.1  2702.0    5339    51    7 master-skill-13    :  2972.9   35.4  2645.5    5263    50    8 master-skill-12    :  2923.1   35.0  2653.5    5165    51    9 master-skill-11    :  2855.5   33.6  2524.0    5081    50   10 master-skill-10    :  2788.3   32.0  2724.5    5511    49   11 stash-bot-v25.0    :  2744.0   31.5  1952.5    3840    51   12 master-skill-9     :  2702.8   30.5  2670.0    5018    53   13 master-skill-8     :  2596.2   28.5  2669.5    4975    54   14 stash-bot-v21.0    :  2561.2   30.0  1338.0    3366    40   15 master-skill-7     :  2499.5   28.5  1934.0    4178    46   16 stash-bot-v20.0    :  2452.6   27.7  1606.5    3378    48   17 stash-bot-v19.0    :  2425.3   26.7  1787.0    3365    53   18 master-skill-6     :  2363.2   26.4  2510.5    4379    57   19 stash-bot-v17.0    :  2280.7   25.4  2209.0    4378    50   20 master-skill-5     :  2203.7   25.3  2859.5    5422    53   21 stash-bot-v15.3    :  2200.0   25.4  1757.0    4383    40   22 stash-bot-v14      :  2145.9   25.5  2890.0    5167    56   23 stash-bot-v13      :  2042.7   25.8  2263.5    4363    52   24 stash-bot-v12      :  1963.4   25.8  1769.5    4210    42   25 master-skill-4     :  1922.9   25.9  2690.0    5399    50   26 stash-bot-v11      :  1873.0   26.3  2203.5    4335    51   27 stash-bot-v10      :  1783.8   27.8  2568.5    4301    60   28 master-skill-3     :  1742.3   27.8  1909.5    4439    43   29 master-skill-2     :  1608.4   29.4  2064.5    4389    47   30 stash-bot-v9       :  1582.6   30.2  2130.0    4230    50   31 master-skill-1     :  1467.6   31.3  2015.5    4244    47   32 stash-bot-v8       :  1452.8   31.5  1953.5    3780    52   33 master-skill-0     :  1320.1   32.9   651.5    2083    31 ```  Skill 0 .. 19; now covers CCRL Blitz Elo from 1320 to 3190; approximately. Indeed; the Elo of stash in this analysis is only to within +- 100 Elo of CCRL; probably because it depends quite a bit on the opponent pool.  To obtain a skill level for a given Elo number; the above data is fit as a 3rd degree polynomial Skill(Elo). A quick test confirms the correspondence to the above table:  ``` Score of master-elo-2721 vs stash-bot-v21.0: 51 - 16 - 19  [0.703] 86 Elo difference: 150.1 +/- 70.2; LOS: 100.0 %; DrawRatio: 22.1 % ```  closes https://github.com/official-stockfish/Stockfish/pull/4341  No functional change.,True,6,2023-01-01
UniQP,vondele,2023-01-22 09:51:02+00:00,Fix asm modifiers in add_dpbusd_epi32x2 implementations  The accumulator should be an earlyclobber because it is written before all input operands are read. Otherwise; the asm code computes a wrong result if the accumulator shares a register with one of the other input operands (which happens if we pass in the same expression for the accumulator and the operand).  Closes https://github.com/official-stockfish/Stockfish/pull/4339  No functional change,True,6,2023-01-01
linrock,vondele,2023-01-14 07:12:11+00:00,"Update default net to nn-1e7ca356472e.nnue  Created by retraining the master net on a dataset composed of:  * The Leela-dfrc_n5000.binpack dataset filtered with depth6 multipv2 search to remove positions with only one good move; in addition to removing positions where either of the two best moves are captures * The same Leela T80 oct+nov 2022 training data used in recent best datasets * Additional Leela training data from T60 nov+dec 2021 and T79 apr+may 2022  Trained with end lambda 0.7 and started with max epoch 800. All positions with ply <= 28 were skipped:  ``` python easy_train.py \   --experiment-name leela95-dfrc96-mpv-eval-fonly-T80octnov-T79aprmayT60novdec-12tb7p-sk28-lambda7 \   --training-dataset /data/leela95-dfrc96-mpv-eval-fonly-T80octnov-T79aprmayT60novdec-12tb7p.binpack \   --nnue-pytorch-branch linrock/nnue-pytorch/misc-fixes-skip-ply-lteq-28 \   --start-from-engine-test-net True \   --gpus ""0;"" \   --start-lambda 1.0 \   --end-lambda 0.7 \   --gamma 0.995 \   --lr 4.375e-4 \   --tui False \   --seed $RANDOM \   --max_epoch 800 ```  Around epoch 780; training was manually paused and max epoch increased to 920 before resuming.  During depth6 multipv2 data filtering; positions were considered to have only one good move if the score of the best move was significantly better than the 2nd best move in a way that changes the outcome of the game:  * the best move leads to a significant advantage while the 2nd best move equalizes or loses * the best move is about equal while the 2nd best move loses  The modified stockfish branch and exact score thresholds used for filtering are at: https://github.com/linrock/Stockfish/tree/tools-filter-multipv2-eval-diff/src/filter  About 95% of the Leela portion and 96% of the DFRC portion of the Leela-dfrc_n5000.binpack dataset was filtered. Unfiltered parts of the dataset were left out.  The additional Leela training data from T60 nov+dec 2021 and T79 apr+may 2022 was WDL-rescored with about 12TB of syzygy 7-piece tablebases where the material difference is less than around 6 pawns. Best moves were exported to .plain data files during data conversion with the lc0 rescorer.  The exact training data can be found at: https://robotmoon.com/nnue-training-data/  Local elo at 25k nodes per move experiment_leela95-dfrc96-mpv-eval-fonly-T80octnov-T79aprmayT60novdec-12tb7p-sk28-lambda7 run_0/nn-epoch899.nnue : 3.8 +/- 1.6  Passed STC https://tests.stockfishchess.org/tests/view/63bed1f540aa064159b9c89b LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 103344 W: 27392 L: 26991 D: 48961 Ptnml(0-2): 333; 11223; 28099; 11744; 273  Passed LTC https://tests.stockfishchess.org/tests/view/63c010415705810de2deb3ec LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 21712 W: 5891 L: 5619 D: 10202 Ptnml(0-2): 12; 2022; 6511; 2304; 7  closes https://github.com/official-stockfish/Stockfish/pull/4338  bench 4106793",True,5,2023-01-01
UniQP,vondele,2023-01-09 19:32:58+00:00,Avoid unnecessary string copies  closes https://github.com/official-stockfish/Stockfish/pull/4326  also fixes typo; closes https://github.com/official-stockfish/Stockfish/pull/4332  No functional change,True,0,2023-01-01
UniQP,vondele,2023-01-09 19:28:24+00:00,Replace some std::string occurrences with std::string_view  std::string_view is more lightweight than std::string. Furthermore; std::string_view variables can be declared constexpr.  closes https://github.com/official-stockfish/Stockfish/pull/4328  No functional change,True,0,2023-01-01
StefanoD,vondele,2023-01-09 19:25:13+00:00,Modernize code base a little bit  Removed sprintf() which generated a warning; because of security reasons. Replace NULL with nullptr Replace typedef with using Do not inherit from std::vector. Use composition instead. optimize mutex-unlocking  closes https://github.com/official-stockfish/Stockfish/pull/4327  No functional change,True,0,2023-01-01
UniQP,vondele,2023-01-09 19:18:39+00:00,Warn if a global function has no previous declaration  If a global function has no previous declaration; either the declaration is missing in the corresponding header file or the function should be declared static. Static functions are local to the translation unit; which allows the compiler to apply some optimizations earlier (when compiling the translation unit rather than during link-time optimization).  The commit enables the warning for gcc; clang; and mingw. It also fixes the reported warnings by declaring the functions static or by adding a header file (benchmark.h).  closes https://github.com/official-stockfish/Stockfish/pull/4325  No functional change,True,0,2023-01-01
w1wwwwww,vondele,2023-01-09 19:16:17+00:00,Only close file if already open  Ensures that the tablebase file is only closed if already open.  Fixes #4268 Closes https://github.com/official-stockfish/Stockfish/pull/4321  No functional change,True,0,2023-01-01
candirufish,vondele,2023-01-09 19:15:08+00:00,On step 18 increase reduction by 2 if not ttmove and cutnode  stc: https://tests.stockfishchess.org/tests/view/63babc9fcd3db0c8d399f723 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 43104 W: 11711 L: 11389 D: 20004 Ptnml(0-2): 211; 4518; 11793; 4798; 232  ltc: https://tests.stockfishchess.org/tests/view/63bb1857cd3db0c8d39a0661 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 127104 W: 33810 L: 33339 D: 59955 Ptnml(0-2): 39; 12155; 38702; 12608; 48  closes https://github.com/official-stockfish/Stockfish/pull/4334  Bench: 4035725,True,0,2023-01-01
dubslow,vondele,2023-01-09 19:12:01+00:00,"Late countermove bonus: remove ""extraBonus &&""  passed stc: https://tests.stockfishchess.org/tests/view/63a71e409c0589b83751dc25 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 432480 W: 113846 L: 114055 D: 204579 Ptnml(0-2): 1164; 48205; 117701; 48016; 1154  passed ltc: https://tests.stockfishchess.org/tests/view/63aba66639af998100ce1aa9 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 245344 W: 65309 L: 65317 D: 114718 Ptnml(0-2): 117; 24257; 73903; 24307; 88  closes https://github.com/official-stockfish/Stockfish/pull/4322  bench 4379218",True,0,2023-01-01
Unknown,snicolet,2023-01-04 08:37:02+00:00,Fix stack initialization  This fixes a bug where on line 278 the Stack::staticEvals are initialized to 0. However VALUE_NONE is defined to be 32002 so this is a bug in master. It is probably due to the calculation of improvement; where staticEval prior to rootPos can be accessed.  https://tests.stockfishchess.org/tests/view/63ab91cf39af998100ce1666 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 53736 W: 14285 L: 13955 D: 25496 Ptnml(0-2): 121; 5921; 14500; 6159; 167  https://tests.stockfishchess.org/tests/view/63b2af5ee28ed36c814bed52 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 33776 W: 9130 L: 8934 D: 15712 Ptnml(0-2): 14; 3240; 10185; 3434; 15  closes https://github.com/official-stockfish/Stockfish/pull/4320  Bench: 4068510,True,2,2023-01-01
FauziAkram,vondele,2023-01-02 18:14:05+00:00,Parameter Tweaks  This patch is a parameter tweak that passed both STC and LTC tests.  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 80944 W: 21557 L: 21189 D: 38198 Ptnml(0-2): 192; 8883; 22028; 9103; 266 https://tests.stockfishchess.org/tests/view/63b07fe2d421d8f75795a03b  LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 30440 W: 8296 L: 8007 D: 14137 Ptnml(0-2): 6; 2893; 9143; 3162; 16 https://tests.stockfishchess.org/tests/view/63b167d02ab1290f961644db  closes https://github.com/official-stockfish/Stockfish/pull/4318  Bench: 4182223,True,0,2023-01-01
linrock,vondele,2023-01-02 18:10:14+00:00,Update default net to nn-a3dc078bafc7.nnue  This is a later epoch (epoch 859) from the same experiment run that trained yesterday's master net nn-60fa44e376d9.nnue (epoch 779). The experiment was manually paused around epoch 790 and unpaused with max epoch increased to 900 mainly to get more local elo data without letting the GPU idle.  nn-60fa44e376d9.nnue is from #4314 nn-335a9b2d8a80.nnue is from #4295  Local elo vs. nn-335a9b2d8a80.nnue at 25k nodes per move: experiment_leela93-dfrc99-filt-only-T80-oct-nov-skip28 run_0/nn-epoch779.nnue (nn-60fa44e376d9.nnue) : 5.0 +/- 1.2 run_0/nn-epoch859.nnue (nn-a3dc078bafc7.nnue) : 5.6 +/- 1.6  Passed STC vs. nn-335a9b2d8a80.nnue https://tests.stockfishchess.org/tests/view/63ae10495bd1e5f27f13d94f LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 37536 W: 10088 L: 9781 D: 17667 Ptnml(0-2): 110; 4006; 10223; 4325; 104  An LTC test vs. nn-335a9b2d8a80.nnue was paused due to nn-60fa44e376d9.nnue passing LTC first: https://tests.stockfishchess.org/tests/view/63ae5d34331d5fca5113703b  Passed LTC vs. nn-60fa44e376d9.nnue https://tests.stockfishchess.org/tests/view/63af1e41465d2b022dbce4e7 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 148704 W: 39672 L: 39155 D: 69877 Ptnml(0-2): 59; 14443; 44843; 14936; 71  closes https://github.com/official-stockfish/Stockfish/pull/4319  bench 3984365,True,0,2023-01-01
UniQP,vondele,2023-01-02 18:07:38+00:00,Update copyright years  Happy New Year!  closes https://github.com/official-stockfish/Stockfish/pull/4315  No functional change,True,0,2023-01-01
linrock,vondele,2023-01-01 11:28:51+00:00,"Update default net to nn-60fa44e376d9.nnue  Created by retraining the master net on the previous best dataset with additional filtering. No new data was added.  More of the Leela-dfrc_n5000.binpack part of the dataset was pre-filtered with depth6 multipv2 search to remove bestmove captures. About 93% of the previous Leela/SF data and 99% of the SF dfrc data was filtered. Unfiltered parts of the dataset were left out. The new Leela T80 oct+nov data is the same as before. All early game positions with ply count <= 28 were skipped during training by modifying the training data loader in nnue-pytorch.  Trained in a similar way as recent master nets; with a different nnue-pytorch branch for early ply skipping:  python3 easy_train.py \   --experiment-name=leela93-dfrc99-filt-only-T80-oct-nov-skip28 \   --training-dataset=/data/leela93-dfrc99-filt-only-T80-oct-nov.binpack \   --start-from-engine-test-net True \   --nnue-pytorch-branch=linrock/nnue-pytorch/misc-fixes-skip-ply-lteq-28 \   --gpus=""0;"" \   --start-lambda=1.0 \   --end-lambda=0.75 \   --gamma=0.995 \   --lr=4.375e-4 \   --tui=False \   --seed=$RANDOM \   --max_epoch=800 \   --network-testing-threads 20 \   --num-workers 6  For the exact training data used: https://robotmoon.com/nnue-training-data/ Details about the previous best dataset: #4295  Local testing at a fixed 25k nodes: experiment_leela93-dfrc99-filt-only-T80-oct-nov-skip28 Local Elo: run_0/nn-epoch779.nnue : 5.1 +/- 1.5  Passed STC https://tests.stockfishchess.org/tests/view/63adb3acae97a464904fd4e8 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 36504 W: 9847 L: 9538 D: 17119 Ptnml(0-2): 108; 3981; 9784; 4252; 127  Passed LTC https://tests.stockfishchess.org/tests/view/63ae0ae25bd1e5f27f13d884 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 36592 W: 10017 L: 9717 D: 16858 Ptnml(0-2): 17; 3461; 11037; 3767; 14  closes https://github.com/official-stockfish/Stockfish/pull/4314  bench 4015511",True,6,2023-01-01
UniQP,vondele,2023-01-01 11:26:36+00:00,Remove redundant extern modifier for function declarations  Functions have external linkage by default; so there's no need to declare them extern.  closes https://github.com/official-stockfish/Stockfish/pull/4308  No functional change,True,6,2023-01-01
UniQP,vondele,2023-01-01 11:24:42+00:00,Fix comparison with uninitialized variable  In both modified methods; the variable 'result' is checked to detect whether the probe operation failed. However; the variable is not initialized on all paths; so the check might test an uninitialized value.  A test position (with TB) is given by:  position fen 3K1k2/R7/8/8/8/8/8/R6Q w - - 0 1 moves a1b1 f8g8 b1a1 g8f8 a1b1 f8g8 b1a1  This is now fixed by always initializing the variable.  closes https://github.com/official-stockfish/Stockfish/pull/4309  No functional change,True,6,2023-01-01
XInTheDark,vondele,2022-12-24 15:01:50+00:00,Add double bonus for prior countermove fail low  Add a double extra bonus for particularly bad fail low cases. Original idea by Yoshie2000.  STC: https://tests.stockfishchess.org/tests/view/63a2f0d86b5bf07ac7fad543 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 146488 W: 38992 L: 38532 D: 68964 Ptnml(0-2): 385; 16036; 39965; 16450; 408  LTC: https://tests.stockfishchess.org/tests/view/63a3eaeb6b5bf07ac7fafdec LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 103992 W: 27853 L: 27423 D: 48716 Ptnml(0-2): 41; 10029; 31435; 10441; 50  closes https://github.com/official-stockfish/Stockfish/pull/4302  Bench: 3801857,True,5,2022-12-01
FauziAkram,vondele,2022-12-24 14:58:51+00:00,Update Elo estimates for terms in search  based on 25k games per term; using the UHO_XXL_+0.90_+1.19.epd book; at STC.  More detailed information in the PR.  closes https://github.com/official-stockfish/Stockfish/pull/4294  No functional change,True,5,2022-12-01
linrock,vondele,2022-12-21 06:14:58+00:00,"Update default net to nn-335a9b2d8a80.nnue  Created by retraining the master net with a combination of:      the previous best dataset (Leela-dfrc_n5000.binpack); with about half the dataset filtered using depth6 multipv2 search to throw away positions where either of the 2 best moves are captures     Leela T80 Oct and Nov training data rescored with best moves; adding ~9.5 billion positions  Trained effectively the same way as the previous master net:  python3 easy_train.py \   --experiment-name=leela-dfrc-filtered-T80-oct-nov \   --training-dataset=/data/leela-dfrc-filtered-T80-oct-nov.binpack \   --start-from-engine-test-net True \   --gpus=""0;"" \   --start-lambda=1.0 \   --end-lambda=0.75 \   --gamma=0.995 \   --lr=4.375e-4 \   --tui=False \   --seed=$RANDOM \   --max_epoch=800 \   --auto-exit-timeout-on-training-finished=900 \   --network-testing-threads 20 \   --num-workers 6  Local testing at a fixed 25k nodes: experiments/experiment_leela-dfrc-filtered-T80-oct-nov/training/run_0/nn-epoch779.nnue localElo: run_0/nn-epoch779.nnue : 4.7 +/- 3.1  The new Leela T80 part of the dataset was prepared by downloading test80 training data from all of Oct 2022 and Nov 2022; rescoring with syzygy 6-piece tablebases and ~600 GB of 7-piece tablebases; saving best moves to exported .plain files; removing all positions with castling flags; then converting to binpacks and using interleave_binpacks.py to merge them together. Scripts used in this data conversion process are available at: https://github.com/linrock/lc0-data-converter  Filtering binpack data using depth6 multipv2 search was done by modifying transform.cpp in the tools branch: https://github.com/linrock/Stockfish/tree/tools-filter-multipv2-no-rescore  Links for downloading the training data (total size: 338 GB) are available at: https://robotmoon.com/nnue-training-data/  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 30544 W: 8244 L: 7947 D: 14353 Ptnml(0-2): 93; 3243; 8302; 3542; 92 https://tests.stockfishchess.org/tests/view/63a0d377264a0cf18f86f82b  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 32464 W: 8866 L: 8573 D: 15025 Ptnml(0-2): 19; 3054; 9794; 3345; 20 https://tests.stockfishchess.org/tests/view/63a10bc9fb452d3c44b1e016  closes https://github.com/official-stockfish/Stockfish/pull/4295  Bench 3554904",True,2,2022-12-01
MinetaS,vondele,2022-12-20 07:14:19+00:00,Fix a dependency bug  Instead of allowing .depend for specific build-related targets; filter non-build-related targets (i.e. help; clean) so that other targets can normally execute .depend target.  closes https://github.com/official-stockfish/Stockfish/pull/4293  No functional change,True,1,2022-12-01
lonfom169,vondele,2022-12-19 19:46:04+00:00,Sometimes do a reduced search if LMR is skipped  If the node doesn't go through LMR and r is too big; reduce search depth by one ply.  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 664888 W: 176375 L: 175169 D: 313344 Ptnml(0-2): 1965; 73754; 179851; 74858; 2016 https://tests.stockfishchess.org/tests/view/6399414c93ed41c57ede8fb8  LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 150784 W: 40553 L: 40031 D: 70200 Ptnml(0-2): 76; 14668; 45387; 15180; 81 https://tests.stockfishchess.org/tests/view/639dee6e11c576d919dc2b38  closes https://github.com/official-stockfish/Stockfish/pull/4290  Bench: 3727508,True,0,2022-12-01
vondele,vondele,2022-12-19 17:17:50+00:00,No error if net available but wget/curl missing  do not error out on missing wget/curl if these tools are not needed later on; i.e. if the net is available already.  closes https://github.com/official-stockfish/Stockfish/pull/4291 closes https://github.com/official-stockfish/Stockfish/pull/4253  No functional change,True,0,2022-12-01
Unknown,vondele,2022-12-19 17:15:09+00:00,Don't reset increaseDepth back to true after it has been set to false  Resetting increaseDepth back to true each time on the very next iteration was not intended so this is a bug fix and a simplification. See more discussion here #2482 (comment) Thanks to xoto10  STC: https://tests.stockfishchess.org/tests/view/6398c74693ed41c57ede7bfd LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 51128 W: 13543 L: 13220 D: 24365 Ptnml(0-2): 165; 5363; 14174; 5708; 154  LTC: https://tests.stockfishchess.org/tests/view/6399bcd393ed41c57edea750 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 290864 W: 77282 L: 77334 D: 136248 Ptnml(0-2): 107; 28127; 89029; 28049; 120  closes https://github.com/official-stockfish/Stockfish/pull/4288  bench: 3611278,True,0,2022-12-01
Vizvezdenec,vondele,2022-12-19 17:11:12+00:00,Reintroduce doEvenDeeperSearch  This patch is basically the same as a reverted patch but now has some guarding against search being stuck - the same way as we do with double extensions. This should help with search explosions - albeit slowly but they eventually should be resolved.  passed STC: https://tests.stockfishchess.org/tests/view/639733d0b4e52c95053f3485 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 514048 W: 136423 L: 135435 D: 242190 Ptnml(0-2): 1425; 56945; 139420; 57685; 1549  passed LTC: https://tests.stockfishchess.org/tests/view/639ab79b93ed41c57eded5c3 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 113800 W: 30642 L: 30190 D: 52968 Ptnml(0-2): 53; 11092; 34178; 11504; 73  closes https://github.com/official-stockfish/Stockfish/pull/4287  bench 3611278,True,0,2022-12-01
PikaCat-OuO,vondele,2022-12-19 17:09:52+00:00,Badge link fix  Fix the badge link issue mentioned in https://github.com/badges/shields/issues/8671  closes https://github.com/official-stockfish/Stockfish/pull/4285  No functional change,True,0,2022-12-01
nguyenpham,vondele,2022-12-19 17:08:12+00:00,Fixed the help of Makefile  make profile-build more prominent; adjust comments  closes https://github.com/official-stockfish/Stockfish/pull/4284  No functional change,True,0,2022-12-01
VoyagerOne,vondele,2022-12-12 07:20:48+00:00,Simplify Capture Scoring  The parameters are now in one place for easier tuning. New formula is very similar to current.  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 48176 W: 12819 L: 12616 D: 22741 Ptnml(0-2): 139; 5316; 13001; 5467; 165  LTC: LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 176752 W: 47364 L: 47304 D: 82084 Ptnml(0-2): 83; 17302; 53536; 17382; 73 https://tests.stockfishchess.org/tests/view/638ec7d068532fcbf79dfa15  closes https://github.com/official-stockfish/Stockfish/pull/4281  Bench: 3410998,True,0,2022-12-01
ppigazzini,vondele,2022-12-12 07:17:52+00:00,GitHub Actions: install NDK once and clean up yaml  Use Ubuntu 22.04 as runner for NDK to avoid a qemu bug with `profile-build`  closes https://github.com/official-stockfish/Stockfish/pull/4280  No functional change,True,0,2022-12-01
Unknown,vondele,2022-12-12 07:15:19+00:00,Avoid truncated PV in the threaded case  strongly prefer to pick as bestThread those threads with a longer PV; among those threads that all found the same bestmove.  extended discussion in #4244 closes https://github.com/official-stockfish/Stockfish/pull/4278  No functional change,True,0,2022-12-01
vondele,vondele,2022-12-12 07:14:26+00:00,"Revert ""doEvenDeeperSearch + tuning""  This reverts commit 98965c139df1483a3d684ee8bc7a60dc4b95efa1.  The increase of depth could lead to search explosions; most visible with TB.  fixes https://github.com/official-stockfish/Stockfish/issues/4276 closes https://github.com/official-stockfish/Stockfish/pull/4256  Bench: 3872306",True,0,2022-12-01
Disservin,vondele,2022-12-09 21:58:49+00:00,Fix lower/upper bounds output  Commit cb0c7a98485fbef4e5d6ed5f5b08201113ce0b4e doesnt reset the lower/upper bounds back to false.  fixes #4273 closes https://github.com/official-stockfish/Stockfish/pull/4274  No functional change,True,4,2022-12-01
vondele,vondele,2022-12-09 21:58:22+00:00,CI workflows; install git on windows  ensures the SF dev version is reported correctly  closes https://github.com/official-stockfish/Stockfish/pull/4272  No functional change,True,4,2022-12-01
vondele,vondele,2022-12-09 16:56:55+00:00,CI workflows; install git on windows  ensures the SF dev version is reported correctly  No functional change,True,4,2022-12-01
dsmsgms,vondele,2022-12-09 16:01:16+00:00,Simplify redundant condition.  closes https://github.com/official-stockfish/Stockfish/pull/4270  No functional change,True,4,2022-12-01
lonfom169,vondele,2022-12-09 15:59:55+00:00,Extend all moves at low depth if ttMove is doubly extended  If ttMove is doubly extended; we allow a depth growth of the remaining moves. The idea is to get a more realistic score comparison; because of the depth difference. We take some care to avoid this extension for high depths; in order to avoid the cost; since the search result is supposed to be more accurate in this case.  This pull request includes some small cleanups.  STC: LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 60256 W: 16189 L: 15848 D: 28219 Ptnml(0-2): 182; 6546; 16330; 6889; 181 https://tests.stockfishchess.org/tests/view/639109a1792a529ae8f27777  LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 106232 W: 28487 L: 28053 D: 49692 Ptnml(0-2): 46; 10224; 32145; 10652; 49 https://tests.stockfishchess.org/tests/view/63914cba792a529ae8f282ee  closes https://github.com/official-stockfish/Stockfish/pull/4271  Bench: 3622368,True,4,2022-12-01
ppigazzini,vondele,2022-12-09 15:54:43+00:00,GitHub Action: upload ARM artifacts  And some clean up in other files.  closes https://github.com/official-stockfish/Stockfish/pull/4269  No functional change,True,4,2022-12-01
MinetaS,vondele,2022-12-08 19:48:20+00:00,Invoke .depend only on build targets  Add a constraint so that the dependency build only occurs when users actually run build tasks.  This fixes a bug on some systems where gcc/g++ is not available.  closes https://github.com/official-stockfish/Stockfish/pull/4255  No functional change,True,3,2022-12-01
pb00068,vondele,2022-12-08 19:43:21+00:00,Correctly output lowerbound/upperbound scores  fixes the lowerbound/upperbound output by avoiding scores outside the alpha;beta bracket. Since SF search uses fail-soft we can't simply take the returned value as score.  closes https://github.com/official-stockfish/Stockfish/pull/4259  No functional change,True,3,2022-12-01
FauziAkram,vondele,2022-12-08 19:41:45+00:00,doEvenDeeperSearch + tuning  Credit for the main idea of doEvenDeeperSearch goes to Vizvezdenec; tuning by FauziAkram: Expansion of existing logic of doDeeperSearch - if value from LMR is really really good do full depth search not 1 ply deeper but rather 2 instead.  Passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.00> Total: 330048 W: 87672 L: 86942 D: 155434 Ptnml(0-2): 1012; 36739; 88912; 37229; 1132 https://tests.stockfishchess.org/tests/view/638a1cadd2b9c924c4c621d2  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 216696 W: 57891 L: 57240 D: 101565 Ptnml(0-2): 72; 21221; 65152; 21790; 113 https://tests.stockfishchess.org/tests/view/638c7d52a971f1f096c68fe2  closes https://github.com/official-stockfish/Stockfish/pull/4256  Bench: 3461830,True,3,2022-12-01
ppigazzini,vondele,2022-12-08 19:36:52+00:00,Set the right PATH for ARM compiler and build tests in CI  Fix for the GitHub upgrade: https://github.com/actions/runner-images/issues/5879 that broke our ARM workflows because it changed the value of the ANDROID_NDK_HOME variable referenced in our PATH.  closes https://github.com/official-stockfish/Stockfish/pull/4267  No functional change,True,3,2022-12-01
vondele,vondele,2022-12-08 19:33:32+00:00,Restore development version  No functional change,True,3,2022-12-01
vondele,vondele,2022-12-04 13:17:15+00:00,Stockfish 15.1  Official release version of Stockfish 15.1  Bench: 3467381  ---  Today; we have the pleasure to announce Stockfish 15.1.  As usual; downloads will be freely available at stockfishchess.org/download  *Elo gain and competition results*  With this release; version 5 of the NNUE neural net architecture has been introduced; and the training data has been extended to include Fischer random chess (FRC) positions. As a result; Elo gains are largest for FRC; reaching up to 50 Elo for doubly randomized FRC[1] (DFRC). More importantly; also for standard chess this release progressed and will win two times more game pairs than it loses[2] against Stockfish 15. Stockfish continues to win in a dominating way[3] all chess engine tournaments; including the TCEC Superfinal; Cup; FRC; DFRC; and Swiss as well as the CCC Bullet; Blitz; and Rapid events.  *New evaluation*  This release also introduces a new convention for the evaluation that is reported by search. An evaluation of +1 is now no longer tied to the value of one pawn; but to the likelihood of winning the game. With a +1 evaluation; Stockfish has now a 50% chance of winning the game against an equally strong opponent. This convention scales down evaluations a bit compared to Stockfish 15 and allows for consistent evaluations in the future.  *ChessBase settlement*  In this release period; the Stockfish team has successfully enforced its GPL license against ChessBase. This has been an intense process that included filing a lawsuit[4]; a court hearing[5]; and finally negotiating a settlement[6] that established that ChessBase infringed on the license by not distributing the Stockfish derivatives Fat Fritz 2 and Houdini 6 as free software; and that ensures ChessBase will respect the Free Software principles in the future. This settlement has been covered by major chess sites (see e.g. lichess.org[7] and chess.com[8]); and we are proud that it has been hailed as a �historic violation settlement[9]� by the Software Freedom Conservancy.  *Thank you*  The Stockfish project builds on a thriving community of enthusiasts (thanks everybody!) that contribute their expertise; time; and resources to build a free and open-source chess engine that is robust; widely available; and very strong. We invite our chess fans to join the fishtest testing framework and programmers to contribute to the project[10].  The Stockfish team  [1] https://tests.stockfishchess.org/tests/view/638a6170d2b9c924c4c62cb4 [2] https://tests.stockfishchess.org/tests/view/638a4dd7d2b9c924c4c6297b [3] https://en.wikipedia.org/wiki/Stockfish_(chess)#Competition_results [4] https://stockfishchess.org/blog/2021/our-lawsuit-against-chessbase/ [5] https://stockfishchess.org/blog/2022/public-court-hearing-soon/ [6] https://stockfishchess.org/blog/2022/chessbase-stockfish-agreement/ [7] https://lichess.org/blog/Y3u1mRAAACIApBVn/settlement-reached-in-stockfish-v-chessbase [8] https://www.chess.com/news/view/chessbase-stockfish-reach-settlement [9] https://sfconservancy.org/news/2022/nov/28/sfc-named-trusted-party-in-gpl-case/ [10] https://stockfishchess.org/get-involved/,True,6,2022-12-01
vondele,vondele,2022-12-02 19:06:59+00:00,Fix bestThread selection  If multiple threads have the same best move; pick the thread with the largest contribution to the confidence vote. This thread will later be used to display PV; so this patch is about user-friendliness and/or least surprises; it non-functional for playing strenght.  closes https://github.com/official-stockfish/Stockfish/pull/4246  No functional change,True,4,2022-12-01
VoyagerOne,vondele,2022-12-02 19:05:50+00:00,Simply do full sort on captures.  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 42712 W: 11413 L: 11203 D: 20096 Ptnml(0-2): 145; 4661; 11544; 4851; 155 https://tests.stockfishchess.org/tests/view/6384df57d2b9c924c4c53900  LTC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 239072 W: 64065 L: 64067 D: 110940 Ptnml(0-2): 106; 23735; 71859; 23727; 109 https://tests.stockfishchess.org/tests/view/63851120d2b9c924c4c541ee  closes https://github.com/official-stockfish/Stockfish/pull/4249  Bench: 3467381,True,4,2022-12-01
VoyagerOne,vondele,2022-12-02 19:03:49+00:00,Remove PvNode Parameter for cutoff LMR  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 198520 W: 52673 L: 52632 D: 93215 Ptnml(0-2): 645; 22241; 53499; 22178; 697 https://tests.stockfishchess.org/tests/view/63746e8f9849fa7a36a6698f  LTC: LLR: 2.97 (-2.94;2.94) <-1.75;0.25> Total: 253568 W: 67487 L: 67501 D: 118580 Ptnml(0-2): 109; 25222; 76141; 25198; 114 https://tests.stockfishchess.org/tests/view/63839859d2b9c924c4c4feb7  closes https://github.com/official-stockfish/Stockfish/pull/4248  Bench: 3733322,True,4,2022-12-01
pb00068,vondele,2022-11-23 20:45:06+00:00,Correctly output lowerbound/upperbound in threaded searches  fixes the lowerbound/upperbound output by taking the alpha;beta bracket into account also if a bestThread is selected that is different from the master thread.  Instead of keeping track which bounds where used in the specific search; in this version we simply store the quality (exact; upperbound; lowerbound) of the score along with the actual score as information on rootMove.  closes https://github.com/official-stockfish/Stockfish/pull/4239  No functional change,True,2,2022-11-01
peregrineshahin,vondele,2022-11-23 20:36:22+00:00,Simplify both quiet check evasions' conditions  passed Non-regression STC: https://tests.stockfishchess.org/tests/view/6370b647f1b748d4819e0b64 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 162904 W: 43249 L: 43171 D: 76484 Ptnml(0-2): 491; 17089; 46220; 17155; 497  closes https://github.com/official-stockfish/Stockfish/pull/4228  No functional change,True,2,2022-11-01
VoyagerOne,vondele,2022-11-23 20:25:14+00:00,Skip full depth search in LMR depending on depth  dynamically adjust newDepth; and skip full depth search if newDepth doesn't exceed the previous search depth. This affects the used newDepth for future searches; and influences the stat bonus for the move.  Passed STC: https://tests.stockfishchess.org/tests/view/63795500aa34433735bc1cfe LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 112776 W: 30082 L: 29663 D: 53031 Ptnml(0-2): 352; 12453; 30423; 12744; 416  Passed LTC: https://tests.stockfishchess.org/tests/view/6379ea39aa34433735bc2f9b LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 83576 W: 22559 L: 22169 D: 38848 Ptnml(0-2): 38; 8011; 25303; 8395; 41  closes https://github.com/official-stockfish/Stockfish/pull/4240  Bench: 4390318,True,2,2022-11-01
vondele,vondele,2022-11-20 09:00:42+00:00,Update Top CPU Contributors  list as of 2022-11-19. Thanks!  closes https://github.com/official-stockfish/Stockfish/pull/4234  No functional change,True,6,2022-11-01
vondele,vondele,2022-11-20 08:59:35+00:00,Update WDL model for current SF  This updates the WDL model based on the LTC statistics  (2M games).  Relatively small change; note that this also adjusts the NormalizeToPawnValue (now 361); to keep win prob at 50% for 100cp.  closes https://github.com/official-stockfish/Stockfish/pull/4236  No functional change.,True,6,2022-11-01
vondele,vondele,2022-11-20 08:58:07+00:00,Fix a missing conversion  This conversion to cp was overlooked.  closes https://github.com/official-stockfish/Stockfish/pull/4235  No functional change,True,6,2022-11-01
VoyagerOne,vondele,2022-11-19 08:29:04+00:00,Simplification away Cutoff Reset  STC: LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 150184 W: 39913 L: 39819 D: 70452 Ptnml(0-2): 493; 16796; 40474; 16782; 547 https://tests.stockfishchess.org/tests/view/63723e9e54d69a2f33911d3c  LTC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 58880 W: 15890 L: 15717 D: 27273 Ptnml(0-2): 35; 5765; 17659; 5954; 27 https://tests.stockfishchess.org/tests/view/6373baf49849fa7a36a65427  closes https://github.com/official-stockfish/Stockfish/pull/4231  Bench: 4035152,True,5,2022-11-01
Vizvezdenec,vondele,2022-11-19 08:23:26+00:00,Do shallower search in case of lmr being not successful enough  In case of a move passing LMR but it results being not too far from the current best search result produce a full depth search with reduced depth.  Original idea by lonfom169 .  Passed STC: https://tests.stockfishchess.org/tests/view/6373409b54d69a2f33913fbd LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 169504 W: 45351 L: 44848 D: 79305 Ptnml(0-2): 598; 18853; 45353; 19344; 604  Passed LTC: https://tests.stockfishchess.org/tests/view/6374c58528e3405283eb8d2d LLR: 2.96 (-2.94;2.94) <0.50;2.50> Total: 51144 W: 13802 L: 13471 D: 23871 Ptnml(0-2): 19; 4928; 15362; 5229; 34  closes https://github.com/official-stockfish/Stockfish/pull/4230  bench 4277005,True,5,2022-11-01
Disservin,vondele,2022-11-07 20:42:04+00:00,speedup CI  Github Actions allows us to use up to 20 workers. This way we can launch multiple different checks at the same time and optimize the overall time the CI takes a bit.  closes https://github.com/official-stockfish/Stockfish/pull/4223  No functional change,True,0,2022-11-01
Disservin,vondele,2022-11-07 07:00:05+00:00,Remove trend  Simplify trend away.  passed Non-regression STC: https://tests.stockfishchess.org/tests/view/63642a63a90afcecbd1cb887 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 130000 W: 34683 L: 34567 D: 60750 Ptnml(0-2): 455; 14424; 35135; 14522; 464  passed Non-regression LTC: https://tests.stockfishchess.org/tests/view/636566fda90afcecbd1cded9 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 81592 W: 21938 L: 21787 D: 37867 Ptnml(0-2): 42; 8035; 24490; 8188; 41  closes https://github.com/official-stockfish/Stockfish/pull/4222  Bench: 4239512,True,0,2022-11-01
Disservin,vondele,2022-11-07 06:56:58+00:00,Change versioning and save binaries as CI artifacts  For development versions of Stockfish; the version will now look like dev-20221107-dca9a0533 indicating a development version; the date of the last commit; and the git SHA of that commit. If git is not available; the fallback is the date of compilation. Releases will continue to be versioned as before.  Additionally; this PR extends the CI to create binary artifacts; i.e. pushes to master will automatically build Stockfish and upload the binaries to github.  closes https://github.com/official-stockfish/Stockfish/pull/4220  No functional change,True,0,2022-11-01
vondele,vondele,2022-11-05 08:15:53+00:00,"Normalize evaluation  Normalizes the internal value as reported by evaluate or search to the UCI centipawn result used in output. This value is derived from the win_rate_model() such that Stockfish outputs an advantage of ""100 centipawns"" for a position if the engine has a 50% probability to win from this position in selfplay at fishtest LTC time control.  The reason to introduce this normalization is that our evaluation is; since NNUE; no longer related to the classical parameter PawnValueEg (=208). This leads to the current evaluation changing quite a bit from release to release; for example; the eval needed to have 50% win probability at fishtest LTC (in cp and internal Value):  June 2020  :   113cp (237) June 2021  :   115cp (240) April 2022 :   134cp (279) July 2022  :   167cp (348)  With this patch; a 100cp advantage will have a fixed interpretation; i.e. a 50% win chance. To keep this value steady; it will be needed to update the win_rate_model() from time to time; based on fishtest data. This analysis can be performed with a set of scripts currently available at https://github.com/vondele/WLD_model  fixes https://github.com/official-stockfish/Stockfish/issues/4155 closes https://github.com/official-stockfish/Stockfish/pull/4216  No functional change",True,5,2022-11-01
vondele,vondele,2022-11-05 08:15:14+00:00,Mark variable as potentially unused  fixes CI when compiled with -Werror  closes https://github.com/official-stockfish/Stockfish/pull/4221  No functional change,True,5,2022-11-01
kurt22i,vondele,2022-10-30 15:19:09+00:00,Adjust reduction less at medium depths  This patch dampens the reduction increase/decrease from statScore at mid-range depths. Inspired by patterns noticed in this tune: https://tests.stockfishchess.org/tests/view/635188930e5f47a8d0ffe8f5  Passed STC: https://tests.stockfishchess.org/tests/view/63599dfd6b27ef94d9ec04af LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 87464 W: 23519 L: 23134 D: 40811 Ptnml(0-2): 319; 9599; 23524; 9958; 332  Passed LTC: https://tests.stockfishchess.org/tests/view/635a73046b27ef94d9ec2313 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 154792 W: 41746 L: 41214 D: 71832 Ptnml(0-2): 79; 15181; 46349; 15703; 84  closes https://github.com/official-stockfish/Stockfish/pull/4213  Bench 4271738,True,6,2022-10-01
vondele,vondele,2022-10-30 15:17:49+00:00,Update MacOS CI  move to 12 following actions runner update deprecation (see https://github.com/actions/runner-images/issues/5583)  closes https://github.com/official-stockfish/Stockfish/pull/4212  No functional change,True,6,2022-10-01
Clausable,snicolet,2022-10-27 06:15:46+00:00,Fix README typos; update AUTHORS  closes https://github.com/official-stockfish/Stockfish/pull/4208  No functional change,True,3,2022-10-01
dav1312,snicolet,2022-10-26 18:28:12+00:00,Add issue template  Add an issue template using GitHub's form schema https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema  closes https://github.com/official-stockfish/Stockfish/pull/4210  No functional change.,True,2,2022-10-01
Vizvezdenec,vondele,2022-10-23 18:22:04+00:00,Use TT moves more often in qsearch  During the recapture phase of quiescence search (where we limit the generated moves to recaptures on the last seen capture square); the move picker will now emit the tt move; even if the tt move is not a recapture.  Passed STC : https://tests.stockfishchess.org/tests/view/6350df2928d3a71cb1eef838 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 90280 W: 24001 L: 23845 D: 42434 Ptnml(0-2): 273; 9779; 24941; 9813; 334  Passed LTC : https://tests.stockfishchess.org/tests/view/6351308b28d3a71cb1ef06ce LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 104504 W: 27937 L: 27807 D: 48760 Ptnml(0-2): 54; 10378; 31260; 10504; 56  closes https://github.com/official-stockfish/Stockfish/pull/4206  Bench: 4540268,True,6,2022-10-01
clefrks,vondele,2022-10-23 18:18:08+00:00,Add RISC-V 64-bit support  adds a riscv64 target architecture to the Makefile to support RISC-V 64-bit. Compiled and tested on VisionFive 2 board.  closes https://github.com/official-stockfish/Stockfish/pull/4205  No functional change.,True,6,2022-10-01
Disservin,vondele,2022-10-23 18:08:18+00:00,enable bit manipulation instruction set 1  bmi1 enables the use of _blsr_u64 for pop_lsb; and is availabe when avx2 is.  verified a small speedup (0.2 - 0.6%)  closes https://github.com/official-stockfish/Stockfish/pull/4202  No functional change,True,6,2022-10-01
MinetaS,vondele,2022-10-23 17:58:47+00:00,Apply -flto-partition=one / -flto=full  This patch fixes a potential bug derived from an incompatibility between LTO and top-level assembly code (INCBIN).  Passed non-regression STC (master e90341f): LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 119352 W: 31986 L: 31862 D: 55504 Ptnml(0-2): 439; 12624; 33400; 12800; 413 https://tests.stockfishchess.org/tests/view/634aacf84bc7650f0755188b  closes https://github.com/official-stockfish/Stockfish/pull/4201  No functional change,True,6,2022-10-01
roim,vondele,2022-10-16 10:58:48+00:00,Fix tablebase probe for dtz >1000 w/o 50 move rule  For qn4N1/6R1/3K4/8/B2k4/8/8/8 w - - 0 1; white loses with DTZ 1034. See https://syzygy-tables.info/?fen=qn4N1/6R1/3K4/8/B2k4/8/8/8_w_-_-_0_1  Prior to this fix; due to a too small hard-coded value; Stockfish interpreted this as winning. The new value picked (1<<18) is large enough to deal with the largest DTZ values that can be stored in the current syzygy format.  closes https://github.com/official-stockfish/Stockfish/pull/4187  No functional change.,True,6,2022-10-01
invalid-email-address,vondele,2022-10-16 09:51:41+00:00,Adjust timeman constants  Adjust timeman constants to use more time in early part of game.  STC @ 10+0.1 th 1 : LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 93984 W: 25177 L: 24787 D: 44020 Ptnml(0-2): 350; 10096; 25729; 10448; 369 https://tests.stockfishchess.org/tests/live_elo/6339077135f43d649ff6162a  LTC @ 60+0.6 th 1 : LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 329368 W: 88953 L: 88093 D: 152322 Ptnml(0-2): 170; 31457; 100594; 32269; 194 https://tests.stockfishchess.org/tests/live_elo/6339baed35f43d649ff63142  Sudden death 10+0 : LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 20400 W: 5908 L: 5588 D: 8904 Ptnml(0-2): 177; 2252; 5128; 2360; 283 https://tests.stockfishchess.org/tests/live_elo/6347c9384bc7650f07549ba7  Sudden death 10+0; no adjudication : LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 17920 W: 4755 L: 4442 D: 8723 Ptnml(0-2): 137; 1985; 4466; 2172; 200 https://tests.stockfishchess.org/tests/live_elo/634806e84bc7650f0754a639  closes https://github.com/official-stockfish/Stockfish/pull/4188  No functional change,True,6,2022-10-01
snicolet,vondele,2022-10-16 09:49:07+00:00,Tweak the formula for NNUE complexity  Joint work by Ofek Shochat and St�phane Nicolet.  passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 93288 W: 24996 L: 24601 D: 43691 Ptnml(0-2): 371; 10263; 24989; 10642; 379 https://tests.stockfishchess.org/tests/view/63448f4f4bc7650f07541987  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 84168 W: 22771 L: 22377 D: 39020 Ptnml(0-2): 47; 8181; 25234; 8575; 47 https://tests.stockfishchess.org/tests/view/6345186d4bc7650f07542fbd  ================  It seems there are two effects with this patch:  effect A :  If Stockfish is winning at root; we have optimism > 0 for all leaves in the search tree where Stockfish is to move. There; if (psq - nnue) > 0 (ie if the advantage is more materialistic than positional); then the product D = optimism * (psq - nnue) will be positive; nnueComplexity will increase; and the eval will increase from SF point of view.  So the effect A is that if Stockfish is winning at root; she will slightly favor in the search tree (in other words; search more) the positions where she can convert her advantage via materialist means.  effect B :  If Stockfish is losing at root; we have optimism > 0 for all leaves in the search tree where the opponent is to move. There; if (psq - nnue) < 0 (ie if the opponent advantage is more positional than materialistic); then the product D = optimism * (psq-nnue) will be negative; nnueComplexity will decrease; and the eval will decrease from the opponent point of view.  So the effect B is that Stockfish will slightly favor in the search tree (search more) the branches where she can defend by slowly reducing the opponent positional advantage.  =================  closes https://github.com/official-stockfish/Stockfish/pull/4195  bench: 4673898,True,6,2022-10-01
dubslow,vondele,2022-10-16 09:45:16+00:00,Remove depth condition from razoring  The eval condition depends on depth anyways; so this patch is nearly (not quite) non-functional  passed STC: https://tests.stockfishchess.org/tests/view/63428169fb7ccb2ea9be2629 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 185992 W: 49612 L: 49558 D: 86822 Ptnml(0-2): 618; 19956; 51842; 19914; 666  passed LTC: https://tests.stockfishchess.org/tests/view/634418b14bc7650f07540760 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 126816 W: 34147 L: 34043 D: 58626 Ptnml(0-2): 74; 11941; 39281; 12031; 81  closes https://github.com/official-stockfish/Stockfish/pull/4196  bench 4148700,True,6,2022-10-01
Unknown,vondele,2022-10-16 09:42:19+00:00,Optimize make_index() using templates and lookup tables.  https://tests.stockfishchess.org/tests/view/634517e54bc7650f07542f99 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 642672 W: 171819 L: 170658 D: 300195 Ptnml(0-2): 2278; 68077; 179416; 69336; 2229  this also introduces `-flto-partition=one` as suggested by MinetaS (Syine Mineta) to avoid linking errors due to LTO on 32 bit mingw. This change was tested in isolation as well  https://tests.stockfishchess.org/tests/view/634aacf84bc7650f0755188b LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 119352 W: 31986 L: 31862 D: 55504 Ptnml(0-2): 439; 12624; 33400; 12800; 413  closes https://github.com/official-stockfish/Stockfish/pull/4199  No functional change,True,6,2022-10-01
locutus2,vondele,2022-10-08 16:09:02+00:00,Tweak history initialization  Simplify initialization of continuation history by using everywhere the same starting value.  STC: LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 90952 W: 24312 L: 24153 D: 42487 Ptnml(0-2): 356; 10168; 24290; 10285; 377 https://tests.stockfishchess.org/tests/view/633948f235f43d649ff61fd0  LTC: LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 162416 W: 43540 L: 43466 D: 75410 Ptnml(0-2): 77; 16289; 48417; 16333; 92 https://tests.stockfishchess.org/tests/view/6339ee8a35f43d649ff63986  closes  https://github.com/official-stockfish/Stockfish/pull/4186  Bench: 4156027,True,5,2022-10-01
G-Lorenz,vondele,2022-10-08 16:07:30+00:00,"Remove old line in ""Futility pruning for captures""  The line is no longer needed after https://github.com/official-stockfish/Stockfish/commit/910cf8b21839eb9f1991934a5436eea112021723. This patch incidentally applies ""Futility Pruning for Captures"" also in case of en-passant; changing the bench signature.  Passed STC: https://tests.stockfishchess.org/tests/view/6332c1f1208c26088697b731 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 68760 W: 18440 L: 18256 D: 32064 Ptnml(0-2): 267; 7530; 18595; 7728; 260  Passed LTC: https://tests.stockfishchess.org/tests/view/633312e9208c26088697c59b LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 455552 W: 121910 L: 122123 D: 211519 Ptnml(0-2): 253; 45439; 136600; 45236; 248  closes https://github.com/official-stockfish/Stockfish/pull/4185  Bench: 4374521",True,5,2022-10-01
vondele,vondele,2022-10-05 20:59:05+00:00,"Revert ""Mix alpha and statScore for reduction""  This reverts commit 8bab09749dd00951bfa9c5f89f6e35bded76c8a9.  In this form the patch reduces mate finding effectiveness; as the large alpha value has negative influence on the reductions.  see also https://github.com/official-stockfish/Stockfish/pull/4183  Bench: 4114228",True,2,2022-10-01
FauziAkram,snicolet,2022-10-03 23:07:27+00:00,Mix alpha and statScore for reduction  Idea by @xoto10; and tuning by @FauziAkram.  Passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 57832 W: 15540 L: 15199 D: 27093 Ptnml(0-2): 207; 6343; 15477; 6680; 209 https://tests.stockfishchess.org/tests/view/6338db6f35f43d649ff60fdc  passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 50968 W: 13770 L: 13440 D: 23758 Ptnml(0-2): 25; 4905; 15306; 5211; 37 https://tests.stockfishchess.org/tests/view/6339777035f43d649ff62686  Links to the tuning sessions: https://tests.stockfishchess.org/tests/view/63345725a004bed9a2e47b28 https://tests.stockfishchess.org/tests/view/63345728a004bed9a2e47b2a  closes https://github.com/official-stockfish/Stockfish/pull/4183  Bench: 4426602,True,0,2022-10-01
Disservin,snicolet,2022-10-03 09:50:31+00:00,Use less reduction for escaping moves  This patch reuses the threatenedPieces variable (which is calculated in movepicker) to reduce less in the search tree the moves which escape a capture.  passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 314352 W: 84042 L: 83328 D: 146982 Ptnml(0-2): 1105; 35084; 84207; 35552; 1228 https://tests.stockfishchess.org/tests/view/63355f37a004bed9a2e4a17f  passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 90752 W: 24556 L: 24147 D: 42049 Ptnml(0-2): 59; 8855; 27123; 9296; 43 https://tests.stockfishchess.org/tests/view/63383a7735f43d649ff5fa8b  closes https://github.com/official-stockfish/Stockfish/pull/4181  bench: 4114228,True,0,2022-10-01
peregrineshahin,vondele,2022-09-27 05:54:36+00:00,Simplify both position calls in useClassical  Simplify the use of classical evaluation when using default settings to only be dependent on piece count and decisive PSQ  passed STC: https://tests.stockfishchess.org/tests/view/632d32a7006ef9eb96d86ce9 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 108048 W: 28904 L: 28763 D: 50381 Ptnml(0-2): 383; 12060; 29006; 12183; 392  passed LTC: https://tests.stockfishchess.org/tests/view/632d705a006ef9eb96d87649 LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 76600 W: 20671 L: 20516 D: 35413 Ptnml(0-2): 34; 7533; 23023; 7664; 46  Inspired by sorais; credit to him.  closes https://github.com/official-stockfish/Stockfish/pull/4177  bench  4173163,True,1,2022-09-01
bknox83,vondele,2022-09-27 05:52:38+00:00,Update README.md  Adding some svg icons and additional information; insert links as references  closes https://github.com/official-stockfish/Stockfish/pull/4176  No functional change,True,1,2022-09-01
Torom,vondele,2022-09-27 05:48:05+00:00,Always output hashfull  This removes the restriction that no hashfull information is printed within the first second of a search. On modern systems; a non-zero value is returned within 6 ms with default settings.  passed STC: https://tests.stockfishchess.org/tests/view/63277b08b9c0caa5f4a798e4 LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 290096 W: 77505 L: 77561 D: 135030 Ptnml(0-2): 1008; 30713; 81592; 30797; 938  closes https://github.com/official-stockfish/Stockfish/pull/4174  No functional change,True,1,2022-09-01
Unknown,vondele,2022-09-27 05:44:46+00:00,Simplify EVASIONS scoring  remove some multipliers & adjust; doesn't change the move ordering  STC https://tests.stockfishchess.org/tests/view/6325c1c9b9c0caa5f4a759ae LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 192760 W: 51528 L: 51482 D: 89750 Ptnml(0-2): 642; 20490; 54148; 20380; 720  Credit to locutus2  closes https://github.com/official-stockfish/Stockfish/pull/4171  No functional change,True,1,2022-09-01
Unknown,vondele,2022-09-17 07:30:52+00:00,Prioritize checks in movepicker  give a little bonus for moving pieces to squares where they give check  STC: https://tests.stockfishchess.org/tests/view/631da742162491686d2e40b5 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 80072 W: 21753 L: 21368 D: 36951 Ptnml(0-2): 421; 8876; 21075; 9225; 439  LTC: https://tests.stockfishchess.org/tests/view/631dd9e6b85daa436625de1d LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 263480 W: 70916 L: 70158 D: 122406 Ptnml(0-2): 322; 26156; 78029; 26908; 325  similar ideas have been tested by Viz and Guenther  closes https://github.com/official-stockfish/Stockfish/pull/4165  bench: 4326572,True,5,2022-09-01
Unknown,vondele,2022-09-17 07:13:07+00:00,Simplify trend and optimism.  This patch simplifies the formulas used to compute the trend and optimism values before each search iteration. As a side effect; this removes the parameters which make the relationship between the displayed evaluation value and the expected game result asymmetric.  I've also provided links to the results of isotonic regression analysis of the relationship between the evaluation and game result (statistical data and a graph) for both tests; which demonstrate that the new version has a more symmetric relationship:  STC: [Data and graph](https://github.com/official-stockfish/Stockfish/discussions/4150#discussioncomment-3548954) LTC: [Data and graph](https://github.com/official-stockfish/Stockfish/discussions/4150#discussioncomment-3626311) See also https://github.com/official-stockfish/Stockfish/issues/4142  passed STC: https://tests.stockfishchess.org/tests/view/6313f44b8202a039920e27e6 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 108016 W: 28903 L: 28760 D: 50353 Ptnml(0-2): 461; 12075; 28850; 12104; 518  passed LTC: https://tests.stockfishchess.org/tests/view/631de45db85daa436625dfe6 LLR: 3.01 (-2.94;2.94) <-1.75;0.25> Total: 34792 W: 9412 L: 9209 D: 16171 Ptnml(0-2): 24; 3374; 10397; 3577; 24  Furthermore; this does not measurably impact Elo strength against weaker engines; as demonstrated in a match of master and patch vs SF13:  This patch vs SF 13: https://tests.stockfishchess.org/tests/view/631fa34ae1612778c344c6eb Elo: 141.66 +-1.2 (95%) LOS: 100.0% Total: 100000 W: 48182 L: 9528 D: 42290 Ptnml(0-2): 96; 1426; 13277; 30130; 5071 nElo: 284.13 +-3.3 (95%) PairsRatio: 23.13  Master vs SF 13: https://tests.stockfishchess.org/tests/view/631fa3ece1612778c344c6ff Elo: 143.26 +-1.2 (95%) LOS: 100.0% Total: 100000 W: 48525 L: 9479 D: 41996 Ptnml(0-2): 94; 1537; 13098; 29771; 5500 nElo: 281.70 +-3.3 (95%) PairsRatio: 21.63  closes: https://github.com/official-stockfish/Stockfish/pull/4163  Bench: 4425574,True,5,2022-09-01
vondele,vondele,2022-09-17 07:05:35+00:00,Explicitly annotate a few variables  as [[maybe_unused]]; avoiding the (void)foo trick.  closes https://github.com/official-stockfish/Stockfish/pull/4162  No functional change,True,5,2022-09-01
Unknown,vondele,2022-09-11 12:19:57+00:00,Optimize AVX2 path in NNUE evaluation  always selecting AffineTransform specialization for small inputs.  A related patch was tested as  Initially tested as a simplification STC https://tests.stockfishchess.org/tests/view/6317c3f437f41b13973d6dff LLR: 2.95 (-2.94;2.94) <-1.75;0.25> Total: 58072 W: 15619 L: 15425 D: 27028 Ptnml(0-2): 241; 6191; 15992; 6357; 255  Elo gain speedup test STC https://tests.stockfishchess.org/tests/view/63181c1b37f41b13973d79dc LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 184496 W: 49922 L: 49401 D: 85173 Ptnml(0-2): 851; 19397; 51208; 19964; 828  and this patch gained in testing  speedup        = +0.0071 P(speedup > 0) =  1.0000 on CPU: 16 x AMD Ryzen 9 3950X  closes https://github.com/official-stockfish/Stockfish/pull/4158  No functional change,True,6,2022-09-01
Vizvezdenec,vondele,2022-09-11 12:15:54+00:00,Do less singular extensions for former PVnode  Patch is a reintroduction of logic what was simplified a while ago in a slightly different form. Do bigger extension offset in case of non-pv node having a pv.  passed STC https://tests.stockfishchess.org/tests/view/631977c048f27688a06e66d5 LLR: 2.94 (-2.94;2.94) <0.00;2.00> Total: 23296 W: 6404 L: 6108 D: 10784 Ptnml(0-2): 88; 2539; 6118; 2795; 108  passed LTC https://tests.stockfishchess.org/tests/view/631989cb48f27688a06e696c LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 235592 W: 63890 L: 63188 D: 108514 Ptnml(0-2): 275; 23392; 69804; 24006; 319  closes https://github.com/official-stockfish/Stockfish/pull/4159  Bench: 3993611,True,6,2022-09-01
dubslow,vondele,2022-09-11 12:13:24+00:00,Razor also on PV nodes  Simplification introduced by xoto10  blue LTC vs new master: https://tests.stockfishchess.org/tests/view/631ad4ef9cfa5e9b648d1b4e LLR: 2.93 (-2.94;2.94) <-1.75;0.25> Total: 59184 W: 16002 L: 15828 D: 27354 Ptnml(0-2): 65; 5777; 17747; 5925; 78  blue STC vs old master: https://tests.stockfishchess.org/tests/view/6306b87b902a848543334c25 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 213944 W: 57184 L: 57159 D: 99601 Ptnml(0-2): 877; 23448; 58331; 23405; 911  blue LTC vs old master: https://tests.stockfishchess.org/tests/view/63070e6b902a8485433357e7 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 192080 W: 52050 L: 52006 D: 88024 Ptnml(0-2): 232; 18981; 57611; 18943; 273  closes https://github.com/official-stockfish/Stockfish/pull/4147  bench 4208975,True,6,2022-09-01
Vizvezdenec,vondele,2022-09-11 12:05:39+00:00,Further LTC tuning of search parameters  Tuning done by bigpenor with some hand adjustments on top by Viz.  Had a good performance at fixed games 180+1.8: https://tests.stockfishchess.org/tests/view/631836b437f41b13973d7da1 Elo: 1.35 +-1.2 (95%) LOS: 98.6% Total: 60000 W: 16422 L: 16189 D: 27389 Ptnml(0-2): 39; 5335; 18992; 5622; 12 nElo: 3.13 +-2.8 (95%) PairsRatio: 1.05  Passed 60+0.6 8 threads SPRT: https://tests.stockfishchess.org/tests/view/631ba0ff74bc4fe483a99db3 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 29712 W: 8301 L: 8039 D: 13372 Ptnml(0-2): 12; 2318; 9925; 2598; 3  closes https://github.com/official-stockfish/Stockfish/pull/4160  bench 3938073,True,6,2022-09-01
FauziAkram,vondele,2022-09-07 05:38:04+00:00,VLTC tuning  Tuning some parameters that scale well with longer time control:  Failed STC: https://tests.stockfishchess.org/tests/view/6313424d8202a039920e130a LLR: -2.94 (-2.94;2.94) <-1.75;0.25> Total: 42680 W: 11231 L: 11540 D: 19909 Ptnml(0-2): 191; 5008; 11232; 4737; 172  Passed LTC: https://tests.stockfishchess.org/tests/view/6311e2cd874169ca52ae7933 LLR: 2.94 (-2.94;2.94) <0.50;2.50> Total: 53448 W: 14782 L: 14437 D: 24229 Ptnml(0-2): 101; 5214; 15740; 5577; 92  Passed VLTC: https://tests.stockfishchess.org/tests/view/6312530cfa99a92e3002c927 LLR: 2.95 (-2.94;2.94) <0.50;2.50> Total: 123336 W: 33465 L: 33007 D: 56864 Ptnml(0-2): 38; 11466; 38204; 11920; 40  closes https://github.com/official-stockfish/Stockfish/pull/4154  Bench: 5609606,True,2,2022-09-01
vondele,vondele,2022-09-07 05:32:53+00:00,Provide network download fallback  in case the base infrastructure for providing the networks  https://tests.stockfishchess.org/nns  is down; use an alternate github repo for downloading networks during the build.  fixes #4149 fixes #4140  closes https://github.com/official-stockfish/Stockfish/pull/4151  No functional change,True,2,2022-09-01
vondele,vondele,2022-09-07 05:31:48+00:00,Increase the maximum number of threads to 1024  relatively soon servers with 512 threads will be available 'quite commonly'; anticipate even more threads; and increase our current maximum from 512 to 1024.  closes https://github.com/official-stockfish/Stockfish/pull/4152  No functional change.,True,2,2022-09-01
dav1312,vondele,2022-08-29 17:15:14+00:00,Disable ARM CI tests  Temporarily disable ARM CI tests until a mitigation is implemented  closes https://github.com/official-stockfish/Stockfish/pull/4148  No functional change.,True,0,2022-08-01
Unknown,vondele,2022-08-17 17:56:15+00:00,Make key_after() more consistent with key()  STC: https://tests.stockfishchess.org/tests/view/62f8547123d42b50a8dac674 LLR: 2.95 (-2.94;2.94) <0.00;2.00> Total: 176640 W: 47699 L: 47189 D: 81752 Ptnml(0-2): 776; 18599; 49129; 18971; 845  A bug fix plus non functional speed optimization. Position::key_after(Move m) is now consistent with Position::key() thus prefetching correct TT entries which speeds things up. Related PR #3759  closes https://github.com/official-stockfish/Stockfish/pull/4130  No functional change,True,2,2022-08-01
vondele,vondele,2022-08-15 16:01:37+00:00,Simplify the use of classical eval  no benefit of the fallback term (exercised rarely). Cleanup the associated code.  passed STC https://tests.stockfishchess.org/tests/view/62f62c2b6f0a08af9f776367 LLR: 2.96 (-2.94;2.94) <-1.75;0.25> Total: 67832 W: 18334 L: 18148 D: 31350 Ptnml(0-2): 369; 7171; 18609; 7439; 328  passed LTC https://tests.stockfishchess.org/tests/view/62f68beb6f0a08af9f77710e LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 104664 W: 28363 L: 28233 D: 48068 Ptnml(0-2): 169; 10162; 31511; 10350; 140  closes https://github.com/official-stockfish/Stockfish/pull/4132  Bench: 6079565,True,0,2022-08-01
Vizvezdenec,vondele,2022-08-15 15:54:56+00:00,Simplify away smp adjustment in TT use  Passed STC https://tests.stockfishchess.org/tests/view/62f7d81f23d42b50a8dab568 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 98160 W: 26307 L: 26165 D: 45688 Ptnml(0-2): 201; 10282; 27960; 10448; 189  Passed LTC https://tests.stockfishchess.org/tests/view/62f8d1a623d42b50a8dad4fb LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 81544 W: 22346 L: 22200 D: 36998 Ptnml(0-2): 44; 7542; 25446; 7704; 36  closes https://github.com/official-stockfish/Stockfish/pull/4131  No functional change (single threaded).,True,0,2022-08-01
loco-loco,vondele,2022-08-15 15:51:51+00:00,Make LMR code easier to follow  Remove flags doFullDepthSearch and didLMR; and reorder instruction.  Small measured speedup.  Closes https://github.com/official-stockfish/Stockfish/pull/4129  No functional change.,True,0,2022-08-01
Unknown,vondele,2022-08-15 15:46:27+00:00,Report longest PV lines for multithreaded search  In case several threads find the same bestmove; report the longest PV line found.  closes https://github.com/official-stockfish/Stockfish/pull/4126  No functional change.,True,0,2022-08-01
vondele,vondele,2022-08-12 12:30:33+00:00,Remove an unneeded randomization of evals.  most of the effect comes from the randomization of 3-folds.  passed STC: https://tests.stockfishchess.org/tests/view/62e697e97e84186e5d19af6f LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 572976 W: 153168 L: 153539 D: 266269 Ptnml(0-2): 2505; 64783; 152364; 64250; 2586  passed LTC: https://tests.stockfishchess.org/tests/view/62ee5977523c86dcd6957154 LLR: 2.94 (-2.94;2.94) <-1.75;0.25> Total: 704808 W: 191212 L: 191680 D: 321916 Ptnml(0-2): 1340; 70579; 208972; 70235; 1278  closes https://github.com/official-stockfish/Stockfish/pull/4128  Bench: 5868987,True,4,2022-08-01
locutus2,vondele,2022-08-12 12:29:40+00:00,Cleanup code  This PR includes following cleanups: - Remove the unused depth variable in the thread class. - cleanup ValueList (added from mstembera)  closes https://github.com/official-stockfish/Stockfish/pull/4127  No functional change.,True,4,2022-08-01
vondele,vondele,2022-08-06 11:57:30+00:00,Update WDL model for current SF  This updates the WDL model based on the LTC statistics for the two weeks (3M games).  for old results see:  https://github.com/official-stockfish/Stockfish/pull/3981 https://github.com/official-stockfish/Stockfish/pull/3582 https://github.com/official-stockfish/Stockfish/pull/2778  closes https://github.com/official-stockfish/Stockfish/pull/4115  No functional change.,True,5,2022-08-01
vondele,vondele,2022-08-06 11:53:55+00:00,Update CPU contributors list  Thanks for your contributions!  closes https://github.com/official-stockfish/Stockfish/pull/4116  No functional change,True,5,2022-08-01
lonfom169,vondele,2022-08-06 11:52:36+00:00,Reintroduce singularQuietLMR  STC: LLR: 2.96 (-2.94;2.94) <0.00;2.00> Total: 88912 W: 23972 L: 23580 D: 41360 Ptnml(0-2): 365; 9820; 23712; 10176; 383 https://tests.stockfishchess.org/tests/view/62e9537a400addce2c13399b  LTC: LLR: 2.97 (-2.94;2.94) <0.50;2.50> Total: 85672 W: 23607 L: 23192 D: 38873 Ptnml(0-2): 219; 8316; 25365; 8703; 233 https://tests.stockfishchess.org/tests/view/62e9a174400addce2c1346e4  closes https://github.com/official-stockfish/Stockfish/pull/4122  Bench: 5921315,True,5,2022-08-01
locutus2,vondele,2022-08-06 11:50:01+00:00,Tweak history updates  In general the history update bonus is slightly decreased by 11% which gives a slower saturation speed. In addition only for main history the divisor is halfed (used history values are doubled to maintain same maximum) which have an effect in the opposite direction on saturation speed.  STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 157088 W: 42673 L: 42168 D: 72247 Ptnml(0-2): 857; 17346; 41642; 17833; 866 https://tests.stockfishchess.org/tests/view/62e5517ab383a712b13867c5  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 325592 W: 88705 L: 87753 D: 149134 Ptnml(0-2): 594; 32288; 96076; 33248; 590 https://tests.stockfishchess.org/tests/view/62e5e4f4b383a712b1387d53  closes https://github.com/official-stockfish/Stockfish/pull/4119  Bench: 5518728,True,5,2022-08-01
Vizvezdenec,vondele,2022-07-31 09:03:28+00:00,Do more TT cutoffs in case of exact bound  The idea is that these TT entries are considered move valuable in TT replacement scheme - they are always overwriting other entries. So it makes sence for them to produce more aggressive cutoffs.  passed STC https://tests.stockfishchess.org/tests/view/62e4d407b383a712b1385410 LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 96632 W: 26045 L: 25659 D: 44928 Ptnml(0-2): 434; 10635; 25770; 11065; 412  passed LTC https://tests.stockfishchess.org/tests/view/62e523e2b383a712b1386193 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 77960 W: 21363 L: 20989 D: 35608 Ptnml(0-2): 190; 7591; 23009; 8035; 155  closes https://github.com/official-stockfish/Stockfish/pull/4114  bench 5820568,True,6,2022-07-01
dubslow,vondele,2022-07-31 09:00:31+00:00,remove useClassical depth condition  passed STC: https://tests.stockfishchess.org/tests/view/62e0c3e98e4fa6ae472695ed LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 293568 W: 78934 L: 79151 D: 135483 Ptnml(0-2): 1344; 31488; 81366; 31213; 1373  passed LTC: https://tests.stockfishchess.org/tests/view/62e190aa8e4fa6ae4726b5b5 LLR: 2.98 (-2.94;2.94) <-2.25;0.25> Total: 187392 W: 50971 L: 51028 D: 85393 Ptnml(0-2): 384; 17801; 57369; 17772; 370  other attempts to otherwise tune this parameter failed; bounds 6;7;10;11 failed STC; 8 passed STC but failed LTC  closes https://github.com/official-stockfish/Stockfish/pull/4112  bench 5796377,True,6,2022-07-01
dubslow,snicolet,2022-07-24 07:18:38+00:00,Simplify reduction condition for cutNodes  LMR: for cutNodes; dont exclude killer moves. This was a prelude to reducing allNodes; altho that's failed so far.  STC https://tests.stockfishchess.org/tests/view/62d64ad147ae1768b34a27c3 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 37064 W: 10044 L: 9889 D: 17131 Ptnml(0-2): 162; 4115; 9828; 4260; 167  LTC https://tests.stockfishchess.org/tests/view/62d66cc047ae1768b34a2b14 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 39832 W: 10796 L: 10659 D: 18377 Ptnml(0-2): 69; 3969; 11706; 4100; 72  closes https://github.com/official-stockfish/Stockfish/pull/4109  bench: 5697891,True,6,2022-07-01
vondele,vondele,2022-07-13 16:01:20+00:00,Update default net to nn-ad9b42354671.nnue  using trainer branch https://github.com/glinscott/nnue-pytorch/pull/208 with a slightly tweaked loss function (power 2.5 instead of 2.6); otherwise same training as in the previous net update https://github.com/official-stockfish/Stockfish/pull/4100  passed STC: LLR: 2.97 (-2.94;2.94) <0.00;2.50> Total: 367536 W: 99465 L: 98573 D: 169498 Ptnml(0-2): 1820; 40994; 97117; 42148; 1689 https://tests.stockfishchess.org/tests/view/62cc43fe50dcbecf5fc1c5b8  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 25032 W: 6802 L: 6553 D: 11677 Ptnml(0-2): 40; 2424; 7341; 2669; 42 https://tests.stockfishchess.org/tests/view/62ce5f421dacb46e4d5fd277  closes https://github.com/official-stockfish/Stockfish/pull/4107  Bench: 5905619,True,2,2022-07-01
Vizvezdenec,vondele,2022-07-13 16:00:39+00:00,Simplify away some unneeded code in time management  The lower bound of the clamp is never used since complexity can't be negative and thus is unneeded.  closes https://github.com/official-stockfish/Stockfish/pull/4105  No functional change,True,2,2022-07-01
vondele,vondele,2022-07-09 08:58:04+00:00,Limit the researching at same depth.  If the elapsed time is close to the available time; the time management thread can signal that the next iterations should be searched at the same depth (Threads.increaseDepth = false). While the rootDepth increases; the adjustedDepth is kept constant with the searchAgainCounter.  In exceptional cases; when threading is used and the master thread; which controls the time management; signals to not increaseDepth; but by itself takes a long time to finish the iteration; the helper threads can search repeatedly at the same depth. This search finishes more and more quickly; leading to helper threads that report a rootDepth of MAX_DEPTH (245). The latter is not optimal as it is confusing for the user; stops search on these threads; and leads to an incorrect bias in the thread voting scheme. Probably with only a small impact on strength.  This behavior was observed almost two years ago; see https://github.com/official-stockfish/Stockfish/issues/2717  This patch fixes #2717 by ensuring the effective depth increases at once every four iterations; even in increaseDepth is false.  Depth 245 searches (for non-trivial positions) were indeed absent with this patch; but frequent with master in the tests below: https://discord.com/channels/435943710472011776/813919248455827515/994872720800088095 Total pgns: 2173 Base: 2867 Patch: 0  it passed non-regression testing in various setups:  SMP STC: https://tests.stockfishchess.org/tests/view/62bfecc96178ffe6394ba036 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 37288 W: 10171 L: 10029 D: 17088 Ptnml(0-2): 75; 3777; 10793; 3929; 70  SMP LTC: https://tests.stockfishchess.org/tests/view/62c08f6f49b62510394be066 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 190568 W: 52125 L: 52186 D: 86257 Ptnml(0-2): 70; 17854; 59504; 17779; 77  LTC: https://tests.stockfishchess.org/tests/view/62c08b6049b62510394bdfb6 LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 48120 W: 13204 L: 13083 D: 21833 Ptnml(0-2): 54; 4458; 14919; 4571; 58  Special thanks to miguel-I;  Disservin; ruicoelhopedro and others for analysing the problem; the data; and coming up with the key insight; needed to fix this longstanding issue.  closes https://github.com/official-stockfish/Stockfish/pull/4104  Bench: 5182295,True,5,2022-07-01
dubslow,vondele,2022-07-09 08:53:17+00:00,Time mgmt fix division.  oversight changed the corresponding float division to integer division in a previous tune https://github.com/official-stockfish/Stockfish/commit/442c40b43de8ede1e424efa674c8d45322e3b43c it is stronger to keep the original float division.  green LTC: https://tests.stockfishchess.org/tests/view/62bf34bc0340fb1e0cc934e7 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 38952 W: 10738 L: 10467 D: 17747 Ptnml(0-2): 46; 3576; 11968; 3833; 53  yellow STC: https://tests.stockfishchess.org/tests/view/62bff6506178ffe6394ba1d1 LLR: -2.95 (-2.94;2.94) <0.00;2.50> Total: 226960 W: 61265 L: 61062 D: 104633 Ptnml(0-2): 938; 24398; 62582; 24647; 915  further slightly tweaked tests confirm this Elo gain.  closes https://github.com/official-stockfish/Stockfish/pull/4097  No functional change,True,5,2022-07-01
Vizvezdenec,vondele,2022-07-05 11:55:50+00:00,"Simplify away FRC correction term  Since new net is trained partially using FRC data this part of adjustment that penalises bishops that are locked in the corner is no longer needed - net should ""know"" this things itself much better.  STC on FRC book : https://tests.stockfishchess.org/tests/view/62c3031b9e7d9997a12d852f LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 22048 W: 3003 L: 2845 D: 16200 Ptnml(0-2): 96; 1778; 7149; 1874; 127  LTC on FRC book : https://tests.stockfishchess.org/tests/view/62c32e939e7d9997a12d8c5e LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 36784 W: 3138 L: 3037 D: 30609 Ptnml(0-2): 36; 1842; 14537; 1939; 38  STC on DFRC book : https://tests.stockfishchess.org/tests/view/62c32efb9e7d9997a12d8c6f LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 20424 W: 3903 L: 3721 D: 12800 Ptnml(0-2): 172; 1984; 5724; 2154; 178  LTC on DFRC book : https://tests.stockfishchess.org/tests/view/62c358c79e7d9997a12d9319 LLR: 2.93 (-2.94;2.94) <-2.25;0.25> Total: 53784 W: 7581 L: 7480 D: 38723 Ptnml(0-2): 87; 3887; 18856; 3962; 100  closes https://github.com/official-stockfish/Stockfish/pull/4101  bench 5182295",True,1,2022-07-01
vondele,snicolet,2022-07-04 13:42:34+00:00,Update default net to nn-3c0054ea9860.nnu  First things first...  this PR is being made from court. Today; Tord and St�phane; with broad support of the developer community are defending their complaint; filed in Munich; against ChessBase. With their products Houdini 6 and Fat Fritz 2; both Stockfish derivatives; ChessBase violated repeatedly the Stockfish GPLv3 license. Tord and St�phane have terminated their license with ChessBase permanently. Today we have the opportunity to present our evidence to the judge and enforce that termination. To read up; have a look at our blog post https://stockfishchess.org/blog/2022/public-court-hearing-soon/ and https://stockfishchess.org/blog/2021/our-lawsuit-against-chessbase/  This PR introduces a net trained with an enhanced data set and a modified loss function in the trainer. A slight adjustment for the scaling was needed to get a pass on standard chess.  passed STC: https://tests.stockfishchess.org/tests/view/62c0527a49b62510394bd610 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 135008 W: 36614 L: 36152 D: 62242 Ptnml(0-2): 640; 15184; 35407; 15620; 653  passed LTC: https://tests.stockfishchess.org/tests/view/62c17e459e7d9997a12d458e LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 28864 W: 8007 L: 7749 D: 13108 Ptnml(0-2): 47; 2810; 8466; 3056; 53  Local testing at a fixed 25k nodes resulted in Test run1026/easy_train_data/experiments/experiment_2/training/run_0/nn-epoch799.nnue localElo: 4.2  +-      1.6  The real strength of the net is in FRC and DFRC chess where it gains significantly.  Tested at STC with slightly different scaling: FRC: https://tests.stockfishchess.org/tests/view/62c13a4002ba5d0a774d20d4 Elo: 29.78 +-3.4 (95%) LOS: 100.0% Total: 10000 W: 2007 L: 1152 D: 6841 Ptnml(0-2): 31; 686; 2804; 1355; 124 nElo: 59.24 +-6.9 (95%) PairsRatio: 2.06  DFRC: https://tests.stockfishchess.org/tests/view/62c13a5702ba5d0a774d20d9 Elo: 55.25 +-3.9 (95%) LOS: 100.0% Total: 10000 W: 2984 L: 1407 D: 5609 Ptnml(0-2): 51; 636; 2266; 1779; 268 nElo: 96.95 +-7.2 (95%) PairsRatio: 2.98  Tested at LTC with identical scaling: FRC: https://tests.stockfishchess.org/tests/view/62c26a3c9e7d9997a12d6caf Elo: 16.20 +-2.5 (95%) LOS: 100.0% Total: 10000 W: 1192 L: 726 D: 8082 Ptnml(0-2): 10; 403; 3727; 831; 29 nElo: 44.12 +-6.7 (95%) PairsRatio: 2.08  DFRC: https://tests.stockfishchess.org/tests/view/62c26a539e7d9997a12d6cb2 Elo: 40.94 +-3.0 (95%) LOS: 100.0% Total: 10000 W: 2215 L: 1042 D: 6743 Ptnml(0-2): 10; 410; 3053; 1451; 76 nElo: 92.77 +-6.9 (95%) PairsRatio: 3.64  This is due to the mixing in a significant fraction of DFRC training data in the final training round. The net is trained using the easy_train.py script in the following way:  ``` python easy_train.py \      --training-dataset=../Leela-dfrc_n5000.binpack \      --experiment-name=2 \      --nnue-pytorch-branch=vondele/nnue-pytorch/lossScan4 \      --additional-training-arg=--param-index=2 \      --start-lambda=1.0 \      --end-lambda=0.75 \      --gamma=0.995 \      --lr=4.375e-4 \      --start-from-engine-test-net True \      --tui=False \      --seed=$RANDOM \      --max_epoch=800 \      --auto-exit-timeout-on-training-finished=900 \      --network-testing-threads 8  \      --num-workers 12 ```  where the data set used (Leela-dfrc_n5000.binpack) is a combination of our previous best data set (mix of Leela and some SF data) and DFRC data; interleaved to form: The data is available in https://drive.google.com/drive/folders/1S9-ZiQa_3ApmjBtl2e8SyHxj4zG4V8gG?usp=sharing Leela mix: https://drive.google.com/file/d/1JUkMhHSfgIYCjfDNKZUMYZt6L5I7Ra6G/view?usp=sharing DFRC: https://drive.google.com/file/d/17vDaff9LAsVo_1OfsgWAIYqJtqR8aHlm/view?usp=sharing  The training branch used is https://github.com/vondele/nnue-pytorch/commits/lossScan4 A PR to the main trainer repo will be made later. This contains a revised loss function; now computing the loss from the score based on the win rate model; which is a more accurate representation than what we had before. Scaling constants are tweaked there as well.  closes https://github.com/official-stockfish/Stockfish/pull/4100  Bench: 5186781,True,0,2022-07-01
dubslow,vondele,2022-06-20 06:30:57+00:00,Use NNUE complexity in search; retune related parameters  This builds on ideas of xoto10 and mstembera to use more output from NNUE in the search algorithm.  passed STC: https://tests.stockfishchess.org/tests/view/62ae454fe7ee5525ef88a957 LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 89208 W: 24127 L: 23753 D: 41328 Ptnml(0-2): 400; 9886; 23642; 10292; 384  passed LTC: https://tests.stockfishchess.org/tests/view/62acc6ddd89eb6cf1e0750a1 LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 56352 W: 15430 L: 15115 D: 25807 Ptnml(0-2): 44; 5501; 16782; 5794; 55  closes https://github.com/official-stockfish/Stockfish/pull/4088  bench 5332964,True,0,2022-06-01
dubslow,vondele,2022-06-20 06:25:50+00:00,LMR: remove `deeper`  ...apparently it wasn't doing much anymore. inspired by rufish's recent attempts to improve this.  passed STC: https://tests.stockfishchess.org/tests/view/62abca2cd89eb6cf1e072c04 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 85576 W: 22766 L: 22683 D: 40127 Ptnml(0-2): 362; 9607; 22741; 9742; 336  passed LTC: https://tests.stockfishchess.org/tests/view/62ac90ffd89eb6cf1e07488f LLR: 2.93 (-2.94;2.94) <-2.25;0.25> Total: 48248 W: 13018 L: 12896 D: 22334 Ptnml(0-2): 32; 4773; 14400; 4879; 40  closes https://github.com/official-stockfish/Stockfish/pull/4088  bench 5578988,True,0,2022-06-01
BM123499,vondele,2022-06-20 06:24:07+00:00,Don't change ttPv at probCut  STC: LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 35672 W: 9618 L: 9462 D: 16592 Ptnml(0-2): 151; 3890; 9601; 4040; 154 https://tests.stockfishchess.org/tests/view/62ab03f750949cfc241b1965  LTC: LLR: 2.93 (-2.94;2.94) <-2.25;0.25> Total: 54160 W: 14626 L: 14511 D: 25023 Ptnml(0-2): 42; 5414; 16056; 5523; 45 https://tests.stockfishchess.org/tests/view/62ab5e6fd89eb6cf1e071b87  closes https://github.com/official-stockfish/Stockfish/pull/4088  bench: 5798229,True,0,2022-06-01
BM123499,vondele,2022-06-16 05:12:01+00:00,Simplify away condition in ttSave in probCut  Remove condition for tte->save in probCut so it always saves on probCut cutoff.  STC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 47848 W: 12921 L: 12782 D: 22145 Ptnml(0-2): 207; 5340; 12715; 5431; 231 https://tests.stockfishchess.org/tests/view/62a1f7c87bd8e641e44436f7  LTC: LLR: 2.97 (-2.94;2.94) <-2.25;0.25> Total: 132736 W: 35895 L: 35881 D: 60960 Ptnml(0-2): 109; 13384; 39360; 13414; 101 https://tests.stockfishchess.org/tests/view/62a2421a7bd8e641e444434f  closes https://github.com/official-stockfish/Stockfish/pull/4069  bench: 5845802,True,3,2022-06-01
Unknown,vondele,2022-06-16 05:06:43+00:00,Minor simplifications and cleanup in search  STC: https://tests.stockfishchess.org/tests/view/629d6775593a4a9b6482c1ec LLR: 2.93 (-2.94;2.94) <-2.25;0.25> Total: 77416 W: 20683 L: 20589 D: 36144 Ptnml(0-2): 317; 8690; 20620; 8744; 337  LTC: https://tests.stockfishchess.org/tests/view/629db4be593a4a9b6482ceef LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 106544 W: 28752 L: 28705 D: 49087 Ptnml(0-2): 97; 10692; 31641; 10751; 91  closes https://github.com/official-stockfish/Stockfish/pull/4059  Bench: 5913510,True,3,2022-06-01
ppigazzini,vondele,2022-06-16 05:03:52+00:00,Restore NDKv21 for GitHub Actions  GitHub updated the versions of NDK installed on the Actions runners breaking the ARM tests. Restore the NDKv21 using the GitHub suggested mitigation; see: https://github.com/actions/virtual-environments/issues/5595  closes https://github.com/official-stockfish/Stockfish/pull/4077  No functional change,True,3,2022-06-01
candirufish,vondele,2022-06-07 06:34:14+00:00,Use qsearch on step 11 if depth is equal to or below 0  larger reduction of depth if no TT entry is found; and go in qsearch as needed.  stc: https://tests.stockfishchess.org/tests/view/629dfacd593a4a9b6482db72 LLR: 2.93 (-2.94;2.94) <0.00;2.50> Total: 31920 W: 8591 L: 8322 D: 15007 Ptnml(0-2): 127; 3551; 8376; 3738; 168  ltc: https://tests.stockfishchess.org/tests/view/629e304e593a4a9b6482e451 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 17488 W: 4842 L: 4614 D: 8032 Ptnml(0-2): 13; 1670; 5151; 1896; 14  closes https://github.com/official-stockfish/Stockfish/pull/4056  Bench: 5870283,True,1,2022-06-01
PedanticHacker,vondele,2022-06-07 06:30:07+00:00,Wording of help output and comments.  Improved the output text that is diplayed when executing the 'help' command. Also; some comments were fixed along the way.  closes https://github.com/official-stockfish/Stockfish/pull/4048 closes https://github.com/official-stockfish/Stockfish/pull/4044  No functional change,True,1,2022-06-01
dubslow,vondele,2022-06-02 05:49:31+00:00,Remove LMR condition for complex pos  Inspired by Kia's similar test: https://tests.stockfishchess.org/tests/view/6292898c1e7cd5f29966fbe0  Passed STC: https://tests.stockfishchess.org/tests/view/62941588b0d5a7d1b780ed4b LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 266872 W: 70850 L: 71033 D: 124989 Ptnml(0-2): 1180; 30114; 70941; 30111; 1090  Passed LTC: https://tests.stockfishchess.org/tests/view/62964a754628d33daa24f062 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 70160 W: 18756 L: 18662 D: 32742 Ptnml(0-2): 42; 6976; 20950; 7070; 42  closes https://github.com/official-stockfish/Stockfish/pull/4047  Bench 6237567,True,3,2022-06-01
invalid-email-address,vondele,2022-06-02 05:47:23+00:00,Blend nnue complexity with classical.  Following mstembera's test of the complexity value derived from nnue values; this change blends that idea with the old complexity calculation.  STC 10+0.1: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 42320 W: 11436 L: 11148 D: 19736 Ptnml(0-2): 209; 4585; 11263; 4915; 188 https://tests.stockfishchess.org/tests/live_elo/6295c9239c8c2fcb2bad7fd9  LTC 60+0.6: LLR: 2.98 (-2.94;2.94) <0.50;3.00> Total: 34600 W: 9393 L: 9125 D: 16082 Ptnml(0-2): 32; 3323; 10319; 3597; 29 https://tests.stockfishchess.org/tests/view/6295fd5d9c8c2fcb2bad88cf  closes https://github.com/official-stockfish/Stockfish/pull/4046  Bench 6078140,True,3,2022-06-01
candirufish,vondele,2022-06-02 05:44:22+00:00,cutnode and movecount lmr extension simplification  Passed STC https://tests.stockfishchess.org/tests/view/6294133cb0d5a7d1b780ece3 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 41072 W: 11052 L: 10908 D: 19112 Ptnml(0-2): 153; 4324; 11461; 4422; 176  Passed LTC ltc: https://tests.stockfishchess.org/tests/view/62947ae6b0d5a7d1b780fe86 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 102736 W: 27509 L: 27459 D: 47768 Ptnml(0-2): 98; 9734; 31669; 9754; 113  closes https://github.com/official-stockfish/Stockfish/pull/4045  Bench: 6410652,True,3,2022-06-01
Vizvezdenec,vondele,2022-06-02 05:43:14+00:00,Add info about elo gained from some heuristics  Add info about qsearch and impact of main and continuation histories.  Based on these tests: https://tests.stockfishchess.org/tests/view/62946ffcb0d5a7d1b780fc7e https://tests.stockfishchess.org/tests/view/628facb71e7cd5f299669534 https://tests.stockfishchess.org/tests/view/628eade11e7cd5f299666f2e  closes https://github.com/official-stockfish/Stockfish/pull/4041  No functional change.,True,3,2022-06-01
invalid-email-address,vondele,2022-05-29 17:14:20+00:00,Adjust scale param higher  xoto10's scaleopt tune resulted in a yellow LTC; but the main parameter shift looked almost exactly like the tune rate reduction schedule; so further increases of that param were tried. Joint work xoto10 and dubslow.  passed LTC: https://tests.stockfishchess.org/tests/view/628c709372775f382300f03e LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 70112 W: 18932 L: 18584 D: 32596 Ptnml(0-2): 66; 6904; 20757; 7274; 55  failed STC: https://tests.stockfishchess.org/tests/view/6290e4441e7cd5f29966bdc8 LLR: -2.96 (-2.94;2.94) <0.00;2.50> Total: 59976 W: 15919 L: 16018 D: 28039 Ptnml(0-2): 250; 6791; 15974; 6754; 219  similar LTC's were yellow first yellow LTC: https://tests.stockfishchess.org/tests/view/6288a33f817227d3e5c5b05d double exaggerate yellow: https://tests.stockfishchess.org/tests/live_elo/628e140372775f38230129a6 triple exaggerate yellow: https://tests.stockfishchess.org/tests/live_elo/628e2caf72775f3823012d45  closes https://github.com/official-stockfish/Stockfish/pull/4036  bench 6410652,True,6,2022-05-01
proukornew,vondele,2022-05-29 17:04:25+00:00,Improve handling of variables set in the make environment  removes duplication on the commandline for example in a profile-build  closes https://github.com/official-stockfish/Stockfish/pull/3859  No functional change,True,6,2022-05-01
G-Lorenz,vondele,2022-05-29 16:54:19+00:00,Small speedup in futility_move_count  The speedup is around 0.25% using gcc 11.3.1 (bmi2; nnue bench; depth 16 and 23) while it is neutral using clang (same conditions).  According to `perf` that integer division was one of the most time-consuming instructions in search (gcc disassembly).  Passed STC: https://tests.stockfishchess.org/tests/view/628a17fe24a074e5cd59b3aa LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 22232 W: 5992 L: 5751 D: 10489 Ptnml(0-2): 88; 2235; 6218; 2498; 77  yellow LTC: https://tests.stockfishchess.org/tests/view/628a35d7ccae0450e35106f7 LLR: -2.95 (-2.94;2.94) <0.50;3.00> Total: 320168 W: 85853 L: 85326 D: 148989 Ptnml(0-2): 185; 29698; 99821; 30165; 215  This patch also suggests that UHO STC is sensible to small speedups (< 0.50%).  closes https://github.com/official-stockfish/Stockfish/pull/4032  No functional change,True,6,2022-05-01
vondele,vondele,2022-05-29 16:46:35+00:00,Add command line flags to link to information  This patch provides command line flags `--help` and `--license` as well as the corresponding `help` and `license` commands.  ``` $ ./stockfish --help Stockfish 200522 by the Stockfish developers (see AUTHORS file)  Stockfish is a powerful chess engine and free software licensed under the GNU GPLv3. Stockfish is normally used with a separate graphical user interface (GUI). Stockfish implements the universal chess interface (UCI) to exchange information. For further information see https://github.com/official-stockfish/Stockfish#readme or the corresponding README.md and Copying.txt files distributed with this program.  ```  The idea is to provide a minimal help that links to the README.md file; not replicating information that is already available elsewhere.  We use this opportunity to explicitly report the license as well.  closes https://github.com/official-stockfish/Stockfish/pull/4027  No functional change.,True,6,2022-05-01
G-Lorenz,vondele,2022-05-29 16:42:48+00:00,Assorted small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/3973  No functional change,True,6,2022-05-01
candirufish,snicolet,2022-05-21 10:42:33+00:00,Simplify a condition  Principal variation depth late move reduction extension simplification.  stc: https://tests.stockfishchess.org/tests/view/6285a1d19d18a78568e7fa24 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 428536 W: 113433 L: 113851 D: 201252 Ptnml(0-2): 1671; 48606; 114090; 48272; 1629  ltc: https://tests.stockfishchess.org/tests/view/62871d20375cdc5de8cf5db3 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 56792 W: 15123 L: 15011 D: 26658 Ptnml(0-2): 42; 5681; 16825; 5819; 29  closes https://github.com/official-stockfish/Stockfish/pull/4028  bench: 6501437,True,5,2022-05-01
invalid-email-address,vondele,2022-05-15 18:20:37+00:00,Tune scale and optimism.  Tune scale and optimism in effort to make stockfish play more aggressively.  STC @ 10+0.1 th 1: LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 27896 W: 7506 L: 7248 D: 13142 Ptnml(0-2): 103; 3047; 7388; 3309; 101 https://tests.stockfishchess.org/tests/live_elo/627fd0cfab44257388ab1f13  LTC @ 60+0.6 th 1: LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 65576 W: 17512 L: 17178 D: 30886 Ptnml(0-2): 37; 6397; 19587; 6729; 38 https://tests.stockfishchess.org/tests/live_elo/627ff666ab44257388ab256d  closes https://github.com/official-stockfish/Stockfish/pull/4025  Bench 6407734,True,6,2022-05-01
Disservin,vondele,2022-05-14 11:17:35+00:00,SE depth scaling using the previous depth  This patch makes the SE depth condition more robust and allows it to scale with completed depth from a previous search.  At long TC this patch is almost equivalent to https://github.com/official-stockfish/Stockfish/pull/4016 which had  VLTC: https://tests.stockfishchess.org/tests/view/626abd7e8707aa698c0093a8 Elo: 2.35 +-1.5 (95%) LOS: 99.9% Total: 40000 W: 10991 L: 10720 D: 18289 Ptnml(0-2): 8; 3534; 12648; 3799; 11 nElo: 5.47 +-3.4 (95%) PairsRatio: 1.08  VLTC multicore: https://tests.stockfishchess.org/tests/view/6272a6afc8f14123163c1997 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 86808 W: 24165 L: 23814 D: 38829 Ptnml(0-2): 11; 7253; 28524; 7606; 10  however; it is now also gaining at LTC:  LTC: https://tests.stockfishchess.org/tests/view/627e7cb523c0c72a05b651a9 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 27064 W: 7285 L: 7046 D: 12733 Ptnml(0-2): 8; 2446; 8390; 2675; 13  and should have nearly no influence at STC as depth 27 is rarely reached. It was noticed that initializing the threshold with MAX_PLY; had an adverse effect; possibly because the first move is sensitive to this.  closes https://github.com/official-stockfish/Stockfish/pull/4021 closes https://github.com/official-stockfish/Stockfish/pull/4016  Bench: 6481017,True,5,2022-05-01
Sopel97,vondele,2022-05-14 10:47:22+00:00,"Update NNUE architecture to SFNNv5. Update network to nn-3c0aa92af1da.nnue.  Architecture changes:      Duplicated activation after the 1024->15 layer with squared crelu (so 15->15*2). As proposed by vondele.  Trainer changes:      Added bias to L1 factorization; which was previously missing (no measurable improvement but at least neutral in principle)     For retraining linearly reduce lambda parameter from 1.0 at epoch 0 to 0.75 at epoch 800.     reduce max_skipping_rate from 15 to 10 (compared to vondele's outstanding PR)  Note: This network was trained with a ~0.8% error in quantization regarding the newly added activation function.       This will be fixed in the released trainer version. Expect a trainer PR tomorrow.  Note: The inference implementation cuts a corner to merge results from two activation functions.        This could possibly be resolved nicer in the future. AVX2 implementation likely not necessary; but NEON is missing.  First training session invocation:  python3 train.py \     ../nnue-pytorch-training/data/nodes5000pv2_UHO.binpack \     ../nnue-pytorch-training/data/nodes5000pv2_UHO.binpack \     --gpus ""$3;"" \     --threads 4 \     --num-workers 8 \     --batch-size 16384 \     --progress_bar_refresh_rate 20 \     --random-fen-skipping 3 \     --features=HalfKAv2_hm^ \     --lambda=1.0 \     --max_epochs=400 \     --default_root_dir ../nnue-pytorch-training/experiment_$1/run_$2  Second training session invocation:  python3 train.py \     ../nnue-pytorch-training/data/T60T70wIsRightFarseerT60T74T75T76.binpack \     ../nnue-pytorch-training/data/T60T70wIsRightFarseerT60T74T75T76.binpack \     --gpus ""$3;"" \     --threads 4 \     --num-workers 8 \     --batch-size 16384 \     --progress_bar_refresh_rate 20 \     --random-fen-skipping 3 \     --features=HalfKAv2_hm^ \     --start-lambda=1.0 \     --end-lambda=0.75 \     --gamma=0.995 \     --lr=4.375e-4 \     --max_epochs=800 \     --resume-from-model /data/sopel/nnue/nnue-pytorch-training/data/exp367/nn-exp367-run3-epoch399.pt \     --default_root_dir ../nnue-pytorch-training/experiment_$1/run_$2  Passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 27288 W: 7445 L: 7178 D: 12665 Ptnml(0-2): 159; 3002; 7054; 3271; 158 https://tests.stockfishchess.org/tests/view/627e8c001919125939623644  Passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 21792 W: 5969 L: 5727 D: 10096 Ptnml(0-2): 25; 2152; 6294; 2406; 19 https://tests.stockfishchess.org/tests/view/627f2a855734b18b2e2ece47  closes https://github.com/official-stockfish/Stockfish/pull/4020  Bench: 6481017",True,5,2022-05-01
snicolet,snicolet,2022-05-04 05:47:56+00:00,Reduce depth after score improvement at PV nodes  STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 73760 W: 19590 L: 19244 D: 34926 Ptnml(0-2): 285; 8352; 19292; 8634; 317 https://tests.stockfishchess.org/tests/view/626eb2dc9116b52aa83b73da  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 114400 W: 30561 L: 30111 D: 53728 Ptnml(0-2): 68; 11432; 33785; 11812; 103 https://tests.stockfishchess.org/tests/view/626f730859e9c431e0b10b21  closes https://github.com/official-stockfish/Stockfish/pull/4008  bench: 6174823,True,2,2022-05-01
candirufish,vondele,2022-05-03 15:58:01+00:00,Use fail high count for LMR  Increase reduction if next ply has a lot of fail high else reset count to 0  Passed STC: https://tests.stockfishchess.org/tests/view/626ea8299116b52aa83b71f6 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 144288 W: 38377 L: 37902 D: 68009 Ptnml(0-2): 565; 16298; 38054; 16551; 676  Passed LTC: https://tests.stockfishchess.org/tests/view/626fa0fb79f761bab2e382f0 LLR: 2.98 (-2.94;2.94) <0.50;3.00> Total: 74872 W: 20050 L: 19686 D: 35136 Ptnml(0-2): 51; 7541; 21893; 7895; 56  closes https://github.com/official-stockfish/Stockfish/pull/4006  bench: 7084802,True,1,2022-05-01
locutus2,vondele,2022-05-03 15:54:23+00:00,Simplify time management.  Replace the best move instability adjustment factor by a simpler version which doesn't have a dependency on the iteration depth.  STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 30800 W: 8232 L: 8073 D: 14495 Ptnml(0-2): 101; 3309; 8444; 3422; 124 https://tests.stockfishchess.org/tests/view/6266c77bc5b924ba22908d30  LTC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 61664 W: 16375 L: 16272 D: 29017 Ptnml(0-2): 40; 5869; 18897; 6000; 26 https://tests.stockfishchess.org/tests/view/6266fc39b3d1812808915f23  closes https://github.com/official-stockfish/Stockfish/pull/3999  Bench: 7729968,True,1,2022-05-01
candirufish,vondele,2022-04-22 06:17:22+00:00,Negative extension for ttMove that is less than alpha and value  in the context of singular extensions  Passed STC: https://tests.stockfishchess.org/tests/view/626047e8b03f22647441ade0 LLR: 2.97 (-2.94;2.94) <0.00;2.50> Total: 50296 W: 13410 L: 13108 D: 23778 Ptnml(0-2): 196; 5548; 13370; 5826; 208  Passed LTC: https://tests.stockfishchess.org/tests/view/6260a513b03f22647441b970 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 83896 W: 22433 L: 22054 D: 39409 Ptnml(0-2): 49; 8273; 24938; 8626; 62  closes https://github.com/official-stockfish/Stockfish/pull/3995  bench: 7729968,True,4,2022-04-01
Vizvezdenec,vondele,2022-04-22 06:09:40+00:00,Simplify away best move count logic  the only place where it was used it was true with >99% probability so it seemed to not be doing much any more.  Passed STC: https://tests.stockfishchess.org/tests/view/625f4778d00da81c22dd4c93 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 85152 W: 22487 L: 22406 D: 40259 Ptnml(0-2): 313; 9035; 23818; 9078; 332  Passed LTC: https://tests.stockfishchess.org/tests/view/625ff1f1b03f22647441a215 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 66776 W: 17768 L: 17673 D: 31335 Ptnml(0-2): 46; 6200; 20792; 6313; 37  close https://github.com/official-stockfish/Stockfish/pull/3993  bench 7280798,True,4,2022-04-01
vondele,vondele,2022-04-19 17:59:04+00:00,Update default net to nn-d0b74ce1e5eb.nnue  train a net using training data with a heavier weight on positions having 16 pieces on the board. More specifically; with a relative weight of `i * (32-i)/(16 * 16)+1` (where i is the number of pieces on the board).  This is done with the trainer branch https://github.com/glinscott/nnue-pytorch/pull/173  The command used is: ``` python train.py $datafile $datafile $restarttype $restartfile --gpus 1 --threads 4 --num-workers 12 --random-fen-skipping=3 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --features=HalfKAv2_hm^   --lambda=1.00  --max_epochs=$epochs --seed $RANDOM --default_root_dir exp/run_$i ``` The datafile is T60T70wIsRightFarseerT60T74T75T76.binpack; the restart is from the master net.  passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 22728 W: 6197 L: 5945 D: 10586 Ptnml(0-2): 105; 2453; 6001; 2695; 110 https://tests.stockfishchess.org/tests/view/625cf944ff677a888877cd90  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 35664 W: 9535 L: 9264 D: 16865 Ptnml(0-2): 30; 3524; 10455; 3791; 32 https://tests.stockfishchess.org/tests/view/625d3c32ff677a888877d7ca  closes https://github.com/official-stockfish/Stockfish/pull/3989  Bench: 7269563,True,1,2022-04-01
vondele,vondele,2022-04-18 21:05:24+00:00,Restore development version  No functional change.,True,0,2022-04-01
vondele,vondele,2022-04-18 20:03:20+00:00,Stockfish 15  Official release version of Stockfish 15  Bench: 8129754  ---  A new major release of Stockfish is now available at https://stockfishchess.org  Stockfish 15 continues to push the boundaries of chess; providing unrivalled analysis and playing strength. In our testing; Stockfish 15 is ahead of Stockfish 14 by 36 Elo points and wins nine times more game pairs than it loses[1].  Improvements to the engine have made it possible for Stockfish to end up victorious in tournaments at all sorts of time controls ranging from bullet to classical and even at Fischer random chess[2]. At CCC; Stockfish won all of the latest tournaments: CCC 16 Bullet; Blitz and Rapid; CCC 960 championship; and the CCC 17 Rapid. At TCEC; Stockfish won the Season 21; Cup 9; FRC 4 and in the current Season 22 superfinal; at the time of writing; has won 16 game pairs and not yet lost a single one.  This progress is the result of a dedicated team of developers that comes up with new ideas and improvements. For Stockfish 15; we tested nearly 13000 different changes and retained the best 200. These include the fourth generation of our NNUE network architecture; as well as various search improvements. To perform these tests; contributors provide CPU time for testing; and in the last year; they have collectively played roughly a billion chess games. In the last few years; our distributed testing framework; Fishtest; has been operated superbly and has been developed and improved extensively. This work by Pasquale Pigazzini; Tom Vijlbrief; Michel Van den Bergh; and various other developers[3] is an essential part of the success of the Stockfish project.  Indeed; the Stockfish project builds on a thriving community of enthusiasts to offer a free and open-source chess engine that is robust; widely available; and very strong. We invite our chess fans to join the Fishtest testing framework and programmers to contribute to the project[4].  The Stockfish team  [1] https://tests.stockfishchess.org/tests/view/625d156dff677a888877d1be [2] https://en.wikipedia.org/wiki/Stockfish_(chess)#Competition_results [3] https://github.com/glinscott/fishtest/blob/master/AUTHORS [4] https://stockfishchess.org/get-involved/,True,0,2022-04-01
FauziAkram,vondele,2022-04-16 06:41:51+00:00,Tuning classical and NNUE scaling terms  changes to parameters in both classical and NNUE scaling; following up from an earlier successful #3958  passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 23936 W: 6490 L: 6234 D: 11212 Ptnml(0-2): 107; 2610; 6306; 2810; 135 https://tests.stockfishchess.org/tests/view/625820aa33c40bb9d964e6ae  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 50376 W: 13629 L: 13327 D: 23420 Ptnml(0-2): 20; 4979; 14920; 5217; 52 https://tests.stockfishchess.org/tests/view/62584592c1d7f5008a33a4d1  closes https://github.com/official-stockfish/Stockfish/pull/3982  Bench: 6964954,True,5,2022-04-01
vondele,vondele,2022-04-16 06:36:37+00:00,Update WDL model for current SF  This updates the WDL model based on the LTC statistics for the last month (8M games).  for old results see: https://github.com/official-stockfish/Stockfish/pull/3582 https://github.com/official-stockfish/Stockfish/pull/2778  the model changed a bit from the past; some images to follow in the PR  closes https://github.com/official-stockfish/Stockfish/pull/3981  No functional change.,True,5,2022-04-01
vondele,vondele,2022-04-16 06:35:31+00:00,Update CPU contributors  closes https://github.com/official-stockfish/Stockfish/pull/3979  No functional change,True,5,2022-04-01
TopoIogist,vondele,2022-04-12 15:43:50+00:00,Use NNUE in low piece endgames close to the root.  This patch enforces that NNUE evaluation is used for endgame positions at shallow depth (depth <= 9). Classic evaluation will still be used for high imbalance positions when the depth is high or there are many pieces.  Passed STC: https://tests.stockfishchess.org/tests/view/624c193b3a8a6ac93892dc27 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 255840 W: 68024 L: 67362 D: 120454 Ptnml(0-2): 1074; 27089; 70926; 27763; 1068  Passed LTC: https://tests.stockfishchess.org/tests/view/624e8675e9e7821808467f77 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 67088 W: 17784 L: 17454 D: 31850 Ptnml(0-2): 45; 6209; 20715; 6521; 54  closes https://github.com/official-stockfish/Stockfish/pull/3978  bench: 6602222,True,1,2022-04-01
Unknown,vondele,2022-04-01 08:55:11+00:00,Minor cleanups  simplify and relocate to position.cpp some of the recent threat calculations used in the movepicker.  passed STC: https://tests.stockfishchess.org/tests/view/62468c301f682ea45ce3b3b9 LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 76544 W: 20247 L: 20152 D: 36145 Ptnml(0-2): 327; 8113; 21317; 8168; 347  closes https://github.com/official-stockfish/Stockfish/pull/3972  No functional change,True,4,2022-04-01
TopoIogist,vondele,2022-03-28 20:43:52+00:00,Play more positional in endgames  This patch chooses the delta value (which skews the nnue evaluation between positional and materialistic) depending on the material: If the material is low; delta will be higher and the evaluation is shifted to the positional value. If the material is high; the evaluation will be shifted to the psqt value. I don't think slightly negative values of delta should be a concern.  Passed STC: https://tests.stockfishchess.org/tests/view/62418513b3b383e86185766f LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 28808 W: 7832 L: 7564 D: 13412 Ptnml(0-2): 147; 3186; 7505; 3384; 182  Passed LTC: https://tests.stockfishchess.org/tests/view/62419137b3b383e861857842 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 58632 W: 15776 L: 15450 D: 27406 Ptnml(0-2): 42; 5889; 17149; 6173; 63  closes https://github.com/official-stockfish/Stockfish/pull/3971  Bench: 7588855,True,0,2022-03-01
Vizvezdenec,vondele,2022-03-28 20:37:09+00:00,In movepicker increase priority for moves that evade a capture  This idea is a mix of koivisto idea of threat history and heuristic that was simplified some time ago in LMR - decreasing reduction for moves that evade a capture. Instead of doing so in LMR this patch does it in movepicker - to do this it calculates squares that are attacked by different piece types and pieces that are located on this squares and boosts up weight of moves that make this pieces land on a square that is not under threat. Boost is greater for pieces with bigger material values. Special thanks to koivisto and seer authors for explaining me ideas behind threat history.  Passed STC: https://tests.stockfishchess.org/tests/view/62406e473b32264b9aa1478b LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 19816 W: 5320 L: 5072 D: 9424 Ptnml(0-2): 86; 2165; 5172; 2385; 100  Passed LTC: https://tests.stockfishchess.org/tests/view/62407f2e3b32264b9aa149c8 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 51200 W: 13805 L: 13500 D: 23895 Ptnml(0-2): 44; 5023; 15164; 5322; 47  closes https://github.com/official-stockfish/Stockfish/pull/3970  bench 7736491,True,0,2022-03-01
G-Lorenz,vondele,2022-03-25 19:14:00+00:00,Remove pos.capture_or_promotion()  This patch replaces `pos.capture_or_promotion()` with `pos.capture()` and comes after a few attempts with elo-gaining bounds; two of which failed yellow at LTC (https://tests.stockfishchess.org/tests/view/622f8f0cc9e950cbfc237024 and https://tests.stockfishchess.org/tests/view/62319a8bb3b498ba71a6b2dc).  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/623aff7eea447151c74828d3 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 246864 W: 65462 L: 65618 D: 115784 Ptnml(0-2): 1201; 28116; 65001; 27866; 1248  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/623c1fdcea447151c7484fb0 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 30120 W: 8125 L: 7978 D: 14017 Ptnml(0-2): 22; 2993; 8881; 3144; 20  closes https://github.com/official-stockfish/Stockfish/pull/3968  Bench: 6847732,True,4,2022-03-01
locutus2,vondele,2022-03-19 12:40:35+00:00,Remove ttPv tree shrinking.  Via the ttPv flag an implicit tree of current and former PV nodes is maintained. In addition this tree is grown or shrinked at the leafs dependant on the search results. But now the shrinking step has been removed.  As the frequency of ttPv nodes decreases with depth the shown scaling behavior (STC barely passed but LTC scales well) of the tests was expected.  STC: LLR: 2.93 (-2.94;2.94) <-2.25;0.25> Total: 270408 W: 71593 L: 71785 D: 127030 Ptnml(0-2): 1339; 31024; 70630; 30912; 1299 https://tests.stockfishchess.org/tests/view/622fbf9dc9e950cbfc2376d6  LTC: LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 34368 W: 9135 L: 8992 D: 16241 Ptnml(0-2): 28; 3423; 10135; 3574; 24 https://tests.stockfishchess.org/tests/view/62305257c9e950cbfc238964  closes https://github.com/official-stockfish/Stockfish/pull/3963  Bench: 7044203,True,5,2022-03-01
Unknown,snicolet,2022-03-13 07:17:02+00:00,Small cleanups (2)  - fix a small compile error under MSVC - improve sigmoid comment and assert - fix formatting in README.md  closes https://github.com/official-stockfish/Stockfish/pull/3960  No functional change,True,6,2022-03-01
G-Lorenz,vondele,2022-03-12 08:38:34+00:00,Small cleanups  Delete cast to int in movepick. update AUTHORS. adjust assert in sigmoid. fix spelling mistakes in README  closes https://github.com/official-stockfish/Stockfish/pull/3922 closes https://github.com/official-stockfish/Stockfish/pull/3948 closes https://github.com/official-stockfish/Stockfish/pull/3942  No functional change,True,5,2022-03-01
FauziAkram,vondele,2022-03-12 08:25:58+00:00,Improvements in Evaluation  adjust parameters in classical evaluation and NNUE scaling.  STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 37104 W: 9983 L: 9701 D: 17420 Ptnml(0-2): 154; 4187; 9651; 4343; 217 https://tests.stockfishchess.org/tests/view/6228cb13a9d47c8160e885ba  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 266792 W: 71101 L: 70295 D: 125396 Ptnml(0-2): 214; 26928; 78353; 27640; 261 https://tests.stockfishchess.org/tests/view/6228d3c4a9d47c8160e887b0  closes https://github.com/official-stockfish/Stockfish/pull/3958  Bench: 6739741,True,5,2022-03-01
Vizvezdenec,vondele,2022-03-08 19:19:42+00:00,Decrease reductions in Lmr for some Pv nodes  This patch makes us reduce less in Lmr at pv nodes in case of static eval being far away from static evaluation of position. Idea is that if it's the case then probably position is pretty complex so we can't be sure about how reliable LMR is so we need to reduce less.  Passed STC: https://tests.stockfishchess.org/tests/view/6226276aa9d47c8160e81220 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 262696 W: 69944 L: 69239 D: 123513 Ptnml(0-2): 1399; 29702; 68436; 30417; 1394  Passed LTC: https://tests.stockfishchess.org/tests/view/6226b002a9d47c8160e82b91 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 64008 W: 17320 L: 16982 D: 29706 Ptnml(0-2): 60; 6378; 18811; 6674; 81  closes https://github.com/official-stockfish/Stockfish/pull/3957  bench 6678390,True,1,2022-03-01
Chaneybenjamini,vondele,2022-03-02 22:39:08+00:00,Generalize the feature transform to use vec_t macros  This commit generalizes the feature transform to use vec_t macros that are architecture defined instead of using a seperate code path for each one.  It should make some old architectures (MMX; including improvements by Fanael) faster and make further such improvements easier in the future.  Includes some corrections to CI for mingw.  closes https://github.com/official-stockfish/Stockfish/pull/3955 closes https://github.com/official-stockfish/Stockfish/pull/3928  No functional change,True,2,2022-03-01
G-Lorenz,vondele,2022-03-01 16:51:37+00:00,Sort captures  This patch (partially) sort captures in analogy to quiet moves. All three movepickers are affected; hence `depth` is added as an argument in probcut's.  Passed STC: https://tests.stockfishchess.org/tests/view/621a4576da649bba32ef6fd4 LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 103848 W: 27884 L: 27473 D: 48491 Ptnml(0-2): 587; 11691; 26974; 12068; 604  Passed LTC: https://tests.stockfishchess.org/tests/view/621aaa5bda649bba32ef7c2d LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 212032 W: 56420 L: 55739 D: 99873 Ptnml(0-2): 198; 21310; 62348; 21933; 227  closes https://github.com/official-stockfish/Stockfish/pull/3952  Bench: 6833580,True,1,2022-03-01
Sopel97,vondele,2022-03-01 16:51:02+00:00,Use dynamic allocation for evaluation scratch TLS buffer.  fixes #3946 an issue related with the toolchain as found in xcode 12 on macOS; related to previous commit 5f781d36.  closes https://github.com/official-stockfish/Stockfish/pull/3950  No functional change,True,1,2022-03-01
Unknown,vondele,2022-02-25 07:37:57+00:00,Clean up and simplify some nnue code.  Remove some unnecessary code and it's execution during inference. Also the change on line 49 in nnue_architecture.h results in a more efficient SIMD code path through ClippedReLU::propagate().  passed STC: https://tests.stockfishchess.org/tests/view/6217d3bfda649bba32ef25d5 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 12056 W: 3281 L: 3092 D: 5683 Ptnml(0-2): 55; 1213; 3312; 1384; 64  passed STC SMP: https://tests.stockfishchess.org/tests/view/6217f344da649bba32ef295e LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 27376 W: 7295 L: 7137 D: 12944 Ptnml(0-2): 52; 2859; 7715; 3003; 59  closes https://github.com/official-stockfish/Stockfish/pull/3944  No functional change  bench: 6820724,True,4,2022-02-01
Vizvezdenec,vondele,2022-02-20 22:01:22+00:00,Adjust usage of LMR for 2nd move in move ordering  Current master prohibits usage of LMR for 2nd move at rootNode. This patch also disables LMR for 2nd move not only at rootNode but also at first PvNode that is a reply to rootNode.  passed STC: https://tests.stockfishchess.org/tests/view/620e8c9026f5b17ec885143a LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 54096 W: 14305 L: 13996 D: 25795 Ptnml(0-2): 209; 6075; 14192; 6342; 230  passed LTC: https://tests.stockfishchess.org/tests/view/620eb327b1792e8985f81fb8 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 110864 W: 29602 L: 29156 D: 52106 Ptnml(0-2): 112; 11147; 32455; 11619; 99  closes https://github.com/official-stockfish/Stockfish/pull/3940  bench 6820724,True,6,2022-02-01
vondele,vondele,2022-02-20 21:59:19+00:00,Fix clang warning on unused variable  mark variable as used.  fixes https://github.com/official-stockfish/Stockfish/issues/3900 closes https://github.com/official-stockfish/Stockfish/pull/3941  No functional change,True,6,2022-02-01
ppigazzini,vondele,2022-02-20 21:56:11+00:00,"Add ARM NDK to Github Actions matrix  - set the variable only for the required tests to keep simple the yml file - use NDK 21.x until will be fixed the Stockfish static build problem   with NDK 23.x - set the test for armv7; armv7-neon; armv8 builds:   - use armv7a-linux-androideabi21-clang++ compiler for armv7 armv7-neon   - enforce a static build   - silence the Warning for the unused compilation flag ""-pie"" with     the static build; otherwise the Github workflow stops   - use qemu to bench the build and get the signature  Many thanks to @pschneider1968 that made all the hard work with NDK :)  closes https://github.com/official-stockfish/Stockfish/pull/3924  No functional change",True,6,2022-02-01
Vizvezdenec,snicolet,2022-02-17 19:45:21+00:00,Tune search at very long time control  This patch is a result of tuning done by user @candirufish after 150k games.  Since the tuned values were really interesting and touched heuristics that are known for their non-linear scaling I decided to run limited games LTC match; even if the STC test was really bad (which was expected). After seeing the results of the LTC match; I also run a VLTC (very long time control) SPRTtest; which passed.  The main difference is in extensions: this patch allows much more singular/double extensions; both in terms of allowing them at lower depths and with lesser margins.  Failed STC: https://tests.stockfishchess.org/tests/view/620d66643ec80158c0cd3b46 LLR: -2.94 (-2.94;2.94) <0.00;2.50> Total: 4968 W: 1194 L: 1398 D: 2376 Ptnml(0-2): 47; 633; 1294; 497; 13  Performed well at LTC in a fixed-length match: https://tests.stockfishchess.org/tests/view/620d66823ec80158c0cd3b4a ELO: 3.36 +-1.8 (95%) LOS: 100.0% Total: 30000 W: 7966 L: 7676 D: 14358 Ptnml(0-2): 36; 2936; 8755; 3248; 25  Passed VLTC SPRT test: https://tests.stockfishchess.org/tests/view/620da11a26f5b17ec884f939 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 4400 W: 1326 L: 1127 D: 1947 Ptnml(0-2): 13; 309; 1348; 526; 4  closes https://github.com/official-stockfish/Stockfish/pull/3937  Bench: 6318903,True,3,2022-02-01
Vizvezdenec,snicolet,2022-02-13 00:05:27+00:00,"Big search tuning (version 2)  One more tuning - this one includes newly introduced heuristics and some other parameters that were not included in previous one. Result of 400k games at 20+0.2 ""as is"". Tuning is continuing since there is probably a lot more elo to gain.  STC: https://tests.stockfishchess.org/tests/view/620782edd71106ed12a497d1 LLR: 2.99 (-2.94;2.94) <0.00;2.50> Total: 38504 W: 10260 L: 9978 D: 18266 Ptnml(0-2): 142; 4249; 10230; 4447; 184  LTC: https://tests.stockfishchess.org/tests/view/6207a243d71106ed12a49d07 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 25176 W: 6793 L: 6546 D: 11837 Ptnml(0-2): 20; 2472; 7360; 2713; 23  closes https://github.com/official-stockfish/Stockfish/pull/3931  Bench: 4784796",True,6,2022-02-01
Sopel97,vondele,2022-02-10 18:54:31+00:00,"Update architecture to ""SFNNv4"". Update network to nn-6877cd24400e.nnue.  Architecture:  The diagram of the ""SFNNv4"" architecture: https://user-images.githubusercontent.com/8037982/153455685-cbe3a038-e158-4481-844d-9d5fccf5c33a.png  The most important architectural changes are the following:  * 1024x2 [activated] neurons are pairwise; elementwise multiplied (not quite pairwise due to implementation details; see diagram); which introduces a non-linearity that exhibits similar benefits to previously tested sigmoid activation (quantmoid4); while being slightly faster. * The following layer has therefore 2x less inputs; which we compensate by having 2 more outputs. It is possible that reducing the number of outputs might be beneficial (as we had it as low as 8 before). The layer is now 1024->16. * The 16 outputs are split into 15 and 1. The 1-wide output is added to the network output (after some necessary scaling due to quantization differences). The 15-wide is activated and follows the usual path through a set of linear layers. The additional 1-wide output is at least neutral; but has shown a slightly positive trend in training compared to networks without it (all 16 outputs through the usual path); and allows possibly an additional stage of lazy evaluation to be introduced in the future.  Additionally; the inference code was rewritten and no longer uses a recursive implementation. This was necessitated by the splitting of the 16-wide intermediate result into two; which was impossible to do with the old implementation with ugly hacks. This is hopefully overall for the better.  First session:  The first session was training a network from scratch (random initialization). The exact trainer used was slightly different (older) from the one used in the second session; but it should not have a measurable effect. The purpose of this session is to establish a strong network base for the second session. Small deviations in strength do not harm the learnability in the second session.  The training was done using the following command:  python3 train.py \     /home/sopel/nnue/nnue-pytorch-training/data/nodes5000pv2_UHO.binpack \     /home/sopel/nnue/nnue-pytorch-training/data/nodes5000pv2_UHO.binpack \     --gpus ""$3;"" \     --threads 4 \     --num-workers 4 \     --batch-size 16384 \     --progress_bar_refresh_rate 20 \     --random-fen-skipping 3 \     --features=HalfKAv2_hm^ \     --lambda=1.0 \     --gamma=0.992 \     --lr=8.75e-4 \     --max_epochs=400 \     --default_root_dir ../nnue-pytorch-training/experiment_$1/run_$2  Every 20th net was saved and its playing strength measured against some baseline at 25k nodes per move with pure NNUE evaluation (modified binary). The exact setup is not important as long as it's consistent. The purpose is to sift good candidates from bad ones.  The dataset can be found https://drive.google.com/file/d/1UQdZN_LWQ265spwTBwDKo0t1WjSJKvWY/view  Second session:  The second training session was done starting from the best network (as determined by strength testing) from the first session. It is important that it's resumed from a .pt model and NOT a .ckpt model. The conversion can be performed directly using serialize.py  The LR schedule was modified to use gamma=0.995 instead of gamma=0.992 and LR=4.375e-4 instead of LR=8.75e-4 to flatten the LR curve and allow for longer training. The training was then running for 800 epochs instead of 400 (though it's possibly mostly noise after around epoch 600).  The training was done using the following command:  The training was done using the following command:  python3 train.py \         /data/sopel/nnue/nnue-pytorch-training/data/T60T70wIsRightFarseerT60T74T75T76.binpack \         /data/sopel/nnue/nnue-pytorch-training/data/T60T70wIsRightFarseerT60T74T75T76.binpack \         --gpus ""$3;"" \         --threads 4 \         --num-workers 4 \         --batch-size 16384 \         --progress_bar_refresh_rate 20 \         --random-fen-skipping 3 \         --features=HalfKAv2_hm^ \         --lambda=1.0 \         --gamma=0.995 \         --lr=4.375e-4 \         --max_epochs=800 \         --resume-from-model /data/sopel/nnue/nnue-pytorch-training/data/exp295/nn-epoch399.pt \         --default_root_dir ../nnue-pytorch-training/experiment_$1/run_$run_id  In particular note that we now use lambda=1.0 instead of lambda=0.8 (previous nets); because tests show that WDL-skipping introduced by vondele performs better with lambda=1.0. Nets were being saved every 20th epoch. In total 16 runs were made with these settings and the best nets chosen according to playing strength at 25k nodes per move with pure NNUE evaluation - these are the 4 nets that have been put on fishtest.  The dataset can be found either at ftp://ftp.chessdb.cn/pub/sopel/data_sf/T60T70wIsRightFarseerT60T74T75T76.binpack in its entirety (download might be painfully slow because hosted in China) or can be assembled in the following way:  Get the https://github.com/official-stockfish/Stockfish/blob/5640ad48ae5881223b868362c1cbeb042947f7b4/script/interleave_binpacks.py script. Download T60T70wIsRightFarseer.binpack https://drive.google.com/file/d/1_sQoWBl31WAxNXma2v45004CIVltytP8/view Download farseerT74.binpack http://trainingdata.farseer.org/T74-May13-End.7z Download farseerT75.binpack http://trainingdata.farseer.org/T75-June3rd-End.7z Download farseerT76.binpack http://trainingdata.farseer.org/T76-Nov10th-End.7z Run python3 interleave_binpacks.py T60T70wIsRightFarseer.binpack farseerT74.binpack farseerT75.binpack farseerT76.binpack T60T70wIsRightFarseerT60T74T75T76.binpack  Tests:  STC: https://tests.stockfishchess.org/tests/view/6203fb85d71106ed12a407b7 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 16952 W: 4775 L: 4521 D: 7656 Ptnml(0-2): 133; 1818; 4318; 2076; 131  LTC: https://tests.stockfishchess.org/tests/view/62041e68d71106ed12a40e85 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 14944 W: 4138 L: 3907 D: 6899 Ptnml(0-2): 21; 1499; 4202; 1728; 22  closes https://github.com/official-stockfish/Stockfish/pull/3927  Bench: 4919707",True,3,2022-02-01
Vizvezdenec,vondele,2022-02-09 16:17:00+00:00,Big search tuning  Most credits for this patch should go to @candirufish. Based on his big search tuning (1M games at 20+0.1s)  https://tests.stockfishchess.org/tests/view/61fc7a6ed508ec6a1c9f4b7d  with some hand polishing on top of it; which includes :  a) correcting trend sigmoid - for some reason original tuning resulted in it being negative. This heuristic was proven to be worth some elo for years so reversing it sign is probably some random artefact; b) remove changes to continuation history based pruning - this heuristic historically was really good at providing green STCs and then failing at LTC miserably if we tried to make it more strict; original tuning was done at short time control and thus it became more strict - which doesn't scale to longer time controls; c) remove changes to improvement - not really indended :).  passed STC https://tests.stockfishchess.org/tests/view/6203526e88ae2c84271c2ee2 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 16840 W: 4604 L: 4363 D: 7873 Ptnml(0-2): 82; 1780; 4449; 2033; 76  passed LTC https://tests.stockfishchess.org/tests/view/620376e888ae2c84271c35d4 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 17232 W: 4771 L: 4542 D: 7919 Ptnml(0-2): 14; 1655; 5048; 1886; 13  closes https://github.com/official-stockfish/Stockfish/pull/3926  bench 5030992,True,2,2022-02-01
Vizvezdenec,vondele,2022-02-07 16:30:35+00:00,Do less depth reduction in null move pruning for complex positions  This patch makes us reduce less depth in null move pruning if complexity is high enough. Thus; null move pruning now depends in two distinct ways on complexity; while being the only search heuristic that exploits complexity so far.  passed STC https://tests.stockfishchess.org/tests/view/61fde60fd508ec6a1c9f7754 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 170000 W: 45555 L: 45027 D: 79418 Ptnml(0-2): 760; 19352; 44359; 19658; 871  passed LTC https://tests.stockfishchess.org/tests/view/61fe91febf46cb834cbd5c90 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 145272 W: 39182 L: 38651 D: 67439 Ptnml(0-2): 127; 14864; 42157; 15327; 161  closes https://github.com/official-stockfish/Stockfish/pull/3923  bench 4461945,True,0,2022-02-01
Vizvezdenec,vondele,2022-02-05 06:40:21+00:00,Reintroduce razoring  Razoring was simplified away some years ago; this patch reintroduces it in a slightly different form. Now for low depths if eval is far below alpha we check if qsearch can push it above alpha - and if it can't we return a fail low.  passed STC https://tests.stockfishchess.org/tests/view/61fbf968d508ec6a1c9f3274 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 226120 W: 61106 L: 60472 D: 104542 Ptnml(0-2): 1118; 25592; 59080; 26078; 1192  passed LTC https://tests.stockfishchess.org/tests/view/61fcc569d508ec6a1c9f5617 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 113128 W: 30851 L: 30397 D: 51880 Ptnml(0-2): 114; 11483; 32926; 11917; 124  closes https://github.com/official-stockfish/Stockfish/pull/3921  bench 4684080,True,5,2022-02-01
Vizvezdenec,vondele,2022-02-05 06:38:30+00:00,"Introduce movecount pruning for quiet check evasions in qsearch  Idea of this patch is that we usually don't consider quiet check evasions as ""good"" ones and prefer capture based ones instead. So it makes sense to think that if in qsearch 2 quiet check evasions failed to produce anything good 3rd and further ones wouldn't be good either.  passed STC https://tests.stockfishchess.org/tests/view/61fc1b1ed508ec6a1c9f397c LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 58800 W: 15947 L: 15626 D: 27227 Ptnml(0-2): 273; 6568; 15462; 6759; 338  passed LTC https://tests.stockfishchess.org/tests/view/61fcc56dd508ec6a1c9f5619 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 89544 W: 24208 L: 23810 D: 41526 Ptnml(0-2): 81; 9038; 26134; 9440; 79  closes https://github.com/official-stockfish/Stockfish/pull/3920  bench 4830082",True,5,2022-02-01
ppigazzini,vondele,2022-02-05 06:33:34+00:00,"Drop sse from target ""x86-32""  have maximal compatibility on legacy target arch; now supporting AMD Athlon  The old behavior can anyway be selected by the user if needed; for example  make -j profile-build ARCH=x86-32 sse=yes  fixes #3904 closes https://github.com/official-stockfish/Stockfish/pull/3918  No functional change",True,5,2022-02-01
Vizvezdenec,vondele,2022-02-05 06:30:09+00:00,Cleanup and update CPU contributors  closes https://github.com/official-stockfish/Stockfish/pull/3917  No functional change,True,5,2022-02-01
Vizvezdenec,vondele,2022-01-29 07:58:12+00:00,Do stats updates after LMR for captures  Since captures that are in LMR use continuation histories of corresponding quiet moves it makes sense to update this histories if this capture passes LMR by analogy to existing logic for quiet moves.  Passed STC https://tests.stockfishchess.org/tests/view/61f367eef7fba9f1a4f1318b LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 208464 W: 56006 L: 55407 D: 97051 Ptnml(0-2): 964; 23588; 54655; 23935; 1090  Passed LTC https://tests.stockfishchess.org/tests/view/61f41e34f7fba9f1a4f15241 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 69144 W: 18793 L: 18441 D: 31910 Ptnml(0-2): 65; 6982; 20142; 7302; 81  closes https://github.com/official-stockfish/Stockfish/pull/3910  bench 4637392,True,5,2022-01-01
Vizvezdenec,vondele,2022-01-25 06:27:52+00:00,Scale child node futility pruning with previous move history.  Idea is to do more futility pruning if previous move has bad histories and less if it has good histories.  passed STC https://tests.stockfishchess.org/tests/view/61e3757fbabab931824e0db7 LLR: 2.96 (-2.94;2.94) <0.00;2.50> Total: 156816 W: 42282 L: 41777 D: 72757 Ptnml(0-2): 737; 17775; 40913; 18212; 771  passed LTC https://tests.stockfishchess.org/tests/view/61e43496928632f7813a5535 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 349968 W: 94612 L: 93604 D: 161752 Ptnml(0-2): 300; 35934; 101550; 36858; 342  closes https://github.com/official-stockfish/Stockfish/pull/3903  bench 4720954,True,1,2022-01-01
pschneider1968,vondele,2022-01-25 06:27:23+00:00,Fix Makefile for Android NDK cross-compile  For cross-compiling to Android on windows; the Makefile needs some tweaks.  Tested with Android NDK 23.1.7779620 and 21.4.7075529; using Windows 10 with clean MSYS2 environment (i.e. no MINGW/GCC/Clang toolchain in PATH) and Fedora 35; with build target: build ARCH=armv8 COMP=ndk  The resulting binary runs fine inside Droidfish on my Samsung Galaxy Note20 Ultra and Samsung Galaxy Tab S7+  Other builds tested to exclude regressions: MINGW64/Clang64 build on Windows; MINGW64 cross build; native Clang and GCC builds on Fedora.  wiki docs https://github.com/glinscott/fishtest/wiki/Cross-compiling-Stockfish-for-Android-on-Windows-and-Linux  closes https://github.com/official-stockfish/Stockfish/pull/3901  No functional change,True,1,2022-01-01
joergoster,vondele,2022-01-22 09:48:24+00:00,Simplify limiting extensions.  Replace the current method for limiting extensions to avoid search getting stuck with a much simpler method.  the test position in https://github.com/official-stockfish/Stockfish/commit/73018a03375b4b72ee482eb5a4a2152d7e4f0aac can still be searched without stuck search.  fixes #3815 where the search now makes progress with rootDepth  shows robust behavior in a d10 search for 1M positions.  passed STC https://tests.stockfishchess.org/tests/view/61e303e3babab931824dfb18 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 57568 W: 15449 L: 15327 D: 26792 Ptnml(0-2): 243; 6211; 15779; 6283; 268  passed LTC https://tests.stockfishchess.org/tests/view/61e3586cbabab931824e091c LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 128200 W: 34632 L: 34613 D: 58955 Ptnml(0-2): 124; 12559; 38710; 12588; 119  closes https://github.com/official-stockfish/Stockfish/pull/3899  Bench: 4550528,True,5,2022-01-01
vondele,vondele,2022-01-20 17:34:16+00:00,Revert -flto=auto on mingw  causes issues on some installations (glinscott/fishtest#1255).  closes https://github.com/official-stockfish/Stockfish/pull/3898  No functional change,True,3,2022-01-01
ppigazzini,vondele,2022-01-19 21:26:20+00:00,Improve Makefile for Windows native builds  A Windows Native Build (WNB) can be done:  - on Windows; using a recent mingw-w64 g++/clang compiler    distributed by msys2; cygwin and others  - on Linux; using mingw-w64 g++ to cross compile  Improvements:  - check for a WNB in a proper way and set a variable to simplify the code  - set the proper EXE for a WNB  - use the proper name for the mingw-w64 clang compiler  - use the static linking for a WNB  - use wine to make a PGO cross compile on Linux (also with Intel SDE)  - enable the LTO build for mingw-w64 g++ compiler  - set `lto=auto` to use the make's job server; if available; or otherwise    to fall back to autodetection of the number of CPU threads  - clean up all the temporary LTO files saved in the local directory  Tested on:  - msys2 MINGW64 (g++); UCRT64 (g++); MINGW32 (g++); CLANG64 (clang)    environments  - cygwin mingw-w64 g++  - Ubuntu 18.04 & 21.10 mingw-w64 PGO cross compile (also with Intel SDE)  closes #3891  No functional change,True,2,2022-01-01
ppigazzini,vondele,2022-01-19 18:21:10+00:00,Add msys2 Clang x86_64 to GitHub Action matrix  Also use Windows Server 2022 virtual environment for msys2 builds.  closes https://github.com/official-stockfish/Stockfish/pull/3893  No functional change,True,2,2022-01-01
ruicoelhopedro,vondele,2022-01-17 18:48:23+00:00,Use average complexity for time management  This patch is a variant of the idea by locutus2 (https://tests.stockfishchess.org/tests/view/61e1f24cb1f9959fe5d88168) to adjust the total time depending on the average complexity of the position.  Passed STC LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 39664 W: 10765 L: 10487 D: 18412 Ptnml(0-2): 162; 4213; 10837; 4425; 195 https://tests.stockfishchess.org/tests/view/61e2df8b65a644da8c9ea708  Passed LTC LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 127656 W: 34505 L: 34028 D: 59123 Ptnml(0-2): 116; 12435; 38261; 12888; 128 https://tests.stockfishchess.org/tests/view/61e31db5babab931824dff5e  closes https://github.com/official-stockfish/Stockfish/pull/3892  Bench: 4464962,True,0,2022-01-01
proukornew,vondele,2022-01-17 18:47:32+00:00,Improve logic on mingw  There is no need to point g++; if we explicitly choose mingw.  Now for cygwin:  make COMP=mingw ARCH=x86-64-modern build  closes https://github.com/official-stockfish/Stockfish/pull/3860  No functional change,True,0,2022-01-01
ruicoelhopedro,vondele,2022-01-13 21:25:01+00:00,Use complexity in search  This patch uses the complexity measure (from #3875) as a heuristic for null move pruning. Hopefully; there may be room to use it in other pruning techniques. I would like to thank vondele and locutus2 for the feedback and suggestions during testing.  Passed STC LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 35000 W: 9624 L: 9347 D: 16029 Ptnml(0-2): 156; 3894; 9137; 4143; 170 https://tests.stockfishchess.org/tests/view/61dda784c65bf87d6c45ab80  Passed LTC LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 230776 W: 64227 L: 63454 D: 103095 Ptnml(0-2): 1082; 23100; 66380; 23615; 1211 https://tests.stockfishchess.org/tests/view/61ddd0cf3ddbc32543e72c2b  Closes https://github.com/official-stockfish/Stockfish/pull/3890  Bench: 4464962,True,3,2022-01-01
pschneider1968,vondele,2022-01-13 21:17:27+00:00,Fix Makefile for compilation with clang on Windows  use static compilation and added exclusion of -latomic for Clang/MSYS2 as per ppigazzini's suggestion  fixes #3872  closes https://github.com/official-stockfish/Stockfish/pull/3873  No functional change,True,3,2022-01-01
Vizvezdenec,vondele,2022-01-10 18:35:53+00:00,Adjust pruning constants  This patch is a modification of original tuning done by vondele that failed yellow. Value differences are divided by 2.  Passed STC https://tests.stockfishchess.org/tests/view/61d918239fea7913d9c64cdf LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 98968 W: 26248 L: 25858 D: 46862 Ptnml(0-2): 392; 11085; 26156; 11443; 408  Passed LTC https://tests.stockfishchess.org/tests/view/61d99e3c9fea7913d9c663e4 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 215232 W: 58191 L: 57492 D: 99549 Ptnml(0-2): 271; 22124; 62138; 22801; 282  closes https://github.com/official-stockfish/Stockfish/pull/3885  bench 4572746,True,0,2022-01-01
vondele,vondele,2022-01-09 14:49:19+00:00,Tune FRC trapped Bishop patch  now that fishtest can deal with FRC; retune this correction.  Add an additional fen to bench with cornered B and N.  passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 49672 W: 7358 L: 7082 D: 35232 Ptnml(0-2): 241; 4329; 15458; 4529; 279 https://tests.stockfishchess.org/tests/view/61d8b7bf9fea7913d9c63cb7  passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 86688 W: 8308 L: 8007 D: 70373 Ptnml(0-2): 92; 4943; 32989; 5212; 108 https://tests.stockfishchess.org/tests/view/61d92dcb9fea7913d9c650ad  closes https://github.com/official-stockfish/Stockfish/pull/3884  Bench: 4326560,True,6,2022-01-01
vondele,vondele,2022-01-08 07:44:49+00:00,Tune a few parameters related to evaluation  based on a SPSA tune (using Autoselect) https://tests.stockfishchess.org/tests/view/61d5aa63a314fed318a57046  passed STC: LLR: 2.93 (-2.94;2.94) <0.00;2.50> Total: 61960 W: 16640 L: 16316 D: 29004 Ptnml(0-2): 278; 6934; 16204; 7314; 250 https://tests.stockfishchess.org/tests/view/61d7fe4af5fd40f357469a8d  passed LTC: LLR: 2.97 (-2.94;2.94) <0.50;3.00> Total: 79408 W: 21994 L: 21618 D: 35796 Ptnml(0-2): 106; 7887; 23331; 8285; 95 https://tests.stockfishchess.org/tests/view/61d836b7f5fd40f35746a3d5  closes https://github.com/official-stockfish/Stockfish/pull/3883  Bench: 4266621,True,5,2022-01-01
snicolet,vondele,2022-01-08 07:43:14+00:00,Update AUTHORS and CPU contributors files  closes https://github.com/official-stockfish/Stockfish/pull/3882  No functional change,True,5,2022-01-01
bknox83,vondele,2022-01-06 14:45:45+00:00,Update copyright years  Happy New Year!  closes https://github.com/official-stockfish/Stockfish/pull/3881  No functional change,True,3,2022-01-01
lonfom169,snicolet,2022-01-02 16:49:44+00:00,Simplify away rangeReduction  Remove rangeReduction; introduced in [#3717](https://github.com/official-stockfish/Stockfish/pull/3717); as it seemingly doesn't bring enough ELO anymore. It might be interesting to add new forms of reduction or tune the reduction formula in the future.  STC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 45008 W: 12114 L: 11972 D: 20922 Ptnml(0-2): 174; 5031; 11952; 5173; 174 https://tests.stockfishchess.org/tests/view/61d08b7b069ca917749c9f6f  LTC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 30792 W: 8235 L: 8086 D: 14471 Ptnml(0-2): 24; 3162; 8882; 3297; 31 https://tests.stockfishchess.org/tests/view/61d0a6ad069ca917749ca420  closes https://github.com/official-stockfish/Stockfish/pull/3878  Bench: 4048312,True,6,2022-01-01
lonfom169,snicolet,2021-12-31 06:44:15+00:00,Smooth out doDeeperSearch  Adjust threshold based on the difference between newDepth and LMR depth. With more reduction; bigger fail-high is required in order to perform the deeper search.  STC: LLR: 2.96 (-2.94;2.94) <0.00;2.50> Total: 93576 W: 24133 L: 23758 D: 45685 Ptnml(0-2): 260; 10493; 24935; 10812; 288 https://tests.stockfishchess.org/tests/view/61cbb5cee68b2a714b6eaf09  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 109280 W: 28198 L: 27754 D: 53328 Ptnml(0-2): 60; 11225; 31637; 11647; 71 https://tests.stockfishchess.org/tests/view/61cc03fee68b2a714b6ec091  closes https://github.com/official-stockfish/Stockfish/pull/3877  Bench: 4464723,True,4,2021-12-01
snicolet,snicolet,2021-12-30 10:59:23+00:00,"Tweak optimism with complexity  This patch increases the optimism bonus for ""complex positions""; where the complexity is measured as the absolute value of the difference between material and the sophisticated NNUE evaluation (idea by Joost VandeVondele).  Also rename some variables in evaluate() while there.  passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 88392 W: 23150 L: 22781 D: 42461 Ptnml(0-2): 318; 9961; 23257; 10354; 306 https://tests.stockfishchess.org/tests/view/61cbbedee68b2a714b6eb110  passed LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 37848 W: 10043 L: 9766 D: 18039 Ptnml(0-2): 26; 3815; 10961; 4100; 22 https://tests.stockfishchess.org/tests/view/61cc0cc3e68b2a714b6ec28c  Closes https://github.com/official-stockfish/Stockfish/pull/3875 Follow-up from https://github.com/official-stockfish/Stockfish/commit/a5a89b27c8e3225fb453d603bc4515d32bb351c3  Bench: 4125221",True,3,2021-12-01
BM123499,vondele,2021-12-27 15:43:44+00:00,Don't direct prune a move if it's a retake  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 36304 W: 9499 L: 9226 D: 17579 Ptnml(0-2): 96; 4102; 9508; 4325; 121 https://tests.stockfishchess.org/tests/view/61c7069ae68b2a714b6dca27  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 93824 W: 24478 L: 24068 D: 45278 Ptnml(0-2): 70; 9644; 27082; 10038; 78 https://tests.stockfishchess.org/tests/view/61c725fee68b2a714b6dcfa2  closes https://github.com/official-stockfish/Stockfish/pull/3871  Bench: 4106806,True,0,2021-12-01
vondele,snicolet,2021-12-22 10:02:34+00:00,Update default net to nn-ac07bd334b62.nnue  Trained with essentially the same data as provided and used by Farseer (mbabigian) for the previous master net.  T60T70wIsRightFarseerT60T74T75T76.binpack (99GB): ['T60T70wIsRightFarseer.binpack'; 'farseerT74.binpack'; 'farseerT75.binpack'; 'farseerT76.binpack'] using the trainer branch tweakLR1PR (https://github.com/glinscott/nnue-pytorch/pull/158) and `--gpus 1 --threads 4 --num-workers 4 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --random-fen-skipping 12 --features=HalfKAv2_hm^   --lambda=1.00` options  passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 108280 W: 28042 L: 27636 D: 52602 Ptnml(0-2): 328; 12382; 28401; 12614; 415 https://tests.stockfishchess.org/tests/view/61bcd8c257a0d0f327c34fbd  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 259296 W: 66974 L: 66175 D: 126147 Ptnml(0-2): 146; 27096; 74452; 27721; 233 https://tests.stockfishchess.org/tests/view/61bda70957a0d0f327c37817  closes https://github.com/official-stockfish/Stockfish/pull/3870  Bench: 4633875,True,2,2021-12-01
Vizvezdenec,vondele,2021-12-22 07:18:35+00:00,Fall back to NNUE if classical evaluation is much lower than threshold  The idea is that if classical eval returns a value much lower than the threshold of its usage it most likely means that position isn't that simple so we need the more precise NNUE evaluation.  passed STC: https://tests.stockfishchess.org/tests/view/61bf3e7557a0d0f327c3c47a LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 108072 W: 28007 L: 27604 D: 52461 Ptnml(0-2): 352; 12147; 28650; 12520; 367  passed LTC: https://tests.stockfishchess.org/tests/view/61c0581657a0d0f327c3fa0c LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 155096 W: 40392 L: 39841 D: 74863 Ptnml(0-2): 88; 15983; 44843; 16558; 76  closes https://github.com/official-stockfish/Stockfish/pull/3869  bench 4310422,True,2,2021-12-01
BM123499,vondele,2021-12-21 12:47:57+00:00,Update Elo estimates for terms in search  This updates estimates from 2yr ago #2401; and adds missing terms. All tests run at 10+0.1 (STC); 20000 games; error bars +- 1.8 Elo; book 8moves_v3.png.  A table of Elo values with the links to the corresponding tests can be found at the PR  closes https://github.com/official-stockfish/Stockfish/pull/3868  Non-functional Change,True,1,2021-12-01
BM123499,vondele,2021-12-21 12:42:33+00:00,Remove Capture history pruning  Fixed number of games. (book: 8moves_v3.png): ELO: -0.69 +-1.8 (95%) LOS: 22.1% Total: 20000 W: 1592 L: 1632 D: 16776 Ptnml(0-2): 44; 1194; 7566; 1150; 46 https://tests.stockfishchess.org/tests/view/61bb8eb657a0d0f327c30ce8  STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 139976 W: 36039 L: 36036 D: 67901 Ptnml(0-2): 435; 16138; 36885; 16049; 481 https://tests.stockfishchess.org/tests/view/61be731857a0d0f327c39ea2  LTC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 70656 W: 18284 L: 18189 D: 34183 Ptnml(0-2): 34; 7317; 20529; 7416; 32 https://tests.stockfishchess.org/tests/view/61bf39b657a0d0f327c3c37b  closes https://github.com/official-stockfish/Stockfish/pull/3867  bench: 4281737,True,1,2021-12-01
BM123499,vondele,2021-12-21 12:40:57+00:00,Remove Capture Extension  This revert the patch #3692; probably can be simplified after the introduction of #3838.  Fixed-game test: ELO: -1.41 +-1.8 (95%) LOS: 5.9% Total: 20000 W: 1552 L: 1633 D: 16815 Ptnml(0-2): 38; 1242; 7517; 1169; 34 https://tests.stockfishchess.org/tests/view/61bc1a2057a0d0f327c32a3c  STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 44528 W: 11619 L: 11478 D: 21431 Ptnml(0-2): 146; 5020; 11771; 5201; 126 https://tests.stockfishchess.org/tests/view/61bc638c57a0d0f327c338fe  LTC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 34136 W: 8847 L: 8704 D: 16585 Ptnml(0-2): 23; 3475; 9925; 3626; 19 https://tests.stockfishchess.org/tests/view/61bcb24257a0d0f327c34813  closes https://github.com/official-stockfish/Stockfish/pull/3863  Bench: 4054695,True,1,2021-12-01
snicolet,vondele,2021-12-19 14:44:01+00:00,Simplification in evaluate_nnue.cpp  Removes the test on non-pawn-material before applying the positional/materialistic bonus.  Passed STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 46904 W: 12197 L: 12059 D: 22648 Ptnml(0-2): 170; 5243; 12479; 5399; 161 https://tests.stockfishchess.org/tests/view/61be57cf57a0d0f327c3999d  Passed LTC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 18760 W: 4958 L: 4790 D: 9012 Ptnml(0-2): 14; 1942; 5301; 2108; 15 https://tests.stockfishchess.org/tests/view/61bed1fb57a0d0f327c3afa9  closes https://github.com/official-stockfish/Stockfish/pull/3866  Bench: 4826206,True,6,2021-12-01
gsobala,snicolet,2021-12-19 10:43:18+00:00,Fixes build failure on Apple M1 Silicon  This pull request selectively avoids `-mdynamic-no-pic` for gcc on Apple Silicon (there was no problem with the default clang compiler).  fixes https://github.com/official-stockfish/Stockfish/issues/3847 closes https://github.com/official-stockfish/Stockfish/pull/3850  No functional change,True,6,2021-12-01
Vizvezdenec,vondele,2021-12-19 07:03:41+00:00,Reintroduce futility pruning for captures  This is a reintroduction of an idea that was simplified away approximately 1 year ago. There are some tweaks to it : a) exclude promotions; b) exclude Pv Nodes from it - Pv Nodes logic for captures is really different from non Pv nodes so it makes a lot of sense; c) use a big grain of capture history - idea is taken from my recent patches in futility pruning.  passed STC https://tests.stockfishchess.org/tests/view/61bd90f857a0d0f327c373b7 LLR: 2.96 (-2.94;2.94) <0.00;2.50> Total: 86640 W: 22474 L: 22110 D: 42056 Ptnml(0-2): 268; 9732; 22963; 10082; 275  passed LTC https://tests.stockfishchess.org/tests/view/61be094457a0d0f327c38aa3 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 23240 W: 6079 L: 5838 D: 11323 Ptnml(0-2): 14; 2261; 6824; 2512; 9  https://github.com/official-stockfish/Stockfish/pull/3864  bench 4493723,True,6,2021-12-01
Vizvezdenec,vondele,2021-12-18 16:19:21+00:00,Adjust reductions based on current node delta and root delta  This patch is a follow up of previous 2 patches that introduced more reductions for PV nodes with low delta and more pruning for nodes with low delta. Instead of writing separate heuristics now it adjust reductions based on delta / rootDelta - it allows to remove 3 separate adjustements of pruning/LMR in different places and also makes reduction dependence on delta and rootDelta smoother. Also now it works for all pruning heuristics and not just 2.  Passed STC https://tests.stockfishchess.org/tests/view/61ba9b6c57a0d0f327c2d48b LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 79192 W: 20513 L: 20163 D: 38516 Ptnml(0-2): 238; 8900; 21024; 9142; 292  passed LTC https://tests.stockfishchess.org/tests/view/61baf77557a0d0f327c2eb8e LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 158400 W: 41134 L: 40572 D: 76694 Ptnml(0-2): 101; 16372; 45745; 16828; 154  closes https://github.com/official-stockfish/Stockfish/pull/3862  bench 4651538,True,5,2021-12-01
gsobala,snicolet,2021-12-17 17:52:09+00:00,Fix for profile-build failure using gcc on MacOS  Fixes https://github.com/official-stockfish/Stockfish/issues/3846 ; where the profiling SF binary generated by GCC on MacOS would launch but failed to quit. Tested with gcc-8; gcc9; gcc10; gcc-11.  The problem can be fixed by adding -fvisibility=hidden to the compiler flags; see for example the following piece of Apple documentation: https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html  For instance this now works:    make -j8 profile-build ARCH=x86-64-avx2 COMP=gcc COMPCXX=g++-11  No functional change,True,4,2021-12-01
Unknown,snicolet,2021-12-17 17:37:41+00:00,Remove lowPly history  Seems that after pull request #3731 (Capping stat bonus at 2000) this heuristic is no longer useful.  STC: https://tests.stockfishchess.org/tests/view/61b8d0e2dffbe89a35815444 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 30672 W: 7974 L: 7812 D: 14886 Ptnml(0-2): 106; 3436; 8072; 3634; 88  LTC: https://tests.stockfishchess.org/tests/view/61b8e90cdffbe89a35815a67 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 42448 W: 10884 L: 10751 D: 20813 Ptnml(0-2): 23; 4394; 12267; 4507; 33  closes https://github.com/official-stockfish/Stockfish/pull/3853  bench: 4474950,True,4,2021-12-01
BM123499,snicolet,2021-12-17 17:22:48+00:00,Simplify away singularQuietLMR  While at it; we also update the Elo estimate of reduction at non-PV nodes (source: https://tests.stockfishchess.org/tests/view/61acf97156fcf33bce7d6303 )  STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 243632 W: 62874 L: 63022 D: 117736 Ptnml(0-2): 810; 28024; 64249; 27970; 763 https://tests.stockfishchess.org/tests/view/61b8b1b7dffbe89a35814c0d  LTC: LLR: 2.93 (-2.94;2.94) <-2.25;0.25> Total: 91392 W: 23520 L: 23453 D: 44419 Ptnml(0-2): 51; 9568; 26387; 9643; 47 https://tests.stockfishchess.org/tests/view/61b97316dffbe89a35817da7  closes https://github.com/official-stockfish/Stockfish/pull/3854  bench: 4217785,True,4,2021-12-01
mbabigian,snicolet,2021-12-17 17:12:47+00:00,Update default net to nn-4401e826ebcc.nnue  Using data T60 12/1/20 to 11/2/2021; T74 4/22/21 to 7/27/21; T75 6/3/21 to 10/16/21; T76 (half of the randomly interleaved dataset due to a mistake merging) 11/10/21 to 11/21/21; wrongIsRight_nodes5000pv2.binpack; and WrongIsRight-Reloaded.binpack combined and shuffled position by position.  Trained with LR=4.375e-4 and WDL filtering enabled:  python train.py --smart-fen-skipping --random-fen-skipping 0 --features=HalfKAv2_hm^ --lambda=1.0 --max_epochs=800 --seed 910688689 --batch-size 16384 --progress_bar_refresh_rate 30 --threads 4 --num-workers 4 --gpus 1 --resume-from-model C:\msys64\home\Mike\nnue-pytorch\9b3d.pt E:\trainingdata\T60-T74-T75-T76-WiR-WiRR-PbyP.binpack E:\trainingdata\T60-T74-T75-T76-WiR-WiRR-PbyP.binpack  Passed STC LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 41848 W: 10962 L: 10676 D: 20210 Elo +2.16 Ptnml(0-2): 142; 4699; 11016; 4865; 202 https://tests.stockfishchess.org/tests/view/61ba886857a0d0f327c2cfd6  Passed LTC LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 27776 W: 7208 L: 6953 D: 13615 Elo + 3.00 Ptnml(0-2): 14; 2808; 8007; 3027; 32 https://tests.stockfishchess.org/tests/view/61baae4d57a0d0f327c2d96f  closes https://github.com/official-stockfish/Stockfish/pull/3856  Bench: 4667591,True,4,2021-12-01
vondele,vondele,2021-12-14 12:41:12+00:00,Remove NNUE scaling term  remove pawns scaling; probably correlated with piece scaling; and might be less useful with the recent improved nets. Might allow for another tune of the scaling params.  passed STC https://tests.stockfishchess.org/tests/view/61afdb2e56fcf33bce7df31a LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 280864 W: 72198 L: 72399 D: 136267 Ptnml(0-2): 854; 32356; 74346; 31889; 987  passed LTC https://tests.stockfishchess.org/tests/view/61b233a606b4c2dcb1b16140 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 400136 W: 102669 L: 103012 D: 194455 Ptnml(0-2): 212; 42005; 116047; 41522; 282  closes https://github.com/official-stockfish/Stockfish/pull/3851  Bench: 4735679,True,1,2021-12-01
vondele,vondele,2021-12-13 06:17:25+00:00,Update default net to nn-d93927199b3d.nnue  Using the same dataset as before but slightly reduced initial LR as in https://github.com/vondele/nnue-pytorch/tree/tweakLR1  passed STC: LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 51368 W: 13492 L: 13191 D: 24685 Ptnml(0-2): 168; 5767; 13526; 6042; 181 https://tests.stockfishchess.org/tests/view/61b61f43dffbe89a3580b529  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 45128 W: 11763 L: 11469 D: 21896 Ptnml(0-2): 24; 4583; 13063; 4863; 31 https://tests.stockfishchess.org/tests/view/61b6612edffbe89a3580c447  closes https://github.com/official-stockfish/Stockfish/pull/3848  Bench: 5121336,True,0,2021-12-01
locutus2,vondele,2021-12-11 14:56:38+00:00,Simplify falling eval time factor.  Remove the difference to previous best score in falling eval calculation. As compensation double the effect of the difference to previous best average score.  STC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 86944 W: 22363 L: 22285 D: 42296 Ptnml(0-2): 273; 9227; 24396; 9301; 275 https://tests.stockfishchess.org/tests/view/61b111ce06b4c2dcb1b11546  LTC: LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 134944 W: 34606 L: 34596 D: 65742 Ptnml(0-2): 66; 12941; 41456; 12935; 74 https://tests.stockfishchess.org/tests/view/61b19ca206b4c2dcb1b13a8b  closes https://github.com/official-stockfish/Stockfish/pull/3841  Bench: 4729473,True,5,2021-12-01
vondele,vondele,2021-12-11 14:55:32+00:00,Update Top CPU Contributors  closes https://github.com/official-stockfish/Stockfish/pull/3842  No functional change,True,5,2021-12-01
Vizvezdenec,vondele,2021-12-09 19:50:00+00:00,Adjust singular extension depth restriction  This patch is a modification of original idea by lonfom169 which had a good yellow run - do singular extension search with depth threshold 6 unless this is a PvNode with is a part of a PV line - for them set threshold to 8 instead.  Passed STC https://tests.stockfishchess.org/tests/view/61b1080406b4c2dcb1b1128c LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 84352 W: 21917 L: 21555 D: 40880 Ptnml(0-2): 288; 9524; 22185; 9896; 283  Passed LTC https://tests.stockfishchess.org/tests/view/61b1860a06b4c2dcb1b134a1 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 63520 W: 16575 L: 16237 D: 30708 Ptnml(0-2): 27; 6519; 18350; 6817; 47  https://github.com/official-stockfish/Stockfish/pull/3840  bench 4729473,True,3,2021-12-01
locutus2,snicolet,2021-12-08 16:16:17+00:00,Improve transposition table remplacement strategy  Increase chance that PV node replaces old entry in transposition table.  STC: LLR: 2.93 (-2.94;2.94) <0.00;2.50> Total: 46744 W: 12108 L: 11816 D: 22820 Ptnml(0-2): 156; 5221; 12344; 5477; 174 https://tests.stockfishchess.org/tests/view/61ae068356fcf33bce7d99d0  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 88464 W: 22912 L: 22513 D: 43039 Ptnml(0-2): 84; 9133; 25393; 9544; 78 https://tests.stockfishchess.org/tests/view/61ae973656fcf33bce7db3e1  closes https://github.com/official-stockfish/Stockfish/pull/3839  Bench: 5292488,True,2,2021-12-01
Vizvezdenec,vondele,2021-12-07 17:15:06+00:00,Introduce post-lmr extensions  This idea is somewhat similar to extentions in LMR but has a different flavour. If result of LMR was really good - thus exceeded alpha by some pretty big given margin; we can extend move after LMR in full depth search with 0 window. The idea is that this move is probably a fail high with somewhat of a big probability so extending it makes a lot of sense  passed STC https://tests.stockfishchess.org/tests/view/61ad45ea56fcf33bce7d74b7 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 59680 W: 15531 L: 15215 D: 28934 Ptnml(0-2): 193; 6711; 15734; 6991; 211  passed LTC https://tests.stockfishchess.org/tests/view/61ad9ff356fcf33bce7d8646 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 59104 W: 15321 L: 14992 D: 28791 Ptnml(0-2): 53; 6023; 17065; 6364; 47  closes https://github.com/official-stockfish/Stockfish/pull/3838  bench 4881329,True,1,2021-12-01
Sopel97,vondele,2021-12-07 17:08:54+00:00,Optimize FT activation and affine transform for NEON.  This patch optimizes the NEON implementation in two ways.      The activation layer after the feature transformer is rewritten to make it easier for the compiler to see through dependencies and unroll. This in itself is a minimal; but a positive improvement. Other architectures could benefit from this too in the future. This is not an algorithmic change.     The affine transform for large matrices (first layer after FT) on NEON now utilizes the same optimized code path as >=SSSE3; which makes the memory accesses more sequential and makes better use of the available registers; which allows for code that has longer dependency chains.  Benchmarks from Redshift#161; profile-build with apple clang  george@Georges-MacBook-Air nets % ./stockfish-b82d93 bench 2>&1 | tail -4 (current master) =========================== Total time (ms) : 2167 Nodes searched  : 4667742 Nodes/second    : 2154011 george@Georges-MacBook-Air nets % ./stockfish-7377b8 bench 2>&1 | tail -4 (this patch) =========================== Total time (ms) : 1842 Nodes searched  : 4667742 Nodes/second    : 2534061  This is a solid 18% improvement overall; larger in a bench with NNUE-only; not mixed.  Improvement is also observed on armv7-neon (Raspberry Pi; and older phones); around 5% speedup.  No changes for architectures other than NEON.  closes https://github.com/official-stockfish/Stockfish/pull/3837  No functional changes.,True,1,2021-12-01
vondele,vondele,2021-12-07 11:40:48+00:00,Update default net to nn-63376713ba63.nnue.  same data set as previous trained nets; tuned the wdl model slightly for training. https://github.com/vondele/nnue-pytorch/tree/wdlTweak1  passed STC: https://tests.stockfishchess.org/tests/view/61abe9e456fcf33bce7d2834 LLR: 2.93 (-2.94;2.94) <0.00;2.50> Total: 31720 W: 8385 L: 8119 D: 15216 Ptnml(0-2): 117; 3534; 8273; 3838; 98  passed LTC: https://tests.stockfishchess.org/tests/view/61ac293756fcf33bce7d36cf LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 136136 W: 35255 L: 34741 D: 66140 Ptnml(0-2): 114; 14217; 38894; 14727; 116  closes https://github.com/official-stockfish/Stockfish/pull/3836  Bench: 4667742,True,1,2021-12-01
Vizvezdenec,vondele,2021-12-06 06:42:04+00:00,Assign extra bonus for previous move that caused a fail low more often  This patch allows to assign extra bonus for previous move that caused a fail low not only for PvNodes and cutNodes but also fo some allNodes - namely if the best result we could've got from the search is still far below alpha.  passed STC https://tests.stockfishchess.org/tests/view/61aa26a49e8855bba1a36d96 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 73808 W: 19183 L: 18842 D: 35783 Ptnml(0-2): 251; 8257; 19564; 8564; 268  passed LTC https://tests.stockfishchess.org/tests/view/61aa7dc29e8855bba1a3814f LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 142416 W: 36717 L: 36192 D: 69507 Ptnml(0-2): 106; 14799; 40862; 15346; 95  closes https://github.com/official-stockfish/Stockfish/pull/3835  bench 4724181,True,0,2021-12-01
locutus2,snicolet,2021-12-05 17:13:49+00:00,"Tweak history initialization  Initialize continuation history with a slighlty negative value -71 instead of zero.  The idea is; because the most history entries will be later negative anyway; to shift the starting values a little bit in the ""correct"" direction. Of course the effect of initialization dimishes with greater depth so I had the apprehension that the LTC test would be difficult to pass; but it passed.  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 34520 W: 9076 L: 8803 D: 16641 Ptnml(0-2): 136; 3837; 9047; 4098; 142 https://tests.stockfishchess.org/tests/view/61aa52e39e8855bba1a3776b  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 75568 W: 19620 L: 19254 D: 36694 Ptnml(0-2): 44; 7773; 21796; 8115; 56 https://tests.stockfishchess.org/tests/view/61aa87d39e8855bba1a383a5  closes https://github.com/official-stockfish/Stockfish/pull/3834  Bench: 4674029",True,6,2021-12-01
locutus2,snicolet,2021-12-05 16:56:54+00:00,Tweak time management  Use for adjustment of the falling eval time factor now also the difference between previous best average score and current best score.  STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 109216 W: 28296 L: 27900 D: 53020 Ptnml(0-2): 312; 11759; 30148; 11999; 390 https://tests.stockfishchess.org/tests/view/61aafa8d1b31b85bcfa29d9c  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 54096 W: 14091 L: 13787 D: 26218 Ptnml(0-2): 29; 5124; 16447; 5410; 38 https://tests.stockfishchess.org/tests/view/61abbbbd56fcf33bce7d1d64  closes https://github.com/official-stockfish/Stockfish/pull/3833  Bench: 4829419,True,6,2021-12-01
BM123499,snicolet,2021-12-05 16:50:04+00:00,Simplifies bestMoveChanges from LMR  As bestMoveChanges is only reset on mainThread and it could change how other threads search; a multi-threads test was made.  STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 146776 W: 37934 L: 37941 D: 70901 Ptnml(0-2): 477; 15644; 41173; 15597; 497 https://tests.stockfishchess.org/tests/view/61a8f9f34ed77d629d4ea2d6  LTC: LLR: 3.11 (-2.94;2.94) <-2.25;0.25> Total: 114040 W: 29314 L: 29269 D: 55457 Ptnml(0-2): 50; 10584; 35722; 10599; 65 https://tests.stockfishchess.org/tests/view/61a9d4bf9e8855bba1a35c4f  (SMP; 8 threads) STC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 23888 W: 6308 L: 6143 D: 11437 Ptnml(0-2): 36; 2557; 6600; 2708; 43 https://tests.stockfishchess.org/tests/view/61ac27a756fcf33bce7d3677  closes https://github.com/official-stockfish/Stockfish/pull/3831  bench: 4829419,True,6,2021-12-01
vondele,snicolet,2021-12-04 09:31:22+00:00,Update default net to nn-cdf1785602d6.nnue  Same process as in https://github.com/official-stockfish/Stockfish/commit/e4a0c6c75950bf27b6dc32490a1102499643126b with the training started from the current master net.  passed STC: LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 38224 W: 10023 L: 9742 D: 18459 Ptnml(0-2): 133; 4328; 9940; 4547; 164 https://tests.stockfishchess.org/tests/view/61a8611e4ed77d629d4e836e  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 115176 W: 29783 L: 29321 D: 56072 Ptnml(0-2): 68; 12039; 32936; 12453; 92 https://tests.stockfishchess.org/tests/view/61a8963e4ed77d629d4e8d9b  closes https://github.com/official-stockfish/Stockfish/pull/3830  Bench: 4829419,True,5,2021-12-01
Vizvezdenec,vondele,2021-12-03 07:54:46+00:00,Do more aggressive pruning for some node types  This patch allows more aggressive futility/see based pruning for PV nodes with low delta and non-pv nodes.  Fixes some white space issues.  Passed STC https://tests.stockfishchess.org/tests/view/61a5ed33d16c530b5dcc27cc LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 182088 W: 47121 L: 46584 D: 88383 Ptnml(0-2): 551; 20687; 48037; 21212; 557  Passed LTC https://tests.stockfishchess.org/tests/view/61a74dfdbd5c4360bcded0ac LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 87136 W: 22494 L: 22103 D: 42539 Ptnml(0-2): 38; 8918; 25272; 9295; 45  closes https://github.com/official-stockfish/Stockfish/pull/3828 closes https://github.com/official-stockfish/Stockfish/pull/3829  bench 4332259,True,4,2021-12-01
gcp,vondele,2021-12-03 07:51:06+00:00,Add AVX-VNNI support for Alder Lake and later.  In their infinite wisdom; Intel axed AVX512 from Alder Lake chips (well; not entirely; but we kind of want to use the Gracemont cores for chess!) but still added VNNI support. Confusingly enough; this is not the same as VNNI256 support.  This adds a specific AVX-VNNI target that will use this AVX-VNNI mode; by prefixing the VNNI instructions with the appropriate VEX prefix; and avoiding AVX512 usage.  This is about 1% faster on P cores:  Result of  20 runs ================== base (./clang-bmi2   ) =    3306337  +/- 7519 test (./clang-vnni   ) =    3344226  +/- 7388 diff                   =     +37889  +/- 4153  speedup        = +0.0115 P(speedup > 0) =  1.0000  But a nice 3% faster on E cores:  Result of  20 runs ================== base (./clang-bmi2   ) =    1938054  +/- 28257 test (./clang-vnni   ) =    1994606  +/- 31756 diff                   =     +56552  +/- 3735  speedup        = +0.0292 P(speedup > 0) =  1.0000  This was measured on Clang 13. GCC 11.2 appears to generate worse code for Alder Lake; though the speedup on the E cores is similar.  It is possible to run the engine specifically on the P or E using binding; for example in linux it is possible to use (for an 8 P + 8 E setup like i9-12900K): taskset -c 0-15 ./stockfish taskset -c 16-23 ./stockfish where the first call binds to the P-cores and the second to the E-cores.  closes https://github.com/official-stockfish/Stockfish/pull/3824  No functional change,True,4,2021-12-01
BM123499,vondele,2021-12-01 17:22:44+00:00,Correctly reset bestMoveChanges  for searches not using time management (e.g. analysis; fixed node game play etc); bestMoveChanges was not reset during search iterations. As LMR uses this quantity; search was somewhat weaker.  Tested using fixed node playing games: ``` ./c-chess-cli -each nodes=10000 option.Hash=16 -engine cmd=../Stockfish/src/fix -engine cmd=../Stockfish/src/master -concurrency 6 -openings file=../books/UHO_XXL_+0.90_+1.19.epd -games 10000 Score of Stockfish Fix vs Stockfish Master: 3187 - 3028 - 3785  [0.508] 10000  ./c-chess-cli -each nodes=30000 option.Hash=16 -engine cmd=../Stockfish/src/fix -engine cmd=../Stockfish/src/master -concurrency 6 -openings file=../books/UHO_XXL_+0.90_+1.19.epd -games 10000 Score of Stockfish Fix vs Stockfish Master: 2946 - 2834 - 4220  [0.506] 10000 ```  closes https://github.com/official-stockfish/Stockfish/pull/3818  bench: 5061979,True,2,2021-12-01
BM123499,vondele,2021-12-01 17:10:51+00:00,Simplify reduction on rootNode when bestMoveChanges is high  The reduction introduced in #3736 also consider on rootNode; so we don't have to reduce again.  STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 28736 W: 7494 L: 7329 D: 13913 Ptnml(0-2): 95; 3247; 7503; 3444; 79 https://tests.stockfishchess.org/tests/view/61a3abe01b7fdf52228e74d8  LTC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 47816 W: 12434 L: 12308 D: 23074 Ptnml(0-2): 37; 4972; 13755; 5116; 28 https://tests.stockfishchess.org/tests/view/61a3c3e39f0c43dae1c71d71  closes https://github.com/official-stockfish/Stockfish/pull/3817  bench: 6331638,True,2,2021-12-01
michaelortmann,vondele,2021-12-01 17:07:30+00:00,Fix typos in comments; adjust readme  closes https://github.com/official-stockfish/Stockfish/pull/3822  also adjusts readme as requested in https://github.com/official-stockfish/Stockfish/pull/3816  No functional change,True,2,2021-12-01
Hengyu,vondele,2021-12-01 16:59:20+00:00,Small clean-up  remove unneeded calculation.  closes https://github.com/official-stockfish/Stockfish/pull/3807  No functional change.,True,2,2021-12-01
Unknown,vondele,2021-12-01 16:55:23+00:00,Remove depth dependence and use same limit (2000) as stat_bonus  STC: https://tests.stockfishchess.org/tests/view/619df59dc0a4ea18ba95a424 LLR: 2.96 (-2.94;2.94) <-2.25;0.25> Total: 83728 W: 21329 L: 21242 D: 41157 Ptnml(0-2): 297; 9669; 21847; 9752; 299  LTC: https://tests.stockfishchess.org/tests/view/619e64d7c0a4ea18ba95a475 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 79888 W: 20238 L: 20155 D: 39495 Ptnml(0-2): 57; 8391; 22980; 8444; 73  closes https://github.com/official-stockfish/Stockfish/pull/3806  bench: 6792010,True,2,2021-12-01
noobpwnftw,snicolet,2021-11-30 19:57:47+00:00,"Enable compilation on older Windows systems  Improve compatibility of the last NUMA patch when running under older versions of Windows; for instance Windows Server 2003. Reported by user ""g3g6"" in the following comments: https://github.com/official-stockfish/Stockfish/commit/7218ec4df9fef1146a451b71f0ed3bfd8123c9f9  Closes https://github.com/official-stockfish/Stockfish/pull/3821  No functional change",True,1,2021-11-01
vondele,snicolet,2021-11-29 11:56:01+00:00,Update default net to nn-4f56ecfca5b7.nnue  New net trained with nnue-pytorch; started from a master net on a data set of Leela (T60.binpack+T74.binpck) Stockfish data (wrongIsRight_nodes5000pv2.binpack); and Michael Babigian's conversion of T60 Leela data (including TB7 rescoring) (farseer.binpack) available as a single interleaved binpack:  https://drive.google.com/file/d/1_sQoWBl31WAxNXma2v45004CIVltytP8/view?usp=sharing  The nnue-pytorch branch used is https://github.com/vondele/nnue-pytorch/tree/wdl  passed STC: https://tests.stockfishchess.org/tests/view/61a3cc729f0c43dae1c71f1b LLR: 2.95 (-2.94;2.94) <0.00;2.50> Total: 49152 W: 12842 L: 12544 D: 23766 Ptnml(0-2): 154; 5542; 12904; 5804; 172  passed LTC: https://tests.stockfishchess.org/tests/view/61a43c6260afd064f2d724f1 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 25528 W: 6676 L: 6425 D: 12427 Ptnml(0-2): 9; 2593; 7315; 2832; 15  closes https://github.com/official-stockfish/Stockfish/pull/3816  Bench: 6885242,True,0,2021-11-01
Vizvezdenec,vondele,2021-11-28 13:25:06+00:00,Refine futility pruning for parent nodes  This patch is a result of refining of tuning vondele did after new net passed and some hand-made values adjustements - excluding changes in other pruning heuristics and rounding value of history divisor to the nearest power of 2.  With this patch futility pruning becomes more aggressive and history influence on it is doubled again.  passed STC https://tests.stockfishchess.org/tests/view/61a2c4c1a26505c2278c150d LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 33848 W: 8841 L: 8574 D: 16433 Ptnml(0-2): 100; 3745; 8988; 3970; 121  passed LTC https://tests.stockfishchess.org/tests/view/61a327ffa26505c2278c26d9 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 22272 W: 5856 L: 5614 D: 10802 Ptnml(0-2): 12; 2230; 6412; 2468; 14  closes https://github.com/official-stockfish/Stockfish/pull/3814  bench 6302543,True,6,2021-11-01
Vizvezdenec,vondele,2021-11-27 13:47:46+00:00,Adjust usage of history in futility pruning  This patch refines 0ac8aca893dd2052f8433e0b4a3d65073266b00f that uses history heuristics in futility pruning. Now it adds main history of the move to in and also increases effect by factor of 2.  passed STC https://tests.stockfishchess.org/tests/view/61a156829e83391467a2b2c9 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 68464 W: 17920 L: 17587 D: 32957 Ptnml(0-2): 239; 7711; 18025; 7992; 265  passed LTC https://tests.stockfishchess.org/tests/view/61a1bde99e83391467a2b305 LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 26088 W: 6926 L: 6674 D: 12488 Ptnml(0-2): 18; 2619; 7531; 2845; 31  closes https://github.com/official-stockfish/Stockfish/pull/3812  bench 6804653,True,5,2021-11-01
vondele,snicolet,2021-11-27 13:26:35+00:00,Tune NNUE scaling params  passed STC: https://tests.stockfishchess.org/tests/view/61a156f89e83391467a2b2cc LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 22816 W: 5896 L: 5646 D: 11274 Ptnml(0-2): 55; 2567; 5961; 2723; 102  passed LTC: https://tests.stockfishchess.org/tests/view/61a1cf3d9e83391467a2b30b LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 17904 W: 4658 L: 4424 D: 8822 Ptnml(0-2): 6; 1821; 5079; 2025; 21  closes https://github.com/official-stockfish/Stockfish/pull/3811  Bench: 7218806,True,5,2021-11-01
vondele,snicolet,2021-11-26 17:16:04+00:00,Update default net to nn-3678835b1d3d.nnue  New net trained with nnue-pytorch; started from the master net on a data set of Leela (T60.binpack+T74.binpck) and Stockfish data (wrongIsRight_nodes5000pv2.binpack); available as a single interleaved binpack:  https://drive.google.com/file/d/12uWZIA3F2cNbraAzQNb1jgf3tq_6HkTr/view?usp=sharing  The nnue-pytorch branch used is https://github.com/vondele/nnue-pytorch/tree/wdl; which has the new feature to filter positions based on the likelihood of the current evaluation leading to the game outcome. It should make it less likely to try to learn from misevaluated positions. Standard options have been used; starting from the master net:     --gpus 1 --threads 4 --num-workers 4 --batch-size 16384 --progress_bar_refresh_rate 300    --smart-fen-skipping --random-fen-skipping 12 --features=HalfKAv2_hm^   --lambda=1.0  Testing with games shows neutral Elo at STC; and good performance at LTC:  STC: https://tests.stockfishchess.org/tests/view/619eb597c0a4ea18ba95a4dc ELO: -0.44 +-1.8 (95%) LOS: 31.2% Total: 40000 W: 10447 L: 10498 D: 19055 Ptnml(0-2): 254; 4576; 10260; 4787; 123  LTC: https://tests.stockfishchess.org/tests/view/619f6e87c0a4ea18ba95a53f ELO: 3.30 +-1.8 (95%) LOS: 100.0% Total: 33062 W: 8560 L: 8246 D: 16256 Ptnml(0-2): 54; 3358; 9352; 3754; 13  passed LTC SPRT: https://tests.stockfishchess.org/tests/view/61a0864e8967bbf894416e65 LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 29376 W: 7663 L: 7396 D: 14317 Ptnml(0-2): 67; 3017; 8205; 3380; 19  closes https://github.com/official-stockfish/Stockfish/pull/3808  Bench: 7011501,True,4,2021-11-01
Vizvezdenec,vondele,2021-11-25 18:38:03+00:00,Use fraction of history heuristics in futility pruning  This idea is somewhat of a respin of smth we had in futility pruning and that was simplified away - dependence of it not only on static evaluation of position but also on move history heuristics. Instead of aborting it when they are high there we use fraction of their sum to adjust static eval pruning criteria.  passed STC https://tests.stockfishchess.org/tests/view/619bd438c0a4ea18ba95a27d LLR: 2.93 (-2.94;2.94) <0.00;2.50> Total: 113704 W: 29284 L: 28870 D: 55550 Ptnml(0-2): 357; 12884; 30044; 13122; 445  passed LTC https://tests.stockfishchess.org/tests/view/619cb8f0c0a4ea18ba95a334 LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 147136 W: 37307 L: 36770 D: 73059 Ptnml(0-2): 107; 15279; 42265; 15804; 113  closes https://github.com/official-stockfish/Stockfish/pull/3805  bench 6777918,True,3,2021-11-01
locutus2,snicolet,2021-11-23 20:23:28+00:00,Less futility pruning.  Disable futility pruning at former PV nodes stored in the transposition table.  STC: LLR: 2.96 (-2.94;2.94) <0.00;2.50> Total: 102256 W: 25708 L: 25318 D: 51230 Ptnml(0-2): 276; 11511; 27168; 11893; 280 https://tests.stockfishchess.org/tests/view/61990b3135c7c6348cb602db  LTC: LLR: 2.96 (-2.94;2.94) <0.50;3.00> Total: 183304 W: 46027 L: 45408 D: 91869 Ptnml(0-2): 96; 19029; 52778; 19658; 91 https://tests.stockfishchess.org/tests/view/619a0d1b35c7c6348cb603bc  closes https://github.com/official-stockfish/Stockfish/pull/3804  Bench: 7334766,True,1,2021-11-01
noobpwnftw,vondele,2021-11-22 12:31:13+00:00,Revert and fix earlier windows NUMA patch  revert https://github.com/official-stockfish/Stockfish/commit/9048ac00db12a9ac48bff9b9eb145b30ff88d984 due to core spread problem and fix new OS compatibility with another method.  This code assumes that if one NUMA node has more than one processor groups; they are created equal(having equal amount of cores assigned to each of the groups); and also the total number of available cores contained in such groups are equal to the number of available cores within one NUMA node because of how best_node function works.  closes https://github.com/official-stockfish/Stockfish/pull/3798 fixes https://github.com/official-stockfish/Stockfish/pull/3787  No functional change.,True,0,2021-11-01
vondele,snicolet,2021-11-21 20:56:13+00:00,Remove appveyor CI  retire msvc support and corresponding CI. No active development happens on msvc; and build is much slower or wrong.  gcc (mingw) is our toolchain of choice also on windows; and the latter is tested.  No functional change,True,6,2021-11-01
snicolet,snicolet,2021-11-21 20:18:08+00:00,"Introduce Optimism  Current master implements a scaling of the raw NNUE output value with a formula equivalent to 'eval = alpha * NNUE_output'; where the scale factor alpha varies between 1.8 (for early middle game) and 0.9 (for pure endgames). This feature allows Stockfish to keep material on the board when she thinks she has the advantage; and to seek exchanges and simplifications when she thinks she has to defend.  This patch slightly offsets the turning point between these two strategies; by adding to Stockfish's evaluation a small ""optimism"" value before actually doing the scaling. The effect is that SF will play a little bit more risky; trying to keep the tension a little bit longer when she is defending; and keeping even more material on the board when she has an advantage.  We note that this patch is similar in spirit to the old ""Contempt"" idea we used to have in classical Stockfish; but this implementation differs in two key points:    a) it has been tested as an Elo-gainer against master;    b) the values output by the search are not changed on average by the implementation      (in other words; the optimism value changes the tension/exchange strategy; but a      displayed value of 1.0 pawn has the same signification before and after the patch).  See the old comment https://github.com/official-stockfish/Stockfish/pull/1361#issuecomment-359165141 for some images illustrating the ideas.  -------  finished yellow at STC: LLR: -2.94 (-2.94;2.94) <0.00;2.50> Total: 165048 W: 41705 L: 41611 D: 81732 Ptnml(0-2): 565; 18959; 43245; 19327; 428 https://tests.stockfishchess.org/tests/view/61942a3dcd645dc8291c876b  passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 121656 W: 30762 L: 30287 D: 60607 Ptnml(0-2): 87; 12558; 35032; 13095; 56 https://tests.stockfishchess.org/tests/view/61962c58cd645dc8291c8877  -------  How to continue from there?  a) the shape (slope and amplitude) of the sigmoid used to compute the optimism value    could be tweaked to try to gain more Elo; so the parameters of the sigmoid function    in line 391 of search.cpp could be tuned with SPSA. Manual tweaking is also possible    using this Desmos page: https://www.desmos.com/calculator/jhh83sqq92  b) in a similar vein; with two recents patches affecting the scaling of the NNUE    evaluation in evaluate.cpp; now could be a good time to try a round of SPSA tuning    of the NNUE network;  c) this patch will tend to keep tension in middlegame a little bit longer; so any    patch improving the defensive aspect of play via search extensions in risky;    tactical positions would be welcome.  -------  closes https://github.com/official-stockfish/Stockfish/pull/3797  Bench: 6184852",True,6,2021-11-01
Vizvezdenec,vondele,2021-11-15 17:20:10+00:00,Simplify Pv nodes related logic in LMR  Instead of having 2 separate conditions for Pv nodes reductions we can actually write them together. Despite it's not being strictly logically the same bench actually doesn't change up to depth 20; so them interacting is really rare and thus it's just a removal of extra PvNode check most of the time.  passed STC: https://tests.stockfishchess.org/tests/view/618ce27cd7a085ad008ef4e9 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 37488 W: 9424 L: 9279 D: 18785 Ptnml(0-2): 90; 3903; 10634; 4006; 111  passed LTC: https://tests.stockfishchess.org/tests/view/618d2585d7a085ad008ef527 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 49968 W: 12449 L: 12331 D: 25188 Ptnml(0-2): 27; 4745; 15309; 4889; 14  closes https://github.com/official-stockfish/Stockfish/pull/3792  Bench: 6339548,True,0,2021-11-01
noobpwnftw,vondele,2021-11-15 17:19:53+00:00,"Fix processor group binding under Windows.  Starting with Windows Build 20348 the behavior of the numa API has been changed: https://docs.microsoft.com/en-us/windows/win32/procthread/numa-support  Old code only worked because there was probably a limit on how many cores/threads can reside within one NUMA node; and the OS creates extra NUMA nodes when necessary; however the actual mechanism of core binding is done by ""Processor Groups""(https://docs.microsoft.com/en-us/windows/win32/procthread/processor-groups). With a newer OS; one NUMA node can have many such ""Processor Groups"" and we should just consistently use the number of groups to bind the threads instead of deriving the topology from the number of NUMA nodes.  This change is required to spread threads on all cores on Windows 11 with a 3990X CPU. It has only 1 NUMA node with 2 groups of 64 threads each.  closes https://github.com/official-stockfish/Stockfish/pull/3787  No functional change.",True,0,2021-11-01
vondele,snicolet,2021-11-10 23:56:57+00:00,Tune a few NNUE related scaling parameters  passed STC LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 102480 W: 26099 L: 25708 D: 50673 Ptnml(0-2): 282; 11637; 27003; 12044; 274 https://tests.stockfishchess.org/tests/view/618820e3d7a085ad008ef1dd  passed LTC LLR: 2.93 (-2.94;2.94) <0.50;3.00> Total: 165512 W: 41689 L: 41112 D: 82711 Ptnml(0-2): 82; 17255; 47510; 17822; 87 https://tests.stockfishchess.org/tests/view/6188b470d7a085ad008ef239  closes https://github.com/official-stockfish/Stockfish/pull/3784  Bench: 6339548,True,2,2021-11-01
BM123499,snicolet,2021-11-08 12:14:18+00:00,Simplify away the Reverse Move penalty  This simplifies the penalty for reverse move introduced in https://github.com/official-stockfish/Stockfish/pull/2294 .  STC: LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 81696 W: 20627 L: 20540 D: 40529 Ptnml(0-2): 221; 9390; 21559; 9437; 241 https://tests.stockfishchess.org/tests/view/618810acd7a085ad008ef1cc  LTC: LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 44136 W: 11021 L: 10890 D: 22225 Ptnml(0-2): 28; 4570; 12746; 4691; 33 https://tests.stockfishchess.org/tests/view/61885686d7a085ad008ef20b  closes https://github.com/official-stockfish/Stockfish/pull/3781  bench: 6547978,True,0,2021-11-01
vondele,snicolet,2021-11-08 12:03:52+00:00,Reduce use of lazyEval  In case the evaluation at root is large; discourage the use of lazyEval.  This fixes https://github.com/official-stockfish/Stockfish/issues/3772 or at least improves it significantly. In this case; poor play with large odds can be observed; in extreme cases leading to a loss despite large advantage:  r1bq1b1r/ppp3p1/3p1nkp/n3p3/2B1P2N/2NPB3/PPP2PPP/R3K2R b KQ - 5 9  With this patch the poor move is only considered up to depth 13; in master up to depth 28.  The patch did not pass at LTC with Elo gainer bounds; but with slightly positive Elo nevertheless (95% LOS).  STC: LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 40368 W: 10318 L: 10041 D: 20009 Ptnml(0-2): 103; 4493; 10725; 4750; 113 https://tests.stockfishchess.org/tests/view/61800ad259e71df00dcc420d  LTC: LLR: -2.94 (-2.94;2.94) <0.50;3.00> Total: 212288 W: 52997 L: 52692 D: 106599 Ptnml(0-2): 112; 22038; 61549; 22323; 122 https://tests.stockfishchess.org/tests/view/618050d959e71df00dcc426d  closes https://github.com/official-stockfish/Stockfish/pull/3780  Bench: 7127040,True,0,2021-11-01
locutus2,vondele,2021-11-05 21:22:30+00:00,Tweak initial aspiration window.  Maintain for each root move an exponential average of the search value with a weight ratio of 2:1 (new value vs old values). Then the average score is used as the center of the initial aspiration window instead of the previous score.  Stats indicate (see PR) that the deviation for previous score is in general greater than using average score; so later seems a better estimation of the next search value. This is probably the reason this patch succeded besides smoothing the sometimes wild swings in search score. An additional observation is that at higher depth previous score is above but average score below zero. So for average score more/less fail/low highs should be occur than previous score.  STC: LLR: 2.97 (-2.94;2.94) <0.00;2.50> Total: 59792 W: 15106 L: 14792 D: 29894 Ptnml(0-2): 144; 6718; 15869; 7010; 155 https://tests.stockfishchess.org/tests/view/61841612d7a085ad008eef06  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.00> Total: 46448 W: 11835 L: 11537 D: 23076 Ptnml(0-2): 21; 4756; 13374; 5050; 23 https://tests.stockfishchess.org/tests/view/618463abd7a085ad008eef3e  closes https://github.com/official-stockfish/Stockfish/pull/3776  Bench: 6719976,True,4,2021-11-01
vondele,vondele,2021-11-05 21:20:37+00:00,do not store qsearch positions in TT as exact.  in qsearch don't store positions in TT with the exact flag.  passed STC: https://tests.stockfishchess.org/tests/view/617f9a29af49befdeee40231 LLR: 2.95 (-2.94;2.94) <-2.25;0.25> Total: 155568 W: 39003 L: 39022 D: 77543 Ptnml(0-2): 403; 17854; 41305; 17803; 419  passed LTC: https://tests.stockfishchess.org/tests/view/6180d47259e71df00dcc42a5 LLR: 2.94 (-2.94;2.94) <-2.25;0.25> Total: 79640 W: 19993 L: 19910 D: 39737 Ptnml(0-2): 37; 8356; 22957; 8427; 43  closes https://github.com/official-stockfish/Stockfish/pull/3775  Bench: 7531210,True,4,2021-11-01
Vizvezdenec,vondele,2021-11-05 21:18:59+00:00,Do more reductions at Pv nodes with low delta  This patch increases reduction for PvNodes that have their delta (difference between beta and alpha) significantly reduced compared to what it was at root.  passed STC https://tests.stockfishchess.org/tests/view/617f9063af49befdeee40226 LLR: 2.94 (-2.94;2.94) <0.00;2.50> Total: 220840 W: 55752 L: 55150 D: 109938 Ptnml(0-2): 583; 24982; 58712; 25536; 607  passed LTC https://tests.stockfishchess.org/tests/view/61815de959e71df00dcc42ed LLR: 2.95 (-2.94;2.94) <0.50;3.00> Total: 79000 W: 19937 L: 19562 D: 39501 Ptnml(0-2): 36; 8190; 22674; 8563; 37  closes https://github.com/official-stockfish/Stockfish/pull/3774  bench: 6717808,True,4,2021-11-01
lonfom169,vondele,2021-11-05 21:15:53+00:00,More futility pruning  Expand maximum allowed eval by 50% in futility pruning; above the VALUE_KNOWN_WIN.  STC: LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 128208 W: 32534 L: 32192 D: 63482 Ptnml(0-2): 298; 13484; 36216; 13790; 316 https://tests.stockfishchess.org/tests/view/6179c069a9b1d8fbcc4ee716  LTC: LLR: 2.96 (-2.94;2.94) <0.50;3.50> Total: 89816 W: 22645 L: 22265 D: 44906 Ptnml(0-2): 41; 8404; 27650; 8760; 53 https://tests.stockfishchess.org/tests/view/617ad728f411ea45cc39f895  closes https://github.com/official-stockfish/Stockfish/pull/3767  bench: 6804175,True,4,2021-11-01
vondele,vondele,2021-11-01 05:28:37+00:00,Restore development version  No functional change,True,0,2021-11-01
Unknown,vondele,2021-10-31 21:43:38+00:00,Simplify Skill implementation  Currently we handle the UCI_Elo with a double randomization. This seems not necessary and a bit involuted.  This patch removes the first randomization and unifies the 2 cases.  closes https://github.com/official-stockfish/Stockfish/pull/3769  No functional change.,True,6,2021-10-01
vdbergh,vondele,2021-10-31 21:40:41+00:00,Do not output to stderr during the build.  To help with debugging; the worker sends the output of stderr (suitable truncated) to the action log on the server; in case a build fails. For this to work it is important that there is no spurious output to stderr.  closes https://github.com/official-stockfish/Stockfish/pull/3773  No functional change,True,6,2021-10-01
locutus2,vondele,2021-10-31 21:31:55+00:00,Do more deeper LMR searches.  At expected cut nodes allow at least one ply deeper LMR search for the first seventh moves.  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 42880 W: 10964 L: 10738 D: 21178 Ptnml(0-2): 105; 4565; 11883; 4773; 114 https://tests.stockfishchess.org/tests/view/6179abd7a9b1d8fbcc4ee6f4  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 66872 W: 16930 L: 16603 D: 33339 Ptnml(0-2): 36; 6509; 20024; 6826; 41 https://tests.stockfishchess.org/tests/view/617a30fb2fbca9ca65972b5e  closes https://github.com/official-stockfish/Stockfish/pull/3770  Bench: 6295536,True,6,2021-10-01
vondele,vondele,2021-10-31 21:30:01+00:00,Widen the aspiration window for larger evals  passed STC LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 36840 W: 9359 L: 9134 D: 18347 Ptnml(0-2): 111; 4130; 9722; 4337; 120 https://tests.stockfishchess.org/tests/view/617c601301c6d0988731d10a  passed LTC LLR: 2.98 (-2.94;2.94) <0.50;3.50> Total: 64824 W: 16377 L: 16043 D: 32404 Ptnml(0-2): 27; 6712; 18618; 7010; 45 https://tests.stockfishchess.org/tests/view/617c720d01c6d0988731d114  closes https://github.com/official-stockfish/Stockfish/pull/3768  Bench: 7683058,True,6,2021-10-01
vondele,snicolet,2021-10-28 05:38:19+00:00,Stockfish 14.1  Official release version of Stockfish 14.1  Bench: 6334068  ---  Today; we have the pleasure to announce Stockfish 14.1.  As usual; downloads will be freely available at stockfishchess.org/download [1].  With Stockfish 14.1 our users get access to the strongest chess engine available today. In the period leading up to this release; Stockfish convincingly won several chess engine tournaments; including the TCEC 21 superfinal; the TCEC Cup 9; and the Computer Chess Championship for Fischer Random Chess (Chess960). In the latter tournament; Stockfish was undefeated in 599 out of 600 games played.  Compared to Stockfish 14; this release introduces a more advanced NNUE architecture and various search improvements. In self play testing; using a book of balanced openings; Stockfish 14.1 wins three times more game pairs than it loses [2]. At this high level; draws are very common; so the Elo difference to Stockfish 14 is about 17 Elo. The NNUE evaluation method; introduced to top level chess with Stockfish 12 about one year ago [3]; has now been adopted by several other strong CPU based chess engines.  The Stockfish project builds on a thriving community of enthusiasts (thanks everybody!) that contribute their expertise; time; and resources to build a free and open-source chess engine that is robust; widely available; and very strong. We invite our chess fans to join the fishtest testing framework and programmers to contribute to the project [4].  Stay safe and enjoy chess!  The Stockfish team  [1] https://stockfishchess.org/download/ [2] https://tests.stockfishchess.org/tests/view/6175c320af70c2be1788fa2b [3] https://github.com/official-stockfish/Stockfish/discussions/3628 [4] https://stockfishchess.org/get-involved/,True,3,2021-10-01
Unknown,snicolet,2021-10-25 10:26:44+00:00,Fix sometimes incorrect key for prefetches  STC https://tests.stockfishchess.org/tests/view/61737b4f6ce927be32558401 LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 138712 W: 34914 L: 34942 D: 68856 Ptnml(0-2): 421; 14817; 38894; 14817; 407  Very minor tweak since Position::key() depends on the 50 move rule counter. Comments: https://github.com/mstembera/Stockfish/commit/cddde31eed505cdf0c4fc8ff96b89f6e39c797e1  closes https://github.com/official-stockfish/Stockfish/pull/3759  No functional change,True,0,2021-10-01
vondele,snicolet,2021-10-24 20:17:55+00:00,Adjust ButterflyHistory decay parameter  passed STC: LLR: 2.98 (-2.94;2.94) <-0.50;2.50> Total: 26680 W: 6807 L: 6593 D: 13280 Ptnml(0-2): 73; 3007; 6989; 3175; 96 https://tests.stockfishchess.org/tests/view/6174094e6ce927be32558441  passed LTC: LLR: 2.98 (-2.94;2.94) <0.50;3.50> Total: 21104 W: 5403 L: 5185 D: 10516 Ptnml(0-2): 8; 2160; 6001; 2372; 11 https://tests.stockfishchess.org/tests/view/61744927351812fe5f969864  closes https://github.com/official-stockfish/Stockfish/pull/3761  Bench: 6334068,True,6,2021-10-01
locutus2,snicolet,2021-10-24 20:13:47+00:00,Double extend search even more via LMR  Allow now for the first five moves a two plies deeper LMR search.  STC: LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 99608 W: 25143 L: 25115 D: 49350 Ptnml(0-2): 291; 11444; 26328; 11428; 313 https://tests.stockfishchess.org/tests/view/61718c9438cb9784038af8d7  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 52064 W: 13234 L: 13145 D: 25685 Ptnml(0-2): 35; 5431; 15014; 5514; 38 https://tests.stockfishchess.org/tests/view/6171e13e38cb9784038af928  closes https://github.com/official-stockfish/Stockfish/pull/3760  Bench: 7222293,True,6,2021-10-01
BM123499,snicolet,2021-10-24 20:08:28+00:00,Simplify LMR multiThread condition  STC (8 threads): LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 110584 W: 27818 L: 27807 D: 54959 Ptnml(0-2): 156; 12089; 30791; 12100; 156 https://tests.stockfishchess.org/tests/view/6172ef436ce927be325583a9  LTC (8 threads): LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 23632 W: 6025 L: 5903 D: 11704 Ptnml(0-2): 5; 2292; 7100; 2414; 5 https://tests.stockfishchess.org/tests/view/6173cf096ce927be32558412  closes https://github.com/official-stockfish/Stockfish/pull/3757  No functional change (in the single-threaded case) Bench: 6689428,True,6,2021-10-01
FauziAkram,vondele,2021-10-23 10:27:32+00:00,Tuning of a Null Move Parameter  STC: LLR: 2.99 (-2.94;2.94) <-0.50;2.50> Total: 78744 W: 19956 L: 19664 D: 39124 Ptnml(0-2): 259; 9005; 20573; 9255; 280 https://tests.stockfishchess.org/tests/view/6172017a38cb9784038af947  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 68528 W: 17309 L: 16964 D: 34255 Ptnml(0-2): 41; 7194; 19455; 7527; 47 https://tests.stockfishchess.org/tests/view/6172994d38cb9784038af983  closes https://github.com/official-stockfish/Stockfish/pull/3756  bench: 6689428,True,5,2021-10-01
BM123499,vondele,2021-10-23 10:23:29+00:00,Increase TTdepth acceptance some Threads  Increase TTdepth acceptance only on half of the Threads  STC: LLR: 2.96 (-2.94;2.94) <-0.50;2.50> Total: 19272 W: 4956 L: 4766 D: 9550 Ptnml(0-2): 25; 1989; 5423; 2169; 30 https://tests.stockfishchess.org/tests/view/6172be6238cb9784038af9a7  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 23688 W: 6111 L: 5897 D: 11680 Ptnml(0-2): 2; 2275; 7081; 2479; 7 https://tests.stockfishchess.org/tests/view/6172e32938cb9784038af9c7  closes https://github.com/official-stockfish/Stockfish/pull/3754  No functional change in the single-threaded case,True,5,2021-10-01
Stefano80,vondele,2021-10-23 10:22:02+00:00,Rewrite NNUE evaluation adjustments  Make the eval code in the evaluate_nnue.cpp more similar to the rest of the codebase:  * remove multiple variable assignment * make if conditions explicit and indent on multiple lines  passed STC LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 59032 W: 14834 L: 14751 D: 29447 Ptnml(0-2): 176; 6310; 16459; 6397; 174 https://tests.stockfishchess.org/tests/view/616f250540f619782fd4f76d  closes https://github.com/official-stockfish/Stockfish/pull/3753  No functional change,True,5,2021-10-01
Unknown,vondele,2021-10-23 10:21:17+00:00,Simplify away ValueListInserter  plus minor cleanups  STC: https://tests.stockfishchess.org/tests/view/616f059b40f619782fd4f73f LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 84992 W: 21244 L: 21197 D: 42551 Ptnml(0-2): 279; 9005; 23868; 9078; 266  closes https://github.com/official-stockfish/Stockfish/pull/3749  No functional change,True,5,2021-10-01
locutus2,snicolet,2021-10-21 10:42:30+00:00,Double extend more often via LMR  Allow for first three moves always a two plies deeper LMR search.  STC: LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 206096 W: 51966 L: 52093 D: 102037 Ptnml(0-2): 664; 23817; 54293; 23530; 744 https://tests.stockfishchess.org/tests/view/616f197d40f619782fd4f75a  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 62384 W: 15567 L: 15492 D: 31325 Ptnml(0-2): 40; 6633; 17777; 6696; 46 https://tests.stockfishchess.org/tests/view/616ffa1b4f0b65a0e231e682  closes https://github.com/official-stockfish/Stockfish/pull/3752  Bench: 6154836,True,3,2021-10-01
BM123499,snicolet,2021-10-21 06:43:43+00:00,Simplify null move search condition  Remove `ss->ttPv` condition on null move search condition  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 80832 W: 20276 L: 20221 D: 40335 Ptnml(0-2): 267; 9335; 21168; 9368; 278 https://tests.stockfishchess.org/tests/view/616ed4a0942d40685e3237c6  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 54184 W: 13464 L: 13377 D: 27343 Ptnml(0-2): 37; 5758; 15435; 5805; 57 https://tests.stockfishchess.org/tests/view/616ef71f40f619782fd4f72d  closes https://github.com/official-stockfish/Stockfish/pull/3750  bench: 6201607,True,3,2021-10-01
BM123499,vondele,2021-10-19 20:14:39+00:00,Adjust TTdepth acceptance on early cutoff  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 63784 W: 16185 L: 15917 D: 31682 Ptnml(0-2): 231; 7309; 16531; 7603; 218 https://tests.stockfishchess.org/tests/view/616ed03a942d40685e3237c0  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 12728 W: 3268 L: 3072 D: 6388 Ptnml(0-2): 8; 1298; 3563; 1480; 15 https://tests.stockfishchess.org/tests/view/616ef156942d40685e32380a  closes https://github.com/official-stockfish/Stockfish/pull/3748  bench: 7050445,True,1,2021-10-01
BM123499,vondele,2021-10-19 20:09:47+00:00,Simplify evaluate condition on search  Remove condition for MOVE_NULL on search.  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 47544 W: 11968 L: 11864 D: 23712 Ptnml(0-2): 150; 5535; 12318; 5599; 170 https://tests.stockfishchess.org/tests/view/616e37143799eb91f1f071ee  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 67472 W: 16938 L: 16870 D: 33664 Ptnml(0-2): 49; 7119; 19331; 7189; 48 https://tests.stockfishchess.org/tests/view/616e3fab3799eb91f1f071f1  closes https://github.com/official-stockfish/Stockfish/pull/3746  bench: 5255771,True,1,2021-10-01
BM123499,snicolet,2021-10-18 19:00:08+00:00,Simplify probCutCount away  Simplify away the limitation in number of moves in probCut.  STC: LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 286768 W: 71888 L: 72133 D: 142747 Ptnml(0-2): 983; 33084; 75471; 32887; 959 https://tests.stockfishchess.org/tests/view/616c9b9b90e1312a3cd0ef0a  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 69312 W: 17243 L: 17176 D: 34893 Ptnml(0-2): 42; 7452; 19614; 7493; 55 https://tests.stockfishchess.org/tests/view/616cebbf4f95b438f7a85f93  closes https://github.com/official-stockfish/Stockfish/pull/3745  bench: 5005810,True,0,2021-10-01
Stefano80,snicolet,2021-10-18 18:45:47+00:00,Reformat Eval::evaluate()  Non functional simplification: the goal of this patch is to make the style in the evaluate() function similar to the rest of the code.  passed STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 95608 W: 24058 L: 24026 D: 47524 Ptnml(0-2): 292; 10379; 26396; 10479; 258 https://tests.stockfishchess.org/tests/view/616c64fd99b580bf37797e4f  closes https://github.com/official-stockfish/Stockfish/pull/3744  Non-functional change,True,0,2021-10-01
snicolet,snicolet,2021-10-17 15:54:39+00:00,Remove noLMRExtension flag  This simplification patch removes the noLMRExtension flag. It was introduced in June (see following link for that commit); but does not seem to be necessary anymore. Link: https://github.com/official-stockfish/Stockfish/commit/e1f181ee643dcaa92c606b74b3abd23dede136cd  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 21200 W: 5369 L: 5228 D: 10603 Ptnml(0-2): 67; 2355; 5616; 2494; 68 https://tests.stockfishchess.org/tests/view/616c03d299b580bf37797dcb  LTC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 37536 W: 9387 L: 9278 D: 18871 Ptnml(0-2): 23; 3988; 10643; 4085; 29 https://tests.stockfishchess.org/tests/view/616c10f499b580bf37797ddd  closes https://github.com/official-stockfish/Stockfish/pull/3743  Bench: 4792969,True,6,2021-10-01
snicolet,vondele,2021-10-17 10:29:11+00:00,Allow some LMR double extensions  Allow some LMR double extensions for the second and third sons of each node.  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 170320 W: 42608 L: 42187 D: 85525 Ptnml(0-2): 516; 19635; 44422; 20086; 501 https://tests.stockfishchess.org/tests/view/616a9e3899b580bf37797cf4  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 74400 W: 18783 L: 18423 D: 37194 Ptnml(0-2): 46; 7812; 21129; 8162; 51 https://tests.stockfishchess.org/tests/view/616b378499b580bf37797d61  closes https://github.com/official-stockfish/Stockfish/pull/3742  Bench: 4877152,True,6,2021-10-01
Stefano80,snicolet,2021-10-15 12:57:01+00:00,Smooth improving  Smooth dependency on improvement margin in null move search.  STC LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 17384 W: 4468 L: 4272 D: 8644 Ptnml(0-2): 42; 1919; 4592; 2079; 60 https://tests.stockfishchess.org/tests/view/61689b8a1e5f6627cc1c0fdc  LTC LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 45648 W: 11525 L: 11243 D: 22880 Ptnml(0-2): 26; 4731; 13036; 4997; 34 https://tests.stockfishchess.org/tests/view/6168a12c1e5f6627cc1c0fe3  It would be interesting to test if the other pruning/reduction heuristics in master which are using the improving variable (ie the sign of improvement) could benefit from a smooth function of the improvement value (or maybe a Relu of the improvement value).  closes https://github.com/official-stockfish/Stockfish/pull/3740  Bench: 4916775,True,4,2021-10-01
vondele,snicolet,2021-10-14 07:58:03+00:00,Compute ttCapture earlier  Compute ttCapture earlier; and reuse.  passed STC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 74128 W: 18640 L: 18578 D: 36910 Ptnml(0-2): 224; 7970; 20649; 7962; 259 https://tests.stockfishchess.org/tests/view/615dd9fa1a32f4036ac7fc4d  closes https://github.com/official-stockfish/Stockfish/pull/3734  No functional change,True,3,2021-10-01
BM123499,snicolet,2021-10-14 07:47:20+00:00,Simplify ttHitAverage away  Simplify ttHitAverage away; which was introduced in the following commit: [here](https://github.com/BM123499/Stockfish/commit/fe124896b241b4791454fd151da10101ad48f6d7)  A few tweaks with Elo gaining bounds have been tried to keep the code; but they all failed: https://tests.stockfishchess.org/tests/view/61656f7683dd501a05b0b292 https://tests.stockfishchess.org/tests/view/6165c0ca83dd501a05b0b2ca https://tests.stockfishchess.org/tests/view/6165bf9683dd501a05b0b2c8 https://tests.stockfishchess.org/tests/view/6165719483dd501a05b0b29b https://tests.stockfishchess.org/tests/view/6166c7fd83dd501a05b0b353 https://tests.stockfishchess.org/tests/view/6166c63b83dd501a05b0b350  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 58504 W: 14781 L: 14694 D: 29029 Ptnml(0-2): 175; 6718; 15426; 6711; 222 https://tests.stockfishchess.org/tests/view/6165112c83dd501a05b0b257  LTC: LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 33480 W: 8448 L: 8332 D: 16700 Ptnml(0-2): 21; 3569; 9447; 3679; 24 https://tests.stockfishchess.org/tests/view/61656fcf83dd501a05b0b294  change https://github.com/official-stockfish/Stockfish/pull/3739  bench: 4540339,True,3,2021-10-01
jhellis3,snicolet,2021-10-13 21:34:23+00:00,Simplify multi-cut condition  Now that the multi-cut condition is safer; we can avoid the cost of the sub-search.  STC: https://tests.stockfishchess.org/tests/view/6165fd9283dd501a05b0b2fe LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 18648 W: 4745 L: 4600 D: 9303 Ptnml(0-2): 47; 2111; 4887; 2208; 71  LTC: https://tests.stockfishchess.org/tests/view/616629ea83dd501a05b0b320 LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 41704 W: 10407 L: 10302 D: 20995 Ptnml(0-2): 35; 4425; 11823; 4538; 31  closes https://github.com/official-stockfish/Stockfish/pull/3738  Bench: 5905086,True,2,2021-10-01
Vizvezdenec,snicolet,2021-10-09 07:59:33+00:00,Reduce more if multiple moves exceed alpha  Idea of this patch is the following: in case we already have four moves that exceeded alpha in the current node; the probability of finding fifth should be reasonably low. Note that four is completely arbitrary - there could and probably should be some tweaks; both in tweaking best move count threshold for more reductions and tweaking how they work - for example making more reductions with best move count linearly.  passed STC: https://tests.stockfishchess.org/tests/view/615f614783dd501a05b0aee2 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 141816 W: 36056 L: 35686 D: 70074 Ptnml(0-2): 499; 15131; 39273; 15511; 494  passed LTC: https://tests.stockfishchess.org/tests/view/615fdff683dd501a05b0af35 LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 68536 W: 17221 L: 16891 D: 34424 Ptnml(0-2): 38; 6573; 20725; 6885; 47  closes https://github.com/official-stockfish/Stockfish/pull/3736  Bench: 6131513,True,5,2021-10-01
Unknown,snicolet,2021-10-07 07:41:57+00:00,Small clean-up; Sept 2021  Closes https://github.com/official-stockfish/Stockfish/pull/3485  No functional change,True,3,2021-10-01
snicolet,snicolet,2021-10-06 10:04:35+00:00,Capping stat bonus at 2000  This patch updates the stat_bonus() function (used in the history tables to help move ordering); keeping the same quadratic for small depths but changing the values for depth >= 9:  The old bonus formula was increasing from zero at depth 1 to 4100 at depth 14; then used the strange; small value of 73 for all depths >= 15.  The new bonus formula increases from 0 at depth 1 to 2000 at depth 8; then keeps 2000 for all depths >= 8.  passed STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 169624 W: 42875 L: 42454 D: 84295 Ptnml(0-2): 585; 19340; 44557; 19729; 601 https://tests.stockfishchess.org/tests/view/615bd69e9d256038a969b97c  passed LTC: LLR: 3.07 (-2.94;2.94) <0.50;3.50> Total: 37336 W: 9456 L: 9191 D: 18689 Ptnml(0-2): 20; 3810; 10747; 4067; 24 https://tests.stockfishchess.org/tests/view/615c75d99d256038a969b9b2  closes https://github.com/official-stockfish/Stockfish/pull/3731  Bench: 6261865,True,2,2021-10-01
vondele,snicolet,2021-10-06 09:57:34+00:00,Improve the Chess960 correction for cornered bishops  As Chess960 patches can not be tested on fishtest; this was locally tuned and tested:  Elo: 2.36 +- 1.07 LOS: 0.999992  closes https://github.com/official-stockfish/Stockfish/pull/3730  Bench: 5714575,True,2,2021-10-01
joergoster,snicolet,2021-10-06 09:53:33+00:00,Time-management fix in MultiPV mode.  When playing games in MultiPV mode we must take care to only track the best move changing for the first PV line. Otherwise; SF will spend most of its time for the initial moves after the book exit.  This has been observed and reported on Discord; but can also be seen in games played in Stefan Pohl's MultiPV experiment.  Tested with MultiPV=4.  STC: https://tests.stockfishchess.org/tests/view/615c24b59d256038a969b990 LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 1744 W: 694 L: 447 D: 603 Ptnml(0-2): 32; 125; 358; 278; 79  LTC: https://tests.stockfishchess.org/tests/view/615c31769d256038a969b993 LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 2048 W: 723 L: 525 D: 800 Ptnml(0-2): 10; 158; 511; 314; 31  closes https://github.com/official-stockfish/Stockfish/pull/3729  Bench: 5714575,True,2,2021-10-01
Vizvezdenec,snicolet,2021-10-03 09:28:19+00:00,Increase reductions with thread count  Respin of multi-thread idea that was simplified away recently: basically doing more reductions with thread count since Lazy SMP naturally widens search. With drawish book this idea got simplified away but with less drawish book it again gains elo; maybe trying to reinstall other ideas that were simplified away previously can be beneficial.  passed STC LLR: 2.96 (-2.94;2.94) <-0.50;2.50> Total: 39736 W: 10205 L: 9986 D: 19545 Ptnml(0-2): 45; 4254; 11064; 4447; 58 https://tests.stockfishchess.org/tests/view/615750702d02f48db3961b00  passed LTC LLR: 2.97 (-2.94;2.94) <0.50;3.50> Total: 60352 W: 15530 L: 15218 D: 29604 Ptnml(0-2): 24; 5900; 18016; 6212; 24 https://tests.stockfishchess.org/tests/view/6157d8935488e26ea5eace7f  closes https://github.com/official-stockfish/Stockfish/pull/3724  Bench 5714575,True,6,2021-10-01
Vizvezdenec,snicolet,2021-09-26 04:58:14+00:00,"Extend quiet tt moves at PvNodes  Idea is to extend some quiet ttMoves if a lot of things indicate that the transposition table move is going to be a good move:  1) move being a killer - so being the best move in nearby node; 2) reply continuation history is really good.  This is basically saying that move is good ""in general"" in this position; that it is a good reply to the opponent move and that it was the best in this position somewhere in search - so extending it makes a lot of sense. In general in past year we had a lot of extensions of different types; maybe there is something more in it :)  passed STC LLR: 2.96 (-2.94;2.94) <-0.50;2.50> Total: 42944 W: 10932 L: 10695 D: 21317 Ptnml(0-2): 141; 4869; 11210; 5116; 136 https://tests.stockfishchess.org/tests/view/614cca8e7bdc23e77ceb89f0  passed LTC LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 156848 W: 39473 L: 38893 D: 78482 Ptnml(0-2): 125; 16327; 44913; 16961; 98 https://tests.stockfishchess.org/tests/view/614cf93d7bdc23e77ceb8a13  closes https://github.com/official-stockfish/Stockfish/pull/3719  Bench: 5714575",True,6,2021-09-01
snicolet,vondele,2021-09-25 20:12:17+00:00,Reduction instead of cutoff  In master; during singular move analysis; when both the transposition value and a reduced search for the other moves seem to indicate a fail high; we heuristically prune the whole subtree and return an fail high score.  This patch is a little bit more cautious in this case; and instead of the risky cutoff; we now search the ttMove with a reduced depth (by two plies).  STC: https://tests.stockfishchess.org/tests/view/614dafe07bdc23e77ceb8a89 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 46728 W: 11909 L: 11666 D: 23153 Ptnml(0-2): 181; 5288; 12168; 5561; 166  LTC: https://tests.stockfishchess.org/tests/view/614dc84abe4c07e0ecac3c95 LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 74520 W: 18809 L: 18450 D: 37261 Ptnml(0-2): 45; 7735; 21346; 8084; 50  closes https://github.com/official-stockfish/Stockfish/pull/3718  Bench: 5499262,True,5,2021-09-01
OfekShochat,vondele,2021-09-24 21:17:48+00:00,Range reductions  adding reductions for when the delta between the static eval and the child's eval is consistently low.  passed STC https://tests.stockfishchess.org/html/live_elo.html?614d7b3c7bdc23e77ceb8a5d LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 88872 W: 22672 L: 22366 D: 43834 Ptnml(0-2): 343; 10150; 23117; 10510; 316  passed LTC https://tests.stockfishchess.org/html/live_elo.html?614daf3e7bdc23e77ceb8a82 LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 24368 W: 6153 L: 5928 D: 12287 Ptnml(0-2): 13; 2503; 6937; 2708; 23  closes https://github.com/official-stockfish/Stockfish/pull/3717  Bench: 5443950,True,4,2021-09-01
snicolet,snicolet,2021-09-23 21:24:28+00:00,Tweak doubly singular condition (Topo's patch)  This patch relax a little bit the condition for doubly singular moves (ie moves that are so forced that we think that they deserve a local double extension of the search). We lower the margin and allow up to six such double extensions in the path between the root and the critical node.  Original idea by Siad Daboul (@TopoIogist) in PR #3709  Tested with the previous commit:  passed STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 33048 W: 8458 L: 8236 D: 16354 Ptnml(0-2): 120; 3701; 8660; 3923; 120 https://tests.stockfishchess.org/tests/view/614b24347bdc23e77ceb88fe  passed LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 54176 W: 13712 L: 13406 D: 27058 Ptnml(0-2): 36; 5653; 15399; 5969; 31 https://tests.stockfishchess.org/tests/view/614b3b727bdc23e77ceb8911  closes https://github.com/official-stockfish/Stockfish/pull/3714  Bench: 5792377,True,3,2021-09-01
snicolet,snicolet,2021-09-23 21:19:06+00:00,Detect search explosions  This patch detects some search explosions (due to double extensions in search.cpp) which can happen in some pathological positions; and takes measures to ensure progress in search even for these pathological situations.  While a small number of double extensions can be useful during search (for example to resolve a tactical sequence); a sustained regime of double extensions leads to search explosion and a non-finishing search. See the discussion in https://github.com/official-stockfish/Stockfish/pull/3544 and the issue https://github.com/official-stockfish/Stockfish/issues/3532 .  The implemented algorithm is the following:  a) at each node during search; store the current depth in the stack.    Double extensions are by definition levels of the stack where the    depth at ply N is strictly higher than depth at ply N-1.  b) during search; calculate for each thread a running average of the    number of double extensions in the last 4096 visited nodes.  c) if one thread has more than 2% of double extensions for a sustained    period of time (6 millions consecutive nodes; or about 4 seconds on    my iMac); we decide that this thread is in an explosion state and    we calm down this thread by preventing it to do any double extension    for the next 6 millions nodes.  To calculate the running averages; we also introduced a auxiliary class generalizing the computations of ttHitAverage variable we already had in code. The implementation uses an exponential moving average of period 4096 and resolution 1/1024; and all computations are done with integers for efficiency.  -----------  Example where the patch solves a search explosion:  ```    ./stockfish    ucinewgame    position fen 8/Pk6/8/1p6/8/P1K5/8/6B1 w - - 37 130    go infinite ```  This algorithm does not affect search in normal; non-pathological positions. We verified; for instance; that the usual bench is unchanged up to depth 20 at least; and that the node numbers are unchanged for a search of the starting position at depth 32.  -------------  See https://github.com/official-stockfish/Stockfish/pull/3714  Bench: 5575265,True,3,2021-09-01
Vizvezdenec,vondele,2021-09-21 17:48:40+00:00,Combo of various parameter tweaks  Combination of parameter tweaks in search; evaluation and time management. Original patches by snicolet xoto10 lonfom169 and Vizvezdenec.  Includes:  * Use bigger grain of positional evaluation more frequently (up to 1 exchange difference in non-pawn-material); * More extra time according to increment; * Increase margin for singular extensions; * Do more aggresive parent node futility pruning.  Passed STC https://tests.stockfishchess.org/tests/view/6147deab3733d0e0dd9f313d LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 45488 W: 11691 L: 11450 D: 22347 Ptnml(0-2): 145; 5208; 11824; 5395; 172  Passed LTC https://tests.stockfishchess.org/tests/view/6147f1d53733d0e0dd9f3141 LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 62520 W: 15808 L: 15482 D: 31230 Ptnml(0-2): 43; 6439; 17960; 6785; 33  closes https://github.com/official-stockfish/Stockfish/pull/3710  bench 5575265,True,1,2021-09-01
Unknown,vondele,2021-09-17 06:14:36+00:00,Increase optimumTime by 10%  STC 10+0.1 : LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 47032 W: 12078 L: 11841 D: 23113 Ptnml(0-2): 159; 5098; 12746; 5373; 140 https://tests.stockfishchess.org/tests/view/613f9df1f29dda16fcca8731  LTC 60+0.6 : LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 66248 W: 16631 L: 16301 D: 33316 Ptnml(0-2): 44; 6560; 19578; 6906; 36 https://tests.stockfishchess.org/tests/view/6140603d7315e7c73204a4c1  Non-regression tests with other time control styles:  Moves/Time 40/10+0 : LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 51640 W: 13350 L: 13254 D: 25036 Ptnml(0-2): 183; 5770; 13797; 5908; 162 https://tests.stockfishchess.org/tests/view/6141592b7315e7c73204a599  TCEC Style 10+0.01 : LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 20592 W: 5300 L: 5157 D: 10135 Ptnml(0-2): 81; 2240; 5544; 2317; 114 https://tests.stockfishchess.org/tests/view/61425bb27315e7c73204a6a2  Sudden death 15+0 : LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 127104 W: 32728 L: 32741 D: 61635 Ptnml(0-2): 735; 13973; 34149; 13960; 735 https://tests.stockfishchess.org/tests/view/614256a77315e7c73204a699  The first 3 tests were run with an initial version of the code; which was then modified to make the amount of extra time dependent on the size of increment. No increment gives no extra time; and the extra time given increases until an increment of 1% or more of remaining time gives 10% extra thinking time.  closes https://github.com/official-stockfish/Stockfish/pull/3702  Bench 6658747,True,4,2021-09-01
SFisGOD,vondele,2021-09-15 15:50:20+00:00,Update default net to nn-13406b1dcbe0.nnue  SPSA 1: https://tests.stockfishchess.org/tests/view/6134abc425b9b35584838572 Parameters: A total of 64 net biases were tuned (hidden layer 1) Base net: nn-6762d36ad265.nnue New net: nn-c9fdeea14cb2.nnue  SPSA 2: https://tests.stockfishchess.org/tests/view/61355b7e25b9b3558483860e Parameters: 256 net weights and 8 net biases (output layer) Base net: nn-c9fdeea14cb2.nnue New net: nn-0ddc28184f4c.nnue  SPSA 3: https://tests.stockfishchess.org/tests/view/613737be0cd98ab40c0c9e4e Parameters: A total of 256 net biases were tuned (hidden layer 2) Base net: nn-0ddc28184f4c.nnue New net: nn-2419828bb394.nnue  SPSA 4: https://tests.stockfishchess.org/tests/view/613966ff689039fce12e0fe7 Parameters: A total of 64 net biases were tuned (hidden layer 1) Base net: nn-2419828bb394.nnue New net: nn-05d9b1ee3037.nnue  SPSA 5: https://tests.stockfishchess.org/tests/view/613b4a38689039fce12e1209 Parameters: 256 net weights and 8 net biases (output layer) Base net: nn-05d9b1ee3037.nnue New net: nn-98c6ce0fc15f.nnue  SPSA 6: https://tests.stockfishchess.org/tests/view/613e331515591e7c9ebc3fe9 Parameters: A total of 256 net biases were tuned (hidden layer 2) Base net: nn-98c6ce0fc15f.nnue New net: nn-13406b1dcbe0.nnue  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 82008 W: 21044 L: 20752 D: 40212 Ptnml(0-2): 264; 9341; 21525; 9587; 287 https://tests.stockfishchess.org/tests/view/613f7c6cf29dda16fcca870c  LTC: LLR: 2.96 (-2.94;2.94) <0.50;3.50> Total: 182928 W: 46258 L: 45602 D: 91068 Ptnml(0-2): 107; 19448; 51712; 20076; 121 https://tests.stockfishchess.org/tests/view/613fccb97315e7c73204a48c  Closes #3703  Bench: 6658747,True,2,2021-09-01
Unknown,vondele,2021-09-12 16:03:56+00:00,Update 2 search parameters after tune.  A tuning run on 3 search parameters was done with 200k games; narrow ranges (50-150%) and a small value for A (3% of total games) : https://tests.stockfishchess.org/tests/view/613b5f4b689039fce12e1220  STC 10+0.1 : LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 73112 W: 18800 L: 18520 D: 35792 Ptnml(0-2): 205; 8395; 19115; 8597; 244 https://tests.stockfishchess.org/tests/view/613cb8d2689039fce12e1308  LTC 60+0.6 : LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 45616 W: 11604 L: 11321 D: 22691 Ptnml(0-2): 24; 4769; 12946; 5038; 31 https://tests.stockfishchess.org/tests/view/613d07048253e53e97b55b32  closes https://github.com/official-stockfish/Stockfish/pull/3698  Bench 6504816,True,6,2021-09-01
Vizvezdenec,snicolet,2021-09-10 09:50:43+00:00,Decrease depth for cutnodes with no tt move  By analogy to existing logic of decreasing depth for PvNodes w/o tt move do the same for cutNodes.  Passed STC https://tests.stockfishchess.org/tests/view/613abf5a689039fce12e1155 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 90336 W: 23108 L: 22804 D: 44424 Ptnml(0-2): 286; 10316; 23642; 10656; 268  Passed LTC https://tests.stockfishchess.org/tests/view/613ae330689039fce12e1172 LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 37736 W: 9607 L: 9346 D: 18783 Ptnml(0-2): 21; 3917; 10730; 4180; 20  closes https://github.com/official-stockfish/Stockfish/pull/3697  bench 5891181,True,4,2021-09-01
locutus2,snicolet,2021-09-07 17:59:14+00:00,Further improve history updates  Now even double history updates if a search failed low at an expected PV or CUT node.  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 30736 W: 7891 L: 7674 D: 15171 Ptnml(0-2): 90; 3477; 8017; 3694; 90 https://tests.stockfishchess.org/tests/view/61364ae30cd98ab40c0c9da5  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 73600 W: 18684 L: 18326 D: 36590 Ptnml(0-2): 41; 7734; 20899; 8078; 48 https://tests.stockfishchess.org/tests/view/6136940f0cd98ab40c0c9df3  closes https://github.com/official-stockfish/Stockfish/pull/3694  Bench: 6030657,True,1,2021-09-01
locutus2,snicolet,2021-09-06 12:19:47+00:00,Improve history updates  If a search failed low at an expected PV or CUT node do greater history updates.  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 95112 W: 24293 L: 23982 D: 46837 Ptnml(0-2): 285; 10893; 24906; 11170; 302 https://tests.stockfishchess.org/tests/view/6132aa1a2ffb3c36aceb926f  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 116352 W: 29450 L: 28975 D: 57927 Ptnml(0-2): 93; 12263; 32984; 12748; 88 https://tests.stockfishchess.org/tests/view/613394d12ffb3c36aceb92f4  closes https://github.com/official-stockfish/Stockfish/pull/3693  Bench: 6130736,True,0,2021-09-01
SFisGOD,snicolet,2021-09-06 12:08:22+00:00,Update default net to nn-6762d36ad265.nnue  SPSA 1: https://tests.stockfishchess.org/tests/view/612cdb1fbb4956d8b78eb5ab Parameters: A total of 256 net biases were tuned (hidden layer 2) Base net: nn-fe433fd8c7f6.nnue New net: nn-5f134823db04.nnue  SPSA 2: https://tests.stockfishchess.org/tests/view/612fcde645091e810014af19 Parameters: A total of 64 net biases were tuned (hidden layer 1) Base net: nn-5f134823db04.nnue New net: nn-8eca5dd4e3f7.nnue  SPSA 3: https://tests.stockfishchess.org/tests/view/6130822345091e810014af61 Parameters: 256 net weights and 8 net biases (output layer) Base net: nn-8eca5dd4e3f7.nnue New net: nn-4556108e4f00.nnue  SPSA 4: https://tests.stockfishchess.org/tests/view/613287652ffb3c36aceb923c Parameters: A total of 256 net biases were tuned (hidden layer 2) Base net: nn-4556108e4f00.nnue New net: nn-6762d36ad265.nnue  STC: LLR: 2.96 (-2.94;2.94) <-0.50;2.50> Total: 162776 W: 41220 L: 40807 D: 80749 Ptnml(0-2): 517; 18800; 42359; 19177; 535 https://tests.stockfishchess.org/tests/view/6134107125b9b35584838559  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 41056 W: 10428 L: 10156 D: 20472 Ptnml(0-2): 30; 4288; 11618; 4564; 28 https://tests.stockfishchess.org/tests/view/6134ad6525b9b3558483857a  closes https://github.com/official-stockfish/Stockfish/pull/3691  Bench: 5812158,True,0,2021-09-01
Vizvezdenec,snicolet,2021-09-06 11:59:17+00:00,Extend captures and promotions  This patch introduces extension for captures and promotions. Every capture or promotion that is not the first move in the list gets extended at PvNodes and cutNodes. Special thanks to @locutus2 - all my previous attepmts that failed on this idea were done only for PvNodes - idea to include also cutNodes was based on his latest passed patch.  STC https://tests.stockfishchess.org/tests/view/6134abf325b9b35584838574 LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 188920 W: 47754 L: 47304 D: 93862 Ptnml(0-2): 595; 21754; 49344; 22140; 627  LTC https://tests.stockfishchess.org/tests/view/613521de25b9b355848385d7 LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 8768 W: 2283 L: 2098 D: 4387 Ptnml(0-2): 7; 866; 2452; 1053; 6  closes https://github.com/official-stockfish/Stockfish/pull/3692  bench: 5564555,True,0,2021-09-01
SFisGOD,vondele,2021-08-31 10:56:19+00:00,Update default net to nn-735bba95dec0.nnue  SPSA 1: https://tests.stockfishchess.org/tests/view/61286d8b62d20cf82b5ad1bd Parameters: A total of 256 net biases were tuned (hidden layer 2) Base net: nn-33495fe25081.nnue New net: nn-83e3cf2af92b.nnue  SPSA 2: https://tests.stockfishchess.org/tests/view/6129cf2162d20cf82b5ad25f Parameters: A total of 64 net biases were tuned (hidden layer 1) Base net: nn-83e3cf2af92b.nnue New net: nn-69a528eaef35.nnue  SPSA 3: https://tests.stockfishchess.org/tests/view/612a0dcb62d20cf82b5ad2a0 Parameters: 256 net weights and 8 net biases (output layer) Base net: nn-69a528eaef35.nnue New net: nn-735bba95dec0.nnue  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 95144 W: 24310 L: 23999 D: 46835 Ptnml(0-2): 232; 11059; 24748; 11232; 301 https://tests.stockfishchess.org/tests/view/612bb3be0fdf40644b4b9996  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 33632 W: 8522 L: 8271 D: 16839 Ptnml(0-2): 18; 3511; 9516; 3744; 27 https://tests.stockfishchess.org/tests/view/612ce5b9bb4956d8b78eb5b3  Closes https://github.com/official-stockfish/Stockfish/pull/3685  Bench: 5600615,True,1,2021-08-01
VoyagerOne,vondele,2021-08-27 19:41:32+00:00,CMH Pruning Tweak  Tweak pruning formula by adding up CMH values.  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 14608 W: 3837 L: 3641 D: 7130 Ptnml(0-2): 27; 1681; 3723; 1815; 58 https://tests.stockfishchess.org/tests/view/612792f362d20cf82b5ad156  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 53520 W: 13580 L: 13276 D: 26664 Ptnml(0-2): 28; 5610; 15183; 5908; 31 https://tests.stockfishchess.org/tests/view/6127d27062d20cf82b5ad191  closes https://github.com/official-stockfish/Stockfish/pull/3682  Bench: 5186641,True,4,2021-08-01
SFisGOD,vondele,2021-08-27 05:51:26+00:00,Update default net to nn-33495fe25081.nnue  STC: LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 37368 W: 9621 L: 9391 D: 18356 Ptnml(0-2): 117; 4287; 9664; 4481; 135 https://tests.stockfishchess.org/tests/view/612768165318138ee1204977  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 13328 W: 3446 L: 3246 D: 6636 Ptnml(0-2): 11; 1383; 3682; 1571; 17 https://tests.stockfishchess.org/tests/view/6127dc8d62d20cf82b5ad196  Closes https://github.com/official-stockfish/Stockfish/pull/3679  Bench: 5179347,True,4,2021-08-01
ppigazzini,vondele,2021-08-27 05:49:26+00:00,"Use ""pedantic"" flag also for mingw  This will avoid to run in fishtest a test where the linux machines exit from the building process and only the windows machines run the test.  See: https://tests.stockfishchess.org/tests/view/61122d732a8a49ac5be79996 https://github.com/SFisGOD/Stockfish/commit/4e422577d6ebd1f6ecf606189190b8f6fb03f6c9#comments  closes https://github.com/official-stockfish/Stockfish/pull/3671  No functional change.",True,4,2021-08-01
vondele,vondele,2021-08-27 05:48:18+00:00,Fix empty EvalFile option  some GUIs send an empty string for EvalFile; in that case explicitly try the default name  fixes https://github.com/official-stockfish/Stockfish/issues/3675  closes https://github.com/official-stockfish/Stockfish/pull/3678  No functional change.,True,4,2021-08-01
BM123499,vondele,2021-08-22 07:15:19+00:00,Simplify Declaration on Pawn Move Generation  Removes possible micro-optimization in favor of readability.  STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 75432 W: 5824 L: 5777 D: 63831 Ptnml(0-2): 178; 4648; 28036; 4657; 197 https://tests.stockfishchess.org/tests/view/611fa7f84977aa1525c9cb75  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 41200 W: 1156 L: 1106 D: 38938 Ptnml(0-2): 13; 981; 18562; 1031; 13 https://tests.stockfishchess.org/tests/view/611fcc694977aa1525c9cb9b  Closes https://github.com/official-stockfish/Stockfish/pull/3669  No functional change,True,6,2021-08-01
SFisGOD,vondele,2021-08-22 07:09:58+00:00,Update default net to nn-517c4f68b5df.nnue  SPSA: https://tests.stockfishchess.org/tests/view/611cf0da4977aa1525c9ca03 Parameters: 256 net weights and 8 net biases (output layer) Base net: nn-ac5605a608d6.nnue New net: nn-517c4f68b5df.nnue  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 11600 W: 998 L: 851 D: 9751 Ptnml(0-2): 30; 705; 4186; 846; 33 https://tests.stockfishchess.org/tests/view/611f84524977aa1525c9cb5b  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 9360 W: 338 L: 243 D: 8779 Ptnml(0-2): 0; 220; 4151; 303; 6 https://tests.stockfishchess.org/tests/view/611f8c5b4977aa1525c9cb64  closes https://github.com/official-stockfish/Stockfish/pull/3667  Bench: 4844618,True,6,2021-08-01
candirufish,vondele,2021-08-22 07:05:53+00:00,do more LMR extensions for PV nodes  LMR Pv and depth 6 Extension tweak:  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 52488 W: 1542 L: 1394 D: 49552 Ptnml(0-2): 18; 1253; 23552; 1405; 16 https://tests.stockfishchess.org/tests/view/611e49c34977aa1525c9caa7  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 76216 W: 6000 L: 5784 D: 64432 Ptnml(0-2): 204; 4745; 28006; 4937; 216 https://tests.stockfishchess.org/tests/view/611e0e254977aa1525c9ca89  closes https://github.com/official-stockfish/Stockfish/pull/3666  Bench: 5046381,True,6,2021-08-01
BM123499,vondele,2021-08-22 07:00:15+00:00,Simplify Null Move Search Reduction  slightly simpler formula for reduction computation.  first round of tests: STC: LLR: 2.97 (-2.94;2.94) <-2.50;0.50> Total: 15632 W: 1319 L: 1204 D: 13109 Ptnml(0-2): 33; 956; 5733; 1051; 43 https://tests.stockfishchess.org/tests/view/60bd03c7457376eb8bcaa600  LTC: LLR: 3.37 (-2.94;2.94) <-2.50;0.50> Total: 86296 W: 2814 L: 2779 D: 80703 Ptnml(0-2): 33; 2500; 38039; 2551; 25 https://tests.stockfishchess.org/tests/view/60bd1ff0457376eb8bcaa653  recent tests: STC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 23936 W: 1895 L: 1793 D: 20248 Ptnml(0-2): 40; 1470; 8869; 1526; 63 https://tests.stockfishchess.org/tests/view/611f9b7d4977aa1525c9cb6b  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 62568 W: 1750 L: 1713 D: 59105 Ptnml(0-2): 19; 1560; 28085; 1605; 15 https://tests.stockfishchess.org/tests/view/611fa4814977aa1525c9cb71  functional on high depth  closes https://github.com/official-stockfish/Stockfish/pull/3535  Bench: 5375286,True,6,2021-08-01
Sopel97,vondele,2021-08-20 06:50:25+00:00,Optimize and tidy up affine transform code.  The new network caused some issues initially due to the very narrow neuron set between the first two FC layers. Necessary changes were hacked together to make it work. This patch is a mature approach to make the affine transform code faster; more readable; and easier to maintain should the layer sizes change again.  The following changes were made:  * ClippedReLU always produces a multiple of 32 outputs. This is about as good of a solution for AffineTransform's SIMD requirements as it can get without a bigger rewrite.  * All self-contained simd helpers are moved to a separate file (simd.h). Inline asm is utilized to work around GCC's issues with code generation and register assignment. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101693; https://godbolt.org/z/da76fY1n7  * AffineTransform has 2 specializations. While it's more lines of code due to the boilerplate; the logic in both is significantly reduced; as these two are impossible to nicely combine into one.  1) The first specialization is for cases when there's >=128 inputs. It uses a different approach to perform the affine transform and can make full use of AVX512 without any edge cases. Furthermore; it has higher theoretical throughput because less loads are needed in the hot path; requiring only a fixed amount of instructions for horizontal additions at the end; which are amortized by the large number of inputs.  2) The second specialization is made to handle smaller layers where performance is still necessary but edge cases need to be handled. AVX512 implementation for this was ommited by mistake; a remnant from the temporary implementation for the new... This could be easily reintroduced if needed. A slightly more detailed description of both implementations is in the code.  Overall it should be a minor speedup; as shown on fishtest:  passed STC: LLR: 2.96 (-2.94;2.94) <-0.50;2.50> Total: 51520 W: 4074 L: 3888 D: 43558 Ptnml(0-2): 111; 3136; 19097; 3288; 128  and various tests shown in the pull request  closes https://github.com/official-stockfish/Stockfish/pull/3663  No functional change,True,4,2021-08-01
Sopel97,vondele,2021-08-20 05:57:09+00:00,Improve handling of the debug log file.  Fix handling of empty strings in uci options and reassigning of the log file  Fixes https://github.com/official-stockfish/Stockfish/issues/3650  Closes https://github.com/official-stockfish/Stockfish/pull/3655  No functional change,True,4,2021-08-01
Torom,vondele,2021-08-18 07:17:22+00:00,Update default net to nn-ac5605a608d6.nnue  This net was created with the nnue-pytorch trainer; it used the previous master net as a starting point.  The training data includes all T60 data (https://drive.google.com/drive/folders/1rzZkgIgw7G5vQMLr2hZNiUXOp7z80613); all T74 data (https://drive.google.com/drive/folders/1aFUv3Ih3-A8Vxw9064Kw_FU4sNhMHZU-) and the wrongNNUE_02_d9.binpack (https://drive.google.com/file/d/1seGNOqcVdvK_vPNq98j-zV3XPE5zWAeq). The Leela data were randomly named and then concatenated. All data was merged into one binpack using interleave_binpacks.py.  python3 train.py \     ../data/t60_t74_wrong.binpack \     ../data/t60_t74_wrong.binpack \     --resume-from-model ../data/nn-e8321e467bf6.pt \     --gpus 1 \     --threads 4 \     --num-workers 1 \     --batch-size 16384 \     --progress_bar_refresh_rate 300 \     --random-fen-skipping 3 \     --features=HalfKAv2_hm^ \     --lambda=1.0 \     --max_epochs=600 \     --seed $RANDOM \     --default_root_dir ../output/exp_24  STC: LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 15320 W: 1415 L: 1257 D: 12648 Ptnml(0-2): 50; 1002; 5402; 1152; 54 https://tests.stockfishchess.org/tests/view/611c404a4977aa1525c9c97f  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 9440 W: 345 L: 248 D: 8847 Ptnml(0-2): 3; 222; 4175; 315; 5 https://tests.stockfishchess.org/tests/view/611c6c7d4977aa1525c9c996  LTC with UHO_XXL_+0.90_+1.19.epd: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 6232 W: 1638 L: 1459 D: 3135 Ptnml(0-2): 5; 592; 1744; 769; 6 https://tests.stockfishchess.org/tests/view/611c9b214977aa1525c9c9cb  closes https://github.com/official-stockfish/Stockfish/pull/3664  Bench: 5375286,True,2,2021-08-01
vondele,vondele,2021-08-17 19:08:34+00:00,Regenerate dependencies on code change  fixes https://github.com/official-stockfish/Stockfish/issues/3658  dependencies are now regenerated for each code change; this adds some 1s overhead in compile time; but avoids potential miscompilations or build problems.  closes https://github.com/official-stockfish/Stockfish/pull/3659  No functional change,True,1,2021-08-01
Sopel97,vondele,2021-08-15 10:05:43+00:00,"New NNUE architecture and net  Introduces a new NNUE network architecture and associated network parameters  The summary of the changes:  * Position for each perspective mirrored such that the king is on e..h files. Cuts the feature transformer size in half; while preserving enough knowledge to be good. See https://docs.google.com/document/d/1gTlrr02qSNKiXNZ_SuO4-RjK4MXBiFlLE6jvNqqMkAY/edit#heading=h.b40q4rb1w7on. * The number of neurons after the feature transformer increased two-fold; to 1024x2. This is possibly mostly due to the now very optimized feature transformer update code. * The number of neurons after the second layer is reduced from 16 to 8; to reduce the speed impact. This; perhaps surprisingly; doesn't harm the strength much. See https://docs.google.com/document/d/1gTlrr02qSNKiXNZ_SuO4-RjK4MXBiFlLE6jvNqqMkAY/edit#heading=h.6qkocr97fezq  The AffineTransform code did not work out-of-the box with the smaller number of neurons after the second layer; so some temporary changes have been made to add a special case for InputDimensions == 8. Also additional 0 padding is added to the output for some archs that cannot process inputs by <=8 (SSE2; NEON). VNNI uses an implementation that can keep all outputs in the registers while reducing the number of loads by 3 for each 16 inputs; thanks to the reduced number of output neurons. However GCC is particularily bad at optimization here (and perhaps why the current way the affine transform is done even passed sprt) (see https://docs.google.com/document/d/1gTlrr02qSNKiXNZ_SuO4-RjK4MXBiFlLE6jvNqqMkAY/edit# for details) and more work will be done on this in the following days. I expect the current VNNI implementation to be improved and extended to other architectures.  The network was trained with a slightly modified version of the pytorch trainer (https://github.com/glinscott/nnue-pytorch); the changes are in https://github.com/glinscott/nnue-pytorch/pull/143  The training utilized 2 datasets.      dataset A - https://drive.google.com/file/d/1VlhnHL8f-20AXhGkILujnNXHwy9T-MQw/view?usp=sharing     dataset B - as described in https://github.com/official-stockfish/Stockfish/commit/ba01f4b95448bcb324755f4dd2a632a57c6e67bc  The training process was as following:      train on dataset A for 350 epochs; take the best net in terms of elo at 20k nodes per move (it's fine to take anything from later stages of training).     convert the .ckpt to .pt     --resume-from-model from the .pt file; train on dataset B for <600 epochs; take the best net. Lambda=0.8; applied before the loss function.  The first training command:  python3 train.py \     ../nnue-pytorch-training/data/large_gensfen_multipvdiff_100_d9.binpack \     ../nnue-pytorch-training/data/large_gensfen_multipvdiff_100_d9.binpack \     --gpus ""$3;"" \     --threads 1 \     --num-workers 1 \     --batch-size 16384 \     --progress_bar_refresh_rate 20 \     --smart-fen-skipping \     --random-fen-skipping 3 \     --features=HalfKAv2_hm^ \     --lambda=1.0 \     --max_epochs=600 \     --default_root_dir ../nnue-pytorch-training/experiment_$1/run_$2  The second training command:  python3 serialize.py \     --features=HalfKAv2_hm^ \     ../nnue-pytorch-training/experiment_131/run_6/default/version_0/checkpoints/epoch-499.ckpt \     ../nnue-pytorch-training/experiment_$1/base/base.pt  python3 train.py \     ../nnue-pytorch-training/data/michael_commit_b94a65.binpack \     ../nnue-pytorch-training/data/michael_commit_b94a65.binpack \     --gpus ""$3;"" \     --threads 1 \     --num-workers 1 \     --batch-size 16384 \     --progress_bar_refresh_rate 20 \     --smart-fen-skipping \     --random-fen-skipping 3 \     --features=HalfKAv2_hm^ \     --lambda=0.8 \     --max_epochs=600 \     --resume-from-model ../nnue-pytorch-training/experiment_$1/base/base.pt \     --default_root_dir ../nnue-pytorch-training/experiment_$1/run_$2  STC: https://tests.stockfishchess.org/tests/view/611120b32a8a49ac5be798c4  LLR: 2.97 (-2.94;2.94) <-0.50;2.50> Total: 22480 W: 2434 L: 2251 D: 17795 Ptnml(0-2): 101; 1736; 7410; 1865; 128  LTC: https://tests.stockfishchess.org/tests/view/611152b32a8a49ac5be798ea  LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 9776 W: 442 L: 333 D: 9001 Ptnml(0-2): 5; 295; 4180; 402; 6  closes https://github.com/official-stockfish/Stockfish/pull/3646  bench: 5189338",True,6,2021-08-01
vondele,vondele,2021-08-05 14:41:07+00:00,Revert futility pruning patches  reverts 09b6d28391cf582d99897360b225bcbbe38dd1c6 and dbd7f602d3c7622df294f87d7239b5aaf31f695f that significantly impact mate finding capabilities. For example on ChestUCI_23102018.epd; at 1M nodes; the number of mates found is nearly reduced 2x without these depth conditions:         sf6  2091        sf7  2093        sf8  2107        sf9  2062       sf10  2208       sf11  2552       sf12  2563       sf13  2509       sf14  2427     master  1246    patched  2467  (script for testing at https://github.com/official-stockfish/Stockfish/files/6936412/matecheck.zip)  closes https://github.com/official-stockfish/Stockfish/pull/3641  fixes https://github.com/official-stockfish/Stockfish/issues/3627  Bench: 5467570,True,3,2021-08-01
VoyagerOne,vondele,2021-08-05 14:32:07+00:00,SEE simplification  Simplified SEE formula by removing std::min. Should also be easier to tune.  STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 22656 W: 1836 L: 1729 D: 19091 Ptnml(0-2): 54; 1426; 8267; 1521; 60 https://tests.stockfishchess.org/tests/view/610ae62f2a8a49ac5be79449  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 26248 W: 806 L: 744 D: 24698 Ptnml(0-2): 6; 668; 11715; 728; 7 https://tests.stockfishchess.org/tests/view/610b17ad2a8a49ac5be79466  closes https://github.com/official-stockfish/Stockfish/pull/3643  bench:  4915145,True,3,2021-08-01
SFisGOD,vondele,2021-08-05 06:52:07+00:00,Update default net to nn-46832cfbead3.nnue  SPSA 1: https://tests.stockfishchess.org/tests/view/6100e7f096b86d98abf6a832 Parameters: A total of 256 net weights and 8 net biases were tuned (output layer) Base net: nn-56a5f1c4173a.nnue New net: nn-ec3c8e029926.nnue  SPSA 2: https://tests.stockfishchess.org/tests/view/610733caafad2da4f4ae3da7 Parameters: A total of 256 net biases were tuned (hidden layer 2) Base net: nn-ec3c8e029926.nnue New net: nn-46832cfbead3.nnue  STC: LLR: 2.98 (-2.94;2.94) <-0.50;2.50> Total: 50520 W: 3953 L: 3765 D: 42802 Ptnml(0-2): 138; 3063; 18678; 3235; 146 https://tests.stockfishchess.org/tests/view/610a79692a8a49ac5be793f4  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 57256 W: 1723 L: 1566 D: 53967 Ptnml(0-2): 12; 1442; 25568; 1589; 17 https://tests.stockfishchess.org/tests/view/610ac5bb2a8a49ac5be79434  Closes https://github.com/official-stockfish/Stockfish/pull/3642  Bench: 5359314,True,3,2021-08-01
locutus2,vondele,2021-08-05 06:47:33+00:00,Simplify new cmh pruning thresholds by using directly a quadratic formula.  This decouples also the stat bonus updates from the threshold which creates less dependencies for tuning of stat bonus parameters. Perhaps a further fine tuning of the now separated coefficients for constHist[0] and constHist[1] could give further gains.  STC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 78384 W: 6134 L: 6090 D: 66160 Ptnml(0-2): 207; 5013; 28705; 5063; 204 https://tests.stockfishchess.org/tests/view/6106d235afad2da4f4ae3d4b  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 38176 W: 1149 L: 1095 D: 35932 Ptnml(0-2): 6; 1000; 17030; 1038; 14 https://tests.stockfishchess.org/tests/view/6107a080afad2da4f4ae3def  closes https://github.com/official-stockfish/Stockfish/pull/3639  Bench: 5098146,True,3,2021-08-01
VoyagerOne,vondele,2021-08-05 06:44:38+00:00,Futile pruning simplification  Remove CMH conditions in futile pruning.  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 93520 W: 7165 L: 7138 D: 79217 Ptnml(0-2): 222; 5923; 34427; 5982; 206 https://tests.stockfishchess.org/tests/view/61083104e50a153c346ef8df  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 59072 W: 1746 L: 1706 D: 55620 Ptnml(0-2): 13; 1562; 26353; 1588; 20 https://tests.stockfishchess.org/tests/view/610894f2e50a153c346ef913  closes https://github.com/official-stockfish/Stockfish/pull/3638  Bench: 5229673,True,3,2021-08-01
VoyagerOne,vondele,2021-07-31 13:29:19+00:00,CMH Pruning Tweak  replace CounterMovePruneThreshold by a depth dependent threshold  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 35512 W: 2718 L: 2552 D: 30242 Ptnml(0-2): 66; 2138; 13194; 2280; 78 https://tests.stockfishchess.org/tests/view/6104442fafad2da4f4ae3b94  LTC: LLR: 2.96 (-2.94;2.94) <0.50;3.50> Total: 36536 W: 1150 L: 1019 D: 34367 Ptnml(0-2): 10; 920; 16278; 1049; 11 https://tests.stockfishchess.org/tests/view/6104b033afad2da4f4ae3bbc  closes https://github.com/official-stockfish/Stockfish/pull/3636  Bench: 5848718,True,5,2021-07-01
Sopel97,vondele,2021-07-30 15:15:52+00:00,Avoid unnecessary stores in the affine transform  This patch improves the codegen in the AffineTransform::forward function for architectures >=SSSE3. Current code works directly on memory and the compiler cannot see that the stores through outptr do not alias the loads through weights and input32. The solution implemented is to perform the affine transform with local variables as accumulators and only store the result to memory at the end. The number of accumulators required is OutputDimensions / OutputSimdWidth; which means that for the 1024->16 affine transform it requires 4 registers with SSSE3; 2 with AVX2; 1 with AVX512. It also cuts the number of stores required by NumRegs * 256 for each node evaluated. The local accumulators are expected to be assigned to registers; but even if this cannot be done in some case due to register pressure it will help the compiler to see that there is no aliasing between the loads and stores and may still result in better codegen.  See https://godbolt.org/z/59aTKbbYc for codegen comparison.  passed STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 140328 W: 10635 L: 10358 D: 119335 Ptnml(0-2): 302; 8339; 52636; 8554; 333  closes https://github.com/official-stockfish/Stockfish/pull/3634  No functional change,True,4,2021-07-01
SFisGOD,vondele,2021-07-29 05:35:13+00:00,Update default net to nn-56a5f1c4173a.nnue  SPSA 1: https://tests.stockfishchess.org/tests/view/60fd24efd8a6b65b2f3a796e Parameters: A total of 256 net biases were tuned (hidden layer 2) New best values: Half of the changes from the tuning run New net: nn-5992d3ba79f3.nnue  SPSA 2: https://tests.stockfishchess.org/tests/view/60fec7d6d8a6b65b2f3a7aa2 Parameters: A total of 128 net biases were tuned (hidden layer 1) New best values: Half of the changes from the tuning run New net: nn-56a5f1c4173a.nnue  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 140392 W: 10863 L: 10578 D: 118951 Ptnml(0-2): 347; 8754; 51718; 9021; 356 https://tests.stockfishchess.org/tests/view/610037e396b86d98abf6a79e  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 14216 W: 454 L: 355 D: 13407 Ptnml(0-2): 4; 323; 6356; 420; 5 https://tests.stockfishchess.org/tests/view/61019995afad2da4f4ae3a3c  Closes #3633  Bench: 4801359,True,3,2021-07-01
SFisGOD,vondele,2021-07-26 05:52:59+00:00,Update default net to nn-26abeed38351.nnue  SPSA: https://tests.stockfishchess.org/tests/view/60fba335d8a6b65b2f3a7891  New best values: Half of the changes from the tuning run. Setting: nodestime=300 with 10+0.1 (approximate real TC is 2.5 seconds) The rest is the same as described in #3593  The change from nodestime=600 to 300 was suggested by gekkehenker to prevent time losses for some slow workers SFisGOD@94cd757#commitcomment-53324840  STC: LLR: 2.96 (-2.94;2.94) <-0.50;2.50> Total: 67448 W: 5241 L: 5036 D: 57171 Ptnml(0-2): 151; 4198; 24827; 4391; 157 https://tests.stockfishchess.org/tests/view/60fd50f2d8a6b65b2f3a798e  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 48752 W: 1504 L: 1358 D: 45890 Ptnml(0-2): 13; 1226; 21754; 1368; 15 https://tests.stockfishchess.org/tests/view/60fd7bb2d8a6b65b2f3a79a9  Closes https://github.com/official-stockfish/Stockfish/pull/3630  Bench:  5124774,True,0,2021-07-01
G-Lorenz,vondele,2021-07-26 05:48:58+00:00,Simplification in LMR  This commit removes the `!captureOrPromotion` condition from ttCapture reduction and from good/bad history reduction (similar to #3619).  passed STC: https://tests.stockfishchess.org/tests/view/60fc734ad8a6b65b2f3a7922 LLR: 2.97 (-2.94;2.94) <-2.50;0.50> Total: 48680 W: 3855 L: 3776 D: 41049 Ptnml(0-2): 118; 3145; 17744; 3206; 127  passed LTC: https://tests.stockfishchess.org/tests/view/60fce7d5d8a6b65b2f3a794c LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 86528 W: 2471 L: 2450 D: 81607 Ptnml(0-2): 28; 2203; 38777; 2232; 24  closes https://github.com/official-stockfish/Stockfish/pull/3629  Bench: 4951406,True,0,2021-07-01
MichaelB7,vondele,2021-07-24 16:04:59+00:00,"Update the default net to nn-76a8a7ffb820.nnue.  combined work by Serio Vieri; Michael Byrne; and Jonathan D (aka SFisGod) based on top of previous developments; by restarts from good nets.  Sergio generated the net https://tests.stockfishchess.org/api/nn/nn-d8609abe8caf.nnue:  The initial net nn-d8609abe8caf.nnue is trained by generating around 16B of training data from the last master net nn-9e3c6298299a.nnue; then trained; continuing from the master net; with lambda=0.2 and sampling ratio of 1. Starting with LR=2e-3; dropping LR with a factor of 0.5 until it reaches LR=5e-4. in_scaling is set to 361. No other significant changes made to the pytorch trainer.  Training data gen command (generates in chunks of 200k positions):  generate_training_data min_depth 9 max_depth 11 count 200000 random_move_count 10 random_move_max_ply 80 random_multi_pv 12 random_multi_pv_diff 100 random_multi_pv_depth 8 write_min_ply 10 eval_limit 1500 book noob_3moves.epd output_file_name gendata/$(date +""%Y%m%d-%H%M"")_${HOSTNAME}.binpack  PyTorch trainer command (Note that this only trains for 20 epochs; repeatedly train until convergence):  python train.py --features ""HalfKAv2^"" --max_epochs 20 --smart-fen-skipping --random-fen-skipping 500 --batch-size 8192 --default_root_dir $dir --seed $RANDOM --threads 4 --num-workers 32 --gpus $gpuids --track_grad_norm 2 --gradient_clip_val 0.05 --lambda 0.2 --log_every_n_steps 50 $resumeopt $data $val  See https://github.com/sergiovieri/Stockfish/tree/tools_mod/rl for the scripts used to generate data.  Based on that Michael generated nn-76a8a7ffb820.nnue in the following way:  The net being submitted was trained with the pytorch trainer: https://github.com/glinscott/nnue-pytorch  python train.py i:/bin/all.binpack i:/bin/all.binpack --gpus 1 --threads 4 --num-workers 30 --batch-size 16384 --progress_bar_refresh_rate 30 --smart-fen-skipping --random-fen-skipping 3 --features=HalfKAv2^ --auto_lr_find True --lambda=1.0 --max_epochs=240 --seed %random%%random% --default_root_dir exp/run_109 --resume-from-model ./pt/nn-d8609abe8caf.pt  This run is thus started from Segio Vieri's net nn-d8609abe8caf.nnue  all.binpack equaled 4 parts Wrong_NNUE_2.binpack https://drive.google.com/file/d/1seGNOqcVdvK_vPNq98j-zV3XPE5zWAeq/view?usp=sharing plus two parts of Training_Data.binpack https://drive.google.com/file/d/1RFkQES3DpsiJqsOtUshENtzPfFgUmEff/view?usp=sharing Each set was concatenated together - making one large Wrong_NNUE 2 binpack and one large Training so the were approximately equal in size. They were then interleaved together. The idea was to give Wrong_NNUE.binpack closer to equal weighting with the Training_Data binpack  model.py modifications: loss = torch.pow(torch.abs(p - q); 2.6).mean() LR = 8.0e-5 calculated as follows: 1.5e-3*(.992^360) - the idea here was to take a highly trained net and just use all.binpack as a finishing micro refinement touch for the last 2 Elo or so. This net was discovered on the 59th epoch. optimizer = ranger.Ranger(train_params; betas=(.90; 0.999); eps=1.0e-7; gc_loc=False; use_gc=False) scheduler = torch.optim.lr_scheduler.StepLR(optimizer; step_size=1; gamma=0.992) For this micro optimization; I had set the period to ""5"" in train.py. This changes the checkpoint output so that every 5th checkpoint file is created  The final touches were to adjust the NNUE scale; as was done by Jonathan in tests running at the same time.  passed LTC https://tests.stockfishchess.org/tests/view/60fa45aed8a6b65b2f3a77a4 LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 53040 W: 1732 L: 1575 D: 49733 Ptnml(0-2): 14; 1432; 23474; 1583; 17  passed STC https://tests.stockfishchess.org/tests/view/60f9fee2d8a6b65b2f3a7775 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 37928 W: 3178 L: 3001 D: 31749 Ptnml(0-2): 100; 2446; 13695; 2623; 100.  closes https://github.com/official-stockfish/Stockfish/pull/3626  Bench: 5169957",True,5,2021-07-01
G-Lorenz,vondele,2021-07-23 17:02:58+00:00,Apply good/bad history reduction also when inCheck  Main idea is that; in some cases; 'in check' situations are not so different from 'not in check' ones. Trying to use piece count in order to select only a few 'in check' situations have failed LTC testing. It could be interesting to apply one of those ideas in other parts of the search function.  passed STC: https://tests.stockfishchess.org/tests/view/60f1b68dd1189bed71812d40 LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 53472 W: 4078 L: 4008 D: 45386 Ptnml(0-2): 127; 3297; 19795; 3413; 104  passed LTC: https://tests.stockfishchess.org/tests/view/60f291e6d1189bed71812de3 LLR: 2.92 (-2.94;2.94) <-2.50;0.50> Total: 89712 W: 2651 L: 2632 D: 84429 Ptnml(0-2): 60; 2261; 40188; 2294; 53  closes https://github.com/official-stockfish/Stockfish/pull/3619  Bench: 5185789,True,4,2021-07-01
Unknown,vondele,2021-07-23 16:53:03+00:00,Simplify lowply-history scoring logic  STC: https://tests.stockfishchess.org/tests/view/60eee559d1189bed71812b16 LLR: 2.97 (-2.94;2.94) <-2.50;0.50> Total: 33976 W: 2523 L: 2431 D: 29022 Ptnml(0-2): 66; 2030; 12730; 2070; 92  LTC: https://tests.stockfishchess.org/tests/view/60eefa12d1189bed71812b24 LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 107240 W: 3053 L: 3046 D: 101141 Ptnml(0-2): 56; 2668; 48154; 2697; 45  closes https://github.com/official-stockfish/Stockfish/pull/3616  bench: 5199177,True,4,2021-07-01
Vizvezdenec,vondele,2021-07-23 16:47:30+00:00,Prune illegal moves in qsearch earlier  The main idea is that illegal moves influencing search or qsearch obviously can't be any sort of good. The only reason why initially legality checks for search and qsearch were done after they actually can influence some heuristics is because legality check is expensive computationally. Eventually in search it was moved to the place where it makes sure that illegal moves can't influence search.  This patch shows that the same can be done for qsearch + it passed STC with elo-gaining bounds + it removes 3 lines of code because one no longer needs to increment/decrement movecount on illegal moves.  passed STC with elo-gaining bounds https://tests.stockfishchess.org/tests/view/60f20aefd1189bed71812da0 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 61512 W: 4688 L: 4492 D: 52332 Ptnml(0-2): 139; 3730; 22848; 3874; 165  The same version functionally but with moving condition ever earlier passed LTC with simplification bounds. https://tests.stockfishchess.org/tests/view/60f292cad1189bed71812de9 LLR: 2.98 (-2.94;2.94) <-2.50;0.50> Total: 60944 W: 1724 L: 1685 D: 57535 Ptnml(0-2): 11; 1556; 27298; 1597; 10  closes https://github.com/official-stockfish/Stockfish/pull/3618  bench 4709569,True,4,2021-07-01
lkeegan,vondele,2021-07-23 16:16:05+00:00,Add macOS and windows to CI  - macOS   - system clang   - gcc - windows / msys2   - mingw 64-bit gcc   - mingw 32-bit gcc - minor code fixes to get new CI jobs to pass   - code: suppress unused-parameter warning on 32-bit windows   - Makefile: if arch=any on macos; don't specify arch at all  fixes https://github.com/official-stockfish/Stockfish/issues/2958  closes https://github.com/official-stockfish/Stockfish/pull/3623  No functional change,True,4,2021-07-01
VoyagerOne,vondele,2021-07-13 15:35:20+00:00,Don't save excluded move eval in TT  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 17544 W: 1384 L: 1236 D: 14924 Ptnml(0-2): 37; 1031; 6499; 1157; 48 https://tests.stockfishchess.org/tests/view/60ec8d9bd1189bed71812999  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 26136 W: 823 L: 707 D: 24606 Ptnml(0-2): 6; 643; 11656; 755; 8 https://tests.stockfishchess.org/tests/view/60ecb11ed1189bed718129ba  closes https://github.com/official-stockfish/Stockfish/pull/3614  Bench: 5505251,True,1,2021-07-01
Vizvezdenec,vondele,2021-07-13 15:33:20+00:00,Remove second futility pruning depth limit  This patch removes futility pruning lmrDepth limit for futility pruning at parent nodes. Since it's already capped by margin that is a function of lmrDepth there is no need to extra cap it with lmrDepth.  passed STC https://tests.stockfishchess.org/tests/view/60e9b5dfd1189bed71812777 LLR: 2.97 (-2.94;2.94) <-2.50;0.50> Total: 14872 W: 1264 L: 1145 D: 12463 Ptnml(0-2): 37; 942; 5369; 1041; 47  passed LTC https://tests.stockfishchess.org/tests/view/60e9c635d1189bed71812790 LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 40336 W: 1280 L: 1225 D: 37831 Ptnml(0-2): 24; 1057; 17960; 1094; 33  closes https://github.com/official-stockfish/Stockfish/pull/3612  bench: 5064969,True,1,2021-07-01
Unknown,vondele,2021-07-13 15:31:15+00:00,SEE: simplify stm variable initialization  Pull #3458 removed the only usage of pos.see_ge() moving pieces that don't belong to the side to move; so we can simplify this; adding an assert.  closes https://github.com/official-stockfish/Stockfish/pull/3607  No functional change,True,1,2021-07-01
Vizvezdenec,vondele,2021-07-13 15:23:30+00:00,Remove futility pruning depth limit  This patch removes futility pruning depth limit for child node futility pruning. In current master it was double capped by depth and by futility margin; which is also a function of depth; which didn't make much sense.  passed STC https://tests.stockfishchess.org/tests/view/60e2418f9ea99d7c2d693e64 LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 116168 W: 9100 L: 9097 D: 97971 Ptnml(0-2): 319; 7496; 42476; 7449; 344  passed LTC https://tests.stockfishchess.org/tests/view/60e3374f9ea99d7c2d693f20 LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 43304 W: 1282 L: 1231 D: 40791 Ptnml(0-2): 8; 1126; 19335; 1173; 10  closes https://github.com/official-stockfish/Stockfish/pull/3606  bench 4965493,True,1,2021-07-01
SFisGOD,vondele,2021-07-03 08:03:32+00:00,Update default net to nn-9e3c6298299a.nnue  Optimization of nn-956480d8378f.nnue using SPSA https://tests.stockfishchess.org/tests/view/60da2bf63beab81350ac9fe7  Same method as described in PR #3593  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 17792 W: 1525 L: 1372 D: 14895 Ptnml(0-2): 28; 1156; 6401; 1257; 54 https://tests.stockfishchess.org/tests/view/60deffc59ea99d7c2d693c19  LTC: LLR: 2.96 (-2.94;2.94) <0.50;3.50> Total: 36544 W: 1245 L: 1109 D: 34190 Ptnml(0-2): 12; 988; 16139; 1118; 15 https://tests.stockfishchess.org/tests/view/60df11339ea99d7c2d693c22  closes https://github.com/official-stockfish/Stockfish/pull/3601  Bench: 4687476,True,5,2021-07-01
justinkb,vondele,2021-07-03 07:51:03+00:00,Allow passing RTLIB=compiler-rt to make  Not all linux users will have libatomic installed. When using clang as the system compiler with compiler-rt as the default runtime library instead of libgcc; atomic builtins may be provided by compiler-rt. This change allows such users to pass RTLIB=compiler-rt to make sure the build doesn't error out on the missing (unnecessary) libatomic.  closes https://github.com/official-stockfish/Stockfish/pull/3597  No functional change,True,5,2021-07-01
candirufish,vondele,2021-07-03 07:44:05+00:00,no cut node reduction for killer moves.  stc: LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 44344 W: 3474 L: 3294 D: 37576 Ptnml(0-2): 117; 2710; 16338; 2890; 117 https://tests.stockfishchess.org/tests/view/60d8ea673beab81350ac9eb8  ltc: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 82600 W: 2638 L: 2441 D: 77521 Ptnml(0-2): 38; 2147; 36749; 2312; 54 https://tests.stockfishchess.org/tests/view/60d9048f3beab81350ac9eed  closes https://github.com/official-stockfish/Stockfish/pull/3600  Bench: 5160239,True,5,2021-07-01
Unknown,vondele,2021-07-03 07:26:58+00:00,Simplify lazy_skip.  Small speedup by removing operations in lazy_skip.  STC 10+0.1 : LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 55088 W: 4553 L: 4482 D: 46053 Ptnml(0-2): 163; 3546; 20045; 3637; 153 https://tests.stockfishchess.org/tests/view/60daa2cb3beab81350aca04d  LTC 60+0.6 : LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 46136 W: 1457 L: 1407 D: 43272 Ptnml(0-2): 10; 1282; 20442; 1316; 18 https://tests.stockfishchess.org/tests/view/60db0e753beab81350aca08e  closes https://github.com/official-stockfish/Stockfish/pull/3599  Bench 5122403,True,5,2021-07-01
snicolet,vondele,2021-07-03 07:25:16+00:00,Simplify format_cp_aligned_dot()  closes https://github.com/official-stockfish/Stockfish/pull/3583  No functional change,True,5,2021-07-01
vondele,vondele,2021-07-03 07:20:06+00:00,Restore development version  No functional change,True,5,2021-07-01
vondele,vondele,2021-07-02 12:53:30+00:00,Stockfish 14  Official release version of Stockfish 14  Bench: 4770936  ---  Today; we have the pleasure to announce Stockfish 14.  As usual; downloads will be freely available at https://stockfishchess.org  The engine is now significantly stronger than just a few months ago; and wins four times more game pairs than it loses against the previous release version [0]. Stockfish 14 is now at least 400 Elo ahead of Stockfish 7; a top engine in 2016 [1]. During the last five years; Stockfish has thus gained about 80 Elo per year.  Stockfish 14 evaluates positions more accurately than Stockfish 13 as a result of two major steps forward in defining and training the efficiently updatable neural network (NNUE) that provides the evaluation for positions.  First; the collaboration with the Leela Chess Zero team - announced previously [2] - has come to fruition. The LCZero team has provided a collection of billions of positions evaluated by Leela that we have combined with billions of positions evaluated by Stockfish to train the NNUE net that powers Stockfish 14. The fact that we could use and combine these datasets freely was essential for the progress made and demonstrates the power of open source and open data [3].  Second; the architecture of the NNUE network was significantly updated: the new network is not only larger; but more importantly; it deals better with large material imbalances and can specialize for multiple phases of the game [4]. A new project; kick-started by Gary Linscott and Tomasz Sobczyk; led to a GPU accelerated net trainer written in pytorch.[5] This tool allows for training high-quality nets in a couple of hours.  Finally; this release features some search refinements; minor bug fixes and additional improvements. For example; Stockfish is now about 90 Elo stronger for chess960 (Fischer random chess) at short time control.  The Stockfish project builds on a thriving community of enthusiasts (thanks everybody!) that contribute their expertise; time; and resources to build a free and open-source chess engine that is robust; widely available; and very strong. We invite our chess fans to join the fishtest testing framework and programmers to contribute to the project on github [6].  Stay safe and enjoy chess!  The Stockfish team  [0] https://tests.stockfishchess.org/tests/view/60dae5363beab81350aca077 [1] https://nextchessmove.com/dev-builds [2] https://stockfishchess.org/blog/2021/stockfish-13/ [3] https://lczero.org/blog/2021/06/the-importance-of-open-data/ [4] https://github.com/official-stockfish/Stockfish/commit/e8d64af1 [5] https://github.com/glinscott/nnue-pytorch/ [6] https://stockfishchess.org/get-involved/,True,4,2021-07-01
bknox83,vondele,2021-06-29 08:24:54+00:00,Update Top CPU Contributors  closes https://github.com/official-stockfish/Stockfish/pull/3595  No functional change,True,1,2021-06-01
SFisGOD,vondele,2021-06-28 19:31:58+00:00,Update default net to nn-3475407dc199.nnue  Optimization of eight subnetwork output layers of Michael's nn-190f102a22c3.nnue using SPSA https://tests.stockfishchess.org/tests/view/60d5510642a522cc50282ef3  Parameters: A total of 256 net weights and 8 net biases were tuned New best values: The raw values at the end of the tuning run were used (800k games; 5 seconds TC) Settings: default ck value and SPSA A is 30;000 (3.75% of the total number of games)  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 29064 W: 2435 L: 2269 D: 24360 Ptnml(0-2): 72; 1857; 10505; 2029; 69 https://tests.stockfishchess.org/tests/view/60d8ea123beab81350ac9eb6  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 61848 W: 2055 L: 1884 D: 57909 Ptnml(0-2): 18; 1708; 27310; 1861; 27 https://tests.stockfishchess.org/tests/view/60d8f0393beab81350ac9ec6  closes https://github.com/official-stockfish/Stockfish/pull/3593  Bench: 4770936,True,0,2021-06-01
MichaelB7,vondele,2021-06-28 19:20:05+00:00,Make net nn-956480d8378f.nnue the default  Trained with the pytorch trainer: https://github.com/glinscott/nnue-pytorch  python train.py i:/bin/all.binpack i:/bin/all.binpack --gpus 1 --threads 4 --num-workers 30 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --random-fen-skipping 3 --features=HalfKAv2^ --lambda=1.0 --max_epochs=440 --seed %random%%random% --default_root_dir exp/run_18 --resume-from-model ./pt/nn-75980ca503c6.pt  This run is thus started from a previous master net.  all.binpack equaled 4 parts Wrong_NNUE_2.binpack https://drive.google.com/file/d/1seGNOqcVdvK_vPNq98j-zV3XPE5zWAeq/view?usp=sharing plus two parts of Training_Data.binpack https://drive.google.com/file/d/1RFkQES3DpsiJqsOtUshENtzPfFgUmEff/view?usp=sharing Each set was concatenated together - making one large Wrong_NNUE 2 binpack and one large Training so the were approximately equal in size. They were then interleaved together. The idea was to give Wrong_NNUE.binpack closer to equal weighting with the Training_Data binpack  passed STC: https://tests.stockfishchess.org/tests/view/60d0c0a7a8ec07dc34c072b2 LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 18440 W: 1693 L: 1531 D: 15216 Ptnml(0-2): 67; 1225; 6464; 1407; 57  passed LTC: https://tests.stockfishchess.org/tests/view/60d762793beab81350ac9d72 LLR: 2.98 (-2.94;2.94) <0.50;3.50> Total: 93120 W: 3152 L: 2933 D: 87035 Ptnml(0-2): 48; 2581; 41076; 2814; 41  passed LTC (rebased branch to current master): https://tests.stockfishchess.org/tests/view/60d85eeb3beab81350ac9e2b LLR: 2.96 (-2.94;2.94) <0.50;3.50> Total: 42688 W: 1347 L: 1206 D: 40135 Ptnml(0-2): 14; 1097; 18981; 1238; 14.  closes https://github.com/official-stockfish/Stockfish/pull/3592  Bench: 4906727,True,0,2021-06-01
vondele,vondele,2021-06-28 19:13:30+00:00,Update WDL model for NNUE  This updates the WDL model based on the LTC statistics in June this year (10M games); so from pre-NNUE to NNUE based results.  (for old results see; https://github.com/official-stockfish/Stockfish/pull/2778)  As before the fit by the model to the data is quite good.  closes https://github.com/official-stockfish/Stockfish/pull/3582  No functional change,True,0,2021-06-01
BM123499,vondele,2021-06-28 19:12:04+00:00,Simplify Reductions Initialization  passed  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 45032 W: 3600 L: 3518 D: 37914 Ptnml(0-2): 111; 2893; 16435; 2957; 120 https://tests.stockfishchess.org/tests/view/60d2655d40925195e7a6c527  LTC: LLR: 3.00 (-2.94;2.94) <-2.50;0.50> Total: 25728 W: 786 L: 722 D: 24220 Ptnml(0-2): 5; 650; 11494; 706; 9 https://tests.stockfishchess.org/tests/view/60d2b14240925195e7a6c577  closes https://github.com/official-stockfish/Stockfish/pull/3584  bench: 4602977,True,0,2021-06-01
snicolet,snicolet,2021-06-22 09:51:03+00:00,"Detect fortresses a little bit quicker  In the so-called ""hybrid"" method of evaluation of current master; we use the classical eval (because of its speed) instead of the NNUE eval when the classical material balance approximation hints that the position is ""winning enough"" to rely on the classical eval.  This trade-off idea between speed and accuracy works well in general; but in some fortress positions the classical eval is just bad. So in shuffling branches of the search tree; we (slowly) increase the thresehold so that eventually we don't trust classical anymore and switch to NNUE evaluation.  This patch increases that threshold faster; so that we switch to NNUE quicker in shuffling branches. Idea is to incite Stockfish to spend less time in fortresses lines in the search tree; and spend more time searching the critical lines.  passed STC: LLR: 2.96 (-2.94;2.94) <-0.50;2.50> Total: 47872 W: 3908 L: 3720 D: 40244 Ptnml(0-2): 122; 3053; 17419; 3199; 143 https://tests.stockfishchess.org/tests/view/60cef34b457376eb8bcab79d  passed LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 73616 W: 2326 L: 2143 D: 69147 Ptnml(0-2): 21; 1940; 32705; 2119; 23 https://tests.stockfishchess.org/tests/view/60cf6d842114332881e73528  Retested at LTC against lastest master: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 18264 W: 642 L: 532 D: 17090 Ptnml(0-2): 6; 479; 8055; 583; 9 https://tests.stockfishchess.org/tests/view/60d18cd540925195e7a6c351  closes https://github.com/official-stockfish/Stockfish/pull/3578  Bench: 5139233",True,1,2021-06-01
MichaelB7,vondele,2021-06-21 21:16:55+00:00,Make net nn-190f102a22c3.nnue the default net.  Trained with the pytorch trainer: https://github.com/glinscott/nnue-pytorch  python train.py i:/bin/all.binpack i:/bin/all.binpack --gpus 1 --threads 4 --num-workers 30 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --random-fen-skipping 3 --features=HalfKAv2^ --lambda=1.0 --max_epochs=440 --seed %random%%random% --default_root_dir exp/run_17 --resume-from-model ./pt/nn-75980ca503c6.pt  This run is thus started from the previous master net.  all.binpack equaled 4 parts Wrong_NNUE_2.binpack https://drive.google.com/file/d/1seGNOqcVdvK_vPNq98j-zV3XPE5zWAeq/view?usp=sharing plus two parts of Training_Data.binpack https://drive.google.com/file/d/1RFkQES3DpsiJqsOtUshENtzPfFgUmEff/view?usp=sharing Each set was concatenated together - making one large Wrong_NNUE 2 binpack and one large Training so the were approximately equal in size. They were then interleaved together. The idea was to give Wrong_NNUE.binpack closer to equal weighting with the Training_Data binpack  passed LTC https://tests.stockfishchess.org/tests/view/60d09f52b4c17000d679517f LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 32184 W: 1100 L: 970 D: 30114 Ptnml(0-2): 10; 878; 14193; 994; 17  passed STC https://tests.stockfishchess.org/tests/view/60d086c02114332881e7368e LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 11360 W: 1056 L: 906 D: 9398 Ptnml(0-2): 25; 735; 4026; 853; 41  closes https://github.com/official-stockfish/Stockfish/pull/3576  Bench: 4631244,True,0,2021-06-01
vondele,vondele,2021-06-21 21:14:58+00:00,Fix build error on OSX  directly use integer version for cp calculation.  fixes https://github.com/official-stockfish/Stockfish/issues/3573  closes https://github.com/official-stockfish/Stockfish/pull/3574  No functional change,True,0,2021-06-01
snicolet,vondele,2021-06-21 20:58:56+00:00,"Remove the Contempt UCI option  This patch removes the UCI option for setting Contempt in classical evaluation.  It is exactly equivalent to using Contempt=0 for the UCI contempt value and keeping the dynamic part in the algo (renaming this dynamic part `trend` to better describe what it does). We have tried quite hard to implement a working Contempt feature for NNUE but nothing really worked; so it is probably time to give up.  Interested chess fans wishing to keep playing with the UCI option for Contempt and use it with the classical eval are urged to download the version tagged ""SF_Classical"" of Stockfish (dated 31 July 2020); as it was the last version where our search algorithm was tuned for the classical eval and is probably our strongest classical player ever: https://github.com/official-stockfish/Stockfish/tags  Passed STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 72904 W: 6228 L: 6175 D: 60501 Ptnml(0-2): 221; 5006; 25971; 5007; 247 https://tests.stockfishchess.org/tests/view/60c98bf9457376eb8bcab18d  Passed LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 45168 W: 1601 L: 1547 D: 42020 Ptnml(0-2): 38; 1331; 19786; 1397; 32 https://tests.stockfishchess.org/tests/view/60c9c7fa457376eb8bcab1bb  closes https://github.com/official-stockfish/Stockfish/pull/3575  Bench: 4947716",True,0,2021-06-01
snicolet,snicolet,2021-06-20 21:17:07+00:00,Keep more pawns and pieces when attacking  This patch increase the weight of pawns and pieces from 28 to 32 in the scaling formula we apply to the output of the NNUE pure eval.  Increasing this gradient for pawns and pieces means that Stockfish will try a little harder to keep material when she has the advantage; and try a little bit harder to escape into an endgame when she is under pressure.  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 53168 W: 4371 L: 4177 D: 44620 Ptnml(0-2): 160; 3389; 19283; 3601; 151 https://tests.stockfishchess.org/tests/view/60cefd1d457376eb8bcab7ab  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 10888 W: 386 L: 288 D: 10214 Ptnml(0-2): 3; 260; 4821; 356; 4 https://tests.stockfishchess.org/tests/view/60cf709d2114332881e7352b  closes https://github.com/official-stockfish/Stockfish/pull/3571  Bench: 4965430,True,6,2021-06-01
MichaelB7,vondele,2021-06-19 21:24:35+00:00,Make net nn-75980ca503c6.nnue the default.  trained with the Python command  c:\nnue>python train.py i:/bin/all.binpack i:/bin/all.binpack --gpus 1 --threads 4 --num-workers 30 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --random-fen-skipping 3 --features=HalfKAv2^ --lambda=1.0 --max_epochs=440 --seed %random%%random% --default_root_dir exp/run_10 --resume-from-model ./pt/nn-3b20abec10c1.pt ` all.binpack equaled 4 parts Wrong_NNUE_2.binpack https://drive.google.com/file/d/1seGNOqcVdvK_vPNq98j-zV3XPE5zWAeq/view?usp=sharing plus two parts of Training_Data.binpack https://drive.google.com/file/d/1RFkQES3DpsiJqsOtUshENtzPfFgUmEff/view?usp=sharing Each set was concatenated together - making one large Wrong_NNUE 2 binpack and one large Training so the were approximately equal in size. They were then interleaved together. The idea was to give Wrong_NNUE.binpack closer to equal weighting with the Training_Data binpack .  Net nn-3b20abec10c1.nnue was chosen as the --resume-from-model with the idea that through learning; the manually hex edited values will be learned and will not need to be manually adjusted going forward. They would also be fine tuned by the learning process.  passed STC: https://tests.stockfishchess.org/tests/view/60cdf91e457376eb8bcab66f LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 18256 W: 1639 L: 1479 D: 15138 Ptnml(0-2): 59; 1179; 6505; 1313; 72  passed LTC: https://tests.stockfishchess.org/tests/view/60ce2166457376eb8bcab6e1 LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 18792 W: 654 L: 542 D: 17596 Ptnml(0-2): 9; 490; 8291; 592; 14  closes https://github.com/official-stockfish/Stockfish/pull/3570  Bench: 5020972,True,5,2021-06-01
Sopel97,snicolet,2021-06-19 09:57:01+00:00,Change trace with NNUE eval support  This patch adds some more output to the `eval` command. It adds a board display with estimated piece values (method is remove-piece; evaluate; put-piece); and splits the NNUE evaluation with (psqt;layers) for each bucket for the NNUE net.  Example:  ```  ./stockfish position fen 3Qb1k1/1r2ppb1/pN1n2q1/Pp1Pp1Pr/4P2p/4BP2/4B1R1/1R5K b - - 11 40 eval   Contributing terms for the classical eval: +------------+-------------+-------------+-------------+ |    Term    |    White    |    Black    |    Total    | |            |   MG    EG  |   MG    EG  |   MG    EG  | +------------+-------------+-------------+-------------+ |   Material |  ----  ---- |  ----  ---- | -0.73 -1.55 | |  Imbalance |  ----  ---- |  ----  ---- | -0.21 -0.17 | |      Pawns |  0.35 -0.00 |  0.19 -0.26 |  0.16  0.25 | |    Knights |  0.04 -0.08 |  0.12 -0.01 | -0.08 -0.07 | |    Bishops | -0.34 -0.87 | -0.17 -0.61 | -0.17 -0.26 | |      Rooks |  0.12  0.00 |  0.08  0.00 |  0.04  0.00 | |     Queens |  0.00  0.00 | -0.27 -0.07 |  0.27  0.07 | |   Mobility |  0.84  1.76 |  0.01  0.66 |  0.83  1.10 | |King safety | -0.99 -0.17 | -0.72 -0.10 | -0.27 -0.07 | |    Threats |  0.27  0.27 |  0.73  0.86 | -0.46 -0.59 | |     Passed |  0.00  0.00 |  0.79  0.82 | -0.79 -0.82 | |      Space |  0.61  0.00 |  0.24  0.00 |  0.37  0.00 | |   Winnable |  ----  ---- |  ----  ---- |  0.00 -0.03 | +------------+-------------+-------------+-------------+ |      Total |  ----  ---- |  ----  ---- | -1.03 -2.14 | +------------+-------------+-------------+-------------+   NNUE derived piece values: +-------+-------+-------+-------+-------+-------+-------+-------+ |       |       |       |   Q   |   b   |       |   k   |       | |       |       |       | +12.4 | -1.62 |       |       |       | +-------+-------+-------+-------+-------+-------+-------+-------+ |       |   r   |       |       |   p   |   p   |   b   |       | |       | -3.89 |       |       | -0.84 | -1.19 | -3.32 |       | +-------+-------+-------+-------+-------+-------+-------+-------+ |   p   |   N   |       |   n   |       |       |   q   |       | | -1.81 | +3.71 |       | -4.82 |       |       | -5.04 |       | +-------+-------+-------+-------+-------+-------+-------+-------+ |   P   |   p   |       |   P   |   p   |       |   P   |   r   | | +1.16 | -0.91 |       | +0.55 | +0.12 |       | +0.50 | -4.02 | +-------+-------+-------+-------+-------+-------+-------+-------+ |       |       |       |       |   P   |       |       |   p   | |       |       |       |       | +2.33 |       |       | +1.17 | +-------+-------+-------+-------+-------+-------+-------+-------+ |       |       |       |       |   B   |   P   |       |       | |       |       |       |       | +4.79 | +1.54 |       |       | +-------+-------+-------+-------+-------+-------+-------+-------+ |       |       |       |       |   B   |       |   R   |       | |       |       |       |       | +4.54 |       | +6.03 |       | +-------+-------+-------+-------+-------+-------+-------+-------+ |       |   R   |       |       |       |       |       |   K   | |       | +4.81 |       |       |       |       |       |       | +-------+-------+-------+-------+-------+-------+-------+-------+   NNUE network contributions (Black to move) +------------+------------+------------+------------+ |   Bucket   |  Material  | Positional |   Total    | |            |   (PSQT)   |  (Layers)  |            | +------------+------------+------------+------------+ |  0         |  +  0.32   |  -  1.46   |  -  1.13   | |  1         |  +  0.25   |  -  0.68   |  -  0.43   | |  2         |  +  0.46   |  -  1.72   |  -  1.25   | |  3         |  +  0.55   |  -  1.80   |  -  1.25   | |  4         |  +  0.48   |  -  1.77   |  -  1.29   | |  5         |  +  0.40   |  -  2.00   |  -  1.60   | |  6         |  +  0.57   |  -  2.12   |  -  1.54   | <-- this bucket is used |  7         |  +  3.38   |  -  2.00   |  +  1.37   | +------------+------------+------------+------------+  Classical evaluation   -1.00 (white side) NNUE evaluation        +1.54 (white side) Final evaluation       +2.38 (white side) [with scaled NNUE; hybrid; ...]  ```  Also renames the export_net() function to save_eval() while there.  closes https://github.com/official-stockfish/Stockfish/pull/3562  No functional change,True,5,2021-06-01
proukornew,vondele,2021-06-19 09:22:30+00:00,Fix for Cygwin's environment build-profile (fixed)  The Cygwin environment has two g++ compilers; each with a different problem for compiling  Stockfish at the moment:  (a) g++.exe : full posix build compiler; linked to cygwin dll.      => This one has a problem embedding the net.  (b) x86_64-w64-mingw32-g++.exe : native Windows build compiler.      => This one manages to embed the net; but has a problem related to libgcov        when we use the profile-build target of Stockfish.  This patch solves the problem for compiler (b); so that our recommended command line if you want to build an optimized version of Stockfish on Cygwin becomes something like the following (you can change the ARCH value to whatever you want; but note the COMP and CXX variables pointing at the right compiler):  ```    make -j profile-build ARCH=x86-64-modern COMP=mingw CXX=x86_64-w64-mingw32-c++.exe ```  closes https://github.com/official-stockfish/Stockfish/pull/3569  No functional change,True,5,2021-06-01
vondele,vondele,2021-06-18 21:50:26+00:00,Make net nn-50144f835024.nnue the default  trained with the Python command  c:\nnue>python train.py i:/bin/all.binpack i:/bin/all.binpack --gpus 1 --threads 4 --num-workers 30 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --random-fen-skipping 3 --features=HalfKAv2^ --lambda=1.0 --max_epochs=440 --seed %random%%random% --default_root_dir exp/run_8 --resume-from-model ./pt/nn-6ad41a9207d0.pt ` all.binpack equaled 4 parts Wrong_NNUE_2.binpack https://drive.google.com/file/d/1seGNOqcVdvK_vPNq98j-zV3XPE5zWAeq/view?usp=sharing plus two parts of Training_Data.binpack https://drive.google.com/file/d/1RFkQES3DpsiJqsOtUshENtzPfFgUmEff/view?usp=sharing Each set was concatenated together - make one large Wrong_NNUE 2 binpack and one large Training_Data of approximate size. They were then interleaved together. The idea was to give Wrong_NNUE.binpack closer to equal weighting with the Training _Data binpack .  nn-6ad41a9207d0.pt was derived from a net vondele ran which passed STC quickly; but faltered in LTC. https://tests.stockfishchess.org/tests/view/60cba666457376eb8bcab443  STC: LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 18792 W: 2068 L: 1889 D: 14835 Ptnml(0-2): 82; 1480; 6117; 1611; 106 https://tests.stockfishchess.org/tests/view/60ccda8b457376eb8bcab568  LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 11376 W: 574 L: 454 D: 10348 Ptnml(0-2): 4; 412; 4747; 510; 15 https://tests.stockfishchess.org/tests/view/60ccf952457376eb8bcab58d  closes https://github.com/official-stockfish/Stockfish/pull/3568  Bench: 4900906,True,4,2021-06-01
Sopel97,vondele,2021-06-18 20:05:56+00:00,Add basic github workflow  move to github actions to replace travis CI.  First version; testing on linux using gcc and clang. gcc build with sanitizers and valgrind.  No functional change,True,4,2021-06-01
SFisGOD,vondele,2021-06-18 19:29:14+00:00,Update default net to nn-aa9d7eeb397e.nnue  Optimization of vondele's nn-33c9d39e5eb6.nnue using SPSA https://tests.stockfishchess.org/tests/view/60ca68be457376eb8bcab28b Setting: ck values are default based on how large the parameters are The new values for this net are the raw values at the end of the tuning (80k games)  The significant changes are in buckets 1 and 2 (5-12 pieces) so the main difference is in playing endgames if we compare it to nn-33c9. There is also change in bucket 7 (29-32 pieces) but not as substantial as the changes in buckets 1 and 2. If we interpret the changes based on an experiment a few months ago; this new net plays more optimistically during endgames and less optimistically during openings.  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 49504 W: 4246 L: 4053 D: 41205 Ptnml(0-2): 140; 3282; 17749; 3407; 174 https://tests.stockfishchess.org/tests/view/60cbd752457376eb8bcab478  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 88720 W: 4926 L: 4651 D: 79143 Ptnml(0-2): 105; 4048; 35793; 4295; 119 https://tests.stockfishchess.org/tests/view/60cc7828457376eb8bcab4fa  closes https://github.com/official-stockfish/Stockfish/pull/3566  Bench: 4758885,True,4,2021-06-01
Unknown,snicolet,2021-06-18 18:00:13+00:00,New default net nn-3b20abec10c1.nnue  This net was created by @pleomati; who manually edited with an hex editor 10 values randomly chosen in the LCSFNet10 net (nn-6ad41a9207d0.nnue) to create this one. The LCSFNet10 net was trained by Joost VandeVondele from a dataset combining Stockfish games and Leela games (16x10^9 positions from SF self-play at depth 9; and 6.3x10^9 positions from Leela games; so overall 72% of Stockfish positions and 28% of Leela positions).  passed STC 10+0.1: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 50888 W: 5881 L: 5654 D: 39353 Ptnml(0-2): 281; 4290; 16085; 4497; 291 https://tests.stockfishchess.org/tests/view/60cbfa68457376eb8bcab49a  passed LTC 60+0.6: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 25480 W: 1498 L: 1338 D: 22644 Ptnml(0-2): 36; 1155; 10193; 1325; 31 https://tests.stockfishchess.org/tests/view/60cc4af8457376eb8bcab4d4  closes https://github.com/official-stockfish/Stockfish/pull/3564  Bench: 4904930,True,4,2021-06-01
snicolet,snicolet,2021-06-17 16:10:01+00:00,"Revert ""Fix for Cygwin's environment build-profile""  This reverts commit ""Fix for Cygwin's environment build-profile""; as it was giving errors for ""make clean"" on some Windows environments. See comments in https://github.com/official-stockfish/Stockfish/commit/68bf362ea2385a641be9f5ed9ce2acdf55a1ecf1  Possibly somebody can propose a solution that would fix Cygwin builds and not break on other system too; stay tuned! :-)  No functional change",True,3,2021-06-01
BM123499,snicolet,2021-06-17 00:08:33+00:00,Simplify reduction when best move doesn't change frequently.  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 40400 W: 3468 L: 3377 D: 33555 Ptnml(0-2): 134; 2734; 14388; 2795; 149 https://tests.stockfishchess.org/tests/view/60c93e5a457376eb8bcab15f  LTC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 34200 W: 1190 L: 1128 D: 31882 Ptnml(0-2): 22; 998; 15001; 1054; 25 https://tests.stockfishchess.org/tests/view/60c96a1a457376eb8bcab180  closes https://github.com/official-stockfish/Stockfish/pull/3559  bench: 5629669,True,3,2021-06-01
proukornew,snicolet,2021-06-16 23:14:20+00:00,Fix for Cygwin's environment build-profile  The Cygwin environment has two g++ compilers; each with a different problem for compiling  Stockfish at the moment:  (a) g++.exe : full posix build compiler; linked to cygwin dll.      => This one has a problem embedding the net.  (b) x86_64-w64-mingw32-g++.exe : native Windows build compiler.      => This one manages to embed the net; but has a problem related to libgcov        when we use the profile-build target of Stockfish.  This patch solves the problem for compiler (b); so that our recommended command line if you want to build an optimized version of Stockfish on Cygwin becomes something like the following (you can change the ARCH value to whatever you want; but note the COMP and CXX variables pointing at the right compiler):  ```    make -j profile-build ARCH=x86-64-modern COMP=mingw CXX=x86_64-w64-mingw32-c++.exe ```  closes https://github.com/official-stockfish/Stockfish/pull/3463  No functional change,True,2,2021-06-01
vondele,snicolet,2021-06-15 20:08:40+00:00,New default net nn-33c9d39e5eb6.nnue  As the previous net; this net is trained on Leela games as provided by borg. See also https://lczero.org/blog/2021/06/the-importance-of-open-data/  The particular data set; which is a mix of T60 and T74 data; is now available as a single binpack: https://drive.google.com/file/d/1RFkQES3DpsiJqsOtUshENtzPfFgUmEff/view?usp=sharing  The training command was: python train.py ../../training_data_pylon.binpack ../../training_data_pylon.binpack --gpus 1 --threads 2 --num-workers 2 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --random-fen-skipping 10 --features=HalfKAv2^   --lambda=1.0  --max_epochs=440 --seed $RANDOM --default_root_dir exp/run_2  passed STC: https://tests.stockfishchess.org/tests/view/60c887cb457376eb8bcab054 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 12792 W: 1483 L: 1311 D: 9998 Ptnml(0-2): 62; 989; 4131; 1143; 71  passed LTC: https://tests.stockfishchess.org/tests/view/60c8e5c4457376eb8bcab0f0 LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 11272 W: 601 L: 477 D: 10194 Ptnml(0-2): 9; 421; 4657; 535; 14  also had strong LTC performance against another strong net of the series: https://tests.stockfishchess.org/tests/view/60c8c40d457376eb8bcab0c6  closes https://github.com/official-stockfish/Stockfish/pull/3557  Bench: 5032320,True,1,2021-06-01
joergoster,joergoster,2021-06-14 15:28:30+00:00,Fix a rare case of wrong TB ranking of a root move leading to a 3-fold repetition. With this small fix a draw ranking and thus a draw score is being applied. This works for both; ranking by dtz or wdl tables.  Fixes https://github.com/official-stockfish/Stockfish/issues/3542  (No functional change without TBs.) Bench: 4877339,True,0,2021-06-01
Sopel97,vondele,2021-06-14 09:22:08+00:00,Reduce the number of accumulator states  Reduce from 3 to 2. Make the intent of the states clearer.  STC: https://tests.stockfishchess.org/tests/view/60c50111457376eb8bcaad03 LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 61888 W: 5007 L: 4944 D: 51937 Ptnml(0-2): 164; 3947; 22649; 4030; 154  LTC: https://tests.stockfishchess.org/tests/view/60c52b1c457376eb8bcaad2c LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 20248 W: 688 L: 618 D: 18942 Ptnml(0-2): 7; 551; 8946; 605; 15  closes https://github.com/official-stockfish/Stockfish/pull/3548  No functional change.,True,0,2021-06-01
Unknown,snicolet,2021-06-14 07:24:07+00:00,Update default net to nn-8e47cf062333.nnue  This net is the result of training on data used by the Leela project. More precisely; we shuffled T60 and T74 data kindly provided by borg (for different Tnn; the data is a result of Leela selfplay with differently sized Leela nets).  The data is available at vondele's google drive: https://drive.google.com/drive/folders/1mftuzYdl9o6tBaceR3d_VBQIrgKJsFpl.  The Leela data comes in small chunks of .binpack files. To shuffle them; we simply used a small python script to randomly rename the files; and then concatenated them using `cat`. As validation data we picked a file of T60 data. We will further investigate T74 data.  The training for the NNUE architecture used 200 epochs with the Python trainer from the Stockfish project. Unlike the previous run we tried with this data; this run does not have adjusted scaling � not because we didn't want to; but because we forgot. However; this training randomly skips 40% more positions than previous run. The loss was very spiky and decreased slower than it does usually.  Training loss: https://github.com/official-stockfish/images/blob/main/training-loss-8e47cf062333.png Validation loss: https://github.com/official-stockfish/images/blob/main/validation-loss-8e47cf062333.png  This is the exact training command: python train.py --smart-fen-skipping --random-fen-skipping 14 --batch-size 16384 --threads 4 --num-workers 4 --gpus 1 trainingdata\training_data.binpack validationdata\val.binpack  ---  10k STC result: ELO: 3.61 +-3.3 (95%) LOS: 98.4% Total: 10000 W: 1241 L: 1137 D: 7622 Ptnml(0-2): 68; 841; 3086; 929; 76 https://tests.stockfishchess.org/tests/view/60c67e50457376eb8bcaae70  10k LTC result: ELO: 2.71 +-2.4 (95%) LOS: 98.8% Total: 10000 W: 659 L: 581 D: 8760 Ptnml(0-2): 22; 485; 3900; 579; 14 https://tests.stockfishchess.org/tests/view/60c69deb457376eb8bcaae98  Passed LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 9648 W: 685 L: 545 D: 8418 Ptnml(0-2): 22; 448; 3740; 596; 18 https://tests.stockfishchess.org/tests/view/60c6d41c457376eb8bcaaecf  ---  closes https://github.com/official-stockfish/Stockfish/pull/3550  Bench: 4877339,True,0,2021-06-01
Sopel97,snicolet,2021-06-13 11:10:56+00:00,Register count for feature transformer  Compute optimal register count for feature transformer accumulation dynamically. This also introduces a change where AVX512 would only use 8 registers instead of 16 (now possible due to a 2x increase in feature transformer size).  closes https://github.com/official-stockfish/Stockfish/pull/3543  No functional change,True,6,2021-06-01
Vizvezdenec,snicolet,2021-06-13 10:00:20+00:00,Do less LMR extensions  This patch restricts LMR extensions (of non-transposition table moves) from being used when the transposition table move was extended by two plies via singular extension. This may serve to limit search explosions in certain positions.  This makes a lot of sense because the precondition for the tt-move to have been singular extended by two plies is that the result of the alternate search (with excluded the tt-move) has been a hard fail low: it is natural to later search less for non tt-moves in this situation.  The current state of depth/extensions/reductions management is getting quite tricky in our search algo; see https://github.com/official-stockfish/Stockfish/pull/3546#issuecomment-860174549 for some discussion. Suggestions welcome!  Passed STC https://tests.stockfishchess.org/tests/view/60c3f293457376eb8bcaac8d LLR: 2.95 (-2.94;2.94) <-0.50;2.50> Total: 117984 W: 9698 L: 9430 D: 98856 Ptnml(0-2): 315; 7708; 42703; 7926; 340  passed LTC https://tests.stockfishchess.org/tests/view/60c46ea5457376eb8bcaacc7 LLR: 2.97 (-2.94;2.94) <0.50;3.50> Total: 11280 W: 401 L: 302 D: 10577 Ptnml(0-2): 2; 271; 4998; 364; 5  closes https://github.com/official-stockfish/Stockfish/pull/3546  Bench: 4709974,True,6,2021-06-01
snicolet,snicolet,2021-06-13 08:02:43+00:00,Clarify use of UCI options  Update README.md to clarify use of UCI options  closes https://github.com/official-stockfish/Stockfish/pull/3540  No functional change,True,6,2021-06-01
Sopel97,snicolet,2021-06-13 07:39:03+00:00,Read NNUE net faster  Load feature transformer weights in bulk on little-endian machines. This is in particular useful to test new nets with c-chess-cli; see https://github.com/lucasart/c-chess-cli/issues/44  ``` $ time ./stockfish.exe uci  Before : 0m0.914s After  : 0m0.483s ```  No functional change,True,6,2021-06-01
vondele,snicolet,2021-06-11 18:33:24+00:00,Limit double extensions  Double extensions can lead to search explosions; for specific positions. Currently; however; these double extensions are worth about 10Elo and cannot be removed. This patch instead limits the number of double extensions given to a maximum of 3.  This fixes https://github.com/official-stockfish/Stockfish/issues/3532 where the following testcase was shown to be problematic:  ``` uci setoption name Hash value 4 setoption name Contempt value 0 ucinewgame position fen 8/Pk6/8/1p6/8/P1K5/8/6B1 w - - 37 130 go depth 20 ```  passed STC: https://tests.stockfishchess.org/tests/view/60c13161457376eb8bcaaa0f LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 73256 W: 6114 L: 6062 D: 61080 Ptnml(0-2): 222; 4912; 26306; 4968; 220  passed LTC: https://tests.stockfishchess.org/tests/view/60c196fb457376eb8bcaaa6b LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 166440 W: 5559 L: 5594 D: 155287 Ptnml(0-2): 106; 4921; 73197; 4894; 102  closes https://github.com/official-stockfish/Stockfish/pull/3544  Bench: 5067605,True,4,2021-06-01
BM123499,snicolet,2021-06-08 18:16:20+00:00,Simplify promotion move generator  This patch removes Knight promotion checks from Captures. As a consequence; it also removes this underpromotion from qsearch.  STC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 37776 W: 3113 L: 3023 D: 31640 Ptnml(0-2): 103; 2419; 13755; 2507; 104 https://tests.stockfishchess.org/tests/view/60be6a06457376eb8bcaa775  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 39760 W: 1257 L: 1203 D: 37300 Ptnml(0-2): 11; 1079; 17646; 1133; 11 https://tests.stockfishchess.org/tests/view/60beb972457376eb8bcaa7c5  closes https://github.com/official-stockfish/Stockfish/pull/3536  Bench: 5530620,True,1,2021-06-01
BM123499,vondele,2021-06-06 19:22:39+00:00,Reduce in LMR reduction on PvNode  reduce reduction in LMR by 1 on PvNode.  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 266080 W: 22438 L: 21996 D: 221646 Ptnml(0-2): 774; 17874; 95376; 18168; 848 https://tests.stockfishchess.org/tests/view/60bc0661457376eb8bcaa4bb  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 20144 W: 698 L: 587 D: 18859 Ptnml(0-2): 2; 529; 8906; 626; 9 https://tests.stockfishchess.org/tests/view/60bcc3f2457376eb8bcaa58d  closes https://github.com/official-stockfish/Stockfish/pull/3534  bench: 5173012,True,6,2021-06-01
gvreuls,snicolet,2021-06-05 09:38:28+00:00,"Makefile: Extend sanitize support  Enable compiling with multiple sanitizers at once.  Syntax: make build ARCH=x86-64-avx512 debug=on sanitize=""address undefined""  closes https://github.com/official-stockfish/Stockfish/pull/3524  No functional change.",True,5,2021-06-01
vondele,snicolet,2021-06-05 08:55:57+00:00,Enhance CI to error on leaks  Add flags to valgrind in our Continuous Integration scripts; to error on memory leaks.  closes https://github.com/official-stockfish/Stockfish/pull/3525  No functional change.,True,5,2021-06-01
gvreuls,snicolet,2021-06-05 08:47:46+00:00,"Revert ""Simplify En Passant""  This reverts commit 9f8058bd26df1c3ca37b85f811026f1eb82e6524.  Fixes the memory leak discussed in pull request #3523 https://github.com/official-stockfish/Stockfish/pull/3523  Passed non-regression STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 76184 W: 6330 L: 6282 D: 63572 Ptnml(0-2): 202; 5047; 27564; 5059; 220 https://tests.stockfishchess.org/tests/view/60ba146c457376eb8bcaa2e2  closes https://github.com/official-stockfish/Stockfish/pull/3527  Benched to verify there is no functional change.  Bench: 4364128",True,5,2021-06-01
snicolet,snicolet,2021-06-04 12:07:46+00:00,Clean SIMD code a bit  Cleaner vector code structure in feature transformer. This patch just regroups the parts of the inner loop for each SIMD instruction set.  Tested for non-regression: LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 115760 W: 9835 L: 9831 D: 96094 Ptnml(0-2): 326; 7776; 41715; 7694; 369 https://tests.stockfishchess.org/tests/view/60b96b39457376eb8bcaa26e  It would be nice if a future patch could use some of the macros at the top of the file to unify the code between the distincts SIMD instruction sets (of course; unifying the Relu will be the challenge).  closes https://github.com/official-stockfish/Stockfish/pull/3506  No functional change,True,4,2021-06-01
snicolet,snicolet,2021-06-03 23:32:11+00:00,"Makefile: better ""make clean"" for Windows  Make clean should be really clean on Windows.  Fixes issue https://github.com/official-stockfish/Stockfish/issues/3291 Closes https://github.com/official-stockfish/Stockfish/pull/3517  No functional change",True,3,2021-06-01
BM123499,snicolet,2021-06-03 23:23:49+00:00,Introducing NodeType Root  We transform rootNode into constexpr by adding a new NodeType `Root`; which causes a speed up.  Local test: ``` Build Tester: 1.4.7.0 Windows 10 (Version 10.0; Build 0; 64-bit Edition) Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz SafeMode: No Running In VM: No HyperThreading Enabled: Yes CPU Warmup: Yes Command Line: bench Tests per Build: 25 ANOVA: n/a                  Engine# (NPS)                     Speedup     Sp     Conf. 95%    S.S. patch  (920.179;4) ---> master  (906.329;2)  --->  1;528%  20.336;5     Yes        No ```  ---------  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 98216 W: 8348 L: 8102 D: 81766 Ptnml(0-2): 295; 6357; 35549; 6621; 286 https://tests.stockfishchess.org/tests/view/60b797e2457376eb8bcaa0ab  Yellow LTC: LLR: -2.95 (-2.94;2.94) <0.50;3.50> Total: 76936 W: 2651 L: 2626 D: 71659 Ptnml(0-2): 29; 2233; 33916; 2264; 26 https://tests.stockfishchess.org/tests/view/60b80d6d457376eb8bcaa145  closes https://github.com/official-stockfish/Stockfish/pull/3522  No functional change,True,3,2021-06-01
Unknown,vondele,2021-06-03 19:22:56+00:00,Make extra time for bestMoveInstability dependent on rootdepth.  This change allocates more base time to moves and makes the additional time added for best move instability dependent on rootdepth.  STC 10+0.1 : LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 19432 W: 1711 L: 1553 D: 16168 Ptnml(0-2): 47; 1250; 6989; 1358; 72 https://tests.stockfishchess.org/tests/view/60b8cd41457376eb8bcaa1ad  LTC 60+0.6 : LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 22480 W: 810 L: 693 D: 20977 Ptnml(0-2): 9; 603; 9902; 714; 12 https://tests.stockfishchess.org/tests/view/60b8e5bf457376eb8bcaa1e6  closes https://github.com/official-stockfish/Stockfish/pull/3526  Bench 4364128,True,3,2021-06-01
vondele,snicolet,2021-06-03 14:25:44+00:00,Update default net to nn-7e66505906a6.nnue  Trained with pytorch using the master branch and recommended settings; the data used is the previous 64B binpack enhanced with a 2B binpack generated using an opening book of positions for with the static eval is significantly different from d9 search.  book           : https://drive.google.com/file/d/1rHcKY5rv34kwku6g89OhnE8Bkfq3UWau/view?usp=sharing book generation: https://github.com/vondele/Stockfish/commit/3ce43ab0c4ce09c1fc5bca5ca27a248e67fddd24 binpack        : https://drive.google.com/file/d/1rHcKY5rv34kwku6g89OhnE8Bkfq3UWau/view?usp=sharing  -------  Data generation command:  generate_training_data depth 9 count 31250000 random_multi_pv 2 random_multi_pv_diff 100 random_move_max_ply 8 random_move_count 3 set_recommended_uci_options eval_limit 32000 output_file_name output.binpack book wrongNNUE.epd seed ${RANDOM}${RANDOM}  Training command:  python train.py ../../all_d9_fishd9_d8_d10_wrong_shuffle.binpack ../../all_d9_fishd9_d8_d10_wrong_shuffle.binpack  --gpus 1 --threads 2 --num-workers 2 --batch-size 16384 --progress_bar_refresh_rate 300 --smart-fen-skipping --random-fen-skipping 3 --features=HalfKAv2^   --lambda=1.0  --max_epochs=400 --seed $RANDOM --default_root_dir exp/run_5  -------  passed STC: https://tests.stockfishchess.org/tests/view/60b7c79a457376eb8bcaa104 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 64592 W: 6254 L: 6028 D: 52310 Ptnml(0-2): 255; 4785; 22020; 4951; 285  passed LTC: https://tests.stockfishchess.org/tests/view/60b85307457376eb8bcaa182 LLR: 2.96 (-2.94;2.94) <0.50;3.50> Total: 45560 W: 1998 L: 1826 D: 41736 Ptnml(0-2): 36; 1604; 19335; 1762; 43  closes https://github.com/official-stockfish/Stockfish/pull/3521  Bench: 4364128,True,3,2021-06-01
snicolet,web-flow,2021-06-02 06:37:00+00:00,Typography change for bench,True,2,2021-06-01
locutus2,snicolet,2021-06-01 21:21:00+00:00,Remove formerPV variable.  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 75672 W: 6546 L: 6496 D: 62630 Ptnml(0-2): 238; 5274; 26761; 5326; 237 https://tests.stockfishchess.org/tests/view/60b349c0ec0c03148cbed055  LTC: LLR: 2.98 (-2.94;2.94) <-2.50;0.50> Total: 137816 W: 4676 L: 4689 D: 128451 Ptnml(0-2): 52; 4237; 60354; 4202; 63 https://tests.stockfishchess.org/tests/view/60b38970ec0c03148cbed075  closes https://github.com/official-stockfish/Stockfish/pull/3515  Bench: 4892288,True,1,2021-06-01
joergoster,snicolet,2021-06-01 19:25:28+00:00,Pre-initialize ss->ply  We pre-initialize ss->ply over the whole stack. There is no need to re-assign the same value(s) over and over again while searching. Probably a tiny speedup on longer searches.  Tested for no regression:  STC LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 25784 W: 2205 L: 2101 D: 21478 Ptnml(0-2): 62; 1660; 9368; 1716; 86 https://tests.stockfishchess.org/tests/view/60b516c6457376eb8bca9dfa  LTC LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 26200 W: 944 L: 878 D: 24378 Ptnml(0-2): 12; 732; 11545; 800; 11 https://tests.stockfishchess.org/tests/view/60b53652457376eb8bca9e0e  closes https://github.com/official-stockfish/Stockfish/pull/3516  No functional change.,True,1,2021-06-01
candirufish,vondele,2021-05-31 16:31:32+00:00,Check Extension with Static Evaluation  extension for checking moves; at higher depth and more decisive positions.  stc: LLR: 2.97 (-2.94;2.94) <-0.50;2.50> Total: 87008 W: 7337 L: 7100 D: 72571 Ptnml(0-2): 264; 5737; 31270; 5964; 269 https://tests.stockfishchess.org/tests/view/60b1034787a1a67ae56c47b6  ltc: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 79320 W: 2629 L: 2432 D: 74259 Ptnml(0-2): 29; 2205; 35000; 2392; 34 https://tests.stockfishchess.org/tests/view/60b1ae0b87a1a67ae56c487c  closes https://github.com/official-stockfish/Stockfish/pull/3514  Bench: 4447112,True,0,2021-05-01
Sopel97,vondele,2021-05-30 19:31:58+00:00,Fix export of the feature transformer.  PSQT export was missing.  fixes #3507  closes https://github.com/official-stockfish/Stockfish/pull/3508  No functional change,True,6,2021-05-01
vondele,vondele,2021-05-30 19:30:15+00:00,Simplify NNUE / classical evaluation selection  for the new network architecture these rules can be simplified; closer to the original PSQT difference based again.  passed STC LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 22656 W: 1979 L: 1868 D: 18809 Ptnml(0-2): 70; 1496; 8087; 1603; 72 https://tests.stockfishchess.org/tests/view/60b24579db3c4776cb89d122  passed LTC LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 30224 W: 1015 L: 953 D: 28256 Ptnml(0-2): 4; 860; 13330; 906; 12 https://tests.stockfishchess.org/tests/view/60b27613db3c4776cb89d145  closes https://github.com/official-stockfish/Stockfish/pull/3511  Bench: 3937626,True,6,2021-05-01
VoyagerOne,vondele,2021-05-28 18:16:11+00:00,Remove Stat Reset at beta cutoff  STC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 63936 W: 5350 L: 5288 D: 53298 Ptnml(0-2): 184; 4295; 22954; 4345; 190 https://tests.stockfishchess.org/tests/view/60affb4c12066fd299795c64  LTC: LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 35856 W: 1201 L: 1142 D: 33513 Ptnml(0-2): 7; 1031; 15795; 1086; 9 https://tests.stockfishchess.org/tests/view/60b0537812066fd299795cc6  closes https://github.com/official-stockfish/Stockfish/pull/3505  bench: 3831936,True,4,2021-05-01
snicolet,snicolet,2021-05-26 23:21:56+00:00,"Do not use lazy evaluation inside NNUE  This simplification patch implements two changes:  1. it simplifies away the so-called ""lazy"" path in the NNUE evaluation internals;    where we trusted the psqt head alone to avoid the costly ""positional"" head in    some cases; 2. it raises a little bit the NNUEThreshold1 in evaluate.cpp (from 682 to 800);    which increases the limit where we switched from NNUE eval to Classical eval.  Both effects increase the number of positional evaluations done by our new net architecture; but the results of our tests below seem to indicate that the loss of speed will be compensated by the gain of eval quality.  STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 26280 W: 2244 L: 2137 D: 21899 Ptnml(0-2): 72; 1755; 9405; 1810; 98 https://tests.stockfishchess.org/tests/view/60ae73f112066fd299795a51  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 20592 W: 750 L: 677 D: 19165 Ptnml(0-2): 9; 614; 8980; 681; 12 https://tests.stockfishchess.org/tests/view/60ae88e812066fd299795a82  closes https://github.com/official-stockfish/Stockfish/pull/3503  Bench: 3817907",True,2,2021-05-01
locutus2,snicolet,2021-05-26 15:32:54+00:00,Less reduction for capture/promotions.  Exclude captures/promotions at expected cut nodes (which also not a former PV node) from LMR if a response to the first previous opponent move.  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 288656 W: 24886 L: 24413 D: 239357 Ptnml(0-2): 900; 19738; 102578; 20213; 899 https://tests.stockfishchess.org/tests/view/60ad505112066fd29979595b  LTC: LLR: 2.97 (-2.94;2.94) <0.50;3.50> Total: 31344 W: 1107 L: 975 D: 29262 Ptnml(0-2): 12; 879; 13757; 1013; 11 https://tests.stockfishchess.org/tests/view/60adffce12066fd2997959d2  closes https://github.com/official-stockfish/Stockfish/pull/3500  Bench: 3827710,True,2,2021-05-01
IIvec,snicolet,2021-05-26 15:25:05+00:00,Simplify the thread term for reduction formula  Dependance on Threads.size() was removed Search::init() for the Reductions[] initialization.  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 17376 W: 1024 L: 929 D: 15423 Ptnml(0-2): 24; 781; 6989; 864; 30 https://tests.stockfishchess.org/tests/view/60ac110812066fd2997957dc  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 145552 W: 3656 L: 3673 D: 138223 Ptnml(0-2): 37; 3351; 66014; 3340; 34 https://tests.stockfishchess.org/tests/view/60ac267412066fd299795825  closes https://github.com/official-stockfish/Stockfish/pull/3502  Bench 3864295,True,2,2021-05-01
Sopel97,vondele,2021-05-25 19:40:51+00:00,"Expose the lazy threshold for the feature transformer PSQT as a parameter.  Definition of the lazy threshold moved to evaluate.cpp where all others are. Lazy threshold only used for real searches; not used for the ""eval"" call. This preserves the purity of NNUE evaluation; which is useful to verify consistency between the engine and the NNUE trainer.  closes https://github.com/official-stockfish/Stockfish/pull/3499  No functional change",True,1,2021-05-01
BM123499,vondele,2021-05-24 13:52:22+00:00,Increased reduction for captures in LMR  It now does; in LMR; an increased on reduction by 1 for captures in cut nodes.  STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 30656 W: 2565 L: 2397 D: 25694 Ptnml(0-2): 63; 2012; 11029; 2142; 82 https://tests.stockfishchess.org/tests/view/60a96733ce8ea25a3ef04178  LTC: LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 124840 W: 4139 L: 3878 D: 116823 Ptnml(0-2): 48; 3480; 55100; 3747; 45 https://tests.stockfishchess.org/tests/view/60a995f5ce8ea25a3ef041b7  closes https://github.com/official-stockfish/Stockfish/pull/3494  bench: 3864295,True,0,2021-05-01
snicolet,vondele,2021-05-22 19:09:22+00:00,Sometimes change the (materialist; positional) balance  Our new nets output two values for the side to move in the last layer. We can interpret the first value as a material evaluation of the position; and the second one as the dynamic; positional value of the location of pieces.  This patch changes the balance for the (materialist; positional) parts of the score from (128; 128) to (121; 135) when the piece material is equal between the two players; but keeps the standard (128; 128) balance when one player is at least an exchange up.  Passed STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 15936 W: 1421 L: 1266 D: 13249 Ptnml(0-2): 37; 1037; 5694; 1134; 66 https://tests.stockfishchess.org/tests/view/60a82df9ce8ea25a3ef0408f  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 13904 W: 516 L: 410 D: 12978 Ptnml(0-2): 4; 374; 6088; 484; 2 https://tests.stockfishchess.org/tests/view/60a8bbf9ce8ea25a3ef04101  closes https://github.com/official-stockfish/Stockfish/pull/3492  Bench: 3856635,True,5,2021-05-01
BM123499,snicolet,2021-05-22 17:23:15+00:00,Tuning Search  This patch tunes constant in search.cpp  STC: LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 30648 W: 2580 L: 2410 D: 25658 Ptnml(0-2): 80; 1969; 11093; 2065; 117 https://tests.stockfishchess.org/tests/view/60a71d3cce8ea25a3ef03fae  LTC: LLR: 2.95 (-2.94;2.94) <0.50;3.50> Total: 52896 W: 1776 L: 1617 D: 49503 Ptnml(0-2): 13; 1462; 23347; 1605; 21 https://tests.stockfishchess.org/tests/view/60a794ddce8ea25a3ef0400a  closes https://github.com/official-stockfish/Stockfish/pull/3491  Bench: 4004731,True,5,2021-05-01
BM123499,snicolet,2021-05-22 17:02:36+00:00,Simplify reduction for consecutive fails  Revert the heuristic introduced in #3184; by which we reduced more the late sons of the root position after consecutive fail highs.  --- Before new net architecture:  STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 226336 W: 20373 L: 20500 D: 185463 Ptnml(0-2): 755; 16087; 79595; 15992; 739 https://tests.stockfishchess.org/tests/view/609dec205085663412d08e9d  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 67432 W: 2411 L: 2375 D: 62646 Ptnml(0-2): 33; 1944; 29714; 2004; 21 https://tests.stockfishchess.org/tests/view/609ee30f5085663412d08fc3  --- After new net architecture:  STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 141752 W: 11591 L: 11617 D: 118544 Ptnml(0-2): 387; 9231; 51674; 9189; 395 https://tests.stockfishchess.org/tests/view/60a4320ace8ea25a3ef03cfd  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 294072 W: 9825 L: 9950 D: 274297 Ptnml(0-2): 121; 8610; 129681; 8521; 103 https://tests.stockfishchess.org/tests/view/60a51b5ece8ea25a3ef03dcd ---  closes https://github.com/official-stockfish/Stockfish/pull/3490  Bench: 3752892,True,5,2021-05-01
vondele,vondele,2021-05-22 05:35:39+00:00,Update default net to nn-7756374aaed3.nnue  trained with pytorch using the master branch and recommended settings; same data set as previously used:  python train.py ../../all_d9_fishd9_d8_d10_shuffle.binpack ../../all_d9_fishd9_d8_d10_shuffle.binpack \         --gpus 1 --threads 2 --num-workers 2 --batch-size 16384 --progress_bar_refresh_rate 300 \         --smart-fen-skipping --random-fen-skipping 3 --features=HalfKAv2^   --lambda=1.0 \         --max_epochs=400 --seed $RANDOM --default_root_dir exp/run_8  passed STC: LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 21424 W: 2078 L: 1907 D: 17439 Ptnml(0-2): 80; 1512; 7385; 1627; 108 https://tests.stockfishchess.org/tests/view/60a6c749ce8ea25a3ef03f4d  passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 67912 W: 2851 L: 2648 D: 62413 Ptnml(0-2): 40; 2348; 28984; 2537; 47 https://tests.stockfishchess.org/tests/view/60a722ecce8ea25a3ef03fb9  closes https://github.com/official-stockfish/Stockfish/pull/3489  Bench: 3779522,True,5,2021-05-01
gvreuls,snicolet,2021-05-21 22:26:00+00:00,Compact position structures  Reorder the structures data members in position.h to reduce padding.  Passed STC: https://tests.stockfishchess.org/tests/view/60a8011fce8ea25a3ef04069 LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 14120 W: 1214 L: 1067 D: 11839 Ptnml(0-2): 26; 857; 5161; 976; 40  ---  Also tested for speed locally by Joost:  Result of  50 runs ================== base (./stockfish.master       ) =    2254919  +/- 4439 test (./stockfish.patch        ) =    2274003  +/- 5278 diff                             =     +19084  +/- 6386 ================== speedup        = +0.0085 P(speedup > 0) =  1.0000  ---  closes https://github.com/official-stockfish/Stockfish/pull/3488  No functional change.,True,4,2021-05-01
snicolet,snicolet,2021-05-19 18:34:37+00:00,Remove Tempo  The Tempo variable was introduced 10 years ago in our search because the classical evaluation function was antisymmetrical in White and Black by design to gain speed:      Eval(White to play) = -Eval(Black to play)  Nowadays our neural networks know which side is to play in a position when they evaluate a position and are trained on real games; so the neural network encodes the advantage of moving as an output of search. This patch shows that the Tempo variable is not necessary anymore.  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 33512 W: 2805 L: 2709 D: 27998 Ptnml(0-2): 80; 2209; 12095; 2279; 93 https://tests.stockfishchess.org/tests/view/60a44ceace8ea25a3ef03d30  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 53920 W: 1807 L: 1760 D: 50353 Ptnml(0-2): 16; 1617; 23650; 1658; 19 https://tests.stockfishchess.org/tests/view/60a477f0ce8ea25a3ef03d49  We also tried a match (20000 games) at STC using purely classical; result was neutral: https://tests.stockfishchess.org/tests/view/60a4eebcce8ea25a3ef03db5  Note: there are two locations left in search.cpp where we assume antisymmetry of evaluation (in relation with a speed optimization for null moves in lines 770 and 1439); but as the values are just used for heuristic pruning this approximation should not hurt too much because the order of magnitude is still true most of the time.  closes https://github.com/official-stockfish/Stockfish/pull/3481  Bench: 4015864,True,2,2021-05-01
Vizvezdenec,vondele,2021-05-19 18:08:51+00:00,"Simplify usage of LMR for captures  This patch simplifies a lot of ""enablers"" for LMR when move is a capture or promotion. After it we will have only 2 conditions - if node is a cutNode or if it's an allNode that was not in PV; so all captures or promotions wouldn't go thru LMR at any PVnodes.  passed STC https://tests.stockfishchess.org/tests/view/60a40117ce8ea25a3ef03ca7 LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 58976 W: 4875 L: 4807 D: 49294 Ptnml(0-2): 176; 3897; 21270; 3973; 172  passed LTC https://tests.stockfishchess.org/tests/view/60a43ff8ce8ea25a3ef03d18 LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 65272 W: 2203 L: 2165 D: 60904 Ptnml(0-2): 28; 1936; 28668; 1978; 26  closes https://github.com/official-stockfish/Stockfish/pull/3480  bench 4110764",True,2,2021-05-01
Unknown,vondele,2021-05-19 17:38:44+00:00,Use if instead of goto  This PR inverts the if and removes goto in the generate_all function.  closes https://github.com/official-stockfish/Stockfish/pull/3461  No functional change,True,2,2021-05-01
Fanael,vondele,2021-05-19 17:34:44+00:00,"Use packed 32-bit MMX operations for updating the PSQT accumulator  This improves the speed of NNUE by a bit on old hardware that code path is intended for; like a Pentium III 1.13 GHz:  10 repeats of ""./stockfish bench 16 1 13 default depth NNUE"":  Before: 54 642 504 897 cycles (� 0.12%) 62 301 937 829 instructions (� 0.03%)  After: 54 320 821 928 cycles (� 0.13%) 62 084 742 699 instructions (� 0.02%)  Speed of go depth 20 from startpos:  Before: 53103 nps After: 53856 nps  closes https://github.com/official-stockfish/Stockfish/pull/3476  No functional change.",True,2,2021-05-01
TheYoBots,vondele,2021-05-19 17:34:44+00:00,Use Markdown syntax in the readme  provide direct links to the mentioned files.  closes https://github.com/official-stockfish/Stockfish/pull/3477  No Functional Change,True,2,2021-05-01
Vizvezdenec,vondele,2021-05-19 17:34:37+00:00,Do more continuation history based pruning  This patch increases lmrDepth threshold for continuation history based pruning in search. This part of code for a long time was known to be really TC sensitive - decreasing this threshold easily passed lower time controls but failed badly at LTC; on the other hand it increase was part of a tuning that resulted in being negative at STC but was +12 elo at 180+1.8.  After recent simplification of special conditions that sometimes increase it from 4 to 5 it was logical to overall test at longer time controls if 5 is better than 4 with deeper searches.  reduces strenght on STC https://tests.stockfishchess.org/tests/view/60a3a8bbce8ea25a3ef03c74 ELO: -2.57 +-2.0 (95%) LOS: 0.6% Total: 20000 W: 1820 L: 1968 D: 16212 Ptnml(0-2): 68; 1582; 6836; 1458; 56  Passed LTC with STC bounds https://tests.stockfishchess.org/tests/view/60a027395085663412d090ce LLR: 2.93 (-2.94;2.94) <-0.50;2.50> Total: 175256 W: 6774 L: 6548 D: 161934 Ptnml(0-2): 91; 5808; 75604; 6034; 91  Passed VLTC with LTC bounds https://tests.stockfishchess.org/tests/view/60a2bccce229097940a037a7 LLR: 2.96 (-2.94;2.94) <0.50;3.50> Total: 65736 W: 1224 L: 1092 D: 63420 Ptnml(0-2): 5; 1012; 30706; 1136; 9  closes https://github.com/official-stockfish/Stockfish/pull/3473  bench 3689330,True,2,2021-05-01
Sopel97,vondele,2021-05-18 16:06:23+00:00,New NNUE architecture and net  Introduces a new NNUE network architecture and associated network parameters; as obtained by a new pytorch trainer.  The network is already very strong at short TC; without regression at longer TC; and has potential for further improvements.  https://tests.stockfishchess.org/tests/view/60a159c65085663412d0921d TC: 10s+0.1s; 1 thread ELO: 21.74 +-3.4 (95%) LOS: 100.0% Total: 10000 W: 1559 L: 934 D: 7507 Ptnml(0-2): 38; 701; 2972; 1176; 113  https://tests.stockfishchess.org/tests/view/60a187005085663412d0925b TC: 60s+0.6s; 1 thread ELO: 5.85 +-1.7 (95%) LOS: 100.0% Total: 20000 W: 1381 L: 1044 D: 17575 Ptnml(0-2): 27; 885; 7864; 1172; 52  https://tests.stockfishchess.org/tests/view/60a2beede229097940a03806 TC: 20s+0.2s; 8 threads LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 34272 W: 1610 L: 1452 D: 31210 Ptnml(0-2): 30; 1285; 14350; 1439; 32  https://tests.stockfishchess.org/tests/view/60a2d687e229097940a03c72 TC: 60s+0.6s; 8 threads LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 45544 W: 1262 L: 1214 D: 43068 Ptnml(0-2): 12; 1129; 20442; 1177; 12  The network has been trained (by vondele) using the https://github.com/glinscott/nnue-pytorch/ trainer (started by glinscott); specifically the branch https://github.com/Sopel97/nnue-pytorch/tree/experiment_56. The data used are in 64 billion positions (193GB total) generated and scored with the current master net d8: https://drive.google.com/file/d/1hOOYSDKgOOp38ZmD0N4DV82TOLHzjUiF/view?usp=sharing d9: https://drive.google.com/file/d/1VlhnHL8f-20AXhGkILujnNXHwy9T-MQw/view?usp=sharing d10: https://drive.google.com/file/d/1ZC5upzBYMmMj1gMYCkt6rCxQG0GnO3Kk/view?usp=sharing fishtest_d9: https://drive.google.com/file/d/1GQHt0oNgKaHazwJFTRbXhlCN3FbUedFq/view?usp=sharing  This network also contains a few architectural changes with respect to the current master:      Size changed from 256x2-32-32-1 to 512x2-16-32-1         ~15-20% slower         ~2x larger         adds a special path for 16 valued ClippedReLU         fixes affine transform code for 16 inputs/outputs; buy using InputDimensions instead of PaddedInputDimensions             this is safe now because the inputs are processed in groups of 4 in the current affine transform code     The feature set changed from HalfKP to HalfKAv2         Includes information about the kings like HalfKA         Packs king features better; resulting in 8% size reduction compared to HalfKA     The board is flipped for the black's perspective; instead of rotated like in the current master     PSQT values for each feature         the feature transformer now outputs a part that is fowarded directly to the output and allows learning piece values more directly than the previous network architecture. The effect is visible for high imbalance positions; where the current master network outputs evaluations skewed towards zero.         8 PSQT values per feature; chosen based on (popcount(pos.pieces()) - 1) / 4         initialized to classical material values on the start of the training     8 subnetworks (512x2->16->32->1); chosen based on (popcount(pos.pieces()) - 1) / 4         only one subnetwork is evaluated for any position; no or marginal speed loss  A diagram of the network is available: https://user-images.githubusercontent.com/8037982/118656988-553a1700-b7eb-11eb-82ef-56a11cbebbf2.png A more complete description: https://github.com/glinscott/nnue-pytorch/blob/master/docs/nnue.md  closes https://github.com/official-stockfish/Stockfish/pull/3474  Bench: 3806488,True,1,2021-05-01
snicolet,snicolet,2021-05-17 08:47:14+00:00,Small clean-ups  - Comment for Countemove pruning -> Continuation history - Fix comment in input_slice.h - Shorter lines in Makefile - Comment for scale factor - Fix comment for pinners in see_ge() - Change Thread.id() signature to size_t - Trailing space in reprosearch.sh - Add Douglas Matos Gomes to the AUTHORS file - Introduce comment for undo_null_move() - Use Stockfish coding style for export_net() - Change date in AUTHORS file  closes https://github.com/official-stockfish/Stockfish/pull/3416  No functional change,True,0,2021-05-01
Vizvezdenec,snicolet,2021-05-15 08:29:39+00:00,Simplification for countermoves based pruning  Simplify away two extra conditions in countermoves based pruning. These conditions (both of them) were introduced quite a long time ago via speculative LTCs and seem to no longer bring any benefit.  passed STC https://tests.stockfishchess.org/tests/view/609e81f35085663412d08f31 LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 28488 W: 2487 L: 2382 D: 23619 Ptnml(0-2): 87; 1919; 10123; 2032; 83  passed LTC https://tests.stockfishchess.org/tests/view/609e9c085085663412d08f59 LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 33176 W: 1219 L: 1155 D: 30802 Ptnml(0-2): 13; 1036; 14423; 1106; 10  closes https://github.com/official-stockfish/Stockfish/pull/3468  Bench: 4749514,True,5,2021-05-01
BM123499,snicolet,2021-05-15 08:16:01+00:00,Simplify LMR rules for statScore  We simplify two parts of LMR which seem not to bring strength anymore.  ---  Individual Tests: https://tests.stockfishchess.org/tests/view/609d1cc15085663412d0856a https://tests.stockfishchess.org/tests/view/609cb0cc7746e3dc74ffae8d https://tests.stockfishchess.org/tests/view/609d1c9f5085663412d08568  ---  LTC: LLR: 2.97 (-2.94;2.94) <-2.50;0.50> Total: 84184 W: 3093 L: 3066 D: 78025 Ptnml(0-2): 47; 2755; 36458; 2788; 44 https://tests.stockfishchess.org/tests/view/609d84615085663412d08e2f  ---  While at it; we also update the Elo estimate of the previous rule in LMR; see: https://tests.stockfishchess.org/tests/view/609a933c3a33eb67a844f7ca https://tests.stockfishchess.org/tests/view/609a959c3a33eb67a844f7d5 https://tests.stockfishchess.org/tests/view/609afff73a33eb67a844f870  ---  closes https://github.com/official-stockfish/Stockfish/pull/3464  Bench: 4156523,True,5,2021-05-01
BM123499,snicolet,2021-05-15 08:07:40+00:00,Remove early return in Probcut code  We simplify away early return in ProbCut; as it seems not to bring any strength anymore.  STC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 42632 W: 3705 L: 3617 D: 35310 Ptnml(0-2): 123; 2947; 15110; 2991; 145 https://tests.stockfishchess.org/tests/view/609c49da7746e3dc74ffae02  LTC: LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 35384 W: 1314 L: 1251 D: 32819 Ptnml(0-2): 11; 1130; 15355; 1177; 19 https://tests.stockfishchess.org/tests/view/609c71467746e3dc74ffae47  ---  While at it; we also update the Elo estimate of ProbCut (see https://tests.stockfishchess.org/tests/view/609bfb597746e3dc74ffabe3).  closes https://github.com/official-stockfish/Stockfish/pull/3462  bench: 3764662,True,5,2021-05-01
unaiic,snicolet,2021-05-15 07:40:40+00:00,Remove BoolConditions from tuning code  Remove BoolConditions from tuning code; as the feature does not work and the code has not be touched in years.  No functional change,True,5,2021-05-01
BM123499,snicolet,2021-05-12 15:13:52+00:00,"Simplify LMR rule for non-checking captures  We simplify away the complicated rule in LMR for ""non-checking captures likely to be bad""; as it seems not to bring any strength anymore.  STC: LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 55256 W: 4972 L: 4897 D: 45387 Ptnml(0-2): 177; 3976; 19234; 4077; 164 https://tests.stockfishchess.org/tests/view/609adf3b3a33eb67a844f842  LTC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 10344 W: 437 L: 353 D: 9554 Ptnml(0-2): 1; 322; 4449; 392; 8 https://tests.stockfishchess.org/tests/view/609b3dfa3a33eb67a844f88e  --  While at it; we also update the Elo estimate of the previous rule in LMR (see https://tests.stockfishchess.org/tests/view/609af2a63a33eb67a844f867).  closes https://github.com/official-stockfish/Stockfish/pull/3460  Bench: 3840688",True,2,2021-05-01
EntityFX,vondele,2021-05-11 17:45:14+00:00,E2K: added support for MCST Elbrus 2000 CPU architecture  e2k (Elbrus 2000) - this is a VLIW/EPIC architecture; the like Intel Itanium (IA-64) architecture. The architecture has half native / half software support for most Intel/AMD SIMD (e.g. MMX/SSE/SSE2/SSE3/SSSE3/SSE4.1/SSE4.2/AES/AVX/AVX2 & 3DNow!/SSE4a/XOP/FMA4) via intrinsics.  https://en.wikipedia.org/wiki/Elbrus_2000  closes https://github.com/official-stockfish/Stockfish/pull/3425  No functional change,True,1,2021-05-01
BM123499,vondele,2021-05-11 17:41:44+00:00,Remove coordination between searching threads  In summary; this revert #2204; as it seems not to bring any strength anymore; so it's no long needed.  STC (5+0.05 @ 8 threads): LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 105728 W: 6406 L: 6393 D: 92929 Ptnml(0-2): 154; 5479; 41599; 5464; 168 https://tests.stockfishchess.org/tests/view/6096994095e7f1852abd3154  LTC (20+0.2 @ 8 threads): LLR: 2.96 (-2.94;2.94) <-2.50;0.50> Total: 26336 W: 774 L: 712 D: 24850 Ptnml(0-2): 9; 641; 11810; 695; 13 https://tests.stockfishchess.org/tests/view/6097c62995e7f1852abd31e8  closes https://github.com/official-stockfish/Stockfish/pull/3459  No functional change.,True,1,2021-05-01
BM123499,vondele,2021-05-11 17:37:39+00:00,Simplify LMR  as it seems not to bring any strength and thus is no longer needed.  Tests for updating elo estimates: https://tests.stockfishchess.org/tests/view/6099ff123a33eb67a844f789 https://tests.stockfishchess.org/tests/view/60953e6695e7f1852abd305b  Individual simplification tests: https://tests.stockfishchess.org/tests/view/6098cfc73a33eb67a844f6a1 https://tests.stockfishchess.org/tests/view/6095539495e7f1852abd308b  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 96984 W: 3624 L: 3608 D: 89752 Ptnml(0-2): 45; 3222; 41939; 3244; 42 https://tests.stockfishchess.org/tests/view/6099921a3a33eb67a844f74f  closes https://github.com/official-stockfish/Stockfish/pull/3458  bench: 3836428,True,1,2021-05-01
Sopel97,vondele,2021-05-11 17:36:11+00:00,"Exporting the currently loaded network file  This PR adds an ability to export any currently loaded network. The export_net command now takes an optional filename parameter. If the loaded net is not the embedded net the filename parameter is required.  Two changes were required to support this:  * the ""architecture"" string; which is really just a some kind of description in the net; is now saved into netDescription on load and correctly saved on export. * the AffineTransform scrambles weights for some architectures and sparsifies them; such that retrieving the index is hard. This is solved by having a temporary scrambled<->unscrambled index lookup table when loading the network; and the actual index is saved for each individual weight that makes it to canSaturate16. This increases the size of the canSaturate16 entries by 6 bytes.  closes https://github.com/official-stockfish/Stockfish/pull/3456  No functional change",True,1,2021-05-01
Vizvezdenec,vondele,2021-05-07 07:47:17+00:00,"Cleanup of likelyFailLow logic  This patch broadens and simplifies definition of PvNode that is likely to fail low. New definition can be described as following ""If node was already researched at depth >= current depth and failed low there"" which is more logical than the previous version and takes less space + allows to not recompute it every time during move loop.  Passed simplification STC https://tests.stockfishchess.org/tests/view/609148bf95e7f1852abd2e82 LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 20128 W: 1865 L: 1751 D: 16512 Ptnml(0-2): 63; 1334; 7165; 1430; 72  Passed simplification LTC https://tests.stockfishchess.org/tests/view/6091691295e7f1852abd2e8b LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 95128 W: 3498 L: 3481 D: 88149 Ptnml(0-2): 41; 2956; 41549; 2981; 37  closes https://github.com/official-stockfish/Stockfish/pull/3455  Bench: 3933037",True,4,2021-05-01
Sopel97,vondele,2021-05-07 07:45:08+00:00,"Add an UCI level command ""export_net"".  This command writes the embedded net to the file `EvalFileDefaultName`. If there is no embedded net the command does nothing.  fixes #3453  closes https://github.com/official-stockfish/Stockfish/pull/3454  No functional change",True,4,2021-05-01
unaiic,vondele,2021-05-02 15:48:57+00:00,Simplify check extension  Simplify check extension; as it seems not to bring any strength and thus is no longer needed.  STC https://tests.stockfishchess.org/tests/view/608c18e995e7f1852abd2b81 LLR: 2.94 (-2.94;2.94) <-2.50;0.50> Total: 54544 W: 4891 L: 4815 D: 44838 Ptnml(0-2): 186; 3889; 19081; 3895; 221  LTC https://tests.stockfishchess.org/tests/view/608c6ab195e7f1852abd2bc6 LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 51008 W: 1845 L: 1794 D: 47369 Ptnml(0-2): 31; 1591; 22206; 1648; 28  closes https://github.com/official-stockfish/Stockfish/pull/3452  bench: 3993071,True,6,2021-05-01
vondele,vondele,2021-05-02 15:43:02+00:00,Add some more information on the UCI protocol  Improve README.md: provide a link to the protocol; and document some non-standard options.  fixes https://github.com/official-stockfish/Stockfish/issues/3446  closes https://github.com/official-stockfish/Stockfish/pull/3450  No functional change,True,6,2021-05-01
Unknown,snicolet,2021-04-28 11:58:46+00:00,Change tempo with time and threads  Introduce variable tempo for nnue depending on logarithm of estimated strength; where strength is the product of time and number of threads.  The original idea here was that NNUE is best with a slightly different tempo value to classical; since its style of play is slightly different. It turns out that the best tempo for NNUE varies with strength of play; so a formula is used which gives about 19 for STC and 24 for LTC under current fishtest settings.  STC 10+0.1: LLR: 2.94 (-2.94;2.94) {-0.20;1.10} Total: 120816 W: 11155 L: 10861 D: 98800 Ptnml(0-2): 406; 8728; 41933; 8848; 493 https://tests.stockfishchess.org/tests/view/60735b3a8141753378960534  LTC 60+0.6: LLR: 2.94 (-2.94;2.94) {0.20;0.90} Total: 35688 W: 1392 L: 1234 D: 33062 Ptnml(0-2): 23; 1079; 15473; 1255; 14 https://tests.stockfishchess.org/tests/view/6073ffbc814175337896057f  Passed non-regression SMP test at LTC 20+0.2 (8 threads): LLR: 2.95 (-2.94;2.94) {-0.70;0.20} Total: 11008 W: 317 L: 267 D: 10424 Ptnml(0-2): 2; 245; 4962; 291; 4 https://tests.stockfishchess.org/tests/view/60749ea881417533789605a4  closes https://github.com/official-stockfish/Stockfish/pull/3426  Bench 4075325,True,2,2021-04-01
BM123499,snicolet,2021-04-28 11:38:28+00:00,Simplify pawn moves generator  This patch simplifies QUIET_CHECKS pawn move generator by merging discovery check move generator with direct check move generator. It also simplifies emptySquares instantiation. In addition; I added a comment in generate_moves() to clarify Check branches.  STC: LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 112648 W: 9952 L: 9945 D: 92751 Ptnml(0-2): 369; 7682; 40195; 7729; 349 https://tests.stockfishchess.org/tests/view/6088226895e7f1852abd2978  LTC: LLR: 2.93 (-2.94;2.94) <-2.50;0.50> Total: 74656 W: 2797 L: 2765 D: 69094 Ptnml(0-2): 38; 2328; 32554; 2380; 28 https://tests.stockfishchess.org/tests/view/60884e5095e7f1852abd2994  closes https://github.com/official-stockfish/Stockfish/pull/3447  No functional change,True,2,2021-04-01
lonfom169,vondele,2021-04-25 11:26:22+00:00,More extensions if SE search is very low.  More extensions for non-PV nodes if value from singular extension search is significantly below singularBeta.  Passed STC: LLR: 2.97 (-2.94;2.94) <-0.50;2.50> Total: 25064 W: 2334 L: 2162 D: 20568 Ptnml(0-2): 82; 1720; 8768; 1868; 94 https://tests.stockfishchess.org/tests/view/6084ba7995e7f1852abd27e3  Passed LTC: LLR: 2.94 (-2.94;2.94) <0.50;3.50> Total: 67136 W: 2644 L: 2450 D: 62042 Ptnml(0-2): 46; 2134; 28990; 2376; 22 https://tests.stockfishchess.org/tests/view/6084d79195e7f1852abd27ee  closes https://github.com/official-stockfish/Stockfish/pull/3445  Bench: 4075325,True,6,2021-04-01
locutus2,vondele,2021-04-25 11:21:57+00:00,Thread based reduction tweak.  For PV nodes at the first two plies no reductions are done for each fourth thread.  STC (8 threads): LLR: 2.94 (-2.94;2.94) <-0.50;2.50> Total: 53992 W: 3334 L: 3167 D: 47491 Ptnml(0-2): 64; 2713; 21285; 2860; 74 https://tests.stockfishchess.org/tests/view/6083b2d695e7f1852abd277a  LTC (8 threads): LLR: 2.93 (-2.94;2.94) <0.50;3.50> Total: 64888 W: 1888 L: 1725 D: 61275 Ptnml(0-2): 14; 1556; 29146; 1709; 19 https://tests.stockfishchess.org/tests/view/6084249595e7f1852abd2795  closes https://github.com/official-stockfish/Stockfish/pull/3443  No functional change (for one thread),True,6,2021-04-01
Sopel97,vondele,2021-04-25 11:16:30+00:00,"Cleanup and simplify NNUE code.  A lot of optimizations happend since the NNUE was introduced and since then some parts of the code were left unused. This got to the point where asserts were have to be made just to let people know that modifying something will not have any effects or may even break everything due to the assumptions being made. Removing these parts removes those inexisting ""false dependencies"". Additionally:   * append_changed_indices now takes the king pos and stateinfo    explicitly; no more misleading pos parameter  * IndexList is removed in favor of a generic ValueList.    Feature transformer just instantiates the type it needs.  * The update cost and refresh requirement is deferred to the    feature set once again; but now doesn't go through the whole    FeatureSet machinery and just calls HalfKP directly.  * accumulator no longer has a singular dimension.  * The PS constants and the PieceSquareIndex array are made local    to the HalfKP feature set because they are specific to it and    DO differ for other feature sets.  * A few names are changed to more descriptive  Passed STC non-regression: https://tests.stockfishchess.org/tests/view/608421dd95e7f1852abd2790 LLR: 2.95 (-2.94;2.94) <-2.50;0.50> Total: 180008 W: 16186 L: 16258 D: 147564 Ptnml(0-2): 587; 12593; 63725; 12503; 596  closes https://github.com/official-stockfish/Stockfish/pull/3441  No functional change",True,6,2021-04-01
BM123499,vondele,2021-04-24 10:55:33+00:00,Merge all move generators  Merging `generate<EVASIONS>` and `generate<QUIET_CHECKS>` into `generate_all()`.  verified to yield correct perft results; even though bench changes due to different order of generated moves.  No regresion playing games:  passed STC: LLR: 2.94 (-2.94;2.94) {-1.00;0.20} Total: 161800 W: 14585 L: 14624 D: 132591 Ptnml(0-2): 577; 11681; 56451; 11586; 605 https://tests.stockfishchess.org/tests/view/606532732b2df919fd5f026d  passed LTC: LLR: 2.98 (-2.94;2.94) {-0.70;0.20} Total: 188504 W: 6906 L: 6961 D: 174637 Ptnml(0-2): 87; 6272; 81610; 6175; 108 https://tests.stockfishchess.org/tests/view/6065b0772b2df919fd5f02ae  closes https://github.com/official-stockfish/Stockfish/pull/3418  Bench: 4536129,True,5,2021-04-01
Sopel97,vondele,2021-04-24 10:49:29+00:00,Unify naming convention of the NNUE code  matches the rest of the stockfish code base  closes https://github.com/official-stockfish/Stockfish/pull/3437  No functional change,True,5,2021-04-01
dsmsgms,snicolet,2021-04-15 10:45:39+00:00,"Use classical eval for Bishop vs Pawns  NNUE evaluation is incapable of recognizing trivially drawn bishop endgames (the wrong-colored rook pawn); which are in fact ubiquitous and stock standard in chess analysis. Switching off NNUE evaluation in KBPs vs KPs endgames is a measure that stops Stockfish from trading down to a drawn version of these endings when we presumably have advantage. The patch is able to edge over master in endgame positions.  Patch tested for Elo gain with the ""endgame.epd"" book; and verified for non-regression with our usual book (see the pull request for details).  STC: LLR: 2.93 (-2.94;2.94) {-0.20;1.10} Total: 33232 W: 6655 L: 6497 D: 20080 Ptnml(0-2): 4; 2342; 11769; 2494; 7 https://tests.stockfishchess.org/tests/view/6074a52981417533789605b8  LTC: LLR: 2.93 (-2.94;2.94) {0.20;0.90} Total: 159056 W: 29799 L: 29378 D: 99879 Ptnml(0-2): 7; 9004; 61085; 9425; 7 https://tests.stockfishchess.org/tests/view/6074c39a81417533789605ca  Closes https://github.com/official-stockfish/Stockfish/pull/3427  Bench: 4503918  blah",True,3,2021-04-01
Sopel97,snicolet,2021-04-15 10:21:30+00:00,Documentation patch: AppendChangedIndices  Clarify the assumptions on the position passed to the AppendChangedIndices().  Closes https://github.com/official-stockfish/Stockfish/pull/3428  No functional change,True,3,2021-04-01
Vizvezdenec,snicolet,2021-04-15 09:41:30+00:00,Simplification: last capture extension  The code for last capture extension can be removed in current master.  Passed STC LLR: 2.95 (-2.94;2.94) {-1.00;0.20} Total: 85024 W: 7754 L: 7707 D: 69563 Ptnml(0-2): 293; 5991; 29914; 6004; 310 https://tests.stockfishchess.org/tests/view/607690f1814175337896068f  Passed LTC LLR: 2.96 (-2.94;2.94) {-0.70;0.20} Total: 39880 W: 1503 L: 1453 D: 36924 Ptnml(0-2): 17; 1281; 17293; 1333; 16 https://tests.stockfishchess.org/tests/view/6076ccbe814175337896069e  Closes https://github.com/official-stockfish/Stockfish/pull/3430  Bench: 4202264,True,3,2021-04-01
snicolet,snicolet,2021-04-15 09:19:44+00:00,Revert previous patch  Revert the previous patch about move generation; as it unexpectedly changed the bench. Better to take the time to understand the issue.  Bench: 4191632,True,3,2021-04-01
BM123499,snicolet,2021-04-15 08:53:51+00:00,Merge all move generators  Merging `generate<EVASIONS>` and `generate<QUIET_CHECKS>` into `generate_all()`.  STC: LLR: 2.94 (-2.94;2.94) {-1.00;0.20} Total: 161800 W: 14585 L: 14624 D: 132591 Ptnml(0-2): 577; 11681; 56451; 11586; 605 https://tests.stockfishchess.org/tests/view/606532732b2df919fd5f026d  LTC: LLR: 2.98 (-2.94;2.94) {-0.70;0.20} Total: 188504 W: 6906 L: 6961 D: 174637 Ptnml(0-2): 87; 6272; 81610; 6175; 108 https://tests.stockfishchess.org/tests/view/6065b0772b2df919fd5f02ae  ------------  Verified for correctness of `EVASIONS` by running perft: ``` ./stockfish b3nch 16 1 6 default perft          (replace 3 by e in b3nch) Nodes searched  : 71608931810 ```  Also tested for correctness on Chess960 with a similar code shown here: https://github.com/official-stockfish/Stockfish/pull/3418#issuecomment-816630295  ``` ./stockfish b3nch 16 1 6 fischer.txt perft Nodes searched  : 506736009395 ```  ------------  Closes https://github.com/official-stockfish/Stockfish/pull/3418  No functional change,True,3,2021-04-01
Vizvezdenec,snicolet,2021-04-06 16:23:35+00:00,Replace distanceFromPv with a better logic  This patch removes the recently introduced distanceFromPv logic; and replaces it with following logic: if reduction of moves with low movecount is really negative; we search them deeper than the first move.  passed STC: LLR: 2.95 (-2.94;2.94) {-0.20;1.10} Total: 153008 W: 13913 L: 13579 D: 125516 Ptnml(0-2): 547; 10811; 53470; 11113; 563 https://tests.stockfishchess.org/tests/view/6069c9d02b2df919fd5f04d2  passed LTC: LLR: 2.94 (-2.94;2.94) {0.20;0.90} Total: 101920 W: 3964 L: 3699 D: 94257 Ptnml(0-2): 55; 3279; 44019; 3560; 47 https://tests.stockfishchess.org/tests/view/606a99fd2b2df919fd5f0532  Closes https://github.com/official-stockfish/Stockfish/pull/3421  Bench: 4191632,True,1,2021-04-01
snicolet,snicolet,2021-04-06 07:07:20+00:00,Keep more pawns  This patch increases the weight of pawns in the scale factor applied to the output of the NNUE evaluation. This has the effect that Stockfish will try a little bit harder to keep more pawns in position where the engine has the advantage; and exchange more pawns in bad positions.  STC: LLR: 2.93 (-2.94;2.94) {-0.20;1.10} Total: 42552 W: 3858 L: 3668 D: 35026 Ptnml(0-2): 152; 2956; 14876; 3134; 158 https://tests.stockfishchess.org/tests/view/606a06dd2b2df919fd5f0504  LTC: LLR: 2.95 (-2.94;2.94) {0.20;0.90} Total: 44328 W: 1703 L: 1531 D: 41094 Ptnml(0-2): 20; 1373; 19207; 1543; 21 https://tests.stockfishchess.org/tests/view/606aa4ec2b2df919fd5f053e  Closes https://github.com/official-stockfish/Stockfish/pull/3420  Bench: 4310076,True,1,2021-04-01
snicolet,snicolet,2021-03-31 06:12:25+00:00,Small clean-up  Bench: 4321677,True,2,2021-03-01
BM123499,snicolet,2021-03-31 05:47:15+00:00,Simplify King Evasion  Simplify away the removal of some illegal `KING`-evasion moves during move generation. Verified for correctness by running perft on the following positions:  ``` ./stockfish bench 16 1 6 default perft Nodes searched: 71608931810  ./stockfish position fen 4rrk1/1p1nq3/p7/2p1P1pp/3P2bp/3Q1Bn1/PPPB4/1K2R1NR w - - 40 21 go perft 6 Nodes searched: 6136386434 ```  Passed STC: LLR: 2.94 (-2.94;2.94) {-1.00;0.20} Total: 16072 W: 1473 L: 1349 D: 13250 Ptnml(0-2): 57; 1047; 5710; 1159; 63 https://tests.stockfishchess.org/tests/view/60629e7ef183b42957b423b1  Passed LTC: LLR: 2.94 (-2.94;2.94) {-0.70;0.20} Total: 59064 W: 2214 L: 2177 D: 54673 Ptnml(0-2): 26; 1944; 25556; 1979; 27 https://tests.stockfishchess.org/tests/view/6062dce4f183b42957b423de  closes https://github.com/official-stockfish/Stockfish/pull/3415  No functional change,True,2,2021-03-01
Unknown,vondele,2021-03-27 16:03:10+00:00,Simplify and unify FRC cornered bishop.  tested locally as fishtest doesn't support FRC:  STC NNUE 9646 - 9647 - 20707 [0.500] 40000 -0.0 +/- 2.4; LOS: 49.7 %; DrawRatio: 51.8 %  STC classical 9678 - 9609 - 20713 [0.501] 40000 0.6 +/- 2.4; LOS: 69.0 %; DrawRatio: 51.8 %  and verified independently:  Score of master vs patch: 6463 - 6580 - 34957 [0.499] 48000  closes https://github.com/official-stockfish/Stockfish/pull/3413  bench: 4321677,True,5,2021-03-01
Sopel97,vondele,2021-03-27 15:56:05+00:00,Allow using Intel SDE for PGO builds.  The software development emulator (SDE) allows to run binaries compiled for architectures not supported by the actual CPU. This is useful to do PGO builds for newer architectures. The SDE can currently be obtained from https://software.intel.com/content/www/us/en/develop/articles/intel-software-development-emulator.html  This patch introduces a new optional makefile argument SDE_PATH. If not empty it should contain the path to the sde executable  closes https://github.com/official-stockfish/Stockfish/pull/3373  No functional change.,True,5,2021-03-01
snicolet,snicolet,2021-03-24 16:11:06+00:00,Small cleanups (march 2021)  With help of @BM123499; @mstembera; @gvreuls; @noobpwnftw and @Fanael Thanks!  Closes https://github.com/official-stockfish/Stockfish/pull/3405  No functional change,True,2,2021-03-01
gvreuls,snicolet,2021-03-19 19:28:57+00:00,Use reference instead of pointer for pop_lsb() signature  This patch changes the pop_lsb() signature from Square pop_lsb(Bitboard*) to Square pop_lsb(Bitboard&). This is more idomatic for C++ style signatures.  Passed a non-regression STC test: LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 21280 W: 1928 L: 1847 D: 17505 Ptnml(0-2): 71; 1427; 7558; 1518; 66 https://tests.stockfishchess.org/tests/view/6053a1e22433018de7a38e2f  We have verified that the generated binary is identical on gcc-10.  Closes https://github.com/official-stockfish/Stockfish/pull/3404  No functional change.,True,4,2021-03-01
Vizvezdenec,vondele,2021-03-19 10:58:17+00:00,Add a specific FRC correction from classical to NNUE  our net currently is not trained on FRC games; and so doesn't know about the important pattern of a bishop that is cornered in FRC. This patch introduces a term we have in the classical evaluation for this case; and adds it to the NNUE eval.  Since fishtest doesn't support FRC right now; the patch was tested locally at STC conditions; starting from the book of FRC starting positions.  Score of master vs patch: 993 - 2226 - 6781  [0.438] 10000  Which corresponds to approximately 40 Elo  The patch passes non-regression testing for traditional chess (where it adds one branch).  passed STC: https://tests.stockfishchess.org/tests/view/604fa2532433018de7a38b67 LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 30560 W: 2701 L: 2636 D: 25223 Ptnml(0-2): 88; 2056; 10921; 2133; 82  passed STC also in an earlier version: https://tests.stockfishchess.org/tests/view/604f61282433018de7a38b4d  closes https://github.com/official-stockfish/Stockfish/pull/3398  No functional change,True,4,2021-03-01
BM123499,snicolet,2021-03-17 23:21:41+00:00,Change definition of between_bb()  We remark that in current master; most of our use cases for between_bb() can be optimized if the second parameter of the function is added to the segment. So we change the definition of between_bb(s1; s2) such that it excludes s1 but includes s2.  We also use a precomputed array for between_bb() for another small speed gain (see https://tests.stockfishchess.org/tests/view/604d09f72433018de7a389fb).  Passed STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 18736 W: 1746 L: 1607 D: 15383 Ptnml(0-2): 61; 1226; 6644; 1387; 50 https://tests.stockfishchess.org/tests/view/60428c84ddcba5f0627bb6e4  Yellow LTC: LTC: LLR: -3.00 (-2.94;2.94) {0.25;1.25} Total: 39144 W: 1431 L: 1413 D: 36300 Ptnml(0-2): 13; 1176; 17184; 1178; 21 https://tests.stockfishchess.org/tests/view/605128702433018de7a38ca1  Closes https://github.com/official-stockfish/Stockfish/pull/3397  ---------  Verified for correctness by running perft on the following position:  ./stockfish position fen 4rrk1/1p1nq3/p7/2p1P1pp/3P2bp/3Q1Bn1/PPPB4/1K2R1NR w - - 40 21 go perft 6  Nodes searched: 6136386434  --------  No functional change,True,2,2021-03-01
Vizvezdenec,snicolet,2021-03-17 09:34:02+00:00,Remove advanced_pawn_push()  Continuation of work by @topologist: we now do futility pruning and movecount pruning in qsearch() for pawn pushes up to the 7th rank. So the condition to avoid the pruning is if the move is a promotion or not. This allows to get rid of the advanced_pawn_push() function in position.h alltogether.  Passed STC https://tests.stockfishchess.org/tests/view/6048c5842433018de7a387e6 LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 34424 W: 3081 L: 3015 D: 28328 Ptnml(0-2): 110; 2442; 12052; 2488; 120  Passed LTC https://tests.stockfishchess.org/tests/view/6048f7d22433018de7a387f0 LLR: 2.94 (-2.94;2.94) {-0.75;0.25} Total: 142024 W: 5170 L: 5202 D: 131652 Ptnml(0-2): 50; 4678; 61613; 4596; 75  Closes https://github.com/official-stockfish/Stockfish/pull/3390  Bench: 4339126,True,2,2021-03-01
BM123499,snicolet,2021-03-16 21:34:23+00:00,Simplify move generation (2/2)  STC: LLR: 2.97 (-2.94;2.94) {-1.25;0.25} Total: 39352 W: 3551 L: 3493 D: 32308 Ptnml(0-2): 143; 2695; 13928; 2781; 129 https://tests.stockfishchess.org/tests/view/6050007a2433018de7a38bbb  LTC: LLR: 2.96 (-2.94;2.94) {-0.75;0.25} Total: 44944 W: 1629 L: 1596 D: 41719 Ptnml(0-2): 22; 1319; 19762; 1342; 27 https://tests.stockfishchess.org/tests/view/60500e892433018de7a38bc4  Closes https://github.com/official-stockfish/Stockfish/pull/3399  No functional change,True,1,2021-03-01
BM123499,snicolet,2021-03-16 21:32:53+00:00,Simplify move generation (1/2)  STC: LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 29792 W: 2611 L: 2545 D: 24636 Ptnml(0-2): 94; 1982; 10659; 2086; 75 https://tests.stockfishchess.org/tests/view/604fe5b62433018de7a38ba8  LTC: LLR: 2.92 (-2.94;2.94) {-0.75;0.25} Total: 22040 W: 826 L: 777 D: 20437 Ptnml(0-2): 8; 646; 9664; 693; 9 https://tests.stockfishchess.org/tests/view/604fec892433018de7a38bac  Closes https://github.com/official-stockfish/Stockfish/pull/3399  No functional change,True,1,2021-03-01
BM123499,snicolet,2021-03-16 19:54:52+00:00,Introduce least_significant_square_bb()  Introducing least_significant_square_bb(). It is a function that returns a value equal to square_bb(lsb(bb)); but it uses fewer instruction. It should speed up more on older processors like armv7-a Clang.  Passed STC: LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 213200 W: 19171 L: 18753 D: 175276 Ptnml(0-2): 680; 14513; 75831; 14861; 715 https://tests.stockfishchess.org/tests/view/604bc7632433018de7a38982  Closes https://github.com/official-stockfish/Stockfish/pull/3391  No functional change,True,1,2021-03-01
TopoIogist,snicolet,2021-03-10 11:32:53+00:00,"Change advanced pawn push threshold  A pawn push is now considered to be ""advanced"" if the relative destination rank is > 6 (previously it was > 5). This affects the search heuristic.  Also remove an assert concerning en passant moves in qsearch().  STC: LLR: 2.97 (-2.94;2.94) {-0.25;1.25} Total: 46744 W: 4224 L: 4040 D: 38480 Ptnml(0-2): 165; 3206; 16451; 3380; 170 https://tests.stockfishchess.org/tests/view/604746082433018de7a3872e  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 107840 W: 4198 L: 3892 D: 99750 Ptnml(0-2): 58; 3472; 46557; 3772; 61 https://tests.stockfishchess.org/tests/view/60475eae2433018de7a38737  Closes https://github.com/official-stockfish/Stockfish/pull/3389  Bench: 4796780",True,2,2021-03-01
BM123499,vondele,2021-03-07 20:16:38+00:00,Use Bitboard over Square in movegen  It uses pos.checkers() on target when movegen is the type of EVASION. It simplify the code. And it's also expected a slightly speed up; because Bitboard is more direct when doing bitwise.  Passed STC: LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 28176 W: 2506 L: 2437 D: 23233 Ptnml(0-2): 80; 1904; 10063; 1949; 92 https://tests.stockfishchess.org/tests/view/60421d18ddcba5f0627bb6a9  Passed LTC: LLR: 2.93 (-2.94;2.94) {-0.75;0.25} Total: 9704 W: 402 L: 341 D: 8961 Ptnml(0-2): 3; 279; 4230; 334; 6 https://tests.stockfishchess.org/tests/view/60422823ddcba5f0627bb6ae  closes https://github.com/official-stockfish/Stockfish/pull/3383  No functional change,True,6,2021-03-01
mattginsberg,vondele,2021-03-07 20:10:04+00:00,Deal with commented lines in UCI input  commands starting with '#' as the first character will be ignored  closes https://github.com/official-stockfish/Stockfish/pull/3378  No functional change,True,6,2021-03-01
noobpwnftw,vondele,2021-03-07 19:02:11+00:00,Do not try to use large pages on 32 bit Windows.  verified to work on windows XP.  fixes  #3379  closes https://github.com/official-stockfish/Stockfish/pull/3380  No functional change.,True,6,2021-03-01
ddobbelaere,vondele,2021-03-07 13:26:54+00:00,Add Stockfish namespace.  fixes #3350 and is a small cleanup that might make it easier to use SF in separate projects; like a NNUE trainer or similar.  closes https://github.com/official-stockfish/Stockfish/pull/3370  No functional change.,True,6,2021-03-01
antoinechampion,vondele,2021-03-07 13:05:01+00:00,Clean functions returning by const values  The codebase contains multiple functions returning by const-value. This patch is a small cleanup making those function returns by value instead; removing the const specifier.  closes https://github.com/official-stockfish/Stockfish/pull/3328  No functional change,True,6,2021-03-01
snicolet,vondele,2021-02-26 18:45:29+00:00,Introduce DistanceFromPV  We introduce a metric for each internal node in search; called DistanceFromPV. This distance indicated how far the current node is from the principal variation.  We then use this distance to search the nodes which are close to the PV a little deeper (up to 4 plies deeper than the PV): this improves the quality of the search at these nodes and bring better updates for the PV during search.  STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 54936 W: 5047 L: 4850 D: 45039 Ptnml(0-2): 183; 3907; 19075; 4136; 167 https://tests.stockfishchess.org/tests/view/6037b88e7f517a561bc4a392  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 49608 W: 1880 L: 1703 D: 46025 Ptnml(0-2): 22; 1514; 21555; 1691; 22 https://tests.stockfishchess.org/tests/view/6038271b7f517a561bc4a3cb  Closes https://github.com/official-stockfish/Stockfish/pull/3369  Bench: 5037279,True,4,2021-02-01
Vizvezdenec,snicolet,2021-02-20 21:49:39+00:00,Introduce ProbCut for check evasions  The idea of this patch can be described as follows: if we are in check and the transposition table move is a capture that returns a value far above beta; we can assume that the opponent just blundered a piece by giving check; and we return the transposition table value. This is similar to the usual probCut logic for quiet moves; but with a different threshold.  Passed STC LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 33440 W: 3056 L: 2891 D: 27493 Ptnml(0-2): 110; 2338; 11672; 2477; 123 https://tests.stockfishchess.org/tests/view/602cd1087f517a561bc49bda  Passed LTC LLR: 2.98 (-2.94;2.94) {0.25;1.25} Total: 10072 W: 401 L: 309 D: 9362 Ptnml(0-2): 2; 288; 4365; 378; 3 https://tests.stockfishchess.org/tests/view/602ceea57f517a561bc49bf0  The committed version has an additional fix to never return unproven wins in the tablebase range or the mate range. This fix passed tests for non- regression at STC and LTC:  STC: LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 26240 W: 2354 L: 2280 D: 21606 Ptnml(0-2): 85; 1763; 9372; 1793; 107 https://tests.stockfishchess.org/tests/view/602d86a87f517a561bc49c7a  LTC: LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 35304 W: 1299 L: 1256 D: 32749 Ptnml(0-2): 14; 1095; 15395; 1130; 18 https://tests.stockfishchess.org/tests/view/602d98d17f517a561bc49c83  Closes https://github.com/official-stockfish/Stockfish/pull/3362  Bench: 3830215,True,5,2021-02-01
Vizvezdenec,snicolet,2021-02-20 21:22:07+00:00,Tune search parameters (with Unai Corzo)  The values used in this patch are taken from a SPSA parameter tuning session originated by Unai Corzo (@unaiic); but the final difference of his tune was multiplied x2 by hand. Most of the credits should go to him :-)  STC: https://tests.stockfishchess.org/tests/view/602f03d07f517a561bc49d40 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 67664 W: 6252 L: 6035 D: 55377 Ptnml(0-2): 256; 4799; 23527; 4972; 278  LTC: https://tests.stockfishchess.org/tests/view/602f41697f517a561bc49d5a LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 26256 W: 1034 L: 906 D: 24316 Ptnml(0-2): 10; 804; 11377; 922; 15  Closes https://github.com/official-stockfish/Stockfish/pull/3363  Bench: 3957653,True,5,2021-02-01
snicolet,snicolet,2021-02-20 21:19:14+00:00,Restore development version  No functional change,True,5,2021-02-01
vondele,vondele,2021-02-18 21:14:55+00:00,Stockfish 13  Official release version of Stockfish 13  Bench: 3766422  -----  It is our pleasure to release Stockfish 13 to chess fans worldwide. As usual; downloads are freely available at  https://stockfishchess.org  The Stockfish project builds on a thriving community of enthusiasts who contribute their expertise; time; and resources to build a free and open-source chess engine that is robust; widely available; and very strong. We would like to thank them all!  The good news first: from now on; our users can expect more frequent high-quality releases of Stockfish! Sadly; this decision has been triggered by the start of sales of the Fat Fritz 2 engine by ChessBase; which is a copy of a very recent development version of Stockfish with minor modifications. We refer to our statement on Fat Fritz 2[1] and a community blog[2] for further information.  This version of Stockfish is significantly stronger than any of its predecessors. Stockfish 13 outperforms Stockfish 12 by at least 35 Elo[3]. When playing against a one-year-old Stockfish; it wins 60 times more game pairs than it loses[4]. This release features an NNUE network retrained on billions of positions; much faster network evaluation code; and significantly improved search heuristics; as well as additional evaluation tweaks. In the course of its development; this version has won the superfinals of the TCEC Season 19 and TCEC Season 20.  Going forward; the Leela Chess Zero and Stockfish teams will join forces to demonstrate our commitment to open source chess engines and training tools; and open data. We are convinced that our free and open-source chess engines serve the chess community very well.  Stay safe and enjoy chess!  The Stockfish team [1] https://blog.stockfishchess.org/post/643239805544792064/statement-on-fat-fritz-2 [2] https://lichess.org/blog/YCvy7xMAACIA8007/fat-fritz-2-is-a-rip-off [3] https://tests.stockfishchess.org/tests/view/602bcccf7f517a561bc49b11 [4] https://tests.stockfishchess.org/tests/view/600fbb9c735dd7f0f0352d59,True,3,2021-02-01
snicolet,snicolet,2021-02-16 15:40:54+00:00,Update README.md  � reorder some sections of the README file � add reference to the AUTHORS file � rename Syzygybases to Syzygy tablebases � add pointer to the Discord channel � more precise info about the GPLv3 licence  No functional change,True,1,2021-02-01
Lolligerhans,snicolet,2021-02-16 00:31:42+00:00,Small trivial clean-ups; February 2021  Closes https://github.com/official-stockfish/Stockfish/pull/3329  No functional change,True,1,2021-02-01
snicolet,snicolet,2021-02-15 22:58:03+00:00,Update Top CPU Contributors  No functional change,True,0,2021-02-01
Vizvezdenec,snicolet,2021-02-11 22:39:06+00:00,PV-Nodes likely to fail low  Do not decrease reduction at pv-nodes which are likely to fail low.  The idea of this patch can be described as following: during the search; if a node on the principal variation was re-searched in non-pv search and this re-search got a value which was much lower than alpha; then we can assume that this pv-node is likely to fail low again; and we can reduce more aggressively at this node.  Passed STC https://tests.stockfishchess.org/tests/view/6023a5fa7f517a561bc49638 LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 70288 W: 6443 L: 6223 D: 57622 Ptnml(0-2): 239; 5022; 24436; 5174; 273  Passed LTC https://tests.stockfishchess.org/tests/view/6023f2617f517a561bc49661 LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 105656 W: 4048 L: 3748 D: 97860 Ptnml(0-2): 67; 3312; 45761; 3630; 58  Closes https://github.com/official-stockfish/Stockfish/pull/3349  Bench: 3766422,True,3,2021-02-01
mattginsberg,snicolet,2021-02-11 21:29:35+00:00,Better code for hash table generation  This patch removes some magic numbers in TT bit management and introduce proper constants in the code; to improve documentation and ease further modifications.  No function change,True,3,2021-02-01
gcp,vondele,2021-02-10 18:54:26+00:00,Enable New Pass Manager for Clang.  It's about 1% speedup for Stockfish.  Result of 100 runs ================== base (...fish_clang12) =    1946851  +/- 3717 test (./stockfish    ) =    1967276  +/- 3408 diff                   =     +20425  +/- 2438  speedup        = +0.0105 P(speedup > 0) =  1.0000  Thanks to David Major for making me aware of this part of LLVM development.  closes https://github.com/official-stockfish/Stockfish/pull/3346  No functional change,True,2,2021-02-01
gcp,vondele,2021-02-10 18:52:20+00:00,Disable ThinLTO when using Clang.  Benchmarking with current Clang 12 shows that and ThinLTO is a pessimization; see issue #3341.  closes https://github.com/official-stockfish/Stockfish/pull/3345  No functional change.,True,2,2021-02-01
Cubox,vondele,2021-02-10 18:50:44+00:00,Fixes FreeBSD compilation when using Clang  closes https://github.com/official-stockfish/Stockfish/pull/3342  No functional change,True,2,2021-02-01
BM123499,vondele,2021-02-08 20:42:03+00:00,Search Parameters Tuning  A simple tuning on search.cpp.  based SPSA test: https://tests.stockfishchess.org/tests/view/601f2a787f517a561bc493cd  passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 117840 W: 10796 L: 10508 D: 96536 Ptnml(0-2): 422; 8381; 41041; 8639; 437 https://tests.stockfishchess.org/tests/view/602144c37f517a561bc494ae  passed LTC: LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 25024 W: 972 L: 847 D: 23205 Ptnml(0-2): 7; 767; 10847; 876; 15 https://tests.stockfishchess.org/tests/view/602156877f517a561bc494be  closes https://github.com/official-stockfish/Stockfish/pull/3340  Bench: 3974098,True,0,2021-02-01
FauziAkram,vondele,2021-02-08 20:39:30+00:00,Pawns Tuning  A simple tuning of Pawns parameters; and some PSQT changes.  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 219424 W: 43681 L: 43103 D: 132640 Ptnml(0-2): 4014; 25760; 49669; 26172; 4097 https://tests.stockfishchess.org/tests/view/601bce167f517a561bc491eb  Passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 317312 W: 42525 L: 41579 D: 233208 Ptnml(0-2): 2447; 30157; 92636; 30835; 2581 https://tests.stockfishchess.org/tests/view/601c21557f517a561bc49227  closes https://github.com/official-stockfish/Stockfish/pull/3337  Bench: 4154473,True,0,2021-02-01
BM123499,vondele,2021-02-08 20:35:59+00:00,Simplify En Passant  simplifies the handling of en passant during search; needs a little more care in initialization.  Passed STC: LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 72608 W: 6569 L: 6559 D: 59480 Ptnml(0-2): 233; 5117; 25629; 5057; 268 https://tests.stockfishchess.org/tests/view/600f1363735dd7f0f0352ce7  Passed LTC: LLR: 2.92 (-2.94;2.94) {-0.75;0.25} Total: 24328 W: 913 L: 864 D: 22551 Ptnml(0-2): 10; 731; 10633; 780; 10 https://tests.stockfishchess.org/tests/view/600f2e93735dd7f0f0352cf6  closes https://github.com/official-stockfish/Stockfish/pull/3330  No functional change.,True,0,2021-02-01
BM123499,snicolet,2021-01-31 15:00:06+00:00,Tune ordering of moves at internal nodes  We change the relative weights of the function used to order quiet moves in our MovePicker class.  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 32184 W: 2936 L: 2773 D: 26475 Ptnml(0-2): 115; 2196; 11328; 2317; 136 https://tests.stockfishchess.org/tests/view/60161ee1735dd7f0f03530f8  Passed LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.25} Total: 33088 W: 1292 L: 1149 D: 30647 Ptnml(0-2): 14; 1030; 14318; 1163; 19 https://tests.stockfishchess.org/tests/view/60163146735dd7f0f03530ff  The new weight were chosen after the following SPSA session: https://tests.stockfishchess.org/tests/view/60136857735dd7f0f0352f6c  Closes https://github.com/official-stockfish/Stockfish/pull/3331  Bench: 4398803,True,6,2021-01-01
BM123499,vondele,2021-01-31 09:07:02+00:00,Simplify Chess 960 castling  a little cleanup; and small speedup (about 0.3%) for Chess 960.  Verified with perft on a large set of chess960 positions.  Closes https://github.com/official-stockfish/Stockfish/pull/3317  No functional change,True,6,2021-01-01
BM123499,vondele,2021-01-31 09:04:41+00:00,Speed Up Perft Search  It speeds up generate<LEGAL>; and thus perft; roughly by 2-3%.  closes https://github.com/official-stockfish/Stockfish/pull/3312  No functional change,True,6,2021-01-01
BM123499,vondele,2021-01-31 09:02:10+00:00,Clean Up Castling in gives_check  There is no need to add rto or kto on the Bitboard which represents the pieces.  STC: LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 57064 W: 5096 L: 5067 D: 46901 Ptnml(0-2): 202; 3862; 20355; 3931; 182 https://tests.stockfishchess.org/tests/view/6005ea2c6019e097de3efa55  LTC: LLR: 2.92 (-2.94;2.94) {-0.75;0.25} Total: 30088 W: 1094 L: 1052 D: 27942 Ptnml(0-2): 10; 882; 13217; 926; 9 https://tests.stockfishchess.org/tests/view/6006115a6019e097de3efa6e  closes https://github.com/official-stockfish/Stockfish/pull/3311  No functional change.,True,6,2021-01-01
BM123499,vondele,2021-01-31 09:00:17+00:00,Avoid more expensive legality check  speedup of the code; enough to pass STC; failed LTC.  Passed STC: LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 68928 W: 6334 L: 6122 D: 56472 Ptnml(0-2): 233; 4701; 24369; 4943; 218 https://tests.stockfishchess.org/tests/view/6002747f6019e097de3ef8dc  Failed LTC: LLR: -2.96 (-2.94;2.94) {0.25;1.25} Total: 44560 W: 1702 L: 1675 D: 41183 Ptnml(0-2): 25; 1383; 19438; 1408; 26 https://tests.stockfishchess.org/tests/view/6002a4836019e097de3ef8e3  About 1% speedup:  Result of  50 runs ================== base (...kfish.master) =    2237500  +/- 7428 test (...ckfish.patch) =    2267003  +/- 7017 diff                   =     +29503  +/- 4774  speedup        = +0.0132 P(speedup > 0) =  1.0000  closes https://github.com/official-stockfish/Stockfish/pull/3304  No functional change.,True,6,2021-01-01
Lolligerhans,vondele,2021-01-30 12:27:31+00:00,Small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/3301  No functional change,True,5,2021-01-01
snicolet,vondele,2021-01-30 12:20:56+00:00,Improve play for closed positions  This patch give a small bonus to incite the attacking side to keep more pawns on the board.  A consequence of this bonus is that Stockfish will tend to play positions slightly more closed on average than master; especially when it believes that it has an advantage.  To lower the risk of blockades where Stockfish start shuffling without progress; we also implement a progressive decrease of the evaluation value with the 50 moves counter (along with the necessary aging of the transposition table to reduce the impact of the Graph History Interaction problem): since the evaluation decreases during shuffling phases; the engine will tend to examine the consequences of pawn breaks faster during the search.  Passed STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 26184 W: 2406 L: 2252 D: 21526 Ptnml(0-2): 85; 1784; 9223; 1892; 108 https://tests.stockfishchess.org/tests/view/600cc08b735dd7f0f0352c06  Passed LCT: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 199768 W: 7695 L: 7191 D: 184882 Ptnml(0-2): 85; 6478; 86269; 6952; 100 https://tests.stockfishchess.org/tests/view/600ccd28735dd7f0f0352c10  Closes https://github.com/official-stockfish/Stockfish/pull/3321  Bench: 3988915,True,5,2021-01-01
johnsonr,vondele,2021-01-30 12:19:20+00:00,Add .gitignore  add files produced during the build to a newly added .gitignore  closes https://github.com/official-stockfish/Stockfish/pull/3286  No functional change,True,5,2021-01-01
kuzkry,vondele,2021-01-30 11:57:27+00:00,Change lock type  No additional features of std::unique_lock has been previously used so it's better to use a lighter lock.  closes https://github.com/official-stockfish/Stockfish/pull/3284  No functional change.,True,5,2021-01-01
Lolligerhans,vondele,2021-01-17 08:35:59+00:00,"Add penalty for doubled pawns in agile structure  Give an additional penalty of S(20; 10) for any doubled pawn if none of the opponent's pawns is facing any of our  - pawns or  - pawn attacks; that means; each of their pawns can push at least one square without being captured. This ignores their non-pawns pieces and attacks.  One possible justification: Their pawns' ability to push freely provides options to react to our threats by changing their pawn structure. Our doubled pawns however will likely lead to an exploitable weakness; even if the pawn structure is not yet fixed.  Note that the notion of ""their pawns not being fixed"" is symmetric for both players: If all of their pawns can push freely so can ours. All pawns being freely pushable might just be an early-game-indicator. However; it can trigger during endgame pawns races; where doubled pawns are especially hindering; too.  LTC LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 134976 W: 17964 L: 17415 D: 99597 Ptnml(0-2): 998; 12702; 39619; 13091; 1078 https://tests.stockfishchess.org/tests/view/5ffdd5316019e097de3ef281  STC LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 35640 W: 7219 L: 6904 D: 21517 Ptnml(0-2): 645; 4096; 8084; 4289; 706 https://tests.stockfishchess.org/tests/view/5ffda4a16019e097de3ef265  closes https://github.com/official-stockfish/Stockfish/pull/3302  Bench: 4363873",True,6,2021-01-01
Sopel97,vondele,2021-01-13 21:59:54+00:00,Optimize generate_moves  This change simplifies control flow in the generate_moves function which ensures the compiler doesn't duplicate work due to possibly not resolving pureness of the function calls. Also the biggest change is the removal of the unnecessary condition checking for empty b in a convoluted way. The rationale for removal of this condition is that computing attacks_bb with occupancy is not much more costly than computing pseudo attacks and overall the condition (also being likely unpredictable) is a pessimisation.  This is inspired by previous changes by @BM123499.  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 88040 W: 8172 L: 7931 D: 71937 Ptnml(0-2): 285; 6128; 30957; 6361; 289 https://tests.stockfishchess.org/tests/view/5ffc28386019e097de3ef1c7  closes https://github.com/official-stockfish/Stockfish/pull/3300  No functional change.,True,2,2021-01-01
FauziAkram,vondele,2021-01-11 18:42:31+00:00,Bad Outpost Pawn Scale  Changed name from Bad Outpost to Uncontested Outpost Scale Uncontested Outpost with number of pawns + Decrease Bishop PSQT values and general tuning  Credits for the decrease of the Bishop PSQT values: Fauzi Credits for scaling Uncontested Outpost with number of pawns: Lolligerhans Credits for the tunings: Fauzi  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 32040 W: 6593 L: 6281 D: 19166 Ptnml(0-2): 596; 3713; 7095; 4015; 601 https://tests.stockfishchess.org/tests/view/5ffa43026019e097de3ef0f2  Passed LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 84376 W: 11395 L: 10950 D: 62031 Ptnml(0-2): 652; 7930; 24623; 8287; 696 https://tests.stockfishchess.org/tests/view/5ffa6e7b6019e097de3ef0fd  closes https://github.com/official-stockfish/Stockfish/pull/3296  Bench: 4287509,True,0,2021-01-01
Vizvezdenec,vondele,2021-01-11 18:36:07+00:00,Refine stat based reductions  This patch separates stat based reductions for quiet moves in case of being in check and in case of not being in check. We will be using sum of first continuation history and main history (similar to movepicker) instead of statScore for the first case.  passed STC https://tests.stockfishchess.org/tests/view/5ff87b2f6019e097de3ef09b LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 63992 W: 5887 L: 5678 D: 52427 Ptnml(0-2): 201; 4561; 22305; 4686; 243  passed LTC https://tests.stockfishchess.org/tests/view/5ff8b6206019e097de3ef0b2 LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 81216 W: 3127 L: 2880 D: 75209 Ptnml(0-2): 46; 2544; 35176; 2801; 41  closes https://github.com/official-stockfish/Stockfish/pull/3293  bench 4395984,True,0,2021-01-01
BM123499,vondele,2021-01-11 18:31:22+00:00,Rethink En Passant Evasion Capture  It now checks if it were a discovery attack instead of the attacking piece is the double-moved pawn.  As a side effect; certain illegal fens have different; and slightly more logical move generation. There is no intend to maintain particular behavior for such non-reachable fens.  Passed STC: LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 47912 W: 4327 L: 4285 D: 39300 Ptnml(0-2): 144; 3312; 17012; 3334; 154 https://tests.stockfishchess.org/tests/view/5ff890946019e097de3ef0a5  closes https://github.com/official-stockfish/Stockfish/pull/3292  closes / fixes https://github.com/official-stockfish/Stockfish/issues/3270  No functional change,True,0,2021-01-01
ddobbelaere,vondele,2021-01-11 18:23:05+00:00,Fix static_assert.  With a hard-coded true; this declaration has no effect.  closes https://github.com/official-stockfish/Stockfish/pull/3295  No functional change.,True,0,2021-01-01
ddobbelaere,vondele,2021-01-11 18:19:39+00:00,"Use correct chess terms + fix spelling.    - ""discovered check"" (instead of ""discovery check"")   - ""en passant"" (instead of ""en-passant"")   - ""pseudo-legal"" before a noun (instead of ""pseudo legal"")   - ""3-fold"" (instead of ""3fold"")  closes https://github.com/official-stockfish/Stockfish/pull/3294  No functional change.",True,0,2021-01-01
Vizvezdenec,vondele,2021-01-11 18:17:03+00:00,Small code cleanup in LMR  In a recent patch we added comparing capture history to a number for LMR of captures. Calling it via thisThread-> is not needed since capture history was already declared by this time - so removing makes code slightly shorter and easier to follow.  closes https://github.com/official-stockfish/Stockfish/pull/3297  No functional change.,True,0,2021-01-01
MaximMolchanov,vondele,2021-01-11 17:54:18+00:00,Affine transform robust implementation  Size of the weights in the last layer is less than 512 bits. It leads to wrong data access for AVX512. There is no error because in current implementation it is guaranteed that there is an array of zeros after weights so zero multiplied by something is returned and sum is correct. It is a mistake that can lead to unexpected bugs in the future. Used AVX2 instructions for smaller input size.  No measurable slowdown on avx512.  closes https://github.com/official-stockfish/Stockfish/pull/3298  No functional change.,True,0,2021-01-01
BM123499,vondele,2021-01-11 17:41:47+00:00,Remove Condition from Generate_Move Loop  it seems it's faster to handle blockers_for_king(~Us) outside loops  Passed STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 22184 W: 2063 L: 1919 D: 18202 Ptnml(0-2): 63; 1485; 7855; 1623; 66 https://tests.stockfishchess.org/tests/view/5ffbee2f6019e097de3ef18d  closes https://github.com/official-stockfish/Stockfish/pull/3299  No functional change,True,0,2021-01-01
vondele,vondele,2021-01-08 16:04:23+00:00,Update copyright years  No functional change,True,4,2021-01-01
Vizvezdenec,vondele,2021-01-08 15:57:26+00:00,Reorder conditions in LMR and pruning  Make code logic somewhat easier to follow.  closes https://github.com/official-stockfish/Stockfish/pull/3285  No functional change.,True,4,2021-01-01
MaximMolchanov,vondele,2021-01-08 15:35:44+00:00,Affine transform refactoring.  Reordered weights in such a way that accumulated sum fits to output. Weights are grouped in blocks of four elements because four int8 (weight type) corresponds to one int32 (output type). No horizontal additions. Grouped AVX512; AVX2 and SSSE3 implementations. Repeated code was removed.  An earlier version passed STC:  LLR: 2.97 (-2.94;2.94) {-0.25;1.25} Total: 15336 W: 1495 L: 1355 D: 12486 Ptnml(0-2): 44; 1054; 5350; 1158; 62 https://tests.stockfishchess.org/tests/view/5ff60e106019e097de3eefd5  Speedup depends on the architecture; up to 4% measured on a NNUE only bench.  closes https://github.com/official-stockfish/Stockfish/pull/3287  No functional change,True,4,2021-01-01
FauziAkram,vondele,2020-12-31 17:03:33+00:00,WeakUnopposed penalty for backwards on file A or H  Do not give the WeakUnopposed penalty for backwards on file A or H  The original idea comes from Lolligerhans; and a series of tunings and tests done by Fauzi.  Passed STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 140864 W: 28127 L: 27660 D: 85077 Ptnml(0-2): 2529; 16660; 31735; 16831; 2677 https://tests.stockfishchess.org/tests/view/5fe39dec3932f79192d39673  Passed LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 67568 W: 8993 L: 8590 D: 49985 Ptnml(0-2): 523; 6176; 19983; 6579; 523 https://tests.stockfishchess.org/tests/view/5fe3dd1b3932f79192d39693  closes https://github.com/official-stockfish/Stockfish/pull/3275  Bench: 4109336,True,3,2020-12-01
unaiic,vondele,2020-12-31 16:51:14+00:00,Remove razoring  has become ineffective now.  STC https://tests.stockfishchess.org/tests/view/5fe653403932f79192d3981a LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 63448 W: 5965 L: 5934 D: 51549 Ptnml(0-2): 230; 4738; 21769; 4745; 242  LTC https://tests.stockfishchess.org/tests/view/5fe6f0f03932f79192d39856 LLR: 2.93 (-2.94;2.94) {-0.75;0.25} Total: 65368 W: 2485 L: 2459 D: 60424 Ptnml(0-2): 33; 2186; 28230; 2192; 43  closes https://github.com/official-stockfish/Stockfish/pull/3278  bench: 4493379,True,3,2020-12-01
unaiic,vondele,2020-12-31 16:48:47+00:00,Simplify away late irreversible move extension  Late irreversible move extension seems to be useless now.  STC https://tests.stockfishchess.org/tests/view/5fe75c5c3932f79192d398ca LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 196192 W: 18111 L: 18278 D: 159803 Ptnml(0-2): 681; 14097; 68652; 14040; 626  LTC https://tests.stockfishchess.org/tests/view/5fe875e23932f79192d39952 LLR: 2.96 (-2.94;2.94) {-0.75;0.25} Total: 28080 W: 1105 L: 1053 D: 25922 Ptnml(0-2): 13; 904; 12158; 948; 17  closes https://github.com/official-stockfish/Stockfish/pull/3279  bench: 4144640,True,3,2020-12-01
unaiic,vondele,2020-12-31 16:44:15+00:00,Assorted parameter tweak  Parameter tweak from various tunes and patches.  STC https://tests.stockfishchess.org/tests/view/5fec2ae36019e097de3ee94a LLR: 2.97 (-2.94;2.94) {-0.25;1.25} Total: 41976 W: 4032 L: 3848 D: 34096 Ptnml(0-2): 147; 3086; 14341; 3264; 150  LTC https://tests.stockfishchess.org/tests/view/5fec5c3c6019e097de3ee973 LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 23936 W: 970 L: 844 D: 22122 Ptnml(0-2): 14; 749; 10319; 869; 17  closes https://github.com/official-stockfish/Stockfish/pull/3281  bench: 4354546,True,3,2020-12-01
locutus2,vondele,2020-12-31 16:41:34+00:00,Tweak capture LMR.  Apply the recently added LMR condition for captures at nodes which are not PV or former PV nodes only if capture history is not too good.  STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 95296 W: 8917 L: 8660 D: 77719 Ptnml(0-2): 323; 6871; 33045; 7044; 365 https://tests.stockfishchess.org/tests/view/5feca7f46019e097de3ee9ae  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 29216 W: 1172 L: 1034 D: 27010 Ptnml(0-2): 11; 946; 12568; 1060; 23 https://tests.stockfishchess.org/tests/view/5fecf1786019e097de3ee9d5  closes https://github.com/official-stockfish/Stockfish/pull/3283  Bench: 4006138,True,3,2020-12-01
Vizvezdenec,vondele,2020-12-25 09:21:00+00:00,Do more LMR for captures  This patch enables LMR for all captures at allNodes that were not in PV. Currently we do LMR for all captures at cutNodes so this is an expansion of this logic: now we do LMR for all captures almost at all non-pv nodes; excluding only allNodes that were in PV.  passed STC https://tests.stockfishchess.org/tests/view/5fe50b9d3932f79192d3973c LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 83128 W: 7606 L: 7368 D: 68154 Ptnml(0-2): 292; 5905; 28939; 6129; 299  passed LTC https://tests.stockfishchess.org/tests/view/5fe552e43932f79192d39744 LLR: 2.92 (-2.94;2.94) {0.25;1.25} Total: 13968 W: 568 L: 466 D: 12934 Ptnml(0-2): 5; 418; 6043; 506; 12  closes https://github.com/official-stockfish/Stockfish/pull/3273  Bench: 4194835,True,4,2020-12-01
MJZ1977,vondele,2020-12-23 19:20:24+00:00,Correct Outflanking calculations in classical eval  Take signed value of rank difference between kings squares instead absolute value in outflanking calculation. This change correct evaluation of endgames with one king invading opponent last ranks.  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 122240 W: 24326 L: 23896 D: 74018 Ptnml(0-2): 2101; 14139; 28236; 14517; 2127 https://tests.stockfishchess.org/tests/view/5fdfc33a3932f79192d394b8  Passed LTC: LLR: 2.97 (-2.94;2.94) {0.25;1.25} Total: 157416 W: 20870 L: 20292 D: 116254 Ptnml(0-2): 973; 13954; 48333; 14418; 1030 https://tests.stockfishchess.org/tests/view/5fe07a453932f79192d39502  closes https://github.com/official-stockfish/Stockfish/pull/3271  Bench: 4162769,True,2,2020-12-01
FauziAkram,vondele,2020-12-23 19:17:57+00:00,Tweak the formulas for unsafeSquares  We give more bonus for a special case: If there are some enemy squares occupied or attacked by the enemy on the passed pawn span; but if they are all attacked by our pawn; use new intermediate factor 30.  The main credit goes to Rocky for the idea; with additional tuning and tests.  Passed STC: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 96464 W: 19233 L: 18834 D: 58397 Ptnml(0-2): 1683; 11327; 21950; 11452; 1820 https://tests.stockfishchess.org/tests/view/5fdd21ab3932f79192d39357  Passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 81320 W: 10784 L: 10352 D: 60184 Ptnml(0-2): 602; 7524; 24044; 7820; 670 https://tests.stockfishchess.org/tests/view/5fddec983932f79192d393a4  closes https://github.com/official-stockfish/Stockfish/pull/3268  Bench: 4338972,True,2,2020-12-01
Unknown,vondele,2020-12-18 20:19:46+00:00,Simplify condition for assigning static-eval based bonus  for quiet move ordering and simplify bonus formula.  Due to clamping the bonus to relative low values the impact on high depths is minimal; thus the restriction to low depths seems not necessary. Also the condition of movecount in previous node seems to be not determinant.  Passed STC: LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 14600 W: 1424 L: 1323 D: 11853 Ptnml(0-2): 55; 1033; 5020; 1140; 52 https://tests.stockfishchess.org/tests/view/5fd67b381ac16912018885ec  Passed LTC: LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 85008 W: 3218 L: 3206 D: 78584 Ptnml(0-2): 49; 2840; 36700; 2880; 35 https://tests.stockfishchess.org/tests/view/5fd6af041ac16912018885f8  closes https://github.com/official-stockfish/Stockfish/pull/3265  bench: 4524994,True,4,2020-12-01
FauziAkram,vondele,2020-12-18 20:17:34+00:00,Adjust definition of unsafeSquares  and adjust related bonus values. The bonus is now not given whenever there is an enemy piece in front of the pawn.  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 109472 W: 22097 L: 21673 D: 65702 Ptnml(0-2): 2111; 12800; 24482; 13240; 2103 https://tests.stockfishchess.org/tests/view/5fd8d3740c5870924361ffad  Passed LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 39384 W: 5334 L: 4990 D: 29060 Ptnml(0-2): 279; 3648; 11535; 3910; 320 https://tests.stockfishchess.org/tests/view/5fd971ab0c5870924361fff0  closes https://github.com/official-stockfish/Stockfish/pull/3266  Bench: 4488955,True,4,2020-12-01
Vizvezdenec,vondele,2020-12-14 06:52:02+00:00,Increase reduction in case of stable best move  The idea of this patch is pretty simple - we already do more reductions for non-PV and root nodes in case of stable best move for depth > 10. This patch makes us do so if root depth if > 10 instead; which is logical since best move changes (thus instability of it) is counted at root; so it makes a lot of sense to use depth of the root.  passed STC https://tests.stockfishchess.org/tests/view/5fd643271ac16912018885c5 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 13232 W: 1308 L: 1169 D: 10755 Ptnml(0-2): 39; 935; 4535; 1062; 45  passed LTC https://tests.stockfishchess.org/tests/view/5fd68db11ac16912018885f0 LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 14024 W: 565 L: 463 D: 12996 Ptnml(0-2): 3; 423; 6062; 517; 7  closes https://github.com/official-stockfish/Stockfish/pull/3263  Bench: 4050630,True,0,2020-12-01
Unknown,vondele,2020-12-14 06:48:48+00:00,Merge static history into main history;  thus simplifying and reducing the memory footprint. I believe using static diff for better move ordering is more suited for low depths; so restrict writing to low depths.  Todo: probably the condition for writing can be simplified  LTC: LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 18752 W: 768 L: 705 D: 17279 Ptnml(0-2): 7; 635; 8034; 688; 12 https://tests.stockfishchess.org/tests/view/5fd631791ac169120188859e  STC: LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 36504 W: 3380 L: 3313 D: 29811 Ptnml(0-2): 116; 2667; 12645; 2682; 142 https://tests.stockfishchess.org/tests/view/5fd5ed861ac1691201888569  closes https://github.com/official-stockfish/Stockfish/pull/3262  bench: 4018036,True,0,2020-12-01
Unknown,vondele,2020-12-14 06:46:15+00:00,AVX512; AVX2 and SSSE3 speedups  Improves throughput by summing 2 intermediate dot products using 16 bit addition before upconverting to 32 bit.  Potential saturation is detected and the code-path is avoided in this case. The saturation can't happen with the current nets; but nets can be constructed that trigger this check.  STC https://tests.stockfishchess.org/tests/view/5fd40a861ac1691201888479 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 25544 W: 2451 L: 2296 D: 20797 Ptnml(0-2): 92; 1761; 8925; 1888; 106  about 5% speedup  closes https://github.com/official-stockfish/Stockfish/pull/3261  No functional change,True,0,2020-12-01
FauziAkram,vondele,2020-12-12 08:31:28+00:00,New Imbalance Tables Tweak  Imbalance tables tweaked to contain MiddleGame and Endgame values; instead of a single value.  The idea started from Fisherman; which requested my help to tune the values back in June/July; so I tuned the values back then; and we were able to accomplish good results; but not enough to pass both STC and LTC tests.  So after the recent changes; I decided to give it another shot; and I am glad that it was a successful attempt.  A special thanks goes also to mstembera; which notified me a simple way to let the patch perform a little better.  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 115976 W: 23124 L: 22695 D: 70157 Ptnml(0-2): 2074; 13652; 26285; 13725; 2252 https://tests.stockfishchess.org/tests/view/5fc92d2d42a050a89f02ccc8  Passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 156304 W: 20617 L: 20024 D: 115663 Ptnml(0-2): 1138; 14647; 46084; 15050; 1233 https://tests.stockfishchess.org/tests/view/5fc9fee142a050a89f02cd3e  closes https://github.com/official-stockfish/Stockfish/pull/3255  Bench: 4278746,True,5,2020-12-01
Fanael,vondele,2020-12-12 08:20:15+00:00,Use arithmetic right shift for sign extension in MMX and SSE2 paths  This appears to be slightly faster than using a comparison against zero to compute the high bits; on both old (like Pentium III) and new (like Zen 2) hardware.  closes https://github.com/official-stockfish/Stockfish/pull/3254  No functional change.,True,5,2020-12-01
Vizvezdenec,vondele,2020-12-05 15:58:42+00:00,Add comments to uncommented parts of code  https://github.com/official-stockfish/Stockfish/pull/3250  No functional change,True,5,2020-12-01
Vizvezdenec,vondele,2020-12-05 15:48:33+00:00,Introduce static history  The idea of this patch can be described as following: we update static history stats based on comparison of the static evaluations of the position before and after the move. If the move increases static evaluation it's assigned positive bonus; if it decreases static evaluation it's assigned negative bonus. These stats are used in movepicker to sort quiet moves.  passed STC https://tests.stockfishchess.org/tests/view/5fca4c0842a050a89f02cd66 LLR: 3.00 (-2.94;2.94) {-0.25;1.25} Total: 78152 W: 7409 L: 7171 D: 63572 Ptnml(0-2): 303; 5695; 26873; 5871; 334  passed LTC https://tests.stockfishchess.org/tests/view/5fca6be442a050a89f02cd75 LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 40240 W: 1602 L: 1441 D: 37197 Ptnml(0-2): 19; 1306; 17305; 1475; 15  closes https://github.com/official-stockfish/Stockfish/pull/3253  bench 3845156,True,5,2020-12-01
SFisGOD,vondele,2020-11-29 15:54:06+00:00,Update default net to nn-62ef826d1a6d.nnue  Include scaling change as suggested by Dietrich Kappe; the one who trained net for Komodo.  According to him; some nets may require different scaling in order to utilize its full strength.  STC: LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 99856 W: 9669 L: 9401 D: 80786 Ptnml(0-2): 374; 7468; 34037; 7614; 435 https://tests.stockfishchess.org/tests/view/5fc2697642a050a89f02c8ec  LTC: LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 29840 W: 1220 L: 1081 D: 27539 Ptnml(0-2): 10; 969; 12827; 1100; 14 https://tests.stockfishchess.org/tests/view/5fc2ea5142a050a89f02c957  Bench: 3561701,True,6,2020-11-01
unaiic,vondele,2020-11-29 15:52:51+00:00,Reductions simplification  Simplify increase reduction for captures/promotions if late move and at low depth.  STC https://tests.stockfishchess.org/tests/view/5fbff65067cbf42301d6b3ae LLR: 2.97 (-2.94;2.94) {-1.25;0.25} Total: 49088 W: 4607 L: 4555 D: 39926 Ptnml(0-2): 177; 3615; 16932; 3619; 201  LTC https://tests.stockfishchess.org/tests/view/5fc0902967cbf42301d6b3fc LLR: 2.99 (-2.94;2.94) {-0.75;0.25} Total: 160944 W: 6153 L: 6193 D: 148598 Ptnml(0-2): 90; 5525; 69294; 5461; 102  closes https://github.com/official-stockfish/Stockfish/pull/3248  bench: 3834568,True,6,2020-11-01
syzygy1,vondele,2020-11-29 15:51:01+00:00,Remove piece lists  This patch removes the incrementally updated piece lists from the Position object.  This has been tried before but always failed. My reasons for trying again are:  * 32-bit systems (including phones) are now much less important than they were some years ago (and are absent from fishtest); * NNUE may have made SF less finely tuned to the order in which moves were generated.  STC: LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 55272 W: 5260 L: 5216 D: 44796 Ptnml(0-2): 208; 4147; 18898; 4159; 224 https://tests.stockfishchess.org/tests/view/5fc2986a42a050a89f02c926  LTC: LLR: 2.96 (-2.94;2.94) {-0.75;0.25} Total: 16600 W: 673 L: 608 D: 15319 Ptnml(0-2): 14; 533; 7138; 604; 11 https://tests.stockfishchess.org/tests/view/5fc2f98342a050a89f02c95c  closes https://github.com/official-stockfish/Stockfish/pull/3247  Bench: 3940967,True,6,2020-11-01
unaiic,vondele,2020-11-29 15:47:00+00:00,Update README.md  fix a few typos  closes https://github.com/official-stockfish/Stockfish/pull/3245  No functional change,True,6,2020-11-01
unaiic,vondele,2020-11-29 15:42:40+00:00,Search simplification  STC https://tests.stockfishchess.org/tests/view/5fc2083942a050a89f02c8bb LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 23200 W: 2251 L: 2160 D: 18789 Ptnml(0-2): 86; 1726; 7895; 1797; 96  LTC https://tests.stockfishchess.org/tests/view/5fc22d7b42a050a89f02c8d0 LLR: 2.92 (-2.94;2.94) {-0.75;0.25} Total: 15832 W: 653 L: 590 D: 14589 Ptnml(0-2): 7; 521; 6795; 588; 5  closes https://github.com/official-stockfish/Stockfish/pull/3244/files  bench: 3827317  Simplify search.,True,6,2020-11-01
lonfom169,vondele,2020-11-29 15:40:06+00:00,Remove bonus for killers.  Passed non-regression STC: LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 14712 W: 1416 L: 1315 D: 11981 Ptnml(0-2): 59; 1029; 5082; 1124; 62 https://tests.stockfishchess.org/tests/view/5fbfa31f67cbf42301d6b36e  Passed non-regression LTC: LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 27536 W: 1099 L: 1044 D: 25393 Ptnml(0-2): 11; 929; 11838; 974; 16 https://tests.stockfishchess.org/tests/view/5fbfac9167cbf42301d6b371  closes https://github.com/official-stockfish/Stockfish/pull/3241  Bench: 3887644,True,6,2020-11-01
Lolligerhans,vondele,2020-11-29 15:38:03+00:00,Refine rook penalty on closed files  +-----------------+ | . . . . . . . . | All files are closed. Some files are | . . . . . o o . | more valuable for rooks; because | . . . . o . . o | they might open in the future. | . . . o x . . x | | o . o x . x x . | | x o x . . . . . | x  our pawns | . x . . . . . . | o  their pawns | . . . . . . . . | ^  rooks are scored higher on these files +-----------------+             ^ ^  Files containing none of our own pawns are open or half-open (otherwise they are closed). Rooks on (half-)open files recieve a bonus for the future potential to act along all ranks.  This commit refines the (relative) penalty of rooks on closed files. Files that contain one of our blocked pawns are considered less likely to open in the future; rooks on these files are now penalized stronger.  This bonus does not generally correlate with mobility. If the condition is sufficiently refined in the future; it may be beneficial to adjust or override mobility scores in some cases.  LTC LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 494384 W: 71565 L: 70231 D: 352588 Ptnml(0-2): 3907; 48050; 142118; 49036; 4081 https://tests.stockfishchess.org/tests/view/5fb9312e67cbf42301d6afb9  LTC (non-regression w/ book noob_3moves.epd) LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 208520 W: 27044 L: 26937 D: 154539 Ptnml(0-2): 1557; 19850; 61391; 19853; 1609 https://tests.stockfishchess.org/tests/view/5fc01ced67cbf42301d6b3df  STC LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 98392 W: 20269 L: 19868 D: 58255 Ptnml(0-2): 1804; 11297; 22589; 11706; 1800 https://tests.stockfishchess.org/tests/view/5fb7f88a67cbf42301d6af10  closes https://github.com/official-stockfish/Stockfish/pull/3242  Bench: 3682630,True,6,2020-11-01
Unknown,vondele,2020-11-29 15:36:49+00:00,Cleaned up MakeIndex()  The index order in kpp_board_index[][] is reversed to be more optimal for the access pattern  STC https://tests.stockfishchess.org/tests/view/5fbd74f967cbf42301d6b24f LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 27504 W: 2686 L: 2607 D: 22211 Ptnml(0-2): 84; 2001; 9526; 2034; 107  closes https://github.com/official-stockfish/Stockfish/pull/3233  No functional change,True,6,2020-11-01
Vizvezdenec,vondele,2020-11-26 07:20:06+00:00,use classical for certain endgames.  STC https://tests.stockfishchess.org/tests/view/5fbc64c067cbf42301d6b1d6 LLR: 2.97 (-2.94;2.94) {-0.25;1.25} Total: 53360 W: 5223 L: 5024 D: 43113 Ptnml(0-2): 184; 3877; 18390; 4014; 215  LTC https://tests.stockfishchess.org/tests/view/5fbc97f267cbf42301d6b1ee LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 126472 W: 5111 L: 4766 D: 116595 Ptnml(0-2): 50; 4032; 54749; 4333; 72  closes https://github.com/official-stockfish/Stockfish/pull/3240  bench: 3820648,True,3,2020-11-01
MaximMolchanov,vondele,2020-11-25 20:10:13+00:00,Calculate sum from first elements  in affine transform for AVX512/AVX2/SSSE3  The idea is to initialize sum with the first element instead of zero. Reduce one add_epi32 and one set_zero SIMD instructions for each output dimension.  sum = 0; for i = 1 to n sum += a[i] -> sum = a[1]; for i = 2 to n sum += a[i]  STC: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 69048 W: 7024 L: 6799 D: 55225 Ptnml(0-2): 260; 5175; 23458; 5342; 289 https://tests.stockfishchess.org/tests/view/5faf2cf467cbf42301d6aa06  closes https://github.com/official-stockfish/Stockfish/pull/3227  No functional change.,True,2,2020-11-01
unaiic,vondele,2020-11-25 20:05:08+00:00,Assorted search and eval parameter tune  Search and eval parameter tune.  STC https://tests.stockfishchess.org/tests/view/5fba850a67cbf42301d6b07d LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 24312 W: 2388 L: 2228 D: 19696 Ptnml(0-2): 85; 1800; 8241; 1930; 100  LTC https://tests.stockfishchess.org/tests/view/5fbad5ea67cbf42301d6b0fa LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 88376 W: 3619 L: 3351 D: 81406 Ptnml(0-2): 56; 2977; 37849; 3255; 51  closes https://github.com/official-stockfish/Stockfish/pull/3232  bench: 3600361,True,2,2020-11-01
snicolet,snicolet,2020-11-23 21:20:32+00:00,Small cleanups 13  No functional change,True,0,2020-11-01
FauziAkram,vondele,2020-11-15 12:23:19+00:00,Rook Mobility Tweak  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 171152 W: 34715 L: 34202 D: 102235 Ptnml(0-2): 3278; 20155; 38228; 20606; 3309 https://tests.stockfishchess.org/tests/view/5fa861f467cbf42301d6a68e  Passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 149616 W: 20471 L: 19882 D: 109263 Ptnml(0-2): 1172; 14434; 43102; 14833; 1267 https://tests.stockfishchess.org/tests/view/5fa9c8ff67cbf42301d6a74f  closes https://github.com/official-stockfish/Stockfish/pull/3226  Bench: 3597730,True,6,2020-11-01
SFisGOD,snicolet,2020-11-12 11:49:03+00:00,Increase reduction at root  when the best move does not change frequently  STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 51320 W: 5159 L: 4956 D: 41205 Ptnml(0-2): 215; 3897; 17242; 4082; 224 https://tests.stockfishchess.org/tests/view/5faa072367cbf42301d6a767  LTC: LLR: 2.98 (-2.94;2.94) {0.25;1.25} Total: 15952 W: 762 L: 642 D: 14548 Ptnml(0-2): 8; 561; 6725; 667; 15 https://tests.stockfishchess.org/tests/view/5faa4c3567cbf42301d6a794  closes https://github.com/official-stockfish/Stockfish/pull/3225  Bench: 3954692,True,3,2020-11-01
lonfom169,vondele,2020-11-10 17:21:05+00:00,Increase reduction based on the number of best move changes.  Thanks to Vizvezdenec for the PvNode idea and also to vondele the !PvNode idea.  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 19120 W: 1998 L: 1839 D: 15283 Ptnml(0-2): 76; 1445; 6375; 1572; 92 https://tests.stockfishchess.org/tests/view/5fa8af3e67cbf42301d6a6c9  Passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 75584 W: 3454 L: 3205 D: 68925 Ptnml(0-2): 54; 2832; 31771; 3081; 54  closes https://github.com/official-stockfish/Stockfish/pull/3224  Bench: 3595418,True,1,2020-11-01
snicolet,snicolet,2020-11-08 08:15:34+00:00,Qsearch pruning: follow-up  This is a follow-up of the recent qsearch pruning patch in https://github.com/official-stockfish/Stockfish/commit/a260c9a8a24a2630a900efc3821000c3481b0c5d  We now use the same guard condition (testing that we already have a defense with a score better  score than a TB loss) for all pruning heuristics in qsearch(). This allows some pruning when in check; but  in a controlled way to ensure that no wrong mate scores appear.  Tested with Elo-gaining bounds:  STC: LLR: 2.97 (-2.94;2.94) {-0.25;1.25} Total: 22632 W: 2433 L: 2264 D: 17935 Ptnml(0-2): 98; 1744; 7487; 1865; 122 https://tests.stockfishchess.org/tests/view/5fa59405936c54e11ec99515  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 105432 W: 4965 L: 4648 D: 95819 Ptnml(0-2): 85; 4110; 44011; 4423; 87 https://tests.stockfishchess.org/tests/view/5fa5b609936c54e11ec9952a  closes https://github.com/official-stockfish/Stockfish/pull/3221  Bench: 3578092,True,6,2020-11-01
SFisGOD,snicolet,2020-11-08 07:36:16+00:00,Update default net to nn-c3ca321c51c9.nnue  Optimization of the net biases of the 32 x 32 layer and the output layer.  Tuning of 32 x 32 layer (200k games; 5 seconds TC) https://tests.stockfishchess.org/tests/view/5f9aaf266a2c112b60691c68  STC: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 41848 W: 4665 L: 4461 D: 32722 Ptnml(0-2): 239; 3308; 13659; 3446; 272 https://tests.stockfishchess.org/tests/view/5fa5ef5a936c54e11ec9954f  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 88008 W: 4045 L: 3768 D: 80195 Ptnml(0-2): 69; 3339; 36908; 3622; 66 https://tests.stockfishchess.org/tests/view/5fa62a78936c54e11ec99577  closes https://github.com/official-stockfish/Stockfish/pull/3220  Bench: 3649288,True,6,2020-11-01
Sopel97,vondele,2020-11-07 15:49:49+00:00,AVX-512 for smaller affine and feature transforms.  For the feature transformer the code is analogical to AVX2 since there was room for easy adaptation of wider simd registers.  For the smaller affine transforms that have 32 byte stride we keep 2 columns in one zmm register. We also unroll more aggressively so that in the end we have to do 16 parallel horizontal additions on ymm slices each consisting of 4 32-bit integers. The slices are embedded in 8 zmm registers.  These changes provide about 1.5% speedup for AVX-512 builds.  Closes https://github.com/official-stockfish/Stockfish/pull/3218  No functional change.,True,5,2020-11-01
FauziAkram,vondele,2020-11-07 15:49:49+00:00,Introducing King On File  this new concept calculates bonuses/penalties for the king when the king is in a semiopen or open file.  Passed STC: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 44904 W: 9365 L: 9028 D: 26511 Ptnml(0-2): 857; 5309; 9841; 5530; 915 https://tests.stockfishchess.org/tests/view/5fa343625d72639a7acef72b  Passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 60552 W: 8449 L: 8051 D: 44052 Ptnml(0-2): 466; 5772; 17481; 6012; 545 https://tests.stockfishchess.org/tests/view/5fa40e365d72639a7acef79e  closes https://github.com/official-stockfish/Stockfish/pull/3219  Bench: 3689484,True,5,2020-11-01
vondele,vondele,2020-11-07 15:48:02+00:00,Change handling the special case of a single legal move.  Using no searching time in case of a single legal move is not beneficial from a strength point of view; and this special case can be easily removed:  STC: LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 22472 W: 2458 L: 2357 D: 17657 Ptnml(0-2): 106; 1733; 7453; 1842; 102 https://tests.stockfishchess.org/tests/view/5f926cbc81eda81bd78cb6df  LTC: LLR: 2.94 (-2.94;2.94) {-0.75;0.25} Total: 37880 W: 1736 L: 1682 D: 34462 Ptnml(0-2): 22; 1392; 16057; 1448; 21 https://tests.stockfishchess.org/tests/view/5f92a26081eda81bd78cb6fe  The advantage of using the normal time management for a single legal move is that scores reported for that move are reasonable; not searching leads to artifacts during games (see e.g. https://tcec-chess.com/#div=sf&game=96&season=19)  The disadvantage of using normal time management of a single legal move is that thinking times can be unnaturally long; making it 'painful to watch' in online tournaments.  This patch uses normal time management; but caps the used time to 500ms. This should lead to reasonable scores; and be hardly perceptible.  closes https://github.com/official-stockfish/Stockfish/pull/3195 closes https://github.com/official-stockfish/Stockfish/pull/3183  variant of a patch suggested by SFisGOD  No functional change.,True,5,2020-11-01
Sopel97,vondele,2020-11-04 18:52:42+00:00,Manually align arrays on the stack  as a workaround to issues with overaligned alignas() on stack variables in gcc < 9.3 on windows.  closes https://github.com/official-stockfish/Stockfish/pull/3217  fixes #3216  No functional change,True,2,2020-11-01
joergoster,vondele,2020-11-02 18:41:17+00:00,Fix incorrect pruning in qsearch  Only do countermove based pruning in qsearch if we already have a move with a better score than a TB loss.  This patch fixes a bug (started as 843a961) that incorrectly prunes moves if in check; and adds an assert to make sure no wrong mate scores are given in the future. It replaces a no-op moveCount check with a check for bestValue.  Initially discussed in #3171 and later in #3199; #3198 and #3210. This PR effectively closes #3171 It also likely fixes #3196 where this causes user visible incorrect TB scores; which probably result from these incorrect mate scores.  Passed STC and LTC non-regression tests. https://tests.stockfishchess.org/tests/view/5f9ef8dabca9bf35bae7f648 LLR: 2.93 (-2.94;2.94) {-1.25;0.25} Total: 21672 W: 2339 L: 2230 D: 17103 Ptnml(0-2): 126; 1689; 7083; 1826; 112  https://tests.stockfishchess.org/tests/view/5f9f0caebca9bf35bae7f666 LLR: 2.97 (-2.94;2.94) {-0.75;0.25} Total: 33152 W: 1551 L: 1485 D: 30116 Ptnml(0-2): 27; 1308; 13832; 1390; 19  closes https://github.com/official-stockfish/Stockfish/pull/3214  Bench: 3625915,True,0,2020-11-01
FauziAkram,vondele,2020-11-02 18:41:17+00:00,Elo Worth in King Danger  Adding the EloWorth for each term in King Danger. Should be useful for simplifications; tuning patches; and new ideas.  closes https://github.com/official-stockfish/Stockfish/pull/3204  non-functional change,True,0,2020-11-01
Sopel97,vondele,2020-11-02 18:41:17+00:00,Optimize affine transform for SSSE3 and higher targets.  A non-functional speedup. Unroll the loops going over the output dimensions in the affine transform layers by a factor of 4 and perform 4 horizontal additions at a time. Instead of doing naive horizontal additions on each vector separately use hadd and shuffling between vectors to reduce the number of instructions by using all lanes for all stages of the horizontal adds.  passed STC of the initial version: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 17808 W: 1914 L: 1756 D: 14138 Ptnml(0-2): 76; 1330; 5948; 1460; 90 https://tests.stockfishchess.org/tests/view/5f9d516f6a2c112b60691da3  passed STC of the final version after cleanup: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 16296 W: 1750 L: 1595 D: 12951 Ptnml(0-2): 72; 1192; 5479; 1319; 86 https://tests.stockfishchess.org/tests/view/5f9df5776a2c112b60691de3  closes https://github.com/official-stockfish/Stockfish/pull/3203  No functional change,True,0,2020-11-01
Unknown,snicolet,2020-11-01 07:02:40+00:00,Update default net to nn-cb26f10b1fd9.nnue  Result of https://tests.stockfishchess.org/tests/view/5f9a06796a2c112b60691c0f tuning.  STC LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 53712 W: 5776 L: 5561 D: 42375 Ptnml(0-2): 253; 4282; 17604; 4431; 286 https://tests.stockfishchess.org/tests/view/5f9c7bbc6a2c112b60691d4d  LTC LLR: 2.97 (-2.94;2.94) {0.25;1.25} Total: 80184 W: 4007 L: 3739 D: 72438 Ptnml(0-2): 58; 3302; 33130; 3518; 84 https://tests.stockfishchess.org/tests/view/5f9d01f06a2c112b60691d87  closes https://github.com/official-stockfish/Stockfish/pull/3209  bench: 3517795,True,6,2020-11-01
syzygy1,vondele,2020-10-28 22:40:37+00:00,Do not skip non-recapture ttMove when in check  The qsearch() MovePicker incorrectly skips a non-recapture ttMove when in check (if depth <= DEPTH_QS_RECAPTURES). This is clearly not intended and can cause qsearch() to return a mate score when there is no mate. Introduced in cad300c and 6596f0e; as observed by joergoster in #3171 and #3198.  This PR fixes the bug by not skipping the non-recapture ttMove when in check.  Passed non-regression STC: https://tests.stockfishchess.org/tests/view/5f9867ea6a2c112b60691b10 LLR: 2.98 (-2.94;2.94) {-1.25;0.25} Total: 27112 W: 2943 L: 2842 D: 21327 Ptnml(0-2): 127; 2170; 8878; 2237; 144  Passed non-regression LTC: https://tests.stockfishchess.org/tests/view/5f9967326a2c112b60691bb0 LLR: 2.99 (-2.94;2.94) {-0.75;0.25} Total: 18392 W: 807 L: 738 D: 16847 Ptnml(0-2): 9; 655; 7802; 718; 12  closes https://github.com/official-stockfish/Stockfish/pull/3199 closes https://github.com/official-stockfish/Stockfish/pull/3198  Bench: 3870606,True,2,2020-10-01
SFisGOD,vondele,2020-10-28 07:13:34+00:00,Update default net to nn-2eb2e0707c2b.nnue  Optimization of the net weights of the 32 x 32 layer (1024 parameters) and net biases of the 512 x 32 layer (32 parameters) using SPSA.  Tuning of 32 x 32 Layer (800;000 games; 5 seconds time control): https://tests.stockfishchess.org/tests/view/5f942040d3978d7e86f1aa05  Tuning of 512 x 32 Layer (80;000 games; 20 seconds time control): https://tests.stockfishchess.org/tests/view/5f8f926d2c92c7fe3a8c608b  STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 17336 W: 1918 L: 1754 D: 13664 Ptnml(0-2): 79; 1344; 5672; 1480; 93 https://tests.stockfishchess.org/tests/view/5f9882346a2c112b60691b34  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 37304 W: 1822 L: 1651 D: 33831 Ptnml(0-2): 27; 1461; 15501; 1640; 23 https://tests.stockfishchess.org/tests/view/5f98a4b36a2c112b60691b40  closes https://github.com/official-stockfish/Stockfish/pull/3201  Bench: 3403528,True,2,2020-10-01
FauziAkram,vondele,2020-10-28 07:11:29+00:00,Bishop Pawns based on Files  Passed STC: https://tests.stockfishchess.org/tests/view/5f8cc8145a4eacb45305da3c LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 132544 W: 27795 L: 27328 D: 77421 Ptnml(0-2): 2756; 15558; 29272; 15835; 2851  Passed LTC: https://tests.stockfishchess.org/tests/view/5f8df614bacb75a4f9a4721e LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 169608 W: 23257 L: 22622 D: 123729 Ptnml(0-2): 1408; 16316; 48758; 16877; 1445  closes https://github.com/official-stockfish/Stockfish/pull/3194  Bench: 4067106,True,2,2020-10-01
syzygy1,vondele,2020-10-22 18:50:16+00:00,More incremental accumulator updates  This patch was inspired by c065abd which updates the accumulator; if possible; based on the accumulator of two plies back if the accumulator of the preceding ply is not available.  With this patch we look back even further in the position history in an attempt to reduce the number of complete recomputations. When we find a usable accumulator for the position N plies back; we also update the accumulator of the position N-1 plies back because that accumulator is most likely to be helpful later when evaluating positions in sibling branches. By not updating all intermediate accumulators immediately; we avoid doing too much work that is not certain to be useful. Overall; roughly 2-3% speedup.  This patch makes the code more specific to the net architecture; changing input features of the net will require additional changes to the incremental update code as discussed in the PR #3193 and #3191.  Passed STC: https://tests.stockfishchess.org/tests/view/5f9056712c92c7fe3a8c60d0 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 10040 W: 1116 L: 968 D: 7956 Ptnml(0-2): 42; 722; 3365; 828; 63  closes https://github.com/official-stockfish/Stockfish/pull/3193  No functional change.,True,3,2020-10-01
vondele,vondele,2020-10-22 18:18:12+00:00,Add net as dependency of config  cleaner output and error message if the server is down and the net is not available.  closes https://github.com/official-stockfish/Stockfish/pull/3188  No functional change,True,3,2020-10-01
Unknown,vondele,2020-10-22 18:08:15+00:00,Reduce big time spikes by reducing PV re-searches.  Save time by reducing PV re-searches above original depth. Instead use 5% extra time on every move.  STC 10+0.1 th 1 : LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 90688 W: 9702 L: 9436 D: 71550 Ptnml(0-2): 408; 7252; 29792; 7450; 442 https://tests.stockfishchess.org/tests/view/5f8df807bacb75a4f9a47223  LTC 60+0.6 th 1 : LLR: 2.97 (-2.94;2.94) {0.25;1.25} Total: 97856 W: 4602 L: 4303 D: 88951 Ptnml(0-2): 53; 3757; 41057; 3960; 101 https://tests.stockfishchess.org/tests/view/5f8ec4872c92c7fe3a8c602d  closes https://github.com/official-stockfish/Stockfish/pull/3192  Bench 3943959,True,3,2020-10-01
Vizvezdenec,vondele,2020-10-18 11:54:28+00:00,Do more reductions for late quiet moves in case of consecutive fail highs.  Idea of this patch can be described as following - in case we have consecutive fail highs and we reach late enough moves at root node probability of remaining quiet moves being able to produce even bigger value than moves that produced previous cutoff (so ones that should be high in move ordering but now they fail to produce beta cutoff because we actually reached high move count) should be quiet small so we can reduce them more.  passed STC LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 53392 W: 5681 L: 5474 D: 42237 Ptnml(0-2): 214; 4104; 17894; 4229; 255 https://tests.stockfishchess.org/tests/view/5f88501adcdad978fe8c527e  passed LTC LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 59136 W: 2773 L: 2564 D: 53799 Ptnml(0-2): 30; 2117; 25078; 2300; 43 https://tests.stockfishchess.org/tests/view/5f884dbfdcdad978fe8c527a  closes https://github.com/official-stockfish/Stockfish/pull/3184  Bench: 4066972,True,6,2020-10-01
Unknown,snicolet,2020-10-18 11:43:26+00:00,Update default net to nn-eba324f53044.nnue  The new net is based on the previous net 04cf2b4ed1da but with the biases for the 1st hidden layer tuned SPSA; see the SPSA session on fishtest there: https://tests.stockfishchess.org/tests/view/5f875213dcdad978fe8c5211  Thanks to @vondele for writing out the net; see discussion in this thread: https://github.com/mstembera/Stockfish/commit/432da86721647dff1d9426a7cdcfd2dbada8155e  Passed STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 15000 W: 1640 L: 1483 D: 11877 Ptnml(0-2): 50; 1183; 4908; 1278; 81 https://tests.stockfishchess.org/tests/view/5f8955e20fea1a44ec4f0a5d  Passed LTC: LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 81272 W: 3948 L: 3682 D: 73642 Ptnml(0-2): 64; 3194; 33856; 3456; 66 https://tests.stockfishchess.org/tests/view/5f89e8efeae8a6e60644d6e7  closes https://github.com/official-stockfish/Stockfish/pull/3187  Bench: 3762411,True,6,2020-10-01
unaiic,vondele,2020-10-14 17:32:12+00:00,Scale factor tweak  Add !pawnsOnBothFlanks heuristic to scale factor.  STC https://tests.stockfishchess.org/tests/view/5f8080575b3847b5d41f9134 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 250960 W: 49779 L: 49168 D: 152013 Ptnml(0-2): 4224; 28822; 58802; 29383; 4249  LTC https://tests.stockfishchess.org/tests/view/5f832f498ea73fb8ddf83ddb LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 88584 W: 11827 L: 11388 D: 65369 Ptnml(0-2): 585; 8079; 26578; 8412; 638  closes https://github.com/official-stockfish/Stockfish/pull/3179  bench: 3834252,True,2,2020-10-01
FauziAkram,vondele,2020-10-14 17:29:22+00:00,RookOnQueenFile Removal  Removing Rook On Queen File looks beneficial; and it might even bring some ELO. I will try to reintroduce it with a different method later on.  Passed STC: https://tests.stockfishchess.org/tests/view/5f7cea204389873867eb10cb LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 18624 W: 3800 L: 3568 D: 11256 Ptnml(0-2): 308; 2131; 4257; 2253; 363  Passed LTC: https://tests.stockfishchess.org/tests/view/5f7d76a4e936c6892bf50598 LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 117864 W: 15515 L: 15340 D: 87009 Ptnml(0-2): 926; 11127; 34671; 11262; 946  closes https://github.com/official-stockfish/Stockfish/pull/3176  Bench: 3756191,True,2,2020-10-01
vondele,snicolet,2020-10-14 11:28:21+00:00,Update default net to nn-04cf2b4ed1da.nnue  Further tune the net parameters; now the last but one layer (32x32). To limit the number of parameters optimized; the network layer was decomposed using SVD; and the singular values were treated as parameters and tuned.  Tuning branch: https://github.com/vondele/Stockfish/tree/svdTune Tuner: https://github.com/vondele/nevergrad4sf  passed STC: https://tests.stockfishchess.org/tests/view/5f83e82f8ea73fb8ddf83e4e LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 8488 W: 944 L: 795 D: 6749 Ptnml(0-2): 39; 609; 2811; 734; 51  passed LTC: https://tests.stockfishchess.org/tests/view/5f83f4118ea73fb8ddf83e66 LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 169016 W: 8043 L: 7589 D: 153384 Ptnml(0-2): 133; 6623; 70538; 7085; 129  closes https://github.com/official-stockfish/Stockfish/pull/3181  Bench: 3945198,True,2,2020-10-01
FauziAkram,vondele,2020-10-05 17:01:46+00:00,Pawn Tuning  Tuning of pawns; for classical evaluation:  Passed STC: https://tests.stockfishchess.org/tests/view/5f771f0e52560f5fc78559ec LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 252696 W: 50321 L: 49692 D: 152683 Ptnml(0-2): 4614; 29845; 57049; 29978; 4862  Passed LTC: https://tests.stockfishchess.org/tests/view/5f77cfef090dcf9aaa16d38b LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 48184 W: 6556 L: 6193 D: 35435 Ptnml(0-2): 335; 4516; 14100; 4733; 408  closes https://github.com/official-stockfish/Stockfish/pull/3169  bench: 4016121,True,0,2020-10-01
unaiic,vondele,2020-10-05 16:59:02+00:00,Simplify away futility pruning for captures  Remove futility pruning for captures.  STC https://tests.stockfishchess.org/tests/view/5f749bfed930428c36d34c56 LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 38064 W: 4011 L: 3929 D: 30124 Ptnml(0-2): 192; 3004; 12567; 3068; 201  LTC https://tests.stockfishchess.org/tests/view/5f74d99bf18675b1ce2f7412 LLR: 2.94 (-2.94;2.94) {-0.75;0.25} Total: 184984 W: 8567 L: 8610 D: 167807 Ptnml(0-2): 146; 7593; 77058; 7548; 147  closes https://github.com/official-stockfish/Stockfish/pull/3166  bench: 3890648,True,0,2020-10-01
vondele,vondele,2020-10-05 16:56:49+00:00,Schedule threads fairly under valgrind  fixes a rare case that can cause CI to fail when running multithreaded under valgrind.  closes https://github.com/official-stockfish/Stockfish/pull/3165  No functional change.,True,0,2020-10-01
snicolet,vondele,2020-09-28 20:42:26+00:00,Include pawns in NNUE scaling  We now include the total pawn count in the scaling factor for the output of the NNUE evaluation network. This should have the effect of trying to keep more pawns when SF has the advantage; but exchange them when she is defending.  Thanks to Alexander Pagel (Lolligerhans) for the idea of using the value of pawns to ease the comparison with the rest of the material estimation.  Passed STC: LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 15072 W: 1700 L: 1539 D: 11833 Ptnml(0-2): 65; 1202; 4845; 1355; 69 https://tests.stockfishchess.org/tests/view/5f7235a63b22d6afa50699b3  Passed LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.25} Total: 25880 W: 1270 L: 1124 D: 23486 Ptnml(0-2): 23; 980; 10788; 1126; 23 https://tests.stockfishchess.org/tests/view/5f723b483b22d6afa5069a99  closes https://github.com/official-stockfish/Stockfish/pull/3164  Bench: 3776081,True,0,2020-09-01
locutus2,vondele,2020-09-28 20:34:25+00:00,Tweak reduction formula.  Replace log(i) with log(i + 0.25 * log(i)). This increases especially for low values the reductions. But for bigger values there are nearly no changes.  STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 49640 W: 5505 L: 5289 D: 38846 Ptnml(0-2): 270; 4074; 15924; 4274; 278 https://tests.stockfishchess.org/tests/view/5f71f04d3b22d6afa5069478  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 43856 W: 2209 L: 2021 D: 39626 Ptnml(0-2): 32; 1776; 18128; 1956; 36 https://tests.stockfishchess.org/tests/view/5f7232ee3b22d6afa50699a2  closes https://github.com/official-stockfish/Stockfish/pull/3163  Bench: 3555769,True,0,2020-09-01
SFisGOD,vondele,2020-09-28 20:29:31+00:00,Update default net to nn-baeb9ef2d183.nnue  Further optimization of Sergio's nn-03744f8d56d8.nnue This patch is the result of collaboration with Joost VandeVondele.  STC: LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 37000 W: 4145 L: 3947 D: 28908 Ptnml(0-2): 191; 3016; 11912; 3166; 215 https://tests.stockfishchess.org/tests/view/5f71e7983b22d6afa5069475  LTC: LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 60224 W: 2992 L: 2769 D: 54463 Ptnml(0-2): 48; 2420; 24956; 2637; 51 https://tests.stockfishchess.org/tests/view/5f722bb83b22d6afa506998f  closes https://github.com/official-stockfish/Stockfish/pull/3161  Bench: 3720073,True,0,2020-09-01
FauziAkram,vondele,2020-09-28 20:26:37+00:00,Tweaking Mobility and Safe Check  Passed STC: https://tests.stockfishchess.org/tests/view/5f70d86d3b22d6afa50693b9 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 100368 W: 20323 L: 19914 D: 60131 Ptnml(0-2): 1927; 11641; 22605; 12118; 1893  Passed LTC: https://tests.stockfishchess.org/tests/view/5f71bb553b22d6afa5069457 LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 77648 W: 10613 L: 10181 D: 56854 Ptnml(0-2): 634; 7280; 22594; 7652; 664  closes https://github.com/official-stockfish/Stockfish/pull/3160  Bench: 3861984,True,0,2020-09-01
Vizvezdenec,vondele,2020-09-28 20:22:54+00:00,Adjust null move pruning constants  Idea is that division by fraction of 2 is slightly faster than by other numbers so parameters are adjusted in a way that division in null move pruning depth reduction features dividing by 256 instead of dividing by 213. Other than this patch is almost non-functional - difference starts to exist by depth 133.  passed STC https://tests.stockfishchess.org/tests/view/5f70dd943b22d6afa50693c5 LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 57048 W: 6616 L: 6392 D: 44040 Ptnml(0-2): 304; 4583; 18531; 4797; 309  passed LTC https://tests.stockfishchess.org/tests/view/5f7180db3b22d6afa506941f LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 45960 W: 2419 L: 2229 D: 41312 Ptnml(0-2): 43; 1779; 19137; 1987; 34  closes https://github.com/official-stockfish/Stockfish/pull/3159  bench 3789924,True,0,2020-09-01
vondele,vondele,2020-09-28 14:55:40+00:00,Update default net to nn-04a843f8932e.nnue  an optimization of Sergio's nn-03744f8d56d8.nnue tuning the output layer (33 parameters) on game play.  WIP code to make layer parameters tunable is https://github.com/vondele/Stockfish/tree/optionOutput Optimization itself is using https://github.com/vondele/nevergrad4sf Writing of the modified net using WIP code based on the learner code https://github.com/vondele/Stockfish/tree/evalWrite  Most parameters in the output layer are changed only little (~5 for int8_t).  passed STC: https://tests.stockfishchess.org/tests/view/5f716f6b3b22d6afa506941a LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 15488 W: 1859 L: 1689 D: 11940 Ptnml(0-2): 79; 1260; 4917; 1388; 100  passed LTC: https://tests.stockfishchess.org/tests/view/5f71908e3b22d6afa506942e LLR: 2.93 (-2.94;2.94) {0.25;1.25} Total: 8728 W: 518 L: 400 D: 7810 Ptnml(0-2): 7; 338; 3556; 456; 7  closes https://github.com/official-stockfish/Stockfish/pull/3158  Bench: 3789924,True,0,2020-09-01
noobpwnftw,vondele,2020-09-28 14:54:35+00:00,Use incremental updates more often  Use incremental updates for accumulators for up to 2 plies. Do not copy accumulator. About 2% speedup.  Passed STC: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 21752 W: 2583 L: 2403 D: 16766 Ptnml(0-2): 128; 1761; 6923; 1931; 133 https://tests.stockfishchess.org/tests/view/5f7150cf3b22d6afa5069412  closes https://github.com/official-stockfish/Stockfish/pull/3157  No functional change,True,0,2020-09-01
snicolet,vondele,2020-09-27 06:24:50+00:00,Tweak nnue scaling to keep more material  Current master uses a constant scale factor of 5/4 = 1.25 for the output of the NNUE network; for compatibility with search and classical evaluation. We modify this scale factor to make it dependent on the phase of the game; going from about 1.5 in the opening to 1.0 for pure pawn endgames.  This helps Stockfish to avoid exchanges of pieces (heavy pieces in particular) when she has the advantage; keeping more material on the board when attacking.  Passed STC: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 14744 W: 1771 L: 1599 D: 11374 Ptnml(0-2): 87; 1184; 4664; 1344; 93 https://tests.stockfishchess.org/tests/view/5f6fb0a63b22d6afa506904f  Passed LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 8912 W: 512 L: 393 D: 8007 Ptnml(0-2): 7; 344; 3637; 459; 9 https://tests.stockfishchess.org/tests/view/5f6fcf533b22d6afa5069066  closes https://github.com/official-stockfish/Stockfish/pull/3154  Bench: 3943952,True,6,2020-09-01
SFisGOD,vondele,2020-09-25 15:44:19+00:00,Switch to NNUE eval probabilistically for OCB  Introduce a small chance of switching to NNUE if PSQ imbalance is large but we have opposite colored bishops and the classical eval is struggling to win.  STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 25304 W: 3179 L: 2983 D: 19142 Ptnml(0-2): 172; 2171; 7781; 2345; 183 https://tests.stockfishchess.org/tests/view/5f6b14dec7759d4ee307cfe3  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 84680 W: 4846 L: 4556 D: 75278 Ptnml(0-2): 89; 3933; 34011; 4213; 94 https://tests.stockfishchess.org/tests/view/5f6b3fb6c7759d4ee307cff9  closes https://github.com/official-stockfish/Stockfish/pull/3146  Bench: 3865413,True,4,2020-09-01
snicolet,vondele,2020-09-25 15:44:14+00:00,Suppress info strings before 'uci'  On Windows; Stockfish wouldn't launch in some GUI because we output some info strings (about the use of large pages) before sending the 'uci' command. It seems more robust to suppress these info strings; and instead to add a proper section section in the Readme about large pages use.  fixes https://github.com/official-stockfish/Stockfish/issues/3052 closes https://github.com/official-stockfish/Stockfish/pull/3147  No functional change,True,4,2020-09-01
snicolet,snicolet,2020-09-22 20:45:02+00:00,Increase reductions with the number of threads  Passed STC with 8 threads: LLR: 2.92 (-2.94;2.94) {-0.25;1.25} Total: 13520 W: 1135 L: 1012 D: 11373 Ptnml(0-2): 39; 815; 4929; 938; 39 https://tests.stockfishchess.org/tests/view/5f68e274ded68c240be73f41  Passed LTC with 8 threads: LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 48384 W: 2183 L: 1994 D: 44207 Ptnml(0-2): 28; 1777; 20402; 1948; 37 https://tests.stockfishchess.org/tests/view/5f68f068ded68c240be747e9  closes https://github.com/official-stockfish/Stockfish/pull/3142  No functional change (for one thread),True,1,2020-09-01
snicolet,snicolet,2020-09-21 08:41:10+00:00,Small cleanups 12  - Clean signature of functions in namespace NNUE - Add comment for countermove based pruning - Remove bestMoveCount variable - Add const qualifier to kpp_board_index array - Fix spaces in get_best_thread() - Fix indention in capture LMR code in search.cpp - Rename TtmemDeleter to LargePageDeleter  Closes https://github.com/official-stockfish/Stockfish/pull/3063  No functional change,True,0,2020-09-01
skiminki,vondele,2020-09-21 06:43:48+00:00,Add large page support for NNUE weights and simplify TT mem management  Use TT memory functions to allocate memory for the NNUE weights. This should provide a small speed-up on systems where large pages are not automatically used; including Windows and some Linux distributions.  Further; since we now have a wrapper for std::aligned_alloc(); we can simplify the TT memory management a bit:  - We no longer need to store separate pointers to the hash table and   its underlying memory allocation. - We also get to merge the Linux-specific and default implementations   of aligned_ttmem_alloc().  Finally; we'll enable the VirtualAlloc code path with large page support also for Win32.  STC: https://tests.stockfishchess.org/tests/view/5f66595823a84a47b9036fba LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 14896 W: 1854 L: 1686 D: 11356 Ptnml(0-2): 65; 1224; 4742; 1312; 105  closes https://github.com/official-stockfish/Stockfish/pull/3081  No functional change.,True,0,2020-09-01
locutus2,vondele,2020-09-21 06:19:10+00:00,Tweak hybrid treshold.  Increase the first hybrid threshold with more material. Rewrite the hybrid rules for clarity.  STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 24416 W: 3039 L: 2848 D: 18529 Ptnml(0-2): 135; 2136; 7503; 2271; 163 https://tests.stockfishchess.org/tests/view/5f6451efbb0cae038ca8f4dc  LTC; LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 65016 W: 3702 L: 3455 D: 57859 Ptnml(0-2): 66; 2991; 26157; 3218; 76 https://tests.stockfishchess.org/tests/view/5f64b143bb0cae038ca8f51f  closes https://github.com/official-stockfish/Stockfish/pull/3140  Bench: 3973739,True,0,2020-09-01
unaiic,vondele,2020-09-21 05:47:41+00:00,Simplify reduced depth search  Simplification in reduced depth search.  STC https://tests.stockfishchess.org/tests/view/5f64c72fbb0cae038ca8f531 LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 28320 W: 3475 L: 3359 D: 21486 Ptnml(0-2): 170; 2485; 8773; 2523; 209  LTC https://tests.stockfishchess.org/tests/view/5f650cfabb0cae038ca8f585 LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 58392 W: 3354 L: 3285 D: 51753 Ptnml(0-2): 74; 2826; 23336; 2877; 83  closes https://github.com/official-stockfish/Stockfish/pull/3139  bench: 4201295,True,0,2020-09-01
syzygy1,vondele,2020-09-17 15:24:52+00:00,Use tiling to speed up accumulator refreshes and updates  Perform the update and refresh operations tile by tile in a local array of vectors. By selecting the array size carefully; we achieve that the compiler keeps the whole array in vector registers.  Idea and original implementation by @sf-x.  STC: https://tests.stockfishchess.org/tests/view/5f623eec912c15f19854b855 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 4872 W: 623 L: 477 D: 3772 Ptnml(0-2): 14; 350; 1585; 450; 37  LTC: https://tests.stockfishchess.org/tests/view/5f62434e912c15f19854b860 LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 25808 W: 1565 L: 1401 D: 22842 Ptnml(0-2): 23; 1186; 10332; 1330; 33  closes https://github.com/official-stockfish/Stockfish/pull/3130  No functional change,True,3,2020-09-01
unaiic,vondele,2020-09-17 05:06:21+00:00,Simplify futility pruning for captures  STC https://tests.stockfishchess.org/tests/view/5f61f0e4b91f2ec371e429c2 LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 75512 W: 8747 L: 8704 D: 58061 Ptnml(0-2): 440; 6589; 23683; 6576; 468  LTC https://tests.stockfishchess.org/tests/view/5f6215d3912c15f19854b801 LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 92912 W: 5030 L: 4992 D: 82890 Ptnml(0-2): 88; 4363; 37532; 4369; 104  closes https://github.com/official-stockfish/Stockfish/pull/3129  bench: 3856086,True,3,2020-09-01
unaiic,vondele,2020-09-17 05:06:21+00:00,Remove castling extension  STC https://tests.stockfishchess.org/tests/view/5f5fa5348fbc1c8a3f476eca LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 38520 W: 4713 L: 4610 D: 29197 Ptnml(0-2): 233; 3486; 11734; 3559; 248  LTC https://tests.stockfishchess.org/tests/view/5f62166a912c15f19854b806 LLR: 2.93 (-2.94;2.94) {-0.75;0.25} Total: 48024 W: 2673 L: 2600 D: 42751 Ptnml(0-2): 64; 2247; 19316; 2322; 63  closes https://github.com/official-stockfish/Stockfish/pull/3128  bench: 3818400,True,3,2020-09-01
GoldenRare,vondele,2020-09-17 05:06:21+00:00,Added FEN string to bench output  fixes https://github.com/official-stockfish/Stockfish/pull/3117  closes https://github.com/official-stockfish/Stockfish/pull/3118  No functional change,True,3,2020-09-01
syzygy1,vondele,2020-09-16 19:00:14+00:00,"Improve NDK section in Makefile  This PR sets the ""comp"" variable simply to ""clang""; which seems to be more consistent and allows a small simplification.  The PR also moves the section that sets ""profile_make"" and ""profile_use"" to after the NDK section; which ensures that these variables are now set correctly for NDK/clang.  closes https://github.com/official-stockfish/Stockfish/pull/3121  No functional change",True,2,2020-09-01
foobar2016,vondele,2020-09-16 18:56:40+00:00,Use 2 * bestMoveChanges.  NNUE appears to provide a more stable eval than the classic eval; so the time use dependencies on bestMoveChanges; fallingEval; etc may need to change to make the best use of available time. This change doubles the effect of totBestMoveChanges when giving more time because the choice of best move is unstable.  STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 101928 W: 11995 L: 11698 D: 78235 Elo +0.78 Ptnml(0-2): 592; 8707; 32103; 8936; 626 https://tests.stockfishchess.org/tests/view/5f538a462d02727c56b36cec  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.25} Total: 186392 W: 10383 L: 9877 D: 166132 Elo +0.81 Ptnml(0-2): 207; 8370; 75539; 8870; 210 https://tests.stockfishchess.org/tests/view/5f54a9712d02727c56b36d5a  closes https://github.com/official-stockfish/Stockfish/pull/3119  Bench 4222126,True,2,2020-09-01
sergiovieri,vondele,2020-09-15 05:21:04+00:00,Update default net to nn-03744f8d56d8.nnue  Equivalent to 20200914-1520  closes https://github.com/official-stockfish/Stockfish/pull/3123  Bench: 4222126,True,1,2020-09-01
loco-loco,vondele,2020-09-15 05:19:02+00:00,Simplify StatSCore Initialization  No need to initialize StatScore at rootNode. Current Logic is redundant because at subsequent levels the grandchildren statScore is initialized to zero.  closes https://github.com/official-stockfish/Stockfish/pull/3122  Non functional change.,True,1,2020-09-01
SFisGOD,vondele,2020-09-08 20:56:08+00:00,Double probability of using classical eval  This patch doubles the moderate imbalance threshold and probability of using classical eval. So now if imbalance is greater than PawnValueMg / 4 then there is a 1/8 chance of using classical eval.  STC: LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 10984 W: 1303 L: 1140 D: 8541 Ptnml(0-2): 58; 867; 3489; 1010; 68 https://tests.stockfishchess.org/tests/view/5f554c9f97da2d5437d3813e  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 43064 W: 2476 L: 2276 D: 38312 Ptnml(0-2): 37; 1985; 17308; 2145; 57 https://tests.stockfishchess.org/tests/view/5f55690a00a0aa2ca79f0a43  closes https://github.com/official-stockfish/Stockfish/pull/3114  Bench: 4161067,True,1,2020-09-01
gcp,vondele,2020-09-08 20:53:50+00:00,"Always re-enable NNUE after ""bench"".  Restore the default NNUE setting (enabled) after a bench command. This also makes the resulting program settings independent of the number of FENs that are being benched.  Fixes issue #3112.  closes https://github.com/official-stockfish/Stockfish/pull/3113  No functional change.",True,1,2020-09-01
syzygy1,vondele,2020-09-08 20:53:17+00:00,"Bug fix in do_null_move() and NNUE simplification.  This fixes #3108 and removes some NNUE code that is currently not used.  At the moment; do_null_move() copies the accumulator from the previous state into the new state; which is correct. It then clears the ""computed_score"" flag because the side to move has changed; and with the other side to move NNUE will return a completely different evaluation (normally with changed sign but also with different NNUE-internal tempo bonus).  The problem is that do_null_move() clears the wrong flag. It clears the computed_score flag of the old state; not of the new state. It turns out that this almost never affects the search. For example; fixing it does not change the current bench (but it does change the previous bench). This is because the search code usually avoids calling evaluate() after a null move.  This PR corrects do_null_move() by removing the computed_score flag altogether. The flag is not needed because nnue_evaluate() is never called twice on a position.  This PR also removes some unnecessary {}s and inserts a few blank lines in the modified NNUE files in line with SF coding style.  Resulf ot STC non-regression test: LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 26328 W: 3118 L: 3012 D: 20198 Ptnml(0-2): 126; 2208; 8397; 2300; 133 https://tests.stockfishchess.org/tests/view/5f553ccc2d02727c56b36db1  closes https://github.com/official-stockfish/Stockfish/pull/3109  bench: 4109324",True,1,2020-09-01
SFisGOD,vondele,2020-09-04 16:58:34+00:00,Use classical eval more often  If there is a moderate imbalance; use classical eval with small probability (1/16); as derived from the node counter.  STC: LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 32320 W: 3562 L: 3377 D: 25381 Ptnml(0-2): 144; 2609; 10478; 2776; 153 https://tests.stockfishchess.org/tests/view/5f520615ba100690c5cc5f80  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 21032 W: 1116 L: 974 D: 18942 Ptnml(0-2): 20; 837; 8664; 971; 24 https://tests.stockfishchess.org/tests/view/5f522eaaba100690c5cc5f8c  closes https://github.com/official-stockfish/Stockfish/pull/3107  Bench: 4109324,True,4,2020-09-01
Vizvezdenec,vondele,2020-09-04 16:52:46+00:00,Adjust penalty on refuted early quiet moves  This patch changes how previous early moves are penalized in case search finds a best move. Here; the first quiet move that was not a transposition table move is penalized.  passed STC https://tests.stockfishchess.org/tests/view/5f51d839ba100690c5cc5f69 LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 10088 W: 1150 L: 997 D: 7941 Ptnml(0-2): 41; 772; 3278; 899; 54  passed LTC https://tests.stockfishchess.org/tests/view/5f51e435ba100690c5cc5f76 LLR: 2.93 (-2.94;2.94) {0.25;1.25} Total: 30808 W: 1564 L: 1405 D: 27839 Ptnml(0-2): 19; 1245; 12717; 1404; 19  closes https://github.com/official-stockfish/Stockfish/pull/3106  bench 3983758,True,4,2020-09-01
sergiovieri,vondele,2020-09-04 06:03:43+00:00,Update default net to nn-308d71810dff.nnue  equivalent to 20200903-1739  Net trained from scratch; so it has quite different features extracted compared to the previous net (82215d0fd0df).  STC: LLR: 2.98 (-2.94;2.94) {-0.25;1.25} Total: 108328 W: 14048 L: 13719 D: 80561 Ptnml(0-2): 842; 10039; 32062; 10390; 831 https://tests.stockfishchess.org/tests/view/5f50e053ba100690c5cc5f00  LTC: LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 13872 W: 1059 L: 890 D: 11923 Ptnml(0-2): 30; 724; 5270; 871; 41 https://tests.stockfishchess.org/tests/view/5f51821fba100690c5cc5f36  closes https://github.com/official-stockfish/Stockfish/pull/3104  Bench: 3832716,True,4,2020-09-01
VoyagerOne,vondele,2020-09-04 06:00:45+00:00,LMR Simplification  remove reduction at non-check cut nodes for second move at low depths  STC: LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 61712 W: 6594 L: 6543 D: 48575 Ptnml(0-2): 293; 5085; 20082; 5070; 326 https://tests.stockfishchess.org/tests/view/5f5007d6ba100690c5cc5ea9  LTC: LLR: 2.94 (-2.94;2.94) {-0.75;0.25} Total: 57544 W: 2983 L: 2925 D: 51636 Ptnml(0-2): 47; 2568; 23495; 2604; 58 https://tests.stockfishchess.org/tests/view/5f50c597ba100690c5cc5ef7  closes https://github.com/official-stockfish/Stockfish/pull/3103  Bench: 3952302,True,4,2020-09-01
unaiic,vondele,2020-09-04 05:58:13+00:00,Simplify singularQuietLMR  remove formerPV dependence  STC https://tests.stockfishchess.org/tests/view/5f4cb922ba100690c5cc5d35 LLR: 2.96 (-2.94;2.94) {-1.25;0.25} Total: 113672 W: 12347 L: 12368 D: 88957 Ptnml(0-2): 566; 9537; 36699; 9420; 614  LTC https://tests.stockfishchess.org/tests/view/5f4e8474ba100690c5cc5e12 LLR: 2.93 (-2.94;2.94) {-0.75;0.25} Total: 43032 W: 2298 L: 2227 D: 38507 Ptnml(0-2): 45; 1940; 17475; 2011; 45  closes https://github.com/official-stockfish/Stockfish/pull/3102  bench: 3290084,True,4,2020-09-01
unaiic,vondele,2020-09-04 05:55:41+00:00,Less pruning in qsearch  do not prune moves that give discovery checks; even if with negative SSE.  STC https://tests.stockfishchess.org/tests/view/5f4cb5e8ba100690c5cc5d25 LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 91328 W: 9940 L: 9667 D: 71721 Ptnml(0-2): 491; 7345; 29693; 7670; 465  LTC https://tests.stockfishchess.org/tests/view/5f4dbc2eba100690c5cc5dac LLR: 2.97 (-2.94;2.94) {0.25;1.25} Total: 52448 W: 2799 L: 2586 D: 47063 Ptnml(0-2): 53; 2220; 21459; 2445; 47  closes https://github.com/official-stockfish/Stockfish/pull/3098  bench: 4031192,True,4,2020-09-01
vondele,vondele,2020-09-04 05:46:06+00:00,Restore development version  have fun!  No functional change,True,4,2020-09-01
vondele,vondele,2020-09-02 14:19:30+00:00,Stockfish 12  Official release version of Stockfish 12  Bench: 3624569  -----------------------  It is our pleasure to release Stockfish 12 to users world-wide  Downloads will be freely available at  https://stockfishchess.org/download/  This version 12 of Stockfish plays significantly stronger than any of its predecessors. In a match against Stockfish 11; Stockfish 12 will typically win at least ten times more game pairs than it loses.  This jump in strength; visible in regular progression tests during development[1]; results from the introduction of an efficiently updatable neural network (NNUE) for the evaluation in Stockfish[2]; and associated tuning of the engine as a whole. The concept of the NNUE evaluation was first introduced in shogi; and ported to Stockfish afterward. Stockfish remains a CPU-only engine; since the NNUE networks can be very efficiently evaluated on CPUs. The recommended parameters of the NNUE network are embedded in distributed binaries; and Stockfish will use NNUE by default.  Both the NNUE and the classical evaluations are available; and can be used to assign values to positions that are later used in alpha-beta (PVS) search to find the best move. The classical evaluation computes this value as a function of various chess concepts; handcrafted by experts; tested and tuned using fishtest. The NNUE evaluation computes this value with a neural network based on basic inputs. The network is optimized and trained on the evaluations of millions of positions.  The Stockfish project builds on a thriving community of enthusiasts that contribute their expertise; time; and resources to build a free and open source chess engine that is robust; widely available; and very strong. We invite chess fans to join the fishtest testing framework and programmers to contribute on github[3].  Stay safe and enjoy chess!  The Stockfish team  [1] https://github.com/glinscott/fishtest/wiki/Regression-Tests [2] https://github.com/official-stockfish/Stockfish/commit/84f3e867903f62480c33243dd0ecbffd342796fc [3] https://stockfishchess.org/get-involved/,True,2,2020-09-01
vondele,vondele,2020-09-02 14:18:58+00:00,Update CPU contributors list  with fishtest data of Sept. 2 2020  closes https://github.com/official-stockfish/Stockfish/pull/3095  No functional change,True,2,2020-09-01
vondele,vondele,2020-09-02 05:32:10+00:00,Only use MADV_RANDOM if defined  needed to compile on Haiku.  fixes https://github.com/official-stockfish/Stockfish/issues/3093  closes https://github.com/official-stockfish/Stockfish/pull/3094  No functional change,True,2,2020-09-01
VoyagerOne,vondele,2020-09-01 07:31:40+00:00,LMR Root Node Simplification  Simplify LMR at Root node  STC: LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 71520 W: 7649 L: 7614 D: 56257 Ptnml(0-2): 346; 5845; 23349; 5868; 352 https://tests.stockfishchess.org/tests/view/5f4be8c0ba100690c5cc5cbb  LTC: LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 74832 W: 3997 L: 3948 D: 66887 Ptnml(0-2): 77; 3422; 30362; 3485; 70 https://tests.stockfishchess.org/tests/view/5f4c603eba100690c5cc5d0e  closes https://github.com/official-stockfish/Stockfish/pull/3091  Bench: 3624569,True,1,2020-09-01
vondele,vondele,2020-09-01 07:26:56+00:00,Always print an info line before a bestmove  if very few nodes are being searched before a bestmove is reported; an info line might be missing.  fixes https://github.com/official-stockfish/Stockfish/issues/2757  closes https://github.com/official-stockfish/Stockfish/pull/3088  no functional change,True,1,2020-09-01
Unknown,vondele,2020-09-01 07:26:08+00:00,Use llvm linker with clang on windows for LTO.  other linkers might fail to link during the LTO phase.  The linker might have to be installed using `pacman -Syu mingw-w64-x86_64-lld`  closes https://github.com/official-stockfish/Stockfish/pull/3084  No functional change.,True,1,2020-09-01
Unknown,vondele,2020-09-01 07:25:44+00:00,Use stable sort to make sure bench with TB yields same results everywhere.  std::sort() is not stable so different implementations can produce different results: use the stable version instead.  Observed for '8/6k1/5r2/8/8/8/1K6/Q7 w - - 0 1' yielding different bench results for gcc and MSVC and 3-4-5 syzygy TB prior to this patch.  closes https://github.com/official-stockfish/Stockfish/pull/3083  No functional change.,True,1,2020-09-01
FauziAkram,vondele,2020-08-30 12:22:07+00:00,Update parametes in classical evaluation.  Passed STC (NNUE=False): https://tests.stockfishchess.org/tests/view/5f42edfe5089a564a10d84a0 LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 13840 W: 2591 L: 2336 D: 8913 Ptnml(0-2): 194; 1453; 3387; 1676; 210  Passed LTC (NNUE=False): https://tests.stockfishchess.org/tests/view/5f4369795089a564a10d84d8 LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 159744 W: 19430 L: 18850 D: 121464 Ptnml(0-2): 960; 14185; 49030; 14709; 988  closes https://github.com/official-stockfish/Stockfish/pull/3080  bench: 3736029,True,6,2020-08-01
VoyagerOne,vondele,2020-08-30 12:17:23+00:00,QS Pruning Simplification  Remove depth dependence in QS pruning  STC: LLR: 2.95 (-2.94;2.94) {-1.25;0.25} Total: 40536 W: 4442 L: 4358 D: 31736 Ptnml(0-2): 209; 3330; 13118; 3390; 221 https://tests.stockfishchess.org/tests/view/5f49035b3def6407861152f9  LTC: LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 97104 W: 5164 L: 5130 D: 86810 Ptnml(0-2): 103; 4478; 39377; 4470; 124 https://tests.stockfishchess.org/tests/view/5f4939d53def640786115322  closes https://github.com/official-stockfish/Stockfish/pull/3077  Bench: 3865238,True,6,2020-08-01
MJZ1977,vondele,2020-08-30 12:13:16+00:00,Add / remove leaves from search tree ttPv  add if previous leaf is in search tree and we didn't find a counter move else remove the position if the leaf is the last one in search tree.  STC : https://tests.stockfishchess.org/tests/view/5f49203c3def640786115314 LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 29968 W: 3381 L: 3195 D: 23392 Ptnml(0-2): 146; 2432; 9671; 2560; 175  LTC : https://tests.stockfishchess.org/tests/view/5f494bea3def640786115336 LLR: 2.96 (-2.94;2.94) {0.25;1.25} Total: 84952 W: 4619 L: 4333 D: 76000 Ptnml(0-2): 86; 3765; 34481; 4065; 79  closes https://github.com/official-stockfish/Stockfish/pull/3075  Bench 3527337,True,6,2020-08-01
unaiic,vondele,2020-08-30 12:04:29+00:00,Reintroduce depth reduction  Reintroduce depth reduction if the position is not in TT.  STC https://tests.stockfishchess.org/tests/view/5f4652e85089a564a10d868c LLR: 2.97 (-2.94;2.94) {-0.25;1.25} Total: 40240 W: 4535 L: 4331 D: 31374 Ptnml(0-2): 215; 3276; 12969; 3410; 250  LTC https://tests.stockfishchess.org/tests/view/5f46ca5e5089a564a10d86f3 LLR: 2.93 (-2.94;2.94) {0.25;1.25} Total: 63096 W: 3426 L: 3188 D: 56482 Ptnml(0-2): 51; 2798; 25645; 2970; 84  closes https://github.com/official-stockfish/Stockfish/pull/3072  bench: 3611906,True,6,2020-08-01
vondele,vondele,2020-08-30 12:03:02+00:00,Cleaner make help  do not print details if ARCH is an empty string. Follow up for b0b4ca17db49ed03057b5fa4ee4a12dab0e9c9e6  https://github.com/official-stockfish/Stockfish/pull/3071  No functional change,True,6,2020-08-01
snicolet,vondele,2020-08-29 19:56:00+00:00,"Embed default net; and simplify using non-default nets  covers the most important cases from the user perspective:  It embeds the default net in the binary; so a download of that binary will result in a working engine with the default net. The engine will be functional in the default mode without any additional user action.  It allows non-default nets to be used; which will be looked for in up to three directories (working directory; location of the binary; and optionally a specific default directory). This mechanism is also kept for those developers that use MSVC; the one compiler that doesn't have an easy mechanism for embedding data.  It is possible to disable embedding; and instead specify a specific directory; e.g. linux distros might want to use CXXFLAGS=""-DNNUE_EMBEDDING_OFF -DDEFAULT_NNUE_DIRECTORY=/usr/share/games/stockfish/"" make -j ARCH=x86-64 profile-build  passed STC non-regression: https://tests.stockfishchess.org/tests/view/5f4a581c150f0aef5f8ae03a LLR: 2.95 (-2.94;2.94) {-1.25;-0.25} Total: 66928 W: 7202 L: 7147 D: 52579 Ptnml(0-2): 291; 5309; 22211; 5360; 293  closes https://github.com/official-stockfish/Stockfish/pull/3070  fixes https://github.com/official-stockfish/Stockfish/issues/3030  No functional change.",True,5,2020-08-01
VoyagerOne,vondele,2020-08-26 05:19:35+00:00,Simplify MCP in QS  Simplify moveCount pruning in QS by removing depth dependency.  STC LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 42960 W: 4741 L: 4661 D: 33558 Ptnml(0-2): 218; 3574; 13804; 3678; 206 https://tests.stockfishchess.org/tests/view/5f42e3f75089a564a10d8493  LTC LLR: 2.94 (-2.94;2.94) {-0.75;0.25} Total: 66672 W: 3563 L: 3508 D: 59601 Ptnml(0-2): 71; 3064; 26996; 3149; 56 https://tests.stockfishchess.org/tests/view/5f4353285089a564a10d84d0  closes https://github.com/official-stockfish/Stockfish/pull/3067  Bench: 4074430,True,2,2020-08-01
VoyagerOne,vondele,2020-08-26 05:16:50+00:00,Remove Reduce Depth  Remove Reduce Depth at PV nodes.  STC: LLR: 2.94 (-2.94;2.94) {-1.25;0.25} Total: 56760 W: 6299 L: 6236 D: 44225 Ptnml(0-2): 286; 4843; 18076; 4872; 303 https://tests.stockfishchess.org/tests/view/5f41356087a5c3c63d8f53c9  LTC: LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 17496 W: 954 L: 865 D: 15677 Ptnml(0-2): 13; 768; 7098; 855; 14 https://tests.stockfishchess.org/tests/view/5f41bb7687a5c3c63d8f53f9  closes https://github.com/official-stockfish/Stockfish/pull/3055  Bench: 3555051,True,2,2020-08-01
syzygy1,vondele,2020-08-26 05:11:26+00:00,"Remove EvalList  This patch removes the EvalList structure from the Position object and generally simplifies the interface between do_move() and the NNUE code.  The NNUE evaluation function first calculates the ""accumulator"". The accumulator consists of two halves: one for white's perspective; one for black's perspective.  If the ""friendly king"" has moved or the accumulator for the parent position is not available; the accumulator for this half has to be calculated from scratch. To do this; the NNUE node needs to know the positions and types of all non-king pieces and the position of the friendly king. This information can easily be obtained from the Position object.  If the ""friendly king"" has not moved; its half of the accumulator can be calculated by incrementally updating the accumulator for the previous position. For this; the NNUE code needs to know which pieces have been added to which squares and which pieces have been removed from which squares. In principle this information can be derived from the Position object and StateInfo struct (in the same way as undo_move() does this). However; it is probably a bit faster to prepare this information in do_move(); so I have kept the DirtyPiece struct. Since the DirtyPiece struct now stores the squares rather than ""PieceSquare"" indices; there are now at most three ""dirty pieces"" (previously two). A promotion move that captures a piece removes the capturing pawn and the captured piece from the board (to SQ_NONE) and moves the promoted piece to the promotion square (from SQ_NONE).  An STC test has confirmed a small speedup:  https://tests.stockfishchess.org/tests/view/5f43f06b5089a564a10d850a LLR: 2.94 (-2.94;2.94) {-0.25;1.25} Total: 87704 W: 9763 L: 9500 D: 68441 Ptnml(0-2): 426; 6950; 28845; 7197; 434  closes https://github.com/official-stockfish/Stockfish/pull/3068  No functional change",True,2,2020-08-01
vondele,vondele,2020-08-26 05:07:06+00:00,Check ARCH=.... variable  to prevent user errors or generating untested code; check explicitly that the ARCH variable is equivalent to a supported architecture as listed in `make help`.  To nevertheless compile for an untested target the user can override the internal variable; passing the undocumented `SUPPORTED_ARCH=true` to make.  closes https://github.com/official-stockfish/Stockfish/pull/3062  No functional change.,True,2,2020-08-01
Unknown,vondele,2020-08-24 10:43:39+00:00,Allow for VNNI256 compilation with g++-8  explicitly pass needed -mavx512f -mavx512bw flags  closes https://github.com/official-stockfish/Stockfish/pull/3061  No functional change,True,0,2020-08-01
Vizvezdenec,vondele,2020-08-24 10:09:04+00:00,Introduce countermove based pruning for qsearch  This patch continues work of previous patch in introducing pruning heuristics in qsearch by analogy to main search; now with countermove based pruning. Idea is that if move is late enough and is quite check (we do generate them in qsearch) and has bad enough countermove history - prune it.  passed STC https://tests.stockfishchess.org/tests/view/5f41220287a5c3c63d8f53c5 LLR: 2.93 (-2.94;2.94) {-0.25;1.25} Total: 35944 W: 4127 L: 3929 D: 27888 Ptnml(0-2): 196; 2970; 11459; 3134; 213  passed LTC https://tests.stockfishchess.org/tests/view/5f41862f87a5c3c63d8f53e8 LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 138448 W: 7655 L: 7252 D: 123541 Ptnml(0-2): 145; 6247; 56043; 6638; 151  closes https://github.com/official-stockfish/Stockfish/pull/3058  Bench: 3610676,True,0,2020-08-01
skiminki,vondele,2020-08-24 10:03:28+00:00,Allow TT entries with key16==0 to be fetched  Fix the issue where a TT entry with key16==0 would always be reported as a miss. Instead; we'll use depth8 to detect whether the TT entry is occupied. In order to do that; we'll change DEPTH_OFFSET to -7 (depth8==0) to distinguish between an unoccupied entry and the otherwise lowest possible depth; i.e.; DEPTH_NONE (depth8==1).  To prevent a performance regression; we'll reorder the TT entry fields by the access order of TranspositionTable::probe(). Memory in general works fastest when accessed in sequential order. We'll also match the store order in TTEntry::save() with the entry field order; and re-order the 'if-or' expressions in TTEntry::save() from the cheapest to the most expensive.  Finally; as we now have a proper TT entry occupancy test; we'll fix a minor corner case with hashfull reporting. To reproduce: - Use a big hash - Either:   a. Start 31 very quick searches (this wraparounds generation to 0); or   b. Force generation of the first search to 0. - go depth infinite  Before the fix; hashfull would incorrectly report nearly full hash immediately after the search start; since TranspositionTable::hashfull() used to consider only the entry generation and not whether the entry was actually occupied.  STC: LLR: 2.95 (-2.94;2.94) {-0.25;1.25} Total: 36848 W: 4091 L: 3898 D: 28859 Ptnml(0-2): 158; 2996; 11972; 3091; 207 https://tests.stockfishchess.org/tests/view/5f3f98d5dc02a01a0c2881f7  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.25} Total: 32280 W: 1828 L: 1653 D: 28799 Ptnml(0-2): 34; 1428; 13051; 1583; 44 https://tests.stockfishchess.org/tests/view/5f3fe77a87a5c3c63d8f5332  closes https://github.com/official-stockfish/Stockfish/pull/3048  Bench: 3760677,True,0,2020-08-01
Unknown,vondele,2020-08-24 10:03:04+00:00,Support VNNI on 256bit vectors  due to downclocking on current chips (tested up to cascade lake) supporting avx512 and vnni512; it is better to use avx2 or vnni256 in multithreaded (in particular hyperthreaded) engine use. In single threaded use; the picture is different.  gcc compilation for vnni256 requires a toolchain for gcc >= 9.  closes https://github.com/official-stockfish/Stockfish/pull/3038  No functional change,True,0,2020-08-01
gsobala,vondele,2020-08-24 09:30:55+00:00,armv8 AArch64 does not require -mfpu=neon  -mpfu is not required on AArch64 / armv8 architecture on Linux and throws an error if present. This PR has been tested on gcc and clang on Gentoo-64 and Raspian-64 on a Raspberry Pi 4; as well as with a cross from Ubuntu (`make clean && make -j build ARCH=armv8         COMP=gcc COMPILER=aarch64-linux-gnu-g++`)  fixes https://github.com/official-stockfish/Stockfish/issues/3056 closes https://github.com/official-stockfish/Stockfish/pull/3059  No functional change,True,0,2020-08-01
Vizvezdenec,snicolet,2020-08-23 21:27:03+00:00,Introduce movecount pruning for qsearch()  If in quiescence search; we assume that me can prune late moves when:  a) the move ordering count of the move is : moveCount > abs(depth) + 2 b) we are not in check c) the late move does not give check d) the late move is not an advanced pawn push  Modification of an original idea by @VoyagerOne.  STC https://tests.stockfishchess.org/tests/view/5f40581787a5c3c63d8f535f LLR: 2.96 (-2.94;2.94) {-0.25;1.25} Total: 132848 W: 14999 L: 14661 D: 103188 Ptnml(0-2): 684; 11242; 42309; 11430; 759  LTC https://tests.stockfishchess.org/tests/view/5f4226da87a5c3c63d8f5412 LLR: 2.98 (-2.94;2.94) {0.25;1.25} Total: 12008 W: 678 L: 551 D: 10779 Ptnml(0-2): 8; 485; 4899; 596; 16  closes https://github.com/official-stockfish/Stockfish/pull/3053  Bench: 3749974,True,6,2020-08-01
syzygy1,snicolet,2020-08-23 21:09:31+00:00,Skip the alignment bug workaround for Clang  Clang-10.0.0 poses as gcc-4.2:  $ clang++ -E -dM - </dev/null | grep GNUC  This means that Clang is using the workaround for the alignment bug of gcc-8 even though it does not have the bug (as far as I know).  This patch should speed up AVX2 and AVX512 compiles on Windows (when using Clang); because it disables (for Clang) the gcc workaround we had introduced in this commit: https://github.com/official-stockfish/Stockfish/commit/875183b310a8249922c2155e82cb4cecfae2097e  closes https://github.com/official-stockfish/Stockfish/pull/3050  No functional change.,True,6,2020-08-01
vondele,snicolet,2020-08-22 23:53:41+00:00,Small trivial cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2801  No functional change,True,5,2020-08-01
snicolet,snicolet,2020-08-22 20:37:50+00:00,"Instructions to build on older Macintosh  In recent Macs; it is possible to use the Clang compiler provided by Apple to compile Stockfish out of the box; and this is the method used by default in our Makefile (the Makefile sets the macosx-version-min=10.14 flag to select the right libc++ library for the Clang compiler with recent c++17 support).  But it is quite possible to compile and run Stockfish on older Macs! Below we describe a method to install a recent GNU compiler on these Macs; to get the c++17 support. We have tested the following procedure to install gcc10 on machines running Mac OS 10.7; Mac OS 10.9 and Mac OS 10.13:  1) install XCode for your machine.  2) install Apple command-line developer tools for XCode; by typing the following    command in a Terminal:  ```       sudo xcode-select --install ```  3) go to the Stockfish ""src"" directory; then try a default build and run Stockfish:  ```       make clean       make build       make net       ./stockfish ```  4) if step 3 worked; congrats! You have a compiler recent enough on your Mac to compile Stockfish. If not; continue with step 5 to install GNU gcc10 :-)  5) install the MacPorts package manager (https://www.macports.org/install.php); for instance using the fast method in the ""macOS Package (.pkg) Installer"" section of the page.  6) use the ""port"" command to install the gcc10 package of MacPorts by typing the following command:  ```     sudo port install gcc10 ```  With this step; MacPorts will install the gcc10 compiler under the name ""g++-mp-10"" in the /opt/local/bin directory:  ```    which g++-mp-10     /opt/local/bin/g++-mp-10       <--- answer ```  7) You can now go back to the ""src"" directory of Stockfish; and try to build Stockfish by pointing at the right compiler:  ```    make clean    make build COMP=gcc COMPCXX=/opt/local/bin/g++-mp-10    make net    ./stockfish ```  8) Enjoy Stockfish on Macintosh!  See this pull request for further discussion: https://github.com/official-stockfish/Stockfish/pull/3049  No functional change",True,5,2020-08-01
vondele,vondele,2020-08-22 09:00:45+00:00,Explicitly rely on pthreads if possible  allows us to set the needed stacksize on thread creation.  Useful for environments with too small a default stack size (e.g. Alpine Linux with musl).  Passed STC; no regression:  LLR: 2.96 (-2.94;2.94) {-1.25;0.25} Total: 17816 W: 1344 L: 1275 D: 15197 Ptnml(0-2): 30; 1057; 6682; 1092; 47 https://tests.stockfishchess.org/tests/view/5f402b5587a5c3c63d8f534d  closes https://github.com/official-stockfish/Stockfish/pull/3047  fixes https://github.com/official-stockfish/Stockfish/issues/3041  No functional change.,True,5,2020-08-01
MJZ1977,vondele,2020-08-22 08:58:08+00:00,Display classic and NNUE evaluation in trace mode  show both the classical and NNUE evaluation; as well as the Final evaluation.  closes https://github.com/official-stockfish/Stockfish/pull/3042  No functional change.,True,5,2020-08-01
unaiic,vondele,2020-08-21 16:04:14+00:00,Simplify away internal iterative deepening  Remove the iterative deepening step. Instead; employ a depth reduction if the position is not in TT and on the PV.  STC https://tests.stockfishchess.org/tests/view/5f3ce6eaa95672ddd56c637e LLR: 2.97 (-2.94;2.94) {-0.50;1.50} Total: 41096 W: 4421 L: 4257 D: 32418 Ptnml(0-2): 207; 3259; 13460; 3407; 215  LTC (old) https://tests.stockfishchess.org/tests/view/5f3d7d4fa95672ddd56c640b LLR: 2.92 (-2.94;2.94) {-1.50;0.50} Total: 26032 W: 1320 L: 1309 D: 23403 Ptnml(0-2): 22; 1152; 10654; 1169; 19  LTC (new) https://tests.stockfishchess.org/tests/view/5f3e31e0a95672ddd56c6464 LLR: 2.95 (-2.94;2.94) {-0.75;0.25} Total: 34160 W: 1844 L: 1766 D: 30550 Ptnml(0-2): 33; 1533; 13876; 1599; 39  bench: 3849173,True,4,2020-08-01
gsobala,vondele,2020-08-21 15:59:21+00:00,Update Makefile for macOS  Changes to deal with compilation (particularly profile-build) on macOS. (1) The default toolchain has gcc masquerading as clang;     the previous Makefile was not picking up the required changes     to the different profiling tools. (2) The previous Makefile test for gccisclang occurred before     a potential overwrite of CXX by COMPCXX (3) llvm-profdata no longer runs as a command on macOS and     instead is invoked by ``xcrun llvm-profdata`` (4) Needs to support use of true gcc using e.g.     ``make build ... COMPCXX=g++-10`` (5) enable profile-build in travis for macOS  closes https://github.com/official-stockfish/Stockfish/pull/3043  No functional change,True,4,2020-08-01
vondele,vondele,2020-08-21 15:56:33+00:00,Deal with very old linux kernels  MADV_HUGEPAGE might not be available; for kernels before 2.6.38 (released 2011). Just skip the madvise.  closes https://github.com/official-stockfish/Stockfish/pull/3039  No functional change,True,4,2020-08-01
vondele,vondele,2020-08-20 19:14:32+00:00,Set Use NNUE by default to true  Since the initial stages of the merge; progress has been made so that this seems the best option now:  * NNUE is clearly stronger on most relevant hardware and time controls * All of our CI and testing infrastructure has been adjusted * The default net is easy to get (further ideas #3030)  fixes https://github.com/official-stockfish/Stockfish/issues/2861  closes https://github.com/official-stockfish/Stockfish/pull/3033  No functional change.,True,3,2020-08-01
vondele,vondele,2020-08-20 19:13:07+00:00,Send error message as an UCI info string  some GUIs do not show the error message when the engine terminates in the no-net case; as it is send to cerr. Instead send it as an info string; which the GUI will more likely display.  closes https://github.com/official-stockfish/Stockfish/pull/3031  No functional change.,True,3,2020-08-01
SFisGOD,vondele,2020-08-20 19:12:37+00:00,Reintroduce last captures extension  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 34840 W: 3834 L: 3682 D: 27324 Ptnml(0-2): 153; 2767; 11455; 2865; 180 https://tests.stockfishchess.org/tests/view/5f3bb380b38d442594aabefc  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 15832 W: 890 L: 776 D: 14166 Ptnml(0-2): 17; 669; 6429; 785; 16 https://tests.stockfishchess.org/tests/view/5f3c46a0a95672ddd56c632a  closes https://github.com/official-stockfish/Stockfish/pull/3028  see also https://github.com/official-stockfish/Stockfish/pull/3020  Bench: 4348811,True,3,2020-08-01
syzygy1,vondele,2020-08-18 18:15:07+00:00,Expanded support for x86-32 architectures.  add new ARCH targets  x86-32-sse41-popcnt     > x86 32-bit with sse41 and popcnt support x86-32-sse2             > x86 32-bit with sse2 support x86-32                  > x86 32-bit generic (with mmx and sse support)  retire x86-32-old (use general-32)  closes https://github.com/official-stockfish/Stockfish/pull/3022  No functional change.,True,1,2020-08-01
vondele,vondele,2020-08-18 17:57:30+00:00,Better error message on missing curl/wget  provide clean error/warning message for missing curl/wget; sha256sum/shasum  fixes https://github.com/official-stockfish/Stockfish/issues/3025  closes https://github.com/official-stockfish/Stockfish/pull/3026  No functional change,True,1,2020-08-01
vondele,vondele,2020-08-18 06:49:06+00:00,Fix Makefile typo  remove stray quote; shown with `make help`  No functional change,True,1,2020-08-01
Unknown,vondele,2020-08-18 06:36:57+00:00,Fallback to NNUE  If the classical eval ends up much smaller than estimated fall back to NNUE. Also use multiply instead of divide for the threshold comparison for smoother transitions without rounding.  STC https://tests.stockfishchess.org/tests/view/5f3a5011b38d442594aabdfe LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 57352 W: 6325 L: 6135 D: 44892 Ptnml(0-2): 277; 4748; 18482; 4846; 323  LTC https://tests.stockfishchess.org/tests/view/5f3aee9db38d442594aabe82 LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 16232 W: 897 L: 781 D: 14554 Ptnml(0-2): 19; 679; 6616; 771; 31  closes https://github.com/official-stockfish/Stockfish/pull/3023  bench: 4026216  -----  Recommended net: https://tests.stockfishchess.org/api/nn/nn-82215d0fd0df.nnue,True,1,2020-08-01
unaiic,vondele,2020-08-18 06:33:42+00:00,Remove last captures extension  STC https://tests.stockfishchess.org/tests/view/5f395657e98b6c64b3df41dd LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 144664 W: 15426 L: 15537 D: 113701 Ptnml(0-2): 612; 11341; 48537; 11230; 612  LTC https://tests.stockfishchess.org/tests/view/5f3a2ec7b38d442594aabdd7 LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 22728 W: 1161 L: 1146 D: 20421 Ptnml(0-2): 21; 960; 9388; 973; 22  closes https://github.com/official-stockfish/Stockfish/pull/3020  bench: 3832662,True,1,2020-08-01
VoyagerOne,vondele,2020-08-18 06:29:42+00:00,Remove history bonus from Eval  STC: LLR: 2.92 (-2.94;2.94) {-1.50;0.50} Total: 26776 W: 2787 L: 2725 D: 21264 https://tests.stockfishchess.org/tests/view/5f39d6beb38d442594aabd9b  LTC: LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 12968 W: 635 L: 608 D: 11725 https://tests.stockfishchess.org/tests/view/5f39decfb38d442594aabda7  closes https://github.com/official-stockfish/Stockfish/pull/3019  Bench:  4335100,True,1,2020-08-01
notruck,vondele,2020-08-18 06:19:22+00:00,Support building for Android using NDK  The easiest way to use the NDK in conjunction with this Makefile (tested on linux-x86_64):  1. Download the latest NDK (r21d) from Google from https://developer.android.com/ndk/downloads 2. Place and unzip the NDK in $HOME/ndk folder 3. Export the path variable e.g.; `export PATH=$PATH:$HOME/ndk/android-ndk-r21d/toolchains/llvm/prebuilt/linux-x86_64/bin` 4. cd to your Stockfish/src dir 5. Issue `make -j ARCH=armv8 COMP=ndk build`  (use `ARCH=armv7` or `ARCH=armv7-neon` for older CPUs) 6. Optionally `make -j ARCH=armv8 COMP=ndk strip` 7. That's all. Enjoy!  Improves support from Raspberry Pi (incomplete?) and compiling on arm in general  closes https://github.com/official-stockfish/Stockfish/pull/3015  fixes https://github.com/official-stockfish/Stockfish/issues/2860  fixes https://github.com/official-stockfish/Stockfish/issues/2641  Support is still fragile as we're missing CI on these targets. Nevertheless tested with:  ```bash   # build crosses from ubuntu 20.04 on x86 to various arch/OS combos   # tested with suitable packages installed   # (build-essentials; mingw-w64; g++-arm-linux-gnueabihf; NDK (r21d) from google)    # cross to Android   export PATH=$HOME/ndk/android-ndk-r21d/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH   make clean && make -j build ARCH=armv7         COMP=ndk  && make -j build ARCH=armv7 COMP=ndk strip   make clean && make -j build ARCH=armv7-neon    COMP=ndk  && make -j build ARCH=armv7-neon COMP=ndk strip   make clean && make -j build ARCH=armv8         COMP=ndk  && make -j build ARCH=armv8 COMP=ndk strip    # cross to Raspberry Pi   make clean && make -j build ARCH=armv7         COMP=gcc COMPILER=arm-linux-gnueabihf-g++   make clean && make -j build ARCH=armv7-neon    COMP=gcc COMPILER=arm-linux-gnueabihf-g++    # cross to Windows   make clean && make -j build ARCH=x86-64-modern COMP=mingw ```  No functional change,True,1,2020-08-01
unaiic,snicolet,2020-08-17 10:27:35+00:00,Simplify away the passed pawn extension  STC https://tests.stockfishchess.org/tests/view/5f3955f0e98b6c64b3df41d7 LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 31992 W: 3611 L: 3548 D: 24833 Ptnml(0-2): 174; 2658; 10273; 2713; 178  LTC https://tests.stockfishchess.org/tests/view/5f399e41e98b6c64b3df4210 LLR: 3.01 (-2.94;2.94) {-1.50;0.50} Total: 29568 W: 1488 L: 1480 D: 26600 Ptnml(0-2): 40; 1272; 12142; 1300; 30  closes https://github.com/official-stockfish/Stockfish/pull/3017  bench: 3844671  -----  Recommended net: https://tests.stockfishchess.org/api/nn/nn-82215d0fd0df.nnue,True,0,2020-08-01
snicolet,snicolet,2020-08-17 10:15:57+00:00,"Reformat code in little-endian patch  Reformat code and rename the function to ""read_little_endian()"" in the recent commit by Ronald de Man for support of big endian systems.  closes https://github.com/official-stockfish/Stockfish/pull/3016  No functional change -----  Recommended net: https://tests.stockfishchess.org/api/nn/nn-82215d0fd0df.nnue",True,0,2020-08-01
vondele,vondele,2020-08-16 19:10:26+00:00,Add further targets to travis testing  general-32; general-64 and help  closes https://github.com/official-stockfish/Stockfish/pull/3014  No functional change,True,6,2020-08-01
syzygy1,vondele,2020-08-16 19:10:26+00:00,Assume network file is in little-endian byte order  This patch fixes the byte order when reading 16- and 32-bit values from the network file on a big-endian machine.  Bytes are ordered in read_le() using unsigned arithmetic; which doesn't need tricks to determine the endianness of the machine. Unfortunately the compiler doesn't seem to be able to optimise the ordering operation; but reading in the weights is not a time-critical operation and the extra time it takes should not be noticeable.  Big endian systems are still untested with NNUE.  fixes #3007  closes https://github.com/official-stockfish/Stockfish/pull/3009  No functional change.,True,6,2020-08-01
daylen,vondele,2020-08-16 19:10:26+00:00,Display NEON in compiler string  if NEON intrinsics are being used and USE_NEON is defined.  closes https://github.com/official-stockfish/Stockfish/pull/3008  No functional change,True,6,2020-08-01
vondele,snicolet,2020-08-16 06:20:32+00:00,Use NNUE more for fortresses  Increases the use of NNUE evaluation in positions without captures/pawn moves; by increasing the NNUEThreshold threshold with rule50_count.  This patch will force Stockfish to use NNUE eval more and more in materially unbalanced positions; when it seems that the classical eval is struggling to win and only manages to shuffle. This will ask the (slower) NNUE eval to double-check the potential fortress branches of the search tree; but only when necessary.  passed STC: https://tests.stockfishchess.org/tests/view/5f36f1bf11a9b1a1dbf192d8 LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 51824 W: 5836 L: 5653 D: 40335 Ptnml(0-2): 264; 4356; 16512; 4493; 287  passed LTC: https://tests.stockfishchess.org/tests/view/5f37836111a9b1a1dbf1936d LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 29768 W: 1747 L: 1590 D: 26431 Ptnml(0-2): 33; 1347; 11977; 1484; 43  closes https://github.com/official-stockfish/Stockfish/pull/3011  Bench: 4173967,True,6,2020-08-01
Unknown,vondele,2020-08-14 14:39:52+00:00,Try to match relative magnitude of NNUE eval to classical  The idea is that since we are mixing NNUE and classical evals matching their magnitudes closer allows for better comparisons.  STC https://tests.stockfishchess.org/tests/view/5f35a65411a9b1a1dbf18e2b LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 9840 W: 1150 L: 1027 D: 7663 Ptnml(0-2): 49; 772; 3175; 855; 69  LTC https://tests.stockfishchess.org/tests/view/5f35bcbe11a9b1a1dbf18e47 LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 44424 W: 2492 L: 2294 D: 39638 Ptnml(0-2): 42; 2015; 17915; 2183; 57  also corrects the location to clamp the evaluation (non-function on bench).  closes https://github.com/official-stockfish/Stockfish/pull/3003  bench: 3905447,True,4,2020-08-01
miguel-l,vondele,2020-08-14 14:31:18+00:00,Also dampen NNUE eval with 50 move rule  Move the existing dampening function last so that NNUE evaluations are also handled as we approach the 50 move rule.  STC: LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 4792 W: 695 L: 561 D: 3536 Ptnml(0-2): 19; 420; 1422; 478; 57 https://tests.stockfishchess.org/tests/view/5f3164179081672066537534  LTC: LLR: 8.62 (-2.94;2.94) {0.25;1.75} Total: 286744 W: 18494 L: 17430 D: 250820 Ptnml(0-2): 418; 14886; 111745; 15860; 463 https://tests.stockfishchess.org/tests/view/5f316b039081672066537541  closes https://github.com/official-stockfish/Stockfish/pull/3004  Bench: 4001800,True,4,2020-08-01
vondele,vondele,2020-08-14 14:20:42+00:00,Verify SHA of downloaded net file  check SHA of the available and downloaded file.  Document the format requirement on the default net.  Also allow curl to make possibly insecure connections; as needed for old curl.  fixes https://github.com/official-stockfish/Stockfish/issues/2998  closes https://github.com/official-stockfish/Stockfish/pull/3000  No functional change.,True,4,2020-08-01
snicolet,vondele,2020-08-14 14:18:50+00:00,"Clean-up Makefile help  Do not show the details of the default architecture for a simple ""make help"" invocation; as the details are most likely to confuse beginners. Instead we make it clear which architecture is the default and put an example at the end of the Makefile as an incentative to use ""make help ARCH=blah"" to discover the flags used by the different architectures.  ```     make help     make help ARCH=x86-64-ssse3 ```  Also clean-up and modernize a bit the Makefile examples while at it.  closes https://github.com/official-stockfish/Stockfish/pull/2996  No functional change",True,4,2020-08-01
sergiovieri,vondele,2020-08-13 05:50:52+00:00,Update default net to nn-82215d0fd0df.nnue  Net created at: 20200812-2257  passed STC: https://tests.stockfishchess.org/tests/view/5f340ca99e5f2effc089da17 LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 5744 W: 756 L: 627 D: 4361 Ptnml(0-2): 28; 485; 1731; 586; 42  passed LTC: https://tests.stockfishchess.org/tests/view/5f341eba9e5f2effc089da23 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 17136 W: 1041 L: 917 D: 15178 Ptnml(0-2): 13; 813; 6807; 907; 28  closes https://github.com/official-stockfish/Stockfish/pull/2992  Bench: 3935117,True,3,2020-08-01
vondele,vondele,2020-08-13 05:41:06+00:00,Output the SSE2 flag in compiler_info  was missing in the list of outputs; slightly reorder flags. explicitly add -msse2 if USE_SSE2 (is implicit already; -msse -m64).  closes https://github.com/official-stockfish/Stockfish/pull/2990  No functional change.,True,3,2020-08-01
Unknown,vondele,2020-08-13 05:39:52+00:00,Add support for VNNI  Adds support for Vector Neural Network Instructions (avx512); as available on Intel Cascade Lake  The _mm512_dpbusd_epi32() intrinsic (vpdpbusd instruction) is taylor made for NNUE.  on a cascade lake CPU (AWS C5.24x.large; gcc 10) NNUE eval is at roughly 78% nps of classical (single core test)  bench 1024 1 24 default depth: target 	classical 	NNUE 	ratio vnni 	2207232 	1725987 	78.20 avx512 	2216789 	1671734 	75.41 avx2 	2194006 	1611263 	73.44 modern 	2185001 	1352469 	61.90  closes https://github.com/official-stockfish/Stockfish/pull/2987  No functional change,True,3,2020-08-01
daylen,vondele,2020-08-12 05:49:36+00:00,Use posix_memalign for Apple Silicon instead of _mm_malloc  fails to build on that target; because of missing Intel Intrinsics. macOS has posix_memalign() since ~2014 so we can simplify the code and just use that for all Apple platforms.  closes https://github.com/official-stockfish/Stockfish/pull/2985  No functional change.,True,2,2020-08-01
vondele,vondele,2020-08-11 21:35:02+00:00,Restrict avx2 hack to windows target  this workaround is possibly rather a windows & gcc specific problem. See e.g. https://gcc.gnu.org/bugzilla/show_bug.cgi?id=54412#c25  on Linux with gcc 8 this patch brings roughly a 8% speedup. However; probably needs some testing in the wild.  includes a workaround for an old msys make (3.81) installation (fixes #2984)  No functional change,True,1,2020-08-01
SFisGOD,vondele,2020-08-11 11:46:02+00:00,Tweak castling extension  Change condition from three friendly pieces to two. This now means that we only extend castling on the king side if there are no other friendly pieces aside from king and rook. For the queen side; we only extend if there is only a rook and another friendly piece or if there is only a single rook and no other friendly piece but this is very rare.  STC: LLR: 3.20 (-2.94;2.94) {-0.50;1.50} Total: 31144 W: 4086 L: 3903 D: 23155 Ptnml(0-2): 227; 2843; 9278; 2968; 256 https://tests.stockfishchess.org/tests/view/5f31487f9081672066537516  LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 57816 W: 3786 L: 3538 D: 50492 Ptnml(0-2): 92; 2991; 22488; 3251; 86 https://tests.stockfishchess.org/tests/view/5f3167c3908167206653753d  closes https://github.com/official-stockfish/Stockfish/pull/2980  Bench: 4244812,True,1,2020-08-01
gvreuls,vondele,2020-08-11 06:17:03+00:00,This commit enables a mixed bench; to improve CI and allow for PGO (profile-build) of the NNUE part of the code.  Joint work gvreuls / vondele  * Download the default NNUE net in AppVeyor * Download net in travis CI `make net` * Adjust tests to cover more archs; speedup instrumented testing * Introduce 'mixed' bench as default; with further options:  classical; NNUE; mixed.  mixed (default) and NNUE require the default net to be present; which can be obtained with  ``` make net ```  Further examples (first is equivalent to `./stockfish bench`):  ``` ./stockfish bench 16 1 13 default depth mixed ./stockfish bench 16 1 13 default depth classical ./stockfish bench 16 1 13 default depth NNUE ```  The net is now downloaded automatically if needed for `profile-build` (usual `build` works fine without net present)  PGO gives a nice speedup on fishtest:  passed STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 3360 W: 469 L: 343 D: 2548 Ptnml(0-2): 20; 246; 1030; 356; 28 https://tests.stockfishchess.org/tests/view/5f31b5499081672066537569  passed LTC: LLR: 2.97 (-2.94;2.94) {0.25;1.75} Total: 8824 W: 609 L: 502 D: 7713 Ptnml(0-2): 8; 430; 3438; 519; 17 https://tests.stockfishchess.org/tests/view/5f31c87b908167206653757c  closes https://github.com/official-stockfish/Stockfish/pull/2931  fixes https://github.com/official-stockfish/Stockfish/issues/2907  requires fishtest updates before commit  Bench: 4290577,True,1,2020-08-01
Unknown,vondele,2020-08-11 06:17:03+00:00,Fix AVX512 build with older compilers  avoids an intrinsic that is missing in gcc < 10.  For this target; might trigger another gcc bug on windows that requires up-to-date gcc 8; 9; or 10; or usage of clang.  Fixes https://github.com/official-stockfish/Stockfish/issues/2975  closes https://github.com/official-stockfish/Stockfish/pull/2976  No functional change,True,1,2020-08-01
vondele,vondele,2020-08-11 06:17:03+00:00,More aligned_alloc changes to support Android  Move to posix_memalign for those platforms; in particular android; that do not fully support c++17 std::aligned_alloc() (and are not windows)  see https://github.com/official-stockfish/Stockfish/issues/2860  closes https://github.com/official-stockfish/Stockfish/pull/2973  No functional change,True,1,2020-08-01
gvreuls,vondele,2020-08-11 06:17:03+00:00,Fix parallel LTO issues on Windows  This adds -save-temps to the linker flags when parallel LTO is used on MinGW/MSYS.  fixes #2977  closes https://github.com/official-stockfish/Stockfish/pull/2978  No functional change.,True,1,2020-08-01
Vizvezdenec,vondele,2020-08-11 06:17:03+00:00,Add comments to probCut code  and rename a variable  closes https://github.com/official-stockfish/Stockfish/pull/2819  No functional change,True,1,2020-08-01
unaiic,vondele,2020-08-10 17:17:57+00:00,Assorted search parameter tune  STC https://tests.stockfishchess.org/tests/view/5f31219090816720665374ec LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 3376 W: 487 L: 359 D: 2530 Ptnml(0-2): 17; 253; 1042; 337; 39  LTC https://tests.stockfishchess.org/tests/view/5f3127f79081672066537502 LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 8360 W: 581 L: 475 D: 7304 Ptnml(0-2): 11; 407; 3238; 513; 11  closes https://github.com/official-stockfish/Stockfish/pull/2971  bench: 4733874,True,0,2020-08-01
Fanael,vondele,2020-08-10 17:17:57+00:00,Provide vectorized NNUE code for SSE2 and MMX targets  This patch allows old x86 CPUs; from AMD K8 (which the x86-64 baseline targets) all the way down to the Pentium MMX; to benefit from NNUE with comparable performance hit versus hand-written eval as on more modern processors.  NPS of the bench with NNUE enabled on a Pentium III 1.13 GHz (using the MMX code):   master: 38951   this patch: 80586  NPS of the bench with NNUE enabled using baseline x86-64 arch; which is how linux distros are likely to package stockfish; on a modern CPU (using the SSE2 code):   master: 882584   this patch: 1203945  closes https://github.com/official-stockfish/Stockfish/pull/2956  No functional change.,True,0,2020-08-01
Unknown,vondele,2020-08-10 12:38:17+00:00,Cleanup and optimize SSE/AVX code  AVX512 +4% faster AVX2 +1% faster SSSE3 +5% faster  passed non-regression STC: STC https://tests.stockfishchess.org/tests/view/5f31249f90816720665374f6 LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 17576 W: 2344 L: 2245 D: 12987 Ptnml(0-2): 127; 1570; 5292; 1675; 124  closes https://github.com/official-stockfish/Stockfish/pull/2962  No functional change,True,0,2020-08-01
sf-x,vondele,2020-08-10 12:32:11+00:00,Makefile rework/cleanup  Makefile targets x86-64-sse42; x86-sse3 are removed; x86-64-sse41 is renamed to x86-64-sse41-popcnt (it did enable popcnt).  Makefile variables sse3; sse42; their associated compilation flags and code in misc.cpp are removed.  closes https://github.com/official-stockfish/Stockfish/pull/2922  No functional change,True,0,2020-08-01
SFisGOD,vondele,2020-08-10 09:14:46+00:00,Modify castling extension  Extend castling only if there are few friendly pieces on the castling side.  Inspired by silversolver1's (Rahul Dsilva) test https://tests.stockfishchess.org/tests/view/5f0fef560640035f9d2978cf  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 7096 W: 947 L: 818 D: 5331 Ptnml(0-2): 32; 604; 2181; 665; 66 https://tests.stockfishchess.org/tests/view/5f309f729081672066537426  LTC: LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 4712 W: 300 L: 215 D: 4197 Ptnml(0-2): 2; 190; 1895; 259; 10 https://tests.stockfishchess.org/tests/view/5f30a2039081672066537430  closes https://github.com/official-stockfish/Stockfish/pull/2970  Bench: 4094850,True,0,2020-08-01
Unknown,vondele,2020-08-10 09:12:35+00:00,Workaround using unaligned loads for gcc < 9  despite usage of alignas; the generated (avx2/avx512) code with older compilers needs to use unaligned loads with older gcc (e.g. confirmed crash with gcc 7.3/mingw on abrok).  Better performance thus requires gcc >= 9 on hardware supporting avx2/avx512  closes https://github.com/official-stockfish/Stockfish/pull/2969  No functional change,True,0,2020-08-01
jjoshua2,vondele,2020-08-10 05:34:45+00:00,simplying hybrid condition  STC https://tests.stockfishchess.org/tests/view/5f3059d1908167206653736b: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 12520 W: 766 L: 727 D: 11027 Ptnml(0-2): 13; 624; 4949; 659; 15  LTC: https://tests.stockfishchess.org/tests/view/5f30863a90816720665373d1 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 12520 W: 766 L: 727 D: 11027 Ptnml(0-2): 13; 624; 4949; 659; 15  closes: https://github.com/official-stockfish/Stockfish/pull/2965  Bench: 4084753,True,0,2020-08-01
sergiovieri,vondele,2020-08-10 05:29:40+00:00,Update default net to nn-112bb1c8cdb5.nnue  First trained net using search eval instead of pv leaf static eval.  Net created at: 20200810-0744  passed STC: https://tests.stockfishchess.org/tests/view/5f30995d90816720665373f8 LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 15416 W: 2071 L: 1920 D: 11425 Ptnml(0-2): 123; 1376; 4563; 1519; 127  passed LTC: https://tests.stockfishchess.org/tests/view/5f30a104908167206653742b LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 29792 W: 2003 L: 1834 D: 25955 Ptnml(0-2): 50; 1541; 11550; 1700; 55  closes https://github.com/official-stockfish/Stockfish/pull/2966  Bench: 4084753,True,0,2020-08-01
vondele,vondele,2020-08-10 05:28:19+00:00,"Revert ""Avoid special casing for MinGW""  This reverts commit a6e89293df5af35931b61d86b6de3872a981c100.  The offending setup has been found as gcc/mingw 7.3 (on Ubuntu 18.04).  fixes https://github.com/official-stockfish/Stockfish/issues/2963  closes https://github.com/official-stockfish/Stockfish/issues/2968  No functional change.",True,0,2020-08-01
vondele,vondele,2020-08-09 21:51:07+00:00,Fix a data race for NNUE  the stateInfo at the rootPos is no longer read-only; as the NNUE accumulator is part of it. Threads can thus not share this object and need their own copy.  tested for no regression https://tests.stockfishchess.org/tests/view/5f3022239081672066536bce LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 52800 W: 6843 L: 6802 D: 39155 Ptnml(0-2): 336; 4646; 16399; 4679; 340  closes https://github.com/official-stockfish/Stockfish/pull/2957  fixes https://github.com/official-stockfish/Stockfish/issues/2933  No functional change,True,6,2020-08-01
dorzechowski,vondele,2020-08-09 21:49:14+00:00,Avoid special casing for MinGW  after some testing; no version of MinGW/gcc has been found where this code is still necessary. Probably older code (pre-c++17?)  closes https://github.com/official-stockfish/Stockfish/pull/2891  No functional change,True,6,2020-08-01
Vizvezdenec,vondele,2020-08-09 19:26:17+00:00,Adjust NNUE usage based on number of pawns in position  The idea of this patch is that positions are usually more complex and hard to evaluate even if there are more pawns. This patch adjusts NNUE threshold usage depending on number of pawns in position; if pawn count is <3 we use the classical evaluation more often; for pawn count = 3 patch the is non-functional; with pawn count > 3 NNUE evaluation is used more often.  passed STC https://tests.stockfishchess.org/tests/view/5f2f02d09081672066536b1f LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 36520 W: 5011 L: 4823 D: 26686 Ptnml(0-2): 299; 3482; 10548; 3594; 337  passed LTC https://tests.stockfishchess.org/tests/view/5f2f4c329081672066536b5c LLR: 2.98 (-2.94;2.94) {0.25;1.75} Total: 39272 W: 2630 L: 2433 D: 34209 Ptnml(0-2): 53; 2066; 15218; 2229; 70  closes https://github.com/official-stockfish/Stockfish/pull/2960  bench 4084753,True,6,2020-08-01
vondele,vondele,2020-08-09 19:25:22+00:00,Fix aligned_alloc on MinGW  introduced with d7a26899a973536ab9d3ce4771d8276d1a4dc55c  closes https://github.com/official-stockfish/Stockfish/pull/2959  No functional change.,True,6,2020-08-01
vondele,vondele,2020-08-09 15:09:18+00:00,Improve error message on missing net.  small rewording; but also print the download url for the default net.  closes https://github.com/official-stockfish/Stockfish/pull/2954  No functional change,True,6,2020-08-01
ddugovic,vondele,2020-08-09 15:07:45+00:00,Use fallback implementation for C++ aligned_alloc  fixes https://github.com/official-stockfish/Stockfish/issues/2921  closes https://github.com/official-stockfish/Stockfish/pull/2927  No functional change,True,6,2020-08-01
unaiic,vondele,2020-08-08 20:42:00+00:00,LMR search tweak  All credit to Vizvezdenec; the original author of the idea.  STC https://tests.stockfishchess.org/tests/view/5f2d606a61e3b6af64881f88 LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 8440 W: 1191 L: 1048 D: 6201 Ptnml(0-2): 59; 754; 2467; 865; 75  LTC https://tests.stockfishchess.org/tests/view/5f2d84ad61e3b6af64881fbd LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 21896 W: 1557 L: 1406 D: 18933 Ptnml(0-2): 33; 1185; 8378; 1302; 50  closes https://github.com/official-stockfish/Stockfish/pull/2951  bench: 4084753,True,5,2020-08-01
unaiic,vondele,2020-08-08 20:39:26+00:00,Singular extension search tweak  Tweak depth.  STC https://tests.stockfishchess.org/tests/view/5f2d22ec61e3b6af64881f40 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 17984 W: 2603 L: 2441 D: 12940 Ptnml(0-2): 133; 1751; 5094; 1849; 165  LTC https://tests.stockfishchess.org/tests/view/5f2d5a6a61e3b6af64881f7f LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 85808 W: 5956 L: 5621 D: 74231 Ptnml(0-2): 149; 4748; 32785; 5063; 159  closes https://github.com/official-stockfish/Stockfish/pull/2950  fixes two README.md typos: fixes https://github.com/official-stockfish/Stockfish/issues/2932  bench: 4022669,True,5,2020-08-01
gvreuls,vondele,2020-08-08 20:35:18+00:00,Parallelize Link Time Optimization for GCC; CLANG and MINGW  This patch tries to run multiple LTO threads in parallel; speeding up the build process of optimized builds if the -j make parameter is used. This mitigates the longer linking times of optimized builds since the integration of the NNUE code. Roughly 2x build speedup.  I've tried a similar patch some two years ago but it ran into trouble with old compiler versions then. Since we're on the C++17 standard now these old compilers should be obsolete.  closes https://github.com/official-stockfish/Stockfish/pull/2943  No functional change.,True,5,2020-08-01
Vizvezdenec,vondele,2020-08-08 20:08:55+00:00,Do more aggressive futility pruning for captures  This patch lines up with other patches which use better eval to produce more aggressive cutoffs based on static evaluation of position; it allows more aggressive futility pruning for captures - so now we will be producing them with bigger evaluation of position; so more often.  passed STC https://tests.stockfishchess.org/tests/view/5f2da79e61e3b6af64881fd2 LLR: 3.87 (-2.94;2.94) {-0.50;1.50} Total: 27256 W: 3809 L: 3593 D: 19854 Ptnml(0-2): 221; 2578; 7830; 2762; 237  passed LTC https://tests.stockfishchess.org/tests/view/5f2df92061e3b6af64882012 LLR: 4.97 (-2.94;2.94) {0.25;1.75} Total: 43624 W: 3095 L: 2820 D: 37709 Ptnml(0-2): 66; 2410; 16608; 2639; 89  closes https://github.com/official-stockfish/Stockfish/pull/2946  Bench: 4272280,True,5,2020-08-01
MJZ1977,vondele,2020-08-08 20:07:51+00:00,update Null Move Pruning parameters  STC: https://tests.stockfishchess.org/tests/view/5f2dc38561e3b6af64881fec LLR: 2.99 (-2.94;2.94) {-0.50;1.50} Total: 6120 W: 903 L: 758 D: 4459 Ptnml(0-2): 44; 535; 1775; 644; 62  LTC: https://tests.stockfishchess.org/tests/view/5f2dd55f61e3b6af64882003 LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 7424 W: 577 L: 463 D: 6384 Ptnml(0-2): 16; 375; 2824; 473; 24  closes https://github.com/official-stockfish/Stockfish/pull/2942  bench 4107833,True,5,2020-08-01
loco-loco,vondele,2020-08-08 19:42:59+00:00,Remove unnecessay legality check  Possible after the recent reording pos.legal(move) check  https://github.com/official-stockfish/Stockfish/pull/2941  No functional change.,True,5,2020-08-01
jjoshua2,vondele,2020-08-08 06:40:51+00:00,simplified and increased threshold to switch between NNUE and classical  STC https://tests.stockfishchess.org/tests/view/5f2deb1661e3b6af6488200f LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 10376 W: 1481 L: 1359 D: 7536 Ptnml(0-2): 91; 953; 2981; 1069; 94  LTC: https://tests.stockfishchess.org/html/live_elo.html?5f2e0a0461e3b6af64882019 LLR: 2.99 (-2.94;2.94) {-1.50;0.50} Total: 5040 W: 375 L: 315 D: 4350 Ptnml(0-2): 7; 263; 1926; 311; 13  closes https://github.com/official-stockfish/Stockfish/pull/2934  Bench: 4067325,True,5,2020-08-01
Vizvezdenec,vondele,2020-08-08 06:35:47+00:00,Do more futility pruning for parent nodes.  This patch increases LMRdepth threshold for futility pruning at parent nodes so it can apply more often. With radical change to evaluation approach it seems that search is really far from optimal state; especially it parts that use static evaluation of position.  passed STC https://tests.stockfishchess.org/tests/view/5f2da75661e3b6af64881fd0 LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 8744 W: 1305 L: 1156 D: 6283 Ptnml(0-2): 75; 789; 2500; 928; 80  passed LTC https://tests.stockfishchess.org/tests/view/5f2dcb2a61e3b6af64881ff3 LLR: 2.98 (-2.94;2.94) {0.25;1.75} Total: 17728 W: 1256 L: 1117 D: 15355 Ptnml(0-2): 22; 961; 6774; 1070; 37  Bench: 4067325,True,5,2020-08-01
SFisGOD,vondele,2020-08-08 06:33:24+00:00,Reintroduce late irreversible move extension  Reintroduce vondele's late irreversible move extension for fortress keeping. This was removed when we only had classical eval. Now that we have the NNUE net; it seems that this is useful again.  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 5352 W: 787 L: 653 D: 3912 Ptnml(0-2): 34; 451; 1579; 571; 41 https://tests.stockfishchess.org/tests/view/5f2dc8ad61e3b6af64881ff0  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 14416 W: 1013 L: 891 D: 12512 Ptnml(0-2): 15; 722; 5623; 822; 26 https://tests.stockfishchess.org/tests/view/5f2e0e3661e3b6af6488201e  closes https://github.com/official-stockfish/Stockfish/pull/2936  Bench: 4154696,True,5,2020-08-01
Lolligerhans,vondele,2020-08-08 06:31:06+00:00,"Expand outposts to minors shielded by pawns  Allow any pawn in front of a minor piece to replace the pawn protection requirement for outposts.    +-------+  +-------+   | . . o |  | o . . |    o  Their pawns   | . o x |  | o . . |    x  Our pawns   | o N . |  | x o B |  N;B  New (reachable) outpost   | . . . |  | . _ . |    _  Reachable square behind a pawn   +-------+  +-------+   N outpost  B reaches                outpost    We want outposts to be secured by pawns against major pieces. If a minor is shielded by any pawn from above; it is rarely at the same time protected by our pawn attacks from below. However; the pawn shield in itself offers some degree of protection.   A pawn shield will now suffice to replace the pawn protection for the outpost (and reachable outpost) bonus.  This effect stacks with the existing ""minor behind pawn"" bonus.  STC https://tests.stockfishchess.org/tests/view/5f2bcd14b3ebe5cbfee85b2c LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 27248 W: 5353 L: 5119 D: 16776 Ptnml(0-2): 462; 3174; 6185; 3274; 529  LTC https://tests.stockfishchess.org/tests/view/5f2bfef5b3ebe5cbfee85b5a LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 99432 W: 12580 L: 12130 D: 74722 Ptnml(0-2): 696; 8903; 30049; 9391; 677  Closes #2935  Bench: 4143673",True,5,2020-08-01
unaiic,vondele,2020-08-08 06:25:06+00:00,Tweak futility pruning depth.  STC https://tests.stockfishchess.org/tests/view/5f2d237161e3b6af64881f43 LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 12712 W: 1823 L: 1664 D: 9225 Ptnml(0-2): 122; 1166; 3627; 1313; 128  LTC https://tests.stockfishchess.org/tests/view/5f2d473061e3b6af64881f6f LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 12104 W: 912 L: 788 D: 10404 Ptnml(0-2): 13; 665; 4582; 769; 23  closes https://github.com/official-stockfish/Stockfish/pull/2930  bench: 4271421,True,5,2020-08-01
sergiovieri,vondele,2020-08-07 11:07:28+00:00,Update default net to nn-9931db908a9b.nnue  Net created at 20200806-1802  passed STC: https://tests.stockfishchess.org/tests/view/5f2d00b461e3b6af64881f21 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 6672 W: 1052 L: 898 D: 4722 Ptnml(0-2): 63; 600; 1868; 730; 75  passed LTC: https://tests.stockfishchess.org/tests/view/5f2d052a61e3b6af64881f29 LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 7576 W: 573 L: 463 D: 6540 Ptnml(0-2): 8; 392; 2889; 480; 19  closes https://github.com/official-stockfish/Stockfish/pull/2923  Bench: 4390086,True,4,2020-08-01
locutus2,vondele,2020-08-07 07:05:20+00:00,Do move legality check before pruning.  This alllows to simplify the code because the move counter haven't to be decremented later if a move isn't legal. As a side effect now illegal pruned moves doesn't included anymore in move counter. So slightly less pruning and reductions are done.  STC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 111016 W: 21106 L: 21077 D: 68833 Ptnml(0-2): 1830; 13083; 25736; 12946; 1913 https://tests.stockfishchess.org/tests/view/5f28816fa5abc164f05e4c26  LTC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 39264 W: 4909 L: 4843 D: 29512 Ptnml(0-2): 263; 3601; 11854; 3635; 279 https://tests.stockfishchess.org/tests/view/5f297902a5abc164f05e4c8e  closes https://github.com/official-stockfish/Stockfish/pull/2906  Bench: 4390086,True,4,2020-08-01
unaiic,vondele,2020-08-07 07:00:45+00:00,Remove QueenInfiltration  STC https://tests.stockfishchess.org/tests/view/5f2955b1a5abc164f05e4c85 LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 29216 W: 5560 L: 5416 D: 18240 Ptnml(0-2): 466; 3329; 6902; 3417; 494  LTC https://tests.stockfishchess.org/tests/view/5f299154a5abc164f05e4ca1 LLR: 2.92 (-2.94;2.94) {-1.50;0.50} Total: 54144 W: 6635 L: 6594 D: 40915 Ptnml(0-2): 372; 4859; 16536; 4966; 339  closes https://github.com/official-stockfish/Stockfish/pull/2910  Bench: 4609008,True,4,2020-08-01
FauziAkram,vondele,2020-08-07 06:57:37+00:00,Tuned pawn values  Passed STC: https://tests.stockfishchess.org/tests/view/5f2aa49fa5abc164f05e4d1b LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 40888 W: 7977 L: 7726 D: 25185 Ptnml(0-2): 665; 4806; 9333; 4893; 747  Passed LTC: https://tests.stockfishchess.org/tests/view/5f2b1059b3ebe5cbfee85ae7 LLR: 2.98 (-2.94;2.94) {0.25;1.75} Total: 51264 W: 6445 L: 6134 D: 38685 Ptnml(0-2): 328; 4564; 15580; 4789; 371  closes https://github.com/official-stockfish/Stockfish/pull/2920  bench: 4314943,True,4,2020-08-01
locutus2,vondele,2020-08-07 06:54:38+00:00,Add tempo also to NNUE eval.  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 10608 W: 1507 L: 1358 D: 7743 Ptnml(0-2): 94; 945; 3074; 1100; 91 https://tests.stockfishchess.org/tests/view/5f2c5921b3ebe5cbfee85b8b  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 7536 W: 556 L: 448 D: 6532 Ptnml(0-2): 9; 383; 2881; 481; 14 https://tests.stockfishchess.org/tests/view/5f2c6f4461e3b6af64881e95  closes https://github.com/official-stockfish/Stockfish/pull/2919  Bench: 4746616,True,4,2020-08-01
MJZ1977,vondele,2020-08-06 19:46:31+00:00,NNUE evaluation threshold  The idea is to use NNUE only on quite balanced material positions. This bring a big speedup on research since NNUE eval is slower than classical eval for most of the hardwares and specially on unbalanced positions with LazyEval.  STC: https://tests.stockfishchess.org/tests/view/5f2c2680b3ebe5cbfee85b61 LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 3168 W: 560 L: 400 D: 2208 Ptnml(0-2): 21; 294; 819; 404; 46  LTC: https://tests.stockfishchess.org/tests/view/5f2c2ca6b3ebe5cbfee85b69 LLR: 2.98 (-2.94;2.94) {0.25;1.75} Total: 3200 W: 287 L: 183 D: 2730 Ptnml(0-2): 4; 149; 1191; 251; 5  closes https://github.com/official-stockfish/Stockfish/pull/2916  Bench 4746616,True,3,2020-08-01
nodchip,vondele,2020-08-06 14:37:45+00:00,Add NNUE evaluation  This patch ports the efficiently updatable neural network (NNUE) evaluation to Stockfish.  Both the NNUE and the classical evaluations are available; and can be used to assign a value to a position that is later used in alpha-beta (PVS) search to find the best move. The classical evaluation computes this value as a function of various chess concepts; handcrafted by experts; tested and tuned using fishtest. The NNUE evaluation computes this value with a neural network based on basic inputs. The network is optimized and trained on the evalutions of millions of positions at moderate search depth.  The NNUE evaluation was first introduced in shogi; and ported to Stockfish afterward. It can be evaluated efficiently on CPUs; and exploits the fact that only parts of the neural network need to be updated after a typical chess move. [The nodchip repository](https://github.com/nodchip/Stockfish) provides additional tools to train and develop the NNUE networks.  This patch is the result of contributions of various authors; from various communities; including: nodchip; ynasu87; yaneurao (initial port and NNUE authors); domschl; FireFather; rqs; xXH4CKST3RXx; tttak; zz4032; joergoster; mstembera; nguyenpham; erbsenzaehler; dorzechowski; and vondele.  This new evaluation needed various changes to fishtest and the corresponding infrastructure; for which tomtor; ppigazzini; noobpwnftw; daylen; and vondele are gratefully acknowledged.  The first networks have been provided by gekkehenker and sergiovieri; with the latter net (nn-97f742aaefcd.nnue) being the current default.  The evaluation function can be selected at run time with the `Use NNUE` (true/false) UCI option; provided the `EvalFile` option points the the network file (depending on the GUI; with full path).  The performance of the NNUE evaluation relative to the classical evaluation depends somewhat on the hardware; and is expected to improve quickly; but is currently on > 80 Elo on fishtest:  60000 @ 10+0.1 th 1 https://tests.stockfishchess.org/tests/view/5f28fe6ea5abc164f05e4c4c ELO: 92.77 +-2.1 (95%) LOS: 100.0% Total: 60000 W: 24193 L: 8543 D: 27264 Ptnml(0-2): 609; 3850; 9708; 10948; 4885  40000 @ 20+0.2 th 8 https://tests.stockfishchess.org/tests/view/5f290229a5abc164f05e4c58 ELO: 89.47 +-2.0 (95%) LOS: 100.0% Total: 40000 W: 12756 L: 2677 D: 24567 Ptnml(0-2): 74; 1583; 8550; 7776; 2017  At the same time; the impact on the classical evaluation remains minimal; causing no significant regression:  sprt @ 10+0.1 th 1 https://tests.stockfishchess.org/tests/view/5f2906a2a5abc164f05e4c5b LLR: 2.94 (-2.94;2.94) {-6.00;-4.00} Total: 34936 W: 6502 L: 6825 D: 21609 Ptnml(0-2): 571; 4082; 8434; 3861; 520  sprt @ 60+0.6 th 1 https://tests.stockfishchess.org/tests/view/5f2906cfa5abc164f05e4c5d LLR: 2.93 (-2.94;2.94) {-6.00;-4.00} Total: 10088 W: 1232 L: 1265 D: 7591 Ptnml(0-2): 49; 914; 3170; 843; 68  The needed networks can be found at https://tests.stockfishchess.org/nns It is recommended to use the default one as indicated by the `EvalFile` UCI option.  Guidelines for testing new nets can be found at https://github.com/glinscott/fishtest/wiki/Creating-my-first-test#nnue-net-tests  Integration has been discussed in various issues: https://github.com/official-stockfish/Stockfish/issues/2823 https://github.com/official-stockfish/Stockfish/issues/2728  The integration branch will be closed after the merge: https://github.com/official-stockfish/Stockfish/pull/2825 https://github.com/official-stockfish/Stockfish/tree/nnue-player-wip  closes https://github.com/official-stockfish/Stockfish/pull/2912  This will be an exciting time for computer chess; looking forward to seeing the evolution of this approach.  Bench: 4746616,True,3,2020-08-01
locutus2,snicolet,2020-07-31 08:12:54+00:00,Tweak cutnode reduction  Less reduction for second move at non-check CUT node with depth <= 10.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 38680 W: 7490 L: 7245 D: 23945 Ptnml(0-2): 643; 4441; 8967; 4606; 683 https://tests.stockfishchess.org/tests/view/5f21e1782f7e63962b99f451  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 71976 W: 9003 L: 8636 D: 54337 Ptnml(0-2): 440; 6414; 21972; 6663; 499 https://tests.stockfishchess.org/tests/view/5f2245762f7e63962b99f4bd  closes https://github.com/official-stockfish/Stockfish/pull/2868  Bench: 4746616,True,4,2020-07-01
snicolet,snicolet,2020-07-31 08:01:39+00:00,"Improve handling of queen imbalance  We double the bonus for potential threats by minors and rooks against our queen; in case of ""queen vs pieces imbalance"". Hopefully this will improve a little bit the evaluation for this well-known Stockfish weakness.  passed STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 72976 W: 14003 L: 13710 D: 45263 Ptnml(0-2): 1218; 8370; 17094; 8513; 1293 https://tests.stockfishchess.org/tests/view/5efa50eb020eec13834a977d  passed LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 22232 W: 2779 L: 2560 D: 16893 Ptnml(0-2): 129; 1885; 6896; 2050; 156 https://tests.stockfishchess.org/tests/view/5f1fdd2dc09435d870cb9f13  closes https://github.com/official-stockfish/Stockfish/pull/2864  Bench: 4367349",True,4,2020-07-01
unaiic,snicolet,2020-07-31 07:55:56+00:00,Remove late irreversible move extension  We simplify away the late irreversible move extension; which does not seem to be necessary in the current master.  STC LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 38584 W: 7464 L: 7342 D: 23778 Ptnml(0-2): 581; 4328; 9365; 4424; 594 https://tests.stockfishchess.org/tests/view/5f1c9669c09435d870cb9de9  LTC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 27840 W: 3417 L: 3353 D: 21070 Ptnml(0-2): 120; 2315; 8994; 2363; 128 https://tests.stockfishchess.org/tests/view/5f1d2e22c09435d870cb9e21  closes https://github.com/official-stockfish/Stockfish/pull/2836  bench: 4829420,True,4,2020-07-01
Unknown,snicolet,2020-07-31 07:47:24+00:00,Remove conditional_more_than_two().  This is a functional simplification that removes the conditional_more_than_two() function; which was quite strange and kooky. Note the very minor change to the bench value.  See this thread for relevant comments on the passing branch: protonspring/Stockfish@d89730d...ff35b50  STC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 59760 W: 11411 L: 11311 D: 37038 Ptnml(0-2): 992; 6863; 14044; 7015; 966 https://tests.stockfishchess.org/tests/view/5f179988c09435d870cb9b9a  LTC LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 45208 W: 5553 L: 5497 D: 34158 Ptnml(0-2): 315; 4081; 13761; 4127; 320 https://tests.stockfishchess.org/tests/view/5f184847c09435d870cb9bee  closes https://github.com/official-stockfish/Stockfish/pull/2826  Bench: 4578290,True,4,2020-07-01
Vizvezdenec,vondele,2020-07-17 18:28:44+00:00,Do not overwrite valuable TT data after probcut.  This patch allows an engine to write probcut data only in case the probcut search depth is greater than transposition table depth.  passed STC https://tests.stockfishchess.org/tests/view/5f0b52e959f6f035328949a6 LLR: 2.97 (-2.94;2.94) {-0.50;1.50} Total: 52544 W: 10145 L: 9880 D: 32519 Ptnml(0-2): 853; 6097; 12121; 6334; 867  passed LTC https://tests.stockfishchess.org/tests/view/5f0bd94c59f6f035328949f3 LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 49576 W: 6164 L: 5863 D: 37549 Ptnml(0-2): 297; 4371; 15218; 4538; 364  closes https://github.com/official-stockfish/Stockfish/pull/2815  bench 4578298,True,4,2020-07-01
Unknown,vondele,2020-07-17 18:24:02+00:00,Multiple lazy stages.  An extension of the lazy eval idea: when the score is sufficiently large we now skip more granular parts of the eval.  Inspired by an original patch by Moez Jellouli https://tests.stockfishchess.org/tests/view/5f03b2a159f6f03532894529 Credit to him!  STC https://tests.stockfishchess.org/tests/view/5f0a862c59f6f03532894924 LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 13504 W: 2684 L: 2472 D: 8348 Ptnml(0-2): 229; 1496; 3111; 1666; 250  LTC https://tests.stockfishchess.org/tests/view/5f0ac0e159f6f0353289495b LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 31312 W: 3926 L: 3677 D: 23709 Ptnml(0-2): 185; 2773; 9509; 2986; 203  closes https://github.com/official-stockfish/Stockfish/pull/2814  bench: 4541608,True,4,2020-07-01
syzygy1,vondele,2020-07-11 20:32:34+00:00,Corrects a functional change in a cleanup patch.  This corrects a functional change in https://github.com/official-stockfish/Stockfish/commit/ddcbacd04d1c860e808202ce8c1206c8acdca627 changing evaluation of KPPvK. Bench remains unchanged at low depth  With this patch; 8/8/5k1p/8/7p/7K/8/8 b - - 1 11 is again correctly evaluated as a draw.  closes https://github.com/official-stockfish/Stockfish/pull/2807  Bench: 4366686,True,5,2020-07-01
SFisGOD,vondele,2020-07-11 09:23:55+00:00,Introduce bad outpost penalty  In some French games; Stockfish likes to bring the Knight to a bad outpost spot. This is evident in TCEC S18 Superfinal Game 63; where there is a Knight outpost on the queenside but is actually useless. Stockfish is effectively playing a piece down while holding ground against Leela's break on the kingside.  This patch turns the +56 mg bonus for a Knight outpost into a -7 mg penalty if it satisfies the following conditions:  * The outpost square is not on the CenterFiles (i.e. not on files C;D;E and F) * The knight is not attacking non pawn enemies. * The side where the outpost is located contains only few enemies; with a particular conditional_more_than_two() implementation  Thank you to apospa...@gmail.com for bringing this to our attention and for providing insights. See https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/dEXNzSIBgZU Reference game: https://tcec-chess.com/#div=sf&game=63&season=18  Passed STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 6960 W: 1454 L: 1247 D: 4259 Ptnml(0-2): 115; 739; 1610; 856; 160 https://tests.stockfishchess.org/tests/view/5f08221059f6f0353289477e  Passed LTC: LLR: 2.98 (-2.94;2.94) {0.25;1.75} Total: 21440 W: 2767 L: 2543 D: 16130 Ptnml(0-2): 122; 1904; 6462; 2092; 140 https://tests.stockfishchess.org/tests/view/5f0838ed59f6f035328947a2  various related tests show strong test results; but so far no generalizations or simplifications of conditional_more_than_two() are found. See PR for details.  closes https://github.com/official-stockfish/Stockfish/pull/2803  Bench: 4366686,True,5,2020-07-01
Vizvezdenec,vondele,2020-07-11 09:10:06+00:00,Maximize usage of transposition table in probcut  Probcut is a heuristic that wasn't changed a lot in past years; all attempts to change it using information / writing info to transposition table failed.  This patch has a number of differences that can be summarized as follows:  * For TT write/read we use depth - 3. Because probcut search is depth - 4 but we actually do the move prior to it so effectively we do depth - 3 search; * In any case of depth of eval from transposition table being >= depth - 3 we either produce cutoff or refuse to even do probcut search; this is allowing us to write info of probcut to transposition table because we know that we wouldn't be overwriting some deeper data with our depth - 3 search - this is an important aspect of this patch; * For some not really known reason this patch completely ignores tte->bound() - which was the case for previous patch that made probcut interact with TT; maybe 2) is the reason; although it's unproven.  A first version of this patch passed STC and LTC  passed STC https://tests.stockfishchess.org/tests/view/5f05908a59f6f03532894613 LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 95776 W: 18300 L: 17973 D: 59503 Ptnml(0-2): 1646; 10944; 22377; 11279; 1642  passed LTC https://tests.stockfishchess.org/tests/view/5f06b54059f6f035328946bb LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 57128 W: 7266 L: 6938 D: 42924 Ptnml(0-2): 372; 5163; 17217; 5389; 423  However; an additional bugfix was needed to avoid checking a condition on ttMove if was not available. This passed non-regression bounds on top of the first version:  at STC https://tests.stockfishchess.org/tests/view/5f080e5059f6f03532894766 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 14096 W: 2800 L: 2628 D: 8668 Ptnml(0-2): 225; 1620; 3238; 1688; 277  at LTC https://tests.stockfishchess.org/tests/view/5f0836a559f6f0353289479c LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 25352 W: 3228 L: 3139 D: 18985 Ptnml(0-2): 175; 2350; 7549; 2415; 187  closes https://github.com/official-stockfish/Stockfish/pull/2804  Bench 4540940,True,5,2020-07-01
vondele,vondele,2020-07-09 20:01:06+00:00,Small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2772  No functional change,True,3,2020-07-01
Unknown,vondele,2020-07-09 19:59:32+00:00,Simplify make_promotions()  Remove special case handling of QUIET_CHECKS in make_promotions()  STC https://tests.stockfishchess.org/tests/view/5f055dbb59f6f035328945fb LLR: 2.98 (-2.94;2.94) {-1.50;0.50} Total: 42808 W: 8177 L: 8054 D: 26577 Ptnml(0-2): 665; 4890; 10201; 4953; 695  LTC https://tests.stockfishchess.org/tests/view/5f06231a59f6f03532894661 LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 9616 W: 1214 L: 1111 D: 7291 Ptnml(0-2): 53; 821; 2965; 908; 61  closes https://github.com/official-stockfish/Stockfish/pull/2800  Bench: 4576410,True,3,2020-07-01
FauziAkram,vondele,2020-07-09 19:57:13+00:00,Connected / blocked pawns simplification  There is no need to score blocked pawns at many places. The idea originated from: Rocky Tuning and testing by: Fauzi  Passed STC: https://tests.stockfishchess.org/tests/view/5f04f8fd59f6f035328945d4 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 6352 W: 1299 L: 1118 D: 3935 Ptnml(0-2): 89; 695; 1469; 792; 131  Passed LTC: https://tests.stockfishchess.org/tests/view/5f0527bd59f6f035328945e3 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 27648 W: 3517 L: 3433 D: 20698 Ptnml(0-2): 177; 2561; 8301; 2571; 214  closes https://github.com/official-stockfish/Stockfish/pull/2799  Bench: 4734746,True,3,2020-07-01
Rocky640,vondele,2020-07-09 19:46:26+00:00,"Clean-up en passant processing  the goal of this PR is to better document how we process the ep square (if any) given position fen command; and to output more meaningful (and consistent) debug fen on the ""d"" command. The implementation follows https://en.wikipedia.org/wiki/X-FEN#Encoding_en-passant following x-fen; it is ""valid"" to record ep even if ep would put king en prise.  fixes #2784  closes https://github.com/official-stockfish/Stockfish/pull/2797  No functional change",True,3,2020-07-01
locutus2,vondele,2020-07-06 15:56:18+00:00,Add a rank based bonus for blocked pawns.  Fix for overevaluated blocked pawns on the 5th and 6th rank. This is a rewrite of the original idea that uses only two parameters. Thanks to rocky640 for pointing this out.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 50800 W: 9707 L: 9446 D: 31647 Ptnml(0-2): 831; 5851; 11822; 6018; 878 https://tests.stockfishchess.org/tests/view/5f00b4f359f6f03532894304  LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 52064 W: 6477 L: 6167 D: 39420 Ptnml(0-2): 331; 4628; 15834; 4878; 361 https://tests.stockfishchess.org/tests/view/5f0115fe59f6f03532894345  closes https://github.com/official-stockfish/Stockfish/pull/2794  Bench: 4882833,True,0,2020-07-01
Unknown,vondele,2020-07-06 15:50:35+00:00,denormalize KRKP.  a non-functional code style change that denormalizes the KRKP endgame; making it somewhat easier to read.  closes https://github.com/official-stockfish/Stockfish/pull/2786  No functional change,True,0,2020-07-01
SFisGOD,vondele,2020-07-03 19:09:22+00:00,Remove passed pawn condition.  This will help scale down relatively high eval in drawish rook endgames with passed pawn like in TCEC S18 Superfinal Game 90.  Passed STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 50456 W: 9644 L: 9540 D: 31272 Ptnml(0-2): 760; 5637; 12332; 5737; 762 https://tests.stockfishchess.org/tests/view/5efcb76e59f6f035328940ed  Passed LTC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 77264 W: 9518 L: 9518 D: 58228 Ptnml(0-2): 402; 6766; 24321; 6716; 427 https://tests.stockfishchess.org/tests/view/5efd2ad759f6f03532894143  closes https://github.com/official-stockfish/Stockfish/pull/2792  Bench: 4431626,True,4,2020-07-01
vondele,vondele,2020-07-03 19:07:17+00:00,Set UCI_ShowWDL by default to false  UCI_ShowWDL might not be shown by GUIs that don't know the option; but crash on the WDL output; effectively making it hard for users to turn it off and run the engine. This sets it by default to false.  fixes https://github.com/official-stockfish/Stockfish/issues/2787  closes https://github.com/official-stockfish/Stockfish/pull/2788  No functional change.,True,4,2020-07-01
Rocky640,vondele,2020-07-03 19:06:36+00:00,Use arrays  for safe checks; outposts and king protectors in evaluate.cpp  Tested for non regression on the safe checks https://tests.stockfishchess.org/tests/view/5ef8b75c020eec13834a9596 LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 22256 W: 4283 L: 4143 D: 13830 Ptnml(0-2): 291; 2439; 5588; 2459; 351  Tested for non regression on the safe checks; outposts and king protectors https://tests.stockfishchess.org/tests/view/5ef8e543020eec13834a95e7 LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 28400 W: 5382 L: 5253 D: 17765 Ptnml(0-2): 394; 3078; 7119; 3223; 386  closes https://github.com/official-stockfish/Stockfish/pull/2785  No functional change,True,4,2020-07-01
vondele,vondele,2020-07-01 05:33:05+00:00,Provide WDL statistics  A number of engines; GUIs and tournaments start to report WDL estimates along or instead of scores. This patch enables reporting of those stats in a more or less standard way (http://www.talkchess.com/forum3/viewtopic.php?t=72140)  The model this reporting uses is based on data derived from a few million fishtest LTC games; given a score and a game ply; a win rate is provided that matches rather closely; especially in the intermediate range [0.05; 0.95] that data. Some data is shown at https://github.com/glinscott/fishtest/wiki/UsefulData#win-loss-draw-statistics-of-ltc-games-on-fishtest Making the conversion game ply dependent is important for a good fit; and is in line with experience that a +1 score in the early midgame is more likely a win than in the late endgame.  Even when enabled; the printing of the info causes no significant overhead.  Passed STC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 197112 W: 37226 L: 37347 D: 122539 Ptnml(0-2): 2591; 21025; 51464; 20866; 2610 https://tests.stockfishchess.org/tests/view/5ef79ef4f993893290cc146b  closes https://github.com/official-stockfish/Stockfish/pull/2778  No functional change,True,2,2020-07-01
locutus2,vondele,2020-06-29 18:02:58+00:00,Tweak single queen endgame scaling.  Increase scaling factor for each minor of the opponent side of the queen.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 14528 W: 2860 L: 2653 D: 9015 Ptnml(0-2): 217; 1632; 3408; 1741; 266 https://tests.stockfishchess.org/tests/view/5ef98384020eec13834a96a0  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 34584 W: 4371 L: 4111 D: 26102 Ptnml(0-2): 205; 3080; 10501; 3262; 244 https://tests.stockfishchess.org/tests/view/5ef99972020eec13834a96c9  closes https://github.com/official-stockfish/Stockfish/pull/2782  Bench: 4523573,True,0,2020-06-01
snicolet,snicolet,2020-06-28 20:42:43+00:00,Scale down eval for queen imbalance  We lower the endgame value of the evaluation when we detect that there is only one queen left on the board (more precisely; we use a scale factor of 37/64; or about 0.58; for the endgame part of the evaluation). Hopefully this helps a little bit for the assessment of positions with queen imbalance; which are one of the well-known Stockfish weaknesses.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 21600 W: 4176 L: 3955 D: 13469 Ptnml(0-2): 351; 2457; 5003; 2598; 391 https://tests.stockfishchess.org/tests/view/5ef871b6020eec13834a94e8  LTC: LLR: 2.97 (-2.94;2.94) {0.25;1.75} Total: 248328 W: 30596 L: 29720 D: 188012 Ptnml(0-2): 1544; 22345; 75665; 22911; 1699 https://tests.stockfishchess.org/tests/view/5ef87aec020eec13834a94fe  Closes https://github.com/official-stockfish/Stockfish/pull/2781  Bench: 4441323,True,6,2020-06-01
locutus2,vondele,2020-06-28 20:05:09+00:00,Scale down eval for drawish rook endgames.  STC: LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 82136 W: 15694 L: 15407 D: 51035 Ptnml(0-2): 1076; 8960; 20767; 9131; 1134 https://tests.stockfishchess.org/tests/view/5ef86cf8020eec13834a94dd  LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 70200 W: 8787 L: 8440 D: 52973 Ptnml(0-2): 325; 5983; 22170; 6264; 358 https://tests.stockfishchess.org/tests/view/5ef88225020eec13834a950a  closes https://github.com/official-stockfish/Stockfish/pull/2780  Bench: 4478869,True,6,2020-06-01
snicolet,vondele,2020-06-28 20:03:10+00:00,Increase value of pawns on fifth rank  This patch increases the endgame value of pawns on the fifth rank. The increase is very small (+1 evaluation point; about 0.005 pawn) for the pawns on external columns (a-b-c-f-g-h) and a bit bigger (+7 evaluation points; about 0.033 pawn) for the pawns on d5/e5.  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 79864 W: 15331 L: 15027 D: 49506 Ptnml(0-2): 1336; 9284; 18433; 9498; 1381 https://tests.stockfishchess.org/tests/view/5ef73e2ef993893290cc0c47  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 47240 W: 5927 L: 5630 D: 35683 Ptnml(0-2): 320; 4133; 14440; 4384; 343 https://tests.stockfishchess.org/tests/view/5ef7c0c4f993893290cc14b7  closes https://github.com/official-stockfish/Stockfish/pull/2776  Bench: 4794633,True,6,2020-06-01
Unknown,vondele,2020-06-28 20:00:19+00:00,Remove old zobrist trick for castling rights  Removes an 8 year old micro optimization aimed at 32-bit architectures because back then doing an xor of a Key could not be done in one instruction. See original commit here 821e1c7  STC https://tests.stockfishchess.org/tests/view/5ef5833dde213bf647527d0c LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 162648 W: 31053 L: 31097 D: 100498 Ptnml(0-2): 2841; 18966; 37715; 19000; 2802  LTC https://tests.stockfishchess.org/tests/view/5ef7b1bbf993893290cc1489 LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 62360 W: 7617 L: 7586 D: 47157 Ptnml(0-2): 423; 5662; 18994; 5663; 438  closes https://github.com/official-stockfish/Stockfish/pull/2775  bench: 4591425,True,6,2020-06-01
Unknown,vondele,2020-06-28 19:57:37+00:00,Fix fragile code to use proper random 64 bit keys.  This fixes an old issue where we want to make a position unique but only change a small number of bits in the key instead of all 64 of them randomly. This is fragile and can lead to non uniqueness issues in the TT.  Key make_key(uint64_t seed) takes any integer and produces a unique random 64 bit key. It is computationally efficient and is based on a congruential pseudo random number generator using well tested constants by Donald Knuth (see https://en.wikipedia.org/wiki/Linear_congruential_generator)  STC https://tests.stockfishchess.org/tests/view/5ef6c78f761b685b4c724bb6 LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 154320 W: 29343 L: 29376 D: 95601 Ptnml(0-2): 2543; 18170; 35891; 17889; 2667  LTC https://tests.stockfishchess.org/tests/view/5ef7d1a9020eec13834a940e LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 53488 W: 6629 L: 6584 D: 40275 Ptnml(0-2): 372; 4878; 16183; 4955; 356  closes https://github.com/official-stockfish/Stockfish/pull/2773  bench: 4626776,True,6,2020-06-01
vondele,vondele,2020-06-27 08:22:27+00:00,Revert LTO for mingw on windows.  LTO with static linking is still only working with the latest versions of gcc; causing problems for some devs.  on a modern mingw toolchain LTO optimizations can still be enabled as:  ``` CXXFLAGS='-flto' make -j ARCH=x86-64-modern COMP=mingw profile-build ```  fixes https://github.com/official-stockfish/Stockfish/issues/2769  closes https://github.com/official-stockfish/Stockfish/pull/2774  No functional change.,True,5,2020-06-01
niklasf,vondele,2020-06-27 08:19:29+00:00,support popcnt on armv8  * Supports popcnt (thanks @daylen) * bits = 64 is now the default  Tested with g++ (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0 on ThunderX CN8890; yields about 9% speedup.  Also tested with clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final).  closes https://github.com/official-stockfish/Stockfish/pull/2770  No functional change.,True,5,2020-06-01
niklasf,vondele,2020-06-27 08:06:05+00:00,Simplify use_time_management() and allow composing  like other `go` commands wtime/btime can now be composed.  `go depth 10 wtime 100`  will let the engine use standard time management but stop if depth 10 is reached.  fixes https://github.com/official-stockfish/Stockfish/issues/2767  closes https://github.com/official-stockfish/Stockfish/pull/2768  No functional change,True,5,2020-06-01
vondele,vondele,2020-06-24 20:20:04+00:00,Small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2756  No functional change,True,2,2020-06-01
unaiic,vondele,2020-06-24 20:14:25+00:00,Makefile: support lto on mingw; default to 64bits  Clean and organize uppercase and spaces  fixes https://github.com/official-stockfish/Stockfish/issues/2731  closes  https://github.com/official-stockfish/Stockfish/pull/2763  No functional change,True,2,2020-06-01
vondele,vondele,2020-06-24 20:02:17+00:00,Remove 'Minimum Thinking Time' UCI option.  the option was; since at least 2014; not correctly implemented; ignoring all dynamic adjustments to optimum time in search. Instead of fixing it; remove it; no need to expose an option that will influence time management negatively.  closes https://github.com/official-stockfish/Stockfish/pull/2765  No functional change.,True,2,2020-06-01
niklasf,vondele,2020-06-24 19:59:57+00:00,Support ARCH=armv8 in Makefile (#2355)  Tested with bench run after compiling with  - g++ (Debian 6.3.0-18+deb9u1) 6.3.0 20170516 - clang version 3.8.1-24  on ThunderX CN8890.  closes https://github.com/official-stockfish/Stockfish/pull/2760  fixes https://github.com/official-stockfish/Stockfish/issues/2355  No functional change.,True,2,2020-06-01
Vizvezdenec,vondele,2020-06-24 19:56:11+00:00,"Do less futility pruning for captures.  The idea of this patch is that if capture can be described as ""less valuable piece takes more valuable piece"" it's not really correct to add only piece value of captured piece to static evaluation since there can be more threats in other places and opponent can't really do much but recapture our capturing piece which leaves us space for more captures thus winning more material and increasing static eval.  passed STC https://tests.stockfishchess.org/tests/view/5ef0167b122d6514328d760f LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 24736 W: 4838 L: 4607 D: 15291 Ptnml(0-2): 438; 2812; 5648; 3021; 449  passed LTC https://tests.stockfishchess.org/tests/view/5ef073bc122d6514328d7693 LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 46152 W: 5865 L: 5567 D: 34720 Ptnml(0-2): 312; 4160; 13886; 4354; 364  closes https://github.com/official-stockfish/Stockfish/pull/2761  bench 4789930",True,2,2020-06-01
FauziAkram,snicolet,2020-06-22 10:47:14+00:00,Introduce bonus for queen infiltration  Idea is that queen feels much better when it can't be kicked away now or later by pawn moves; especially in endgame. Special thanks to Linmiao Xu for the original idea of this patch.  passed STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 84008 W: 16271 L: 15958 D: 51779 Ptnml(0-2): 1476; 9688; 19420; 9887; 1533 https://tests.stockfishchess.org/tests/view/5eee7ca0447c5b640047a439  passed LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 11720 W: 1522 L: 1328 D: 8870 Ptnml(0-2): 52; 1021; 3574; 1107; 106 https://tests.stockfishchess.org/tests/view/5eefc588122d6514328d75f9  closes https://github.com/official-stockfish/Stockfish/pull/2759  Bench: 4471740,True,0,2020-06-01
Unknown,vondele,2020-06-21 13:39:00+00:00,"Make endgames consistent  Changes variable names and occasionally consolidated variable declarations. Piece squares are consistently prefixed with ""weak"" or ""strong.""  passed STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 29008 W: 5532 L: 5416 D: 18060 Ptnml(0-2): 355; 2983; 7723; 3077; 366 https://tests.stockfishchess.org/tests/view/5eea88d3563bc7aa75600689  closes https://github.com/official-stockfish/Stockfish/pull/2752  No functional change",True,6,2020-06-01
vondele,vondele,2020-06-21 13:22:20+00:00,small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2695  No functional change,True,6,2020-06-01
Vizvezdenec,vondele,2020-06-17 05:41:59+00:00,More reduction for evading pawn moves.  pawn moves are irreversable unlike other evading moves; pawn is the least valuable piece in the game. So it makes a lot of sence to assume that evading pawn moves are on average not as good as other evading moves thus can be reduced more.  Passed STC https://tests.stockfishchess.org/tests/view/5ee9602e563bc7aa756002dc LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 94176 W: 17993 L: 17668 D: 58515 Ptnml(0-2): 1634; 10742; 21989; 11111; 1612  Passed LTC https://tests.stockfishchess.org/tests/view/5ee97342563bc7aa75600301 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 20432 W: 2572 L: 2354 D: 15506 Ptnml(0-2): 146; 1707; 6280; 1949; 134  closes https://github.com/official-stockfish/Stockfish/pull/2749  Bench: 5073064,True,2,2020-06-01
snicolet,vondele,2020-06-17 05:35:58+00:00,Small bonus to favor thorn pawns  We increase a little bit the midgame value of pawns on a4; h4; a6 and h6.  Original idea by Malcolm Campbell; who tried the version restricted to the pawns on the H column a couple of weeks ago and got a patch which almost passed LTC. The current pull request just adds the same idea for pawns on the A column.  Possible follow-ups: maybe tweak the a5/h5 pawn values; and/or add a malus for very low king mobility in midgame?  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 33416 W: 6516 L: 6275 D: 20625 Ptnml(0-2): 575; 3847; 7659; 4016; 611 https://tests.stockfishchess.org/tests/view/5ee6c4e687586124bc2c10d4  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 134368 W: 16869 L: 16319 D: 101180 Ptnml(0-2): 908; 12083; 40708; 12521; 964 https://tests.stockfishchess.org/tests/view/5ee74e60aae8aec816ab756a  closes https://github.com/official-stockfish/Stockfish/pull/2747  Bench: 5299456,True,2,2020-06-01
Unknown,vondele,2020-06-17 05:32:16+00:00,Use 128 bit multiply for TT index  Remove super cluster stuff from TT and just use a 128 bit multiply.  STC https://tests.stockfishchess.org/tests/view/5ee719b3aae8aec816ab7548 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 12736 W: 2502 L: 2333 D: 7901 Ptnml(0-2): 191; 1452; 2944; 1559; 222  LTC https://tests.stockfishchess.org/tests/view/5ee732d1aae8aec816ab7556 LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 27584 W: 3431 L: 3350 D: 20803 Ptnml(0-2): 173; 2500; 8400; 2511; 208  Scheme back to being derived from https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/  Also the default optimized version of the index calculation now uses fewer instructions. https://godbolt.org/z/Tktxbv Might benefit from mulx (requires -mbmi2)  closes https://github.com/official-stockfish/Stockfish/pull/2744  bench: 4320954,True,2,2020-06-01
Unknown,vondele,2020-06-15 06:05:16+00:00,Retuned values after eval quantize patch.  The last search tune patch was tested before the implementation of #2733 which presumably changed the search characteristics noticeably. Another tuning run was done; see https://tests.stockfishchess.org/tests/view/5ee5b434ca6c451633a9a08c and the updated values passed these tests:  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 34352 W: 6600 L: 6360 D: 21392 Ptnml(0-2): 581; 3947; 7914; 4119; 615 https://tests.stockfishchess.org/tests/view/5ee62f05ca6c451633a9a15f  LTC 60+0.6 th 1 : LLR: 2.97 (-2.94;2.94) {0.25;1.75} Total: 11176 W: 1499 L: 1304 D: 8373 Ptnml(0-2): 69; 933; 3403; 1100; 83 https://tests.stockfishchess.org/tests/view/5ee6205bca6c451633a9a147  SMP LTC 20+0.2 th 8 : LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 54032 W: 6126 L: 5826 D: 42080 Ptnml(0-2): 278; 4454; 17280; 4698; 306 https://tests.stockfishchess.org/tests/view/5ee62f25ca6c451633a9a162  Closes https://github.com/official-stockfish/Stockfish/pull/2742  Bench 4957812,True,0,2020-06-01
Unknown,snicolet,2020-06-13 11:33:18+00:00,Tuned values for search constants  Tuned search constants after many search patches since the last successful tune.  1st LTC @ 60+0.6 th 1 : LLR: 2.97 (-2.94;2.94) {0.25;1.75} Total: 57656 W: 7369 L: 7036 D: 43251 Ptnml(0-2): 393; 5214; 17336; 5437; 448 https://tests.stockfishchess.org/tests/view/5ee1e074f29b40b0fc95af19  SMP LTC @ 20+0.2 th 8 : LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 83576 W: 9731 L: 9341 D: 64504 Ptnml(0-2): 464; 7062; 26369; 7406; 487 https://tests.stockfishchess.org/tests/view/5ee35a21f29b40b0fc95b008  The changes were rebased on top of a successful patch by Viz (see #2734) and two different ways of doing this were tested. The successful test modified the constants in the patch by Viz in a similar manner to the tuning run:  LTC (rebased) @ 60+0.6 th 1 : LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 193384 W: 24241 L: 23521 D: 145622 Ptnml(0-2): 1309; 17497; 58472; 17993; 1421 https://tests.stockfishchess.org/tests/view/5ee43319ca6c451633a995f9  Further work: the recent patch to quantize eval #2733 affects search quit quite a bit; so doing another tune in; say; three months time might be a good idea.  closes https://github.com/official-stockfish/Stockfish/pull/2735  Bench 4246971,True,5,2020-06-01
vondele,snicolet,2020-06-13 05:10:34+00:00,Quantize eval to multiples of 16  Removes some excess precision; helps searchs.  Effectively reintroduces evaluation grain; with a slightly different context. https://github.com/official-stockfish/Stockfish/commit/45dbd9cd0303d0db469670af8ec3598731a4eace  passed STC LLR: 2.97 (-2.94;2.94) {-0.50;1.50} Total: 197032 W: 37938 L: 37462 D: 121632 Ptnml(0-2): 3359; 22994; 45446; 23246; 3471 https://tests.stockfishchess.org/tests/view/5ee0c228f29b40b0fc95ae53  passed LTC LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 77696 W: 9970 L: 9581 D: 58145 Ptnml(0-2): 530; 7075; 23311; 7340; 592 https://tests.stockfishchess.org/tests/view/5ee21426f29b40b0fc95af43  passed LTC SMP LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 64136 W: 7425 L: 7091 D: 49620 Ptnml(0-2): 345; 5416; 20228; 5718; 361 https://tests.stockfishchess.org/tests/view/5ee387bbf29b40b0fc95b04c  closes https://github.com/official-stockfish/Stockfish/pull/2733  Bench: 4939103,True,5,2020-06-01
Vizvezdenec,snicolet,2020-06-13 04:48:58+00:00,Adjust history threshold for quiet moves futility pruning  This patch adjusts the threshold for futility pruning of quiet moves using the continuation history array contHist[5]; in the same way as it is used in movepicker.  passed STC: https://tests.stockfishchess.org/tests/view/5ee3f88bca6c451633a9959f LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 55984 W: 10822 L: 10552 D: 34610 Ptnml(0-2): 952; 6435; 12941; 6719; 945  passed LTC: https://tests.stockfishchess.org/tests/view/5ee4186dca6c451633a995cf LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 41712 W: 5402 L: 5114 D: 31196 Ptnml(0-2): 293; 3766; 12469; 4016; 312  closes https://github.com/official-stockfish/Stockfish/pull/2734  Bench: 4715960,True,5,2020-06-01
snicolet,vondele,2020-06-10 11:07:12+00:00,Improve the anti-shuffling policy  We replace the current decrease of the complexity term in initiative when shuffling by a direct damping of the evaluation. This scheme may have two benefits over the initiative approach:  a) the damping effect is more brutal for fortresses with heavy pieces    on the board; because the initiative term is almost an endgame term;  b) the initiative implementation had a funny side effect; almost a bug;    in the rare positions where mg > 0; eg < 0 and the tampered eval    returned a positive value (ie with heavy pieces still on the board):    sending eg to zero via shuffling would **increase** the tampered    eval instead of decreasing it; which is somewhat illogical. This    patch avoids this phenomenon.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 43072 W: 8373 L: 8121 D: 26578 Ptnml(0-2): 729; 4954; 9940; 5162; 751 https://tests.stockfishchess.org/tests/view/5ee008ebf29b40b0fc95ade2  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 37376 W: 4816 L: 4543 D: 28017 Ptnml(0-2): 259; 3329; 11286; 3508; 306 https://tests.stockfishchess.org/tests/view/5ee03b06f29b40b0fc95ae0c  Closes https://github.com/official-stockfish/Stockfish/pull/2727  Bench: 4757174,True,2,2020-06-01
skiminki,vondele,2020-06-09 16:44:07+00:00,Increase the maximum hash size by a factor of 256  Conceptually group hash clusters into super clusters of 256 clusters. This scheme allows us to use hash sizes up to 32 TB (= 2^32 super clusters = 2^40 clusters).  Use 48 bits of the Zobrist key to choose the cluster index. We use 8 extra bits to mitigate the quantization error for very large hashes when scaling the hash key to cluster index.  The hash index computation is organized to be compatible with the existing scheme for power-of-two hash sizes up to 128 GB.  Fixes https://github.com/official-stockfish/Stockfish/issues/1349  closes https://github.com/official-stockfish/Stockfish/pull/2722  Passed non-regression STC: LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 37976 W: 7336 L: 7211 D: 23429 Ptnml(0-2): 578; 4295; 9149; 4356; 610 https://tests.stockfishchess.org/tests/view/5edcbaaef29b40b0fc95abc5  No functional change.,True,1,2020-06-01
nguyenpham,vondele,2020-06-09 16:31:56+00:00,Improve Readme.md about compiling  Reparagraph; add an example how to compile on Unix-like systems  closes https://github.com/official-stockfish/Stockfish/pull/2724  No functional change,True,1,2020-06-01
nguyenpham,vondele,2020-06-09 16:28:20+00:00,show coordinates when displaying board  closes https://github.com/official-stockfish/Stockfish/pull/2723  No functional change,True,1,2020-06-01
Unknown,vondele,2020-06-09 16:22:27+00:00,Refactor some threads related code.  This is a code style change that moves some pure thread code into the threads class.  It is a bit more code; but it makes search.cpp cleaner and easier to read by hiding some thread specific functionality.  STC (SMP) LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 75896 W: 12073 L: 12026 D: 51797 Ptnml(0-2): 828; 8224; 19872; 8121; 903 https://tests.stockfishchess.org/tests/view/5ed492e8f29b40b0fc95a74c  closes https://github.com/official-stockfish/Stockfish/pull/2720  No functional change.,True,1,2020-06-01
Unknown,vondele,2020-06-09 16:13:24+00:00,Wrap all access to LineBB and add assert  This is a non-functional code style change which provides a safe access handler for LineBB. Also includes an assert in debug mode to verify square correctness.  closes https://github.com/official-stockfish/Stockfish/pull/2719  No functional change,True,1,2020-06-01
Unknown,vondele,2020-06-09 16:11:44+00:00,join scale_factor; initiative and mg+eg reduction  Merging this code into one function `winnable()`. Should allow common concepts used to adjust the eg value; either by addition or scaling; to be combined more effectively.  Improve trace function.  closes https://github.com/official-stockfish/Stockfish/pull/2710  No functional change.,True,1,2020-06-01
Unknown,vondele,2020-06-06 14:18:42+00:00,Use lowply-history also on low depths  STC: https://tests.stockfishchess.org/tests/view/5ed75078f29b40b0fc95a8b9 LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 73928 W: 14301 L: 14005 D: 45622 Ptnml(0-2): 1243; 8572; 17096; 8752; 1301  LTC: https://tests.stockfishchess.org/tests/view/5ed895e0f29b40b0fc95a976 LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 154848 W: 19684 L: 19074 D: 116090 Ptnml(0-2): 1048; 14108; 46627; 14468; 1173  closes https://github.com/official-stockfish/Stockfish/pull/2718  bench: 4582693,True,5,2020-06-01
Unknown,vondele,2020-06-06 14:03:19+00:00,small speed-up in movegen  pass color as a template parameter.  closes https://github.com/official-stockfish/Stockfish/pull/2715  No functional change.,True,5,2020-06-01
MJZ1977,vondele,2020-06-06 13:58:50+00:00,Minimal thinking time; even if only one rootMove.  without search; the eval returned can be misleading (e.g. mate instead of draw); leading to wrong adjudication. With a minimal search; this is avoided. This patch leads to 1ms long searches if there is only 1 move; similar patches all indicate a small Elo gain.  Fixes https://github.com/official-stockfish/Stockfish/issues/2707  Passed non-regression STC: LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 22312 W: 4350 L: 4204 D: 13758 Ptnml(0-2): 323; 2488; 5437; 2536; 372 https://tests.stockfishchess.org/tests/view/5ed562b0f29b40b0fc95a7d0  closes https://github.com/official-stockfish/Stockfish/pull/2709  Bench: 4733799,True,5,2020-06-01
MJZ1977,vondele,2020-06-04 17:03:54+00:00,Singular quiet LMR  If ttMove is a capture and had a singular extension; it is probably the best move. No need to make a decrease of LMR on other moves.  STC LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 41968 W: 8170 L: 7918 D: 25880 Ptnml(0-2): 733; 4770; 9726; 5022; 733 https://tests.stockfishchess.org/tests/view/5ed6b666f29b40b0fc95a884  LTC LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 71376 W: 9200 L: 8827 D: 53349 Ptnml(0-2): 486; 6544; 21342; 6743; 573 https://tests.stockfishchess.org/tests/view/5ed7578bf29b40b0fc95a8c9  closes https://github.com/official-stockfish/Stockfish/pull/2713  Bench: 4733799,True,3,2020-06-01
locutus2,vondele,2020-06-01 15:35:02+00:00,"Give bonus for bishops that are alligned with enemy kingring.  Inspired by the succesful patch ""Give bonus for rooks that are alligned with enemy kingring"" from Vizvezdenec; this idea has been reused for bishops. Here; we only consider attacks that are not blocked by any pawn. Also we have a 50% higher bonus than for the rooks.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 68960 W: 13495 L: 13202 D: 42263 Ptnml(0-2): 1213; 8018; 15802; 8157; 1290 https://tests.stockfishchess.org/tests/view/5ed27495042fa6d77c3553aa  LTC: LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 54560 W: 7105 L: 6780 D: 40675 Ptnml(0-2): 379; 4986; 16254; 5253; 408 https://tests.stockfishchess.org/tests/view/5ed30375596e6dc1e1f97425  closes https://github.com/official-stockfish/Stockfish/pull/2708  Bench: 4860021",True,0,2020-06-01
ElbertoOne,vondele,2020-06-01 15:27:29+00:00,Isolated pawns tweak  Give opposed doubled isolated pawns only the Doubled penalty. The other isolated pawns get the Isolated penalty and the WeakUnopposed penalty. The popcount condition has been replaced with an opposed check; which is non-functional; but probably gives a speed-up.  Passed STC (https://tests.stockfishchess.org/tests/view/5ed0f0f0042fa6d77c3552f5): LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 121832 W: 23562 L: 23195 D: 75075 Ptnml(0-2): 2092; 14064; 28313; 14279; 2168  LTC: (https://tests.stockfishchess.org/tests/view/5ed22e40042fa6d77c355387) LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 103368 W: 13232 L: 12768 D: 77368 Ptnml(0-2): 693; 9484; 30919; 9842; 746  closes https://github.com/official-stockfish/Stockfish/pull/2706  Bench: 4085694,True,0,2020-06-01
vondele,vondele,2020-05-30 18:32:52+00:00,Less pruning in draw PV lines.  no futility pruning for certain captures if the PvNode has a draw eval.  passed STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 59392 W: 11576 L: 11302 D: 36514 Ptnml(0-2): 977; 6816; 13920; 6922; 1061 https://tests.stockfishchess.org/tests/view/5ed0b1bb042fa6d77c355295  passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 64040 W: 8273 L: 7923 D: 47844 Ptnml(0-2): 424; 5842; 19220; 6028; 506 https://tests.stockfishchess.org/tests/view/5ed145e0042fa6d77c35531c  closes https://github.com/official-stockfish/Stockfish/pull/2705  Bench: 4704615,True,5,2020-05-01
Unknown,vondele,2020-05-30 18:30:31+00:00,Consolidate all attacks bitboards  This is a non-functional simplification that simplifies getting attacks bitboards.  * consolidates all attacks to attacks_bb (remove Position::attacks_from(..)). * attacks_bb<PieceType>(square) gets pseudo attacks * attacks_bb<PieceType>(square; bitboard) gets attacks considering occupied squares in the bitboard). * pawn_attacks_bb(Color; Square) gets pawn attacks like other pawn attack bitboards. * Wraps all access to PawnAttacks arrays and PseudoAttacks arrays and adds asserts as appropriate.  Passed STC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 90208 W: 17533 L: 17482 D: 55193 Ptnml(0-2): 1412; 10232; 21798; 10217; 1445 https://tests.stockfishchess.org/tests/view/5ece996275787cc0c05d9790  closes https://github.com/official-stockfish/Stockfish/pull/2703  No functional change,True,5,2020-05-01
Unknown,vondele,2020-05-26 05:11:59+00:00,In BlockedStorm; theirPawns includes ones attacked by us.  Pawns heading towards our king tend to be dangerous whether or not we are attacking them so remove this test.  STC: LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 91184 W: 18196 L: 18137 D: 54851 Ptnml(0-2): 1580; 10656; 21092; 10653; 1611 https://tests.stockfishchess.org/tests/view/5ecc3f7080f2c838b9655841  LTC: LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 14152 W: 2045 L: 1937 D: 10170 Ptnml(0-2): 99; 1325; 4130; 1413; 109 https://tests.stockfishchess.org/tests/view/5ecc4f3180f2c838b9655861  closes https://github.com/official-stockfish/Stockfish/pull/2702  Bench 4828973,True,1,2020-05-01
Vizvezdenec,vondele,2020-05-25 20:18:56+00:00,Give bonus for rooks that are alligned with enemy kingring  The idea of this patch is that if rooks are not directly attacking the opponent king; they can support king attacks staying behind pawns or minor pieces and be really deadly if position slightly opens up at enemy king ring ranks. Loosely based on some stockfish games where it underestimated attacks on it king when enemy has one or two rooks supporting pawn pushes towards it king.  passed STC https://tests.stockfishchess.org/tests/view/5ecb093680f2c838b96550f9 LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 53672 W: 10535 L: 10265 D: 32872 Ptnml(0-2): 952; 6210; 12258; 6448; 968  passed LTC https://tests.stockfishchess.org/tests/view/5ecb639f80f2c838b9655117 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 62424 W: 8094 L: 7748 D: 46582 Ptnml(0-2): 426; 5734; 18565; 6042; 445  closes https://github.com/official-stockfish/Stockfish/pull/2700  Bench: 4663220,True,0,2020-05-01
MJZ1977,vondele,2020-05-25 20:15:13+00:00,"Remove attacked pawns from storm evaluation  STC: LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 54456 W: 11009 L: 10737 D: 32710 Ptnml(0-2): 929; 6326; 12523; 6444; 1006 https://tests.stockfishchess.org/tests/view/5ec962e4404591b2793008a5  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 62448 W: 9018 L: 8664 D: 44766 Ptnml(0-2): 462; 5928; 18121; 6220; 493 https://tests.stockfishchess.org/tests/view/5ec976a8a586eee45aa2ab40  Non regression STC with ""noob_3moves.epd"" opening book LLR: 3.81 (-2.94;2.94) {-1.50;0.50} Total: 91896 W: 17770 L: 17653 D: 56473 Ptnml(0-2): 1598; 10782; 21124; 10793; 1651 https://tests.stockfishchess.org/tests/view/5ec9b83ea586eee45aa2ab96  closes https://github.com/official-stockfish/Stockfish/pull/2698  Bench 4488597",True,0,2020-05-01
ElbertoOne,vondele,2020-05-23 20:10:14+00:00,Remove and replace DoubledIsolated penalty by Doubled  The values for both penalties were very close; so DoubledIsolated can be removed and replaced by Doubled.  Passed STC (simplification): https://tests.stockfishchess.org/tests/view/5ec7c18e2a585b485af54407 LLR: 2.97 (-2.94;2.94) {-1.50;0.50} Total: 105360 W: 20175 L: 20136 D: 65049 Ptnml(0-2): 1803; 12230; 24572; 12275; 1800  Passed LTC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 15440 W: 1978 L: 1877 D: 11585 Ptnml(0-2): 92; 1405; 4667; 1422; 134  closes https://github.com/official-stockfish/Stockfish/pull/2696  Bench: 4668875,True,5,2020-05-01
FauziAkram,vondele,2020-05-23 20:06:26+00:00,Queen Mobility Tweak  It's ok to have low mobility values for the Queen in the middlegame; but it's absolutely not ok to have low mobility values for the Queen in the endgame. Decrease penalty for bad mobility in MG and increase it in EG.  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 17264 W: 3424 L: 3206 D: 10634 Ptnml(0-2): 279; 2004; 3893; 2132; 324 https://tests.stockfishchess.org/tests/view/5ec8f9c1526edcbe9091eba1  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 175016 W: 22071 L: 21404 D: 131541 Ptnml(0-2): 1195; 15796; 52914; 16353; 1250 https://tests.stockfishchess.org/tests/view/5ec9057c404591b2793007df  closes https://github.com/official-stockfish/Stockfish/pull/2697  Bench: 4487054,True,5,2020-05-01
vondele,vondele,2020-05-23 11:27:16+00:00,small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2653  No functional change,True,5,2020-05-01
Unknown,vondele,2020-05-23 11:19:26+00:00,Keep low ply history from previous move  This patch keeps the low-ply history from the previous move; shifting the data down by 2 ply.  Tested with closedpos book:  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 71584 W: 14175 L: 13891 D: 43518 Ptnml(0-2): 1069; 8228; 16993; 8354; 1148 https://tests.stockfishchess.org/tests/view/5ec0eaafe9d85f94dc429974  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 96552 W: 13946 L: 13498 D: 69108 Ptnml(0-2): 676; 9082; 28375; 9404; 739 https://tests.stockfishchess.org/tests/view/5ec145efe9d85f94dc4299b0  closes https://github.com/official-stockfish/Stockfish/pull/2688  Bench 5148950,True,5,2020-05-01
vondele,vondele,2020-05-23 11:14:09+00:00,"Improve CI testing  also enable CXXFLAGS=""-D_GLIBCXX_DEBUG"" in CI.  closes https://github.com/official-stockfish/Stockfish/pull/2692  No functional change.",True,5,2020-05-01
locutus2,snicolet,2020-05-22 18:40:24+00:00,Add doubled isolated pawn penalty.  This patch gives an additional penalty if a doubled isolated pawn is stopped only by a single opponent pawn on the same file. Thanks to NKONSTANTAKIS; who shared this idea on the forum!  https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/vC4Qn-PMlS4.  STC: LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 84872 W: 16688 L: 16370 D: 51814 Ptnml(0-2): 1507; 9940; 19274; 10158; 1557 https://tests.stockfishchess.org/tests/view/5ec65bd955202b947dc5d4ac  LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 58104 W: 7614 L: 7278 D: 43212 Ptnml(0-2): 411; 5369; 17196; 5625; 451 https://tests.stockfishchess.org/tests/view/5ec6e9f2c23f5b0710632b19  Closes https://github.com/official-stockfish/Stockfish/pull/2694  Bench: 5148950,True,4,2020-05-01
locutus2,snicolet,2020-05-21 12:11:14+00:00,Tweak knight mobility  New tuned values for knight mobility in endgames.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 112576 W: 21999 L: 21644 D: 68933 Ptnml(0-2): 2009; 13084; 25735; 13463; 1997 https://tests.stockfishchess.org/tests/view/5ec58379377121ac09e10272  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 125192 W: 16200 L: 15671 D: 93321 Ptnml(0-2): 891; 11584; 37182; 11983; 956 https://tests.stockfishchess.org/tests/view/5ec5c0b8377121ac09e1028b  Closes https://github.com/official-stockfish/Stockfish/pull/2693  Bench: 4778956,True,3,2020-05-01
snicolet,snicolet,2020-05-21 12:05:07+00:00,"A combo of parameters tweaks  This patch is a combinaison of two recent parameters tweaks which had failed narrowly (yellow) at long time control:  � improvement in move ordering during search by softening the distinction   between bad captures and good captures during move generation; leading   to improved awareness of Stockfish of potential piece sacrifices (idea   by Rahul Dsilva) � increase in the weight of pawns in the ""initiative"" part of the evaluation   function. With this change Stockfish should have more incentive to exchange   pawns when losing; and to keep pawns when winning.  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 10704 W: 2178 L: 1974 D: 6552 Ptnml(0-2): 168; 1185; 2464; 1345; 190 https://tests.stockfishchess.org/tests/view/5ec5553b377121ac09e1023d  LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 60592 W: 7835 L: 7494 D: 45263 Ptnml(0-2): 430; 5514; 18086; 5817; 449 https://tests.stockfishchess.org/tests/view/5ec55ca2377121ac09e10249  Closes https://github.com/official-stockfish/Stockfish/pull/2691  Bench: 4519117",True,3,2020-05-01
Unknown,snicolet,2020-05-21 11:57:50+00:00,Simplify evaluation for blocked passers.  This is a functional simplification of the evaluation code for blocked passers. I've also changed a few variable names for clarity.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 141984 W: 27450 L: 27466 D: 87068 Ptnml(0-2): 2414; 16511; 33175; 16461; 2431 https://tests.stockfishchess.org/tests/view/5ec4001b05aa4bc72d9759e7  LTC LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 30536 W: 3966 L: 3885 D: 22685 Ptnml(0-2): 216; 2841; 9073; 2922; 216 https://tests.stockfishchess.org/tests/view/5ec4bd0d377121ac09e101b7  Closes https://github.com/official-stockfish/Stockfish/pull/2690  Bench: 4704681,True,3,2020-05-01
skiminki,vondele,2020-05-19 15:02:21+00:00,Avoid sending info strings before 'uci' has been received  Do not send the following info string on the first call to aligned_ttmem_alloc() on Windows:    info string Hash table allocation: Windows large pages [not] used.  The first call occurs before the 'uci' command has been received. This confuses some GUIs; which expect the first engine-sent command to be 'id' as the response to the 'uci' command. (see https://github.com/official-stockfish/Stockfish/issues/2681)  closes https://github.com/official-stockfish/Stockfish/pull/2689  No functional change.,True,1,2020-05-01
Unknown,vondele,2020-05-19 14:53:47+00:00,Increase base time use and limit max used.  This change increases the base part of optimumTime at all depths. It also reduces the size of max_scale and thus maximumTime by using a linear scale instead of pow(x; 0.3) and by limiting max_scale to no more than 7 (previously as high as 8 or 9 at very high depths).  Tested using the closedpos book:  STC 10+0.1: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 83696 W: 16813 L: 16508 D: 50375 Ptnml(0-2): 1315; 9649; 19686; 9812; 1386 https://tests.stockfishchess.org/tests/view/5ebfa92de9d85f94dc42989b  LTC 60+0.6: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 39384 W: 5868 L: 5582 D: 27934 Ptnml(0-2): 276; 3697; 11489; 3925; 305 https://tests.stockfishchess.org/tests/view/5ec0a6dce9d85f94dc42995a  Test for non-regression:  STC Sudden Death 10+0 : LLR: 2.94 (-2.94;2.94) {-2.00;0.00} Total: 111976 W: 25661 L: 25768 D: 60547 Ptnml(0-2): 2567; 13420; 24118; 13319; 2564 https://tests.stockfishchess.org/tests/view/5ec23b3be9d85f94dc429a58  closes  https://github.com/official-stockfish/Stockfish/pull/2685  Bench 4395562,True,1,2020-05-01
Unknown,vondele,2020-05-17 08:10:28+00:00,Don't adjust MoveOverhead by increment  This is a change to address a potential timing issue for slow networks.  Move Overhead was limited by TC increment; which might be problematic if small increments (or sudden death) on slow networks (needing high Move Overhead) are used.  STC; sudden death. LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 169368 W: 38023 L: 38054 D: 93291 Ptnml(0-2): 3767; 20250; 36595; 20391; 3681 https://tests.stockfishchess.org/tests/view/5ebf25efe9d85f94dc42986f  STC; 10+0.1 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 83896 W: 16092 L: 16026 D: 51778 Ptnml(0-2): 1401; 9697; 19670; 9795; 1385 https://tests.stockfishchess.org/tests/view/5ec0239de9d85f94dc42991e  closes https://github.com/official-stockfish/Stockfish/pull/2684  No functional change.,True,6,2020-05-01
vondele,vondele,2020-05-15 17:40:25+00:00,Workaround for older compiler  gcc < 5 doesn't fully support the c++11 `std::is_trivially_copyable<Entry>::value` Remove it; as it is not essential.  fixes https://github.com/official-stockfish/Stockfish/issues/2681  closes https://github.com/official-stockfish/Stockfish/pull/2682  No functional change.,True,4,2020-05-01
Unknown,vondele,2020-05-14 18:47:59+00:00,Simplify Time Management  This is a functional simplification of the time management system.  With this patch; there is a simple equation for each of two distinct time controls: basetime + increment; and x moves in y seconds (+increment). These equations are easy to plot and understand making future modifications or adding additional time controls much easier.  SlowMover is reset to 100 so that is has no effect unless a user changes it.  There are two scaling variables: * Opt_scale is a scale factor (or percentage) of time to use for this current move. * Max_scale is a scale factor to apply to the resulting optimumTime.  There seems to be some elo gain in most scenarios. Better performance is attributable to one of two things: * minThinkingTime was not allowing reasonable time calculations for very short games like 10+0 or 10+0.01. This is because adding almost no increment and substracting move overhead for 50 moves quickly results in almost 0 time very early in the game. Master depended on minThinkingTime to handle these short games instead of good time management. This patch addresses this issue by lowering minThinkingTime to 0 and adjusting moverOverhead if there are very low increments. * Notice that the time distribution curves tail downward for the first 10 moves or so. This causes less time to attribute for very early moves leaving more time available for middle moves where more important decisions happen.  Here is a summary of tests for this version at different time controls:  SMP 5+0.05 LLR: 2.97 (-2.94;2.94) {-1.50;0.50} Total: 46544 W: 7175 L: 7089 D: 32280 Ptnml(0-2): 508; 4826; 12517; 4914; 507 https://tests.stockfishchess.org/tests/user/protonspring  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 20480 W: 3872 L: 3718 D: 12890 Ptnml(0-2): 295; 2364; 4824; 2406; 351 https://tests.stockfishchess.org/tests/view/5ebc343e7dd5693aad4e6873  STC; sudden death LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 7024 W: 1706 L: 1489 D: 3829 Ptnml(0-2): 149; 813; 1417; 938; 195 https://tests.stockfishchess.org/tests/view/5ebc346f7dd5693aad4e6875  STC; TCEC style LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 4192 W: 1014 L: 811 D: 2367 Ptnml(0-2): 66; 446; 912; 563; 109 https://tests.stockfishchess.org/tests/view/5ebc34857dd5693aad4e6877  40/10 LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 54032 W: 10592 L: 10480 D: 32960 Ptnml(0-2): 967; 6148; 12677; 6254; 970 https://tests.stockfishchess.org/tests/view/5ebc50597dd5693aad4e688d  LTC; sudden death LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 9152 W: 1391 L: 1263 D: 6498 Ptnml(0-2): 75; 888; 2526; 1008; 79 https://tests.stockfishchess.org/tests/view/5ebc6f5c7dd5693aad4e689b  LTC LLR: 2.98 (-2.94;2.94) {-1.50;0.50} Total: 12344 W: 1563 L: 1459 D: 9322 Ptnml(0-2): 70; 1103; 3740; 1171; 88 https://tests.stockfishchess.org/tests/view/5ebc6f4c7dd5693aad4e6899  closes https://github.com/official-stockfish/Stockfish/pull/2678  Bench: 4395562,True,3,2020-05-01
skiminki,vondele,2020-05-14 18:35:40+00:00,Fix a Windows-only crash on exit without 'quit'  There was a bug in commit d4763424d2728fe2dfd0a6fe747666feb6a2fdbb (Add support for Windows large pages) that could result in trying to free memory allocated with VirtualAlloc incorrectly with free().  Fix this by reverting the TT.resize(0) logic in the previous commit; and instead; just call aligned_ttmem_free() in TranspositionTable::~TranspositionTable().  fixes https://github.com/official-stockfish/Stockfish/issues/2677  closes https://github.com/official-stockfish/Stockfish/pull/2679  No functional change,True,3,2020-05-01
snicolet,vondele,2020-05-14 18:34:15+00:00,Move 50 moves counter to initiative.  simplify the usage of the 50 moves counter; moving it frome the scale factor to initiative.  This patch was inspired by recent games where a blocked or semi-blocked position was 'blundered'; by moving a pawn; into a lost endgame. This patch improves this situation; finding a more robust move more often.  for example (1s searches with many threads): ``` FEN 8/p3kp2/Pp2p3/1n2PpP1/5P2/1Kp5/8/R7 b - - 68 143  master:       6 bestmove b5c7       6 bestmove e7e8      12 bestmove e7d8     176 bestmove e7d7 patch:       3 bestmove b5c7       5 bestmove e7d8     192 bestmove e7d7 ```  fixes https://github.com/official-stockfish/Stockfish/issues/2620  the patch also tests well  passed STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 50168 W: 9508 L: 9392 D: 31268 Ptnml(0-2): 818; 5873; 11616; 5929; 848 https://tests.stockfishchess.org/tests/view/5ebb07287dd5693aad4e680b  passed LTC LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 7520 W: 981 L: 870 D: 5669 Ptnml(0-2): 49; 647; 2256; 760; 48 https://tests.stockfishchess.org/tests/view/5ebbff747dd5693aad4e6858  closes https://github.com/official-stockfish/Stockfish/pull/2666  Bench: 4395562,True,3,2020-05-01
skiminki,vondele,2020-05-13 18:57:47+00:00,"Add support for Windows large pages  for users that set the needed privilige ""Lock Pages in Memory"" large pages will be automatically enabled (see Readme.md).  This expert setting might improve speed; 5% - 30%; depending on the hardware; the number of threads and hash size. More for large hashes; large number of threads and NUMA. If the operating system can not allocate large pages (easier after a reboot); default allocation is used automatically. The engine log provides details.  closes https://github.com/official-stockfish/Stockfish/pull/2656  fixes https://github.com/official-stockfish/Stockfish/issues/2619  No functional change",True,2,2020-05-01
Sopel97,vondele,2020-05-13 17:50:30+00:00,Use a trivially copyable struct for TBTables::Entry instead of a tuple.  fixes https://github.com/official-stockfish/Stockfish/issues/2673 which is a warning issued by recent gcc (10.1)  closes https://github.com/official-stockfish/Stockfish/pull/2674  No functional change,True,2,2020-05-01
MJZ1977,vondele,2020-05-11 18:46:39+00:00,"Tune pawn value  Small tune of PawnValue parameters -4 / -7 with ""closedpos.epd"" opening book.  STC: LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 58776 W: 11787 L: 11511 D: 35478 Ptnml(0-2): 975; 6876; 13443; 7086; 1008 https://tests.stockfishchess.org/tests/view/5eb5aa712326444a3b6d3e33  LTC: LLR: 2.98 (-2.94;2.94) {0.25;1.75} Total: 137544 W: 19687 L: 19115 D: 98742 Ptnml(0-2): 988; 13219; 39901; 13561; 1103 https://tests.stockfishchess.org/tests/view/5eb67a392326444a3b6d3e9a  Non regression STC with ""noob_3moves.epd"" opening book LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 98168 W: 18545 L: 18499 D: 61124 Ptnml(0-2): 1647; 11396; 22951; 11444; 1646 https://tests.stockfishchess.org/tests/view/5eb7e489e0300e8e8c896203  closes https://github.com/official-stockfish/Stockfish/pull/2670  Bench 4696646",True,0,2020-05-01
vondele,vondele,2020-05-11 18:41:49+00:00,Use posix_memalign instead of aligned_alloc  should be a little more portable to older linux systems (before glibc-2.16).  fixes https://github.com/official-stockfish/Stockfish/issues/2665  closes https://github.com/official-stockfish/Stockfish/pull/2668  No functional change.,True,0,2020-05-01
Unknown,vondele,2020-05-09 07:39:52+00:00,Fix syzygy dependencies issue  fixes https://github.com/official-stockfish/Stockfish/issues/2660  The problem was caused by .depend being created with a rule for tbprobe.o not for syzygy/tbprobe.o. This patch keeps an explicit list of sources (SRCS); generates OBJS; and compiles all object files to the src/ directory; consistent with .depend. VPATH is used to search the syzygy directory as needed.  joint work with @gvreuls  closes https://github.com/official-stockfish/Stockfish/pull/2664  No functional change,True,5,2020-05-01
Unknown,vondele,2020-05-06 14:20:01+00:00,Penalty for all enemy pawns xrayed by our bishop.  STC: LLR: 2.93 (-2.94;2.94) {-0.50;1.50} Total: 159760 W: 30229 L: 29813 D: 99718 Ptnml(0-2): 2659; 18309; 37534; 18713; 2665 https://tests.stockfishchess.org/tests/view/5eb1d5032326444a3b6d33ce  LTC: LLR: 2.93 (-2.94;2.94) {0.25;1.75} Total: 26496 W: 3908 L: 3656 D: 18932 Ptnml(0-2): 192; 2512; 7610; 2720; 214 https://tests.stockfishchess.org/tests/view/5eb1e2dd2326444a3b6d33f9  closes https://github.com/official-stockfish/Stockfish/pull/2662  Bench 5185517,True,2,2020-05-01
mcostalba,vondele,2020-05-02 15:32:11+00:00,Fishtest Tuning Framework  The purpose of the code is to allow developers to easily and flexibly setup SF for a tuning session. Mainly you have just to remove 'const' qualifiers from the variables you want to tune and flag them for tuning; so if you have:  int myKing = 10; Score myBonus = S(5; 15); Value myValue[][2] = { { V(100); V(20) }; { V(7); V(78) } };  and at the end of the update you may want to call a post update function:  void my_post_update();  If instead of default Option's min-max values; you prefer your custom ones; returned by:  std::pair<int; int> my_range(int value)  Or you jus want to set the range directly; you can simply add below:  TUNE(SetRange(my_range); myKing; SetRange(-200; 200); myBonus; myValue; my_post_update);  And all the magic happens :-)  At startup all the parameters are printed in a format suitable to be copy-pasted in fishtest.  In case the post update function is slow and you have many parameters to tune; you can add:  UPDATE_ON_LAST();  And the values update; including post update function call; will be done only once; after the engine receives the last UCI option. The last option is the one defined and created as the last one; so this assumes that the GUI sends the options in the same order in which have been defined.  closes https://github.com/official-stockfish/Stockfish/pull/2654  No functional change.,True,5,2020-05-01
Vizvezdenec,vondele,2020-05-02 15:30:22+00:00,Refine scale factor of opposite colored bishops endgames.  This patch makes it dependant on the count of passed pawns of the strong side instead of 22/64 in every case.  passed STC https://tests.stockfishchess.org/tests/view/5ead60966ffeed51f6e32591 LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 50336 W: 9473 L: 9241 D: 31622 Ptnml(0-2): 570; 5371; 13098; 5515; 614  passed LTC https://tests.stockfishchess.org/tests/view/5ead6d3b6ffeed51f6e325b0 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 21952 W: 2810 L: 2603 D: 16539 Ptnml(0-2): 101; 1791; 7005; 1958; 121  closes https://github.com/official-stockfish/Stockfish/pull/2658  bench 4247490,True,5,2020-05-01
linrock,vondele,2020-05-02 15:26:51+00:00,Tuned safe checks and minor piece king protectors  A combination of terms related to king safety one tuned safe check weights; the other tuned knight and bishop king protector weights separately with some compensation in the high outpost bonuses given to the minor pieces.  passed STC LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 39892 W: 7594 L: 7350 D: 24948 Ptnml(0-2): 643; 4559; 9314; 4771; 659 https://tests.stockfishchess.org/tests/view/5ea49635b908f6dd28f34b82  passed LTC LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 104934 W: 13300 L: 12834 D: 78800 Ptnml(0-2): 697; 9571; 31514; 9939; 746 https://tests.stockfishchess.org/tests/view/5ea4abf6b908f6dd28f34bcb  closes https://github.com/official-stockfish/Stockfish/pull/2649  Bench 4800754,True,5,2020-05-01
vondele,vondele,2020-04-29 15:44:24+00:00,Small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2628  No functional change,True,2,2020-04-01
Vizvezdenec,vondele,2020-04-29 15:35:48+00:00,Introduce futility pruning for captures  The idea is somewhat similar to futility pruning for quiet moves - if a late enough capture doesn't give check and the static eval is much lower than alpha we can almost safely assume that this capture wouldn't be a good move.  passed STC https://tests.stockfishchess.org/tests/view/5ea8544b53a4548a0348ee5b LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 236040 W: 44420 L: 43894 D: 147726 Ptnml(0-2): 3830; 27202; 55496; 27596; 3896  passed LTC https://tests.stockfishchess.org/tests/view/5ea87c842141237a731f0c7d LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 81336 W: 10429 L: 10028 D: 60879 Ptnml(0-2): 589; 7356; 24404; 7703; 616  closes https://github.com/official-stockfish/Stockfish/pull/2651  bench 4405247,True,2,2020-04-01
Unknown,vondele,2020-04-22 06:48:01+00:00,continuation histories when in check  If in check; don't write to continuation histories ss-4; ss-6. Adding inCheck to the stack was needed; and might be useful for future patches.  Passed STC: https://tests.stockfishchess.org/tests/view/5e9ee24acaaff5d60a50b812 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 61774 W: 11725 L: 11449 D: 38600 Ptnml(0-2): 971; 7211; 14322; 7337; 1046  Passed LTC: https://tests.stockfishchess.org/tests/view/5e9eecb7caaff5d60a50b831 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 250822 W: 32067 L: 31179 D: 187576 Ptnml(0-2): 1745; 23126; 74824; 23928; 1788  closes https://github.com/official-stockfish/Stockfish/pull/2645  bench: 4808463,True,2,2020-04-01
Vizvezdenec,vondele,2020-04-18 13:36:41+00:00,Apply multicut pruning more often  This patch increases number of nodes where we produce multicut cutoffs.  The idea is that if our ttMove failed to produce a singular extension but ttValue is greater than beta we can afford to do one more reduced search near beta excluding ttMove to see if it will produce a fail high - and if it does so produce muticut by analogy to existing logic.  passed STC https://tests.stockfishchess.org/tests/view/5e9a162b5b664cdba0ce6e28 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 58238 W: 11192 L: 10917 D: 36129 Ptnml(0-2): 1007; 6704; 13442; 6939; 1027  passed LTC https://tests.stockfishchess.org/tests/view/5e9a1e845b664cdba0ce7411 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 137852 W: 17460 L: 16899 D: 103493 Ptnml(0-2): 916; 12610; 41383; 13031; 986  closes https://github.com/official-stockfish/Stockfish/pull/2640  bench 4881443,True,5,2020-04-01
Unknown,vondele,2020-04-18 13:29:24+00:00,Simplify minPawnDistance  This is a functional simplification which fixes an awkward numerical cliff.  With master king_safety; no pawns is scored higher than pawn(s) that is/are far from the king. This may motivate SF to throw away pawns to increase king safety. With this patch; there is a consistent value for minPawnDistance where losing a pawn never increases king safety.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 45548 W: 8624 L: 8525 D: 28399 Ptnml(0-2): 592; 4937; 11587; 5096; 562 https://tests.stockfishchess.org/tests/view/5e98ced630be947a14e9ddc5  LTC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 42084 W: 5292 L: 5242 D: 31550 Ptnml(0-2): 193; 3703; 13252; 3649; 245 https://tests.stockfishchess.org/tests/view/5e98e22e30be947a14e9de07  closes https://github.com/official-stockfish/Stockfish/pull/2639  bench 4600292,True,5,2020-04-01
vondele,vondele,2020-04-16 19:44:52+00:00,Remove one condition in probcut TTmove skipping  the removed condition appears illogical and is not needed.  passed STC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 80418 W: 15217 L: 15144 D: 50057 Ptnml(0-2): 1341; 9399; 18679; 9426; 1364 https://tests.stockfishchess.org/tests/view/5e977eb5c9ada107a0370d6b  passed LTC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 49878 W: 6299 L: 6247 D: 37332 Ptnml(0-2): 327; 4677; 14897; 4693; 345 https://tests.stockfishchess.org/tests/view/5e97e07dc9ada107a0370e53  closes https://github.com/official-stockfish/Stockfish/pull/2638  Bench: 4958027,True,3,2020-04-01
Unknown,vondele,2020-04-16 19:40:06+00:00,Scale factor in opposite-color bishop endings  This change varies the scale factor with the total number of pieces and pawns on the strongSide.  STC : LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 150920 W: 28828 L: 28422 D: 93670 +0.65 Elo Ptnml(0-2): 2507; 17548; 35030; 17782; 2593 https://tests.stockfishchess.org/tests/view/5e983eb2c00499c5410f4951  LTC : LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 69238 W: 8810 L: 8446 D: 51982 +1.58 Elo Ptnml(0-2): 451; 6276; 20879; 6484; 529 https://tests.stockfishchess.org/tests/view/5e985b27c00499c5410f4987  closes https://github.com/official-stockfish/Stockfish/pull/2637  Bench 4821332,True,3,2020-04-01
Lolligerhans,vondele,2020-04-16 19:36:19+00:00,"Increase safe check bonus if multiple safe checks  Add 50% ""safe checks"" bonus when there are multiple safe checks from the same piece type.  LTC LLR: 2.97 (-2.94;2.94) {0.25;1.75} Total: 128184 W: 16491 L: 15954 D: 95739 Ptnml(0-2): 884; 11793; 38267; 12198; 950 https://tests.stockfishchess.org/tests/view/5e97d1b6c9ada107a0370e03  STC LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 19022 W: 3733 L: 3514 D: 11775 Ptnml(0-2): 338; 2103; 4414; 2314; 342 https://tests.stockfishchess.org/tests/view/5e97c377c9ada107a0370ddf  closes https://github.com/official-stockfish/Stockfish/pull/2636  Bench: 5057329",True,3,2020-04-01
FauziAkram,vondele,2020-04-16 19:32:26+00:00,Queen and Rook Tuning  Tuning for multiple parameters for Queen and Rook.  passed STC LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 62790 W: 12033 L: 11754 D: 39003 Ptnml(0-2): 1058; 7186; 14666; 7389; 1096 https://tests.stockfishchess.org/tests/view/5e978c66c9ada107a0370d87  passed LTC LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 89780 W: 11460 L: 11036 D: 67284 Ptnml(0-2): 624; 8151; 26951; 8505; 659 https://tests.stockfishchess.org/tests/view/5e979aaec9ada107a0370d93  closes https://github.com/official-stockfish/Stockfish/pull/2634  Bench: 5111578,True,3,2020-04-01
Vizvezdenec,vondele,2020-04-15 18:33:03+00:00,Don't attempt probcut if ttMove is not good enough.  This idea is loosely based on xoroshiro idea about raisedBeta and ttmoves. If our ttmove have low enough ttvalue and is deep enough (deeper than our probcut depth) it makes little sense to try probcut moves; since the ttMove already more or less failed to produce one according to transposition table.  passed STC https://tests.stockfishchess.org/tests/view/5e9673ddc2718dee3c822920 LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 72148 W: 14038 L: 13741 D: 44369 Ptnml(0-2): 1274; 8326; 16615; 8547; 1312  passed LTC https://tests.stockfishchess.org/tests/view/5e96b378c2718dee3c8229bf LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 89054 W: 11418 L: 10996 D: 66640 Ptnml(0-2): 623; 8113; 26643; 8515; 633  closes https://github.com/official-stockfish/Stockfish/pull/2632  bench 4952731,True,2,2020-04-01
Vizvezdenec,vondele,2020-04-15 06:29:20+00:00,Space bonus and number of blocked pawns  This patch refines the recently introduced interaction between the space bonus and the number of blocked pawns in a position.  * pawns count as blocked also if their push square is attacked by 2 enemy pawns; * overall dependence is stronger as well as offset; * bonus increase is capped at 9 blocked pawns in position;  passed STC https://tests.stockfishchess.org/tests/view/5e94560663d105aebbab243d LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 29500 W: 5842 L: 5603 D: 18055 Ptnml(0-2): 504; 3443; 6677; 3562; 564  passed LTC https://tests.stockfishchess.org/tests/view/5e95b383c2aaa99f75d1a14d LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 63504 W: 8329 L: 7974 D: 47201 Ptnml(0-2): 492; 5848; 18720; 6197; 495  closes https://github.com/official-stockfish/Stockfish/pull/2631  bench 4956028,True,2,2020-04-01
locutus2,vondele,2020-04-14 06:01:53+00:00,less bonus for blocked connected pawn  Use less bonus for blocked connected pawns so closed positions are less worth.  STC: LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 60004 W: 11904 L: 11619 D: 36481 Ptnml(0-2): 1066; 7083; 13535; 7136; 1182 https://tests.stockfishchess.org/tests/view/5e941a8063d105aebbab23e3  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 36606 W: 4831 L: 4556 D: 27219 Ptnml(0-2): 252; 3353; 10872; 3520; 306 https://tests.stockfishchess.org/tests/view/5e9444b963d105aebbab2427  closes https://github.com/official-stockfish/Stockfish/pull/2629  Bench: 4961260,True,1,2020-04-01
silversolver1,vondele,2020-04-13 07:20:53+00:00,Removes evasionPrunable  STC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 25656 W: 4979 L: 4826 D: 15851 Ptnml(0-2): 414; 2971; 5964; 3006; 473 https://tests.stockfishchess.org/tests/view/5e93dbd72cb65b3059c33819  LTC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 43732 W: 5656 L: 5593 D: 32483 Ptnml(0-2): 324; 4072; 13009; 4139; 322 https://tests.stockfishchess.org/tests/view/5e93e37c2cb65b3059c33825  closes https://github.com/official-stockfish/Stockfish/pull/2627  Bench: 4702195,True,0,2020-04-01
Vizvezdenec,vondele,2020-04-13 07:16:54+00:00,Scale up space weight with number of blocked pawns  This idea is loosely based on stockfish losses in closed positions in different tournaments. Space weight symmetrically increases for both sides the more blocked position is.  passed STC https://tests.stockfishchess.org/tests/view/5e919eefaf0a0143109dc8ce LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 16994 W: 3389 L: 3172 D: 10433 Ptnml(0-2): 277; 1931; 3918; 2040; 331  passed LTC https://tests.stockfishchess.org/tests/view/5e91d04faf0a0143109dc8ea LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 133386 W: 17316 L: 16763 D: 99307 Ptnml(0-2): 945; 12407; 39524; 12784; 1033  closes https://github.com/official-stockfish/Stockfish/pull/2626  Bench: 4966867,True,0,2020-04-01
Lolligerhans,vondele,2020-04-13 06:50:25+00:00,Remove candidate passers w/o feasible lever  +-------+ | o . . | o  their pawns | x . . | x  our pawns | . x . | <- Can sacrifice to create passer? +-------+    yes      1         2         3         4         5 +-------+ +-------+ +-------+ +-------+ +-------+ | o . . | | o r . | | o r . | | o . b | | o . b |  lowercase: theirs | x b . | | x . . | | x . R | | x . R | | x . . |  uppercase: ours | . x . | | . x . | | . x . | | . x . | | . x B | +-------+ +-------+ +-------+ +-------+ +-------+    no        no        yes       no        yes  The value of our top pawn depends on our ability to advance our bottom pawn; levering their blocker. Previously; this pawn configuration was always scored as passer (although a blocked one).  Add requirements for the square s above our (possibly) sacrificed pawn: - s must not be occupied by them (1). - If they attack s (2); we must attack s (3). - If they attack s with a minor (4); we must attack s with a minor (5). The attack from their blocker is ignored because it is inherent in the structure; we are ok with sacrificing our bottom pawn.  LTC LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 37030 W: 4962 L: 4682 D: 27386 Ptnml(0-2): 266; 3445; 10863; 3625; 316 https://tests.stockfishchess.org/tests/view/5e92a2b4be6ede5b954bf239  STC LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 40874 W: 8066 L: 7813 D: 24995 Ptnml(0-2): 706; 4753; 9324; 4890; 764 https://tests.stockfishchess.org/tests/view/5e922199af0a0143109dc90e  closes https://github.com/official-stockfish/Stockfish/pull/2624  Bench: 4828294,True,0,2020-04-01
vondele,vondele,2020-04-12 18:38:47+00:00,Extend irreversible moves  if these are ttMoves and played in positions with a high value of the rule50 counter. The unusual extension of 2 is safe in this context as awarding it will reset the rule50 counter; making sure it is awarded very rarely in a search path.  This patch partially addresses https://github.com/official-stockfish/Stockfish/issues/2620 as it should make it less likely to play a move that resets the counter; but that is worse than alternative moves after a slightly deeper search.  passed STC: LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 71658 W: 13840 L: 13560 D: 44258 Ptnml(0-2): 1058; 7921; 17643; 8097; 1110 https://tests.stockfishchess.org/tests/view/5e90d0f6754c3424c4cf9f41  passed LTC: LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 85082 W: 11069 L: 10680 D: 63333 Ptnml(0-2): 459; 6982; 27259; 7393; 448 https://tests.stockfishchess.org/tests/view/5e917470af0a0143109dc341  closes https://github.com/official-stockfish/Stockfish/pull/2623  Bench: 4432822,True,6,2020-04-01
Unknown,vondele,2020-04-12 18:34:50+00:00,Always remember the ttMove  In master; if the received ttMove meets the prescribed conditions in the various MovePicker constructors; it is returned as the first move; otherwise we set it to MOVE_NONE. If set to MOVE_NONE; we no longer track what the ttMove was; and it will might be returned later in a list of generated moves. This may be a waste. With this patch; if the ttMove fails to meet the prescribed conditions; we simply skip the TT stages; but still store the move and make sure it's never returned.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 66424 W: 12903 L: 12806 D: 40715 Ptnml(0-2): 1195; 7730; 15230; 7897; 1160  LTC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 45682 W: 5989 L: 5926 D: 33767 Ptnml(0-2): 329; 4361; 13443; 4334; 374  closes https://github.com/official-stockfish/Stockfish/pull/2616  Bench 4928928,True,6,2020-04-01
vondele,vondele,2020-04-12 18:30:08+00:00,Small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2606  No functional change,True,6,2020-04-01
Vizvezdenec,vondele,2020-04-07 15:47:01+00:00,Introduce capture history pruning  This patch introduces a heuristic that is similar to countermove based pruning but for captures - capture history pruning. The idea is that we can (almost) safely prune really late captures with negative history if they don't give check so will most likely not produce some king-attacking tactic.  passed STC https://tests.stockfishchess.org/tests/view/5e8c60d40ffd2be7f15e5470 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 23748 W: 4758 L: 4529 D: 14461 Ptnml(0-2): 421; 2712; 5400; 2899; 442  passed LTC https://tests.stockfishchess.org/tests/view/5e8c72bf0ffd2be7f15e547f LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 17330 W: 2415 L: 2190 D: 12725 Ptnml(0-2): 126; 1561; 5107; 1704; 167  closes https://github.com/official-stockfish/Stockfish/pull/2618  bench 4417023,True,1,2020-04-01
Vizvezdenec,vondele,2020-04-05 06:44:25+00:00,Further increase reductions with increasing number of threads  This patch doubles the reduction increase with thread count.  passed STC https://tests.stockfishchess.org/tests/view/5e874f5a4411759d9d098696 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 9162 W: 1558 L: 1385 D: 6219 Ptnml(0-2): 90; 958; 2343; 1069; 121  passed LTC https://tests.stockfishchess.org/tests/view/5e8762804411759d9d09869f LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 79364 W: 9541 L: 9159 D: 60664 Ptnml(0-2): 462; 6880; 24661; 7172; 507  closes https://github.com/official-stockfish/Stockfish/pull/2615  bench 4831963,True,6,2020-04-01
31m059,vondele,2020-04-05 06:39:00+00:00,"Retire candidate passed pawns  Before this commit; some pawns were considered ""candidate"" passed pawns and given half bonus. After this commit; all of these pawns are scored as passed pawns; and they do not receive less bonus.  STC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 21806 W: 4320 L: 4158 D: 13328 Ptnml(0-2): 367; 2526; 5001; 2596; 413 https://tests.stockfishchess.org/tests/view/5e86b4724411759d9d098639  LTC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 12590 W: 1734 L: 1617 D: 9239 Ptnml(0-2): 96; 1187; 3645; 1238; 129 https://tests.stockfishchess.org/tests/view/5e86d2874411759d9d098640  This PR and commit are dedicated to our colleague Stefan Geschwentner (@locutus2); one of the most respected and accomplished members of the Stockfish developer community. Stockfish is a volunteer project and has always thrived because of Stefan's talent; insight; generosity; and dedication. Welcome back; Stefan!  closes https://github.com/official-stockfish/Stockfish/pull/2613  Bench: 4831963",True,6,2020-04-01
Unknown,vondele,2020-04-05 06:35:31+00:00,remove KNPK endgame code  In more than 100k local KNPK games; there is no discernible difference between master and master with this endgame removed: master:42971; patch:42973; draws: 3969. Removal does not seem to regress in normal games.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 46390 W: 8998 L: 8884 D: 28508 Ptnml(0-2): 707; 5274; 11163; 5300; 751 https://tests.stockfishchess.org/tests/view/5e83b18ee42a5c3b3ca2ef02  LTC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 44768 W: 5863 L: 5814 D: 33091 Ptnml(0-2): 251; 3918; 14028; 3905; 282 https://tests.stockfishchess.org/tests/view/5e84a82a4411759d9d0984f4  In tests with a book of endgames that can convert into KNPK; no significant difference can be seen either  ``` TC 1.0+0.01 Score of patch vs master: 6131 - 6188 - 27681  [0.499] 40000 Elo difference: -0.5 +/- 1.9; LOS: 30.4 %; DrawRatio: 69.2 %  TC 2.0+0.02 Score of patch vs master: 5740 - 5741 - 28519 [0.500] 40000 Elo difference: -0.0 +/- 1.8; LOS: 49.6 %; DrawRatio: 71.3 % ``  closes https://github.com/official-stockfish/Stockfish/pull/2611  Bench 4512059,True,6,2020-04-01
Vizvezdenec,vondele,2020-04-02 13:11:16+00:00,Increase reduction for captures.  The idea behind this patch is that if static eval is really bad so capturing of current piece on spot will still produce a position with an eval much lower than alpha then our best chance is to create some kind of king attack. So captures without check are mostly worse than captures with check and can be reduced more.  passed STC https://tests.stockfishchess.org/tests/view/5e8514b44411759d9d098543 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 46196 W: 9039 L: 8781 D: 28376 Ptnml(0-2): 750; 5412; 10628; 5446; 862  passed LTC https://tests.stockfishchess.org/tests/view/5e8530134411759d9d09854c LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 23462 W: 3228 L: 2988 D: 17246 Ptnml(0-2): 186; 2125; 6849; 2405; 166  close https://github.com/official-stockfish/Stockfish/pull/2612  bench 4742598,True,3,2020-04-01
31m059,vondele,2020-04-02 12:56:30+00:00,Simplify a candidate passer condition.  STC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 31528 W: 6208 L: 6061 D: 19259 Ptnml(0-2): 541; 3673; 7205; 3788; 557 https://tests.stockfishchess.org/tests/view/5e825db0e42a5c3b3ca2ee21  LTC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 38546 W: 5083 L: 5009 D: 28454 Ptnml(0-2): 299; 3628; 11362; 3668; 316 https://tests.stockfishchess.org/tests/view/5e826ec7e42a5c3b3ca2ee2a  closes https://github.com/official-stockfish/Stockfish/pull/2607  Bench: 5139561,True,3,2020-04-01
Unknown,vondele,2020-04-02 12:54:47+00:00,No voting for TB loss / mate.  Just as we pick the shortest mate also make sure we stave off mate as long as possible.  https://github.com/official-stockfish/Stockfish/pull/2603  bench: 5138771,True,3,2020-04-01
Unknown,vondele,2020-04-02 12:40:03+00:00,Limit array access in Position  This is a non-functional code style change that routes all position array accesses to single methods; and adds an assert to check correctness.  Passed STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 37312 W: 7378 L: 7246 D: 22688 Ptnml(0-2): 606; 4280; 8762; 4392; 616 https://tests.stockfishchess.org/tests/view/5e7c0c69e42a5c3b3ca2eb3d  closes https://github.com/official-stockfish/Stockfish/pull/2595  No functional change.,True,3,2020-04-01
vondele,vondele,2020-03-30 20:46:07+00:00,Small cleanups  https://github.com/official-stockfish/Stockfish/pull/2584  No functional change.,True,0,2020-03-01
Unknown,vondele,2020-03-30 20:41:22+00:00,Movecount pruning reduction logic  This patch refines search reduction logic in case the position is not a former PV node and is pruned based on move count.  passed STC https://tests.stockfishchess.org/tests/view/5e8092bde42a5c3b3ca2ed35 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 78848 W: 15480 L: 15170 D: 48198 Ptnml(0-2): 1406; 9310; 17773; 9438; 1497  passed LTC https://tests.stockfishchess.org/tests/view/5e80bb13e42a5c3b3ca2ed4b LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 86596 W: 11451 L: 11033 D: 64112 Ptnml(0-2): 624; 7993; 25687; 8329; 665  closes https://github.com/official-stockfish/Stockfish/pull/2605  Bench: 5138771,True,0,2020-03-01
Vizvezdenec,vondele,2020-03-29 17:48:01+00:00,Count only the most advanced passed pawn for each file.  This patch adjusts definition of passed pawns - if there is a pawn of our color in the same file in front of a current pawn it's no longer counts as passed.  passed STC https://tests.stockfishchess.org/tests/view/5e802037e42a5c3b3ca2ed07 LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 215296 W: 41843 L: 41341 D: 132112 Ptnml(0-2): 3688; 25313; 49304; 25495; 3848  passed LTC https://tests.stockfishchess.org/tests/view/5e806441e42a5c3b3ca2ed2b LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 74050 W: 9761 L: 9379 D: 54910 Ptnml(0-2): 510; 6838; 22025; 7064; 588  closes https://github.com/official-stockfish/Stockfish/pull/2602  bench: 4902237,True,6,2020-03-01
Unknown,vondele,2020-03-29 17:44:07+00:00,Remove previousScore adjustment of delta.  STC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 14580 W: 2904 L: 2731 D: 8945 Ptnml(0-2): 243; 1665; 3339; 1762; 281 https://tests.stockfishchess.org/tests/view/5e7d080ae42a5c3b3ca2ebc6  LTC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 60338 W: 7870 L: 7831 D: 44637 Ptnml(0-2): 451; 5596; 18018; 5671; 433 https://tests.stockfishchess.org/tests/view/5e7d11b3e42a5c3b3ca2ebd3  closes https://github.com/official-stockfish/Stockfish/pull/2598  Bench 5247262,True,6,2020-03-01
lantonov,vondele,2020-03-26 16:49:28+00:00,Tuned history reduction  Value after a long Bayesian tuning; using a home-made classification approach.  STC https://tests.stockfishchess.org/tests/view/5e7c7b16e42a5c3b3ca2eb66 LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 45472 W: 8992 L: 8732 D: 27748 Ptnml(0-2): 795; 5276; 10352; 5500; 813  LTC https://tests.stockfishchess.org/tests/view/5e7c8be7e42a5c3b3ca2eb75 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 22744 W: 3085 L: 2849 D: 16810 Ptnml(0-2): 156; 2090; 6658; 2298; 170  closes https://github.com/official-stockfish/Stockfish/pull/2597  Bench 5030855,True,3,2020-03-01
Unknown,vondele,2020-03-26 16:46:51+00:00,Remove passed_count from almostUnwinnable.  This simplification allows the almostUnwinnable flag to match endgames where the pawns are all on the same flank but are not symmetrical.  STC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 23356 W: 4543 L: 4395 D: 14418 Ptnml(0-2): 346; 2651; 5582; 2707; 392 https://tests.stockfishchess.org/tests/view/5e7b8f57e42a5c3b3ca2eb09  LTC: LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 31778 W: 4097 L: 4023 D: 23658 Ptnml(0-2): 199; 2853; 9729; 2891; 217 https://tests.stockfishchess.org/tests/view/5e7ba5ade42a5c3b3ca2eb16  closes https://github.com/official-stockfish/Stockfish/pull/2596  Bench 4777139,True,3,2020-03-01
Unknown,vondele,2020-03-25 20:42:33+00:00,Remove KNPKB endgame.  This is a functional simplification that removes the KNPKB endgame.  Testing on only KNPKB positions suggests that this removal actually gains Elo:  Score of patch vs master: 3380 - 3035 - 33585  [0.504] 40000 Elo difference: 3.0 +/- 1.4; LOS: 100.0 %; DrawRatio: 84.0 %  Score of patch vs master: 290 - 36 - 39674  [0.503] 40000 Elo difference: 2.2 +/- 0.3; LOS: 100.0 %; DrawRatio: 99.2 %  removal also doesn't cause a regression with the standard book:  STC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 71376 W: 13794 L: 13719 D: 43863 Ptnml(0-2): 1066; 8092; 17290; 8181; 1059 https://tests.stockfishchess.org/tests/view/5e76c3d5e42a5c3b3ca2e8be  LTC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 28394 W: 3731 L: 3662 D: 21001 Ptnml(0-2): 167; 2339; 9116; 2408; 167 https://tests.stockfishchess.org/tests/view/5e76e5eae42a5c3b3ca2e8d3  closes https://github.com/official-stockfish/Stockfish/pull/2594  Bench 5480811,True,2,2020-03-01
Vizvezdenec,vondele,2020-03-20 20:07:37+00:00,Adjust singular extension search depth  This patch applies a different singular extension search logic in case the position is ttPv && !PvNode. It changes the depth of this search; higher for this types of nodes; and lower for other nodes.  passed STC http://tests.stockfishchess.org/tests/view/5e72bbaae42a5c3b3ca2e75e LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 12692 W: 2608 L: 2389 D: 7695 Ptnml(0-2): 238; 1414; 2839; 1601; 254  passed LTC http://tests.stockfishchess.org/tests/view/5e731c07e42a5c3b3ca2e770 LLR: 2.96 (-2.94;2.94) {0.25;1.75} Total: 145716 W: 19218 L: 18626 D: 107872 Ptnml(0-2): 1100; 13605; 42899; 14111; 1143  closes https://github.com/official-stockfish/Stockfish/pull/2590  Bench: 5398277,True,4,2020-03-01
Vizvezdenec,vondele,2020-03-17 18:34:47+00:00,Adjust singular LMR for positions seen in PV  This patch continues work on altering search for ttPv nodes; using recent idea to alter it more in not PvNodes. Previous tweak based on this idea adjusted singularBeta - this one adjusts value of singularLMR; so they are both related to singular extension search.  passed STC http://tests.stockfishchess.org/tests/view/5e700737e42a5c3b3ca2e659 LLR: 2.95 (-2.94;2.94) {-0.50;1.50} Total: 140608 W: 27053 L: 26659 D: 86896 Ptnml(0-2): 2425; 16337; 32439; 16625; 2478  passed LTC http://tests.stockfishchess.org/tests/view/5e7068eae42a5c3b3ca2e687 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 79318 W: 10463 L: 10064 D: 58791 Ptnml(0-2): 567; 7416; 23359; 7685; 632  closes https://github.com/official-stockfish/Stockfish/pull/2588  Bench: 4952322,True,1,2020-03-01
snicolet,vondele,2020-03-17 18:20:37+00:00,"Anchored bishops  Reduce the ""bad bishop"" penalty when the bishop is protected by one of our pawns; as it may indicate that the bishop has found a safe spot outside the pawn chain.  STC: LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 176942 W: 34142 L: 33696 D: 109104 Ptnml(0-2): 3129; 20422; 40919; 20876; 3125 http://tests.stockfishchess.org/tests/view/5e6f61aae42a5c3b3ca2e62d  LTC: LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 42252 W: 5615 L: 5322 D: 31315 Ptnml(0-2): 308; 3881; 12500; 4084; 353 http://tests.stockfishchess.org/tests/view/5e701382e42a5c3b3ca2e661  closes https://github.com/official-stockfish/Stockfish/pull/2587  Bench: 4963440",True,1,2020-03-01
vondele,vondele,2020-03-14 16:04:50+00:00,Small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2567  No functional change.,True,5,2020-03-01
Unknown,vondele,2020-03-14 15:30:17+00:00,Simplify futility pruning parent node  only continuation histories seem needed for this purpose.  STC: http://tests.stockfishchess.org/tests/view/5e6b88dfe42a5c3b3ca2e4ab LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 113356 W: 21725 L: 21696 D: 69935 Ptnml(0-2): 1999; 13255; 26163; 13240; 2021  LTC: http://tests.stockfishchess.org/tests/view/5e6babbfe42a5c3b3ca2e4c2 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 22164 W: 2917 L: 2821 D: 16426 Ptnml(0-2): 173; 2040; 6548; 2160; 161  closes https://github.com/official-stockfish/Stockfish/pull/2583  bench: 4839496,True,5,2020-03-01
Unknown,vondele,2020-03-14 15:27:54+00:00,simplify castling part of generate_all.  somewhat more compact; generates same code.  close https://github.com/official-stockfish/Stockfish/pull/2580  No functional change.,True,5,2020-03-01
silversolver1,vondele,2020-03-09 21:46:13+00:00,Remove set statScore to zero  Simplification. Removes setting statScore to zero if negative.  STC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 84820 W: 16100 L: 16033 D: 52687 Ptnml(0-2): 1442; 9865; 19723; 9944; 1436 https://tests.stockfishchess.org/tests/view/5e654fdae42a5c3b3ca2e2f8  LTC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 57658 W: 7435 L: 7391 D: 42832 Ptnml(0-2): 441; 5397; 17104; 5451; 436 https://tests.stockfishchess.org/tests/view/5e657ce9e42a5c3b3ca2e307  closes https://github.com/official-stockfish/Stockfish/pull/2578  Bench: 5168890,True,0,2020-03-01
Unknown,vondele,2020-03-09 21:16:26+00:00,Equations for edges and corners.  This is a functional simplification that removes the large arrays in endgames.cpp. It also fixes a recently introduced bug (960d59d54143d84aab26deae65279a611fc989f4) in KNBvK; now using flip_file() instead of ~.  One fen added to bench to increase endgame coverage.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 174724 W: 33325 L: 33404 D: 107995 Ptnml(0-2): 2503; 19607; 43181; 19608; 2463 http://tests.stockfishchess.org/tests/view/5e6448ffe42a5c3b3ca2e287  LTC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 35640 W: 4679 L: 4621 D: 26340 Ptnml(0-2): 189; 2991; 11424; 3005; 211 http://tests.stockfishchess.org/tests/view/5e650b24e42a5c3b3ca2e2d8  closes https://github.com/official-stockfish/Stockfish/pull/2577  Bench: 5527957,True,0,2020-03-01
gheckman,vondele,2020-03-07 10:14:27+00:00,Fix ambiguity between clamp implementations  There is an ambiguity between global and std clamp implementations when compiling in c++17; and on certain toolchains that are not strictly conforming to c++11. This is solved by putting our clamp implementation in a namespace.  closes https://github.com/official-stockfish/Stockfish/pull/2572  No functional change.,True,5,2020-03-01
Unknown,vondele,2020-03-07 10:09:38+00:00,Remove KRPPKRPScaleFactors array  Fucntional simplification that removes the KRPPKRPScaleFactors array.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 47374 W: 9159 L: 9049 D: 29166 Ptnml(0-2): 707; 5325; 11560; 5341; 754 http://tests.stockfishchess.org/tests/view/5e5ff464e42a5c3b3ca2e156  LTC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 31268 W: 4064 L: 3995 D: 23209 Ptnml(0-2): 173; 2734; 9764; 2777; 186 http://tests.stockfishchess.org/tests/view/5e61be6ce42a5c3b3ca2e1c1  closes https://github.com/official-stockfish/Stockfish/pull/2575  Bench 5123316,True,5,2020-03-01
Unknown,vondele,2020-03-07 09:55:15+00:00,Cleanup KBPsK endgame  * Clarify distinction between strong side pawns and all pawns. * Simplify and speed-up determination of pawns on the same file. * Clarify comments. * more_than_one() is probably faster than pos.count.  Passed STC: LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 40696 W: 7856 L: 7740 D: 25100 Ptnml(0-2): 584; 4519; 10054; 4579; 612 http://tests.stockfishchess.org/tests/view/5e6153b1e42a5c3b3ca2e1a9  closes https://github.com/official-stockfish/Stockfish/pull/2574  No functional change.,True,5,2020-03-01
Unknown,vondele,2020-03-07 09:48:16+00:00,Small speed-up in BetweenBB  A speed-up removing some comparisons.  closes https://github.com/official-stockfish/Stockfish/pull/2571  No functional change.,True,5,2020-03-01
Unknown,vondele,2020-03-04 06:17:04+00:00,Use equations for PushAway and PushClose  A functional simplification replacing the corresponding arrays. Tested in two variants; also the simpler one performs well; even though differences to master should be minimal.  STC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 57864 W: 11092 L: 11001 D: 35771 Ptnml(0-2): 826; 6458; 14320; 6455; 873 http://tests.stockfishchess.org/tests/view/5e5da5b6e42a5c3b3ca2e05c  LTC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 7198 W: 982 L: 883 D: 5333 Ptnml(0-2): 33; 575; 2296; 650; 45 http://tests.stockfishchess.org/tests/view/5e5df13ae42a5c3b3ca2e077  LTC (This exact version. . . more simplified) LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 5392 W: 729 L: 631 D: 4032 Ptnml(0-2): 23; 405; 1751; 485; 32 http://tests.stockfishchess.org/tests/view/5e5ead99e42a5c3b3ca2e0e4  closes https://github.com/official-stockfish/Stockfish/pull/2570  Bench 5123316,True,2,2020-03-01
Unknown,vondele,2020-03-04 06:11:48+00:00,Consolidate Square Flipping  Add a flip_rank() and flip_file() so that all of the square flipping can be consolidated.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 57234 W: 11064 L: 10969 D: 35201 Ptnml(0-2): 822; 6562; 13801; 6563; 869 http://tests.stockfishchess.org/tests/view/5e5d2f2aafe6254521f2ffaa  closes https://github.com/official-stockfish/Stockfish/pull/2568  No functional change.,True,2,2020-03-01
vondele,vondele,2020-03-01 08:31:58+00:00,Small cleanups  closes https://github.com/official-stockfish/Stockfish/pull/2546  No functional change.,True,6,2020-03-01
pb00068,vondele,2020-03-01 08:20:31+00:00,Simplify lowply-history logic  Don't restrict usage to ttPv nodes exclusively  STC: http://tests.stockfishchess.org/tests/view/5e5634f284a82b4acd41499a LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 152796 W: 29146 L: 29178 D: 94472 Ptnml(0-2): 2590; 17792; 35628; 17836; 2552  LTC: http://tests.stockfishchess.org/tests/view/5e575d4984a82b4acd4149e8 LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 20078 W: 2688 L: 2587 D: 14803 Ptnml(0-2): 139; 1914; 5853; 1973; 160  closes https://github.com/official-stockfish/Stockfish/pull/2565  bench: 4923286,True,6,2020-03-01
MJZ1977,vondele,2020-02-27 12:14:51+00:00,Weak queen protection  Extra penalty if weak piece is only protected by a queen.  STC: http://tests.stockfishchess.org/tests/view/5e53c6ab84a82b4acd4148fa LLR: 2.96 (-2.94;2.94) {-0.50;1.50} Total: 44630 W: 8615 L: 8359 D: 27656 Ptnml(0-2): 746; 5156; 10323; 5276; 814  LTC: http://tests.stockfishchess.org/tests/view/5e54e05d84a82b4acd414947 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 175480 W: 23085 L: 22409 D: 129986 Ptnml(0-2): 1264; 16494; 51678; 16910; 1394  closes https://github.com/official-stockfish/Stockfish/pull/2564  Bench: 4923286,True,3,2020-02-01
AndyGrant,vondele,2020-02-25 20:10:10+00:00,Fix TT write in MultiPV case.  fixes an error reported earlier as https://github.com/official-stockfish/Stockfish/issues/2404 by @AndyGrant.  MultiPV at root shouldn't write to the TT for later lines; as that is neither the eval nor the bestmove for that position. Fixing this error doesn't matter for playing games (http://tests.stockfishchess.org/tests/view/5dcdbd810ebc590256324a11).  However; it can lead to wrong mate announcements as reported by @uriblass. In particular the following testcase gives wrong results for the second search; prior to this patch:  ``` setoption name MultiPV value 2 position fen 5R2/2kB2p1/p2bR3/8/3p1B2/8/PPP5/2K5 b - - 0 49 go depth 40 position fen 2B2R2/3r2p1/p1kbR3/8/3p1B2/8/PPP5/2K5 b - - 8 48 go depth 40 ```  fixes https://github.com/official-stockfish/Stockfish/issues/2561 closes https://github.com/official-stockfish/Stockfish/pull/2562  Only affects MultiPV search.  Bench: 4697493,True,1,2020-02-01
31m059,vondele,2020-02-25 20:03:42+00:00,Use single param for Outpost and ReachableOutpost.  In November 2019; as a result of the simplification of rank-based outposts by 37698b0; separate bonuses were introduced for outposts that are currently occupied and outposts that are reachable on the next move. However; the values of these two bonuses are quite similar; and they have remained that way for three months of development.  It appears that we can safely retire the separate ReachableOutpost parameter and use the same Outpost bonus in both cases; restoring the basic principles of Stockfish outpost evaluation to their pre-November state; while also reducing the size of the parameter space.  STC: LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 47680 W: 9213 L: 9092 D: 29375 Ptnml(0-2): 776; 5573; 11071; 5594; 826 https://tests.stockfishchess.org/tests/view/5e51e33190a0a02810d09802  LTC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 14690 W: 1960 L: 1854 D: 10876 Ptnml(0-2): 93; 1381; 4317; 1435; 119 https://tests.stockfishchess.org/tests/view/5e52197990a0a02810d0980f  closes https://github.com/official-stockfish/Stockfish/pull/2559  Bench: 4697493,True,1,2020-02-01
pb00067,vondele,2020-02-22 20:32:32+00:00,Improve move order near the root  Current move histories are known to work well near the leaves; whilst at higher depths they aren't very helpful. To address this problem this patch introduces a table dedicated for what's happening at plies 0-3. It's structured like mainHistory with ply index instead of color. It get cleared with each new search and is filled during iterative deepening at higher depths when recording successful quiet moves near the root or traversing nodes which were in the principal variation (ttPv).  Medium TC (20+0.2): https://tests.stockfishchess.org/tests/view/5e4d358790a0a02810d096dc LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 100910 W: 16682 L: 16376 D: 67852 Ptnml(0-2): 1177; 10983; 25883; 11181; 1231  LTC: https://tests.stockfishchess.org/tests/view/5e4e2cb790a0a02810d09714 LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 80444 W: 10495 L: 10095 D: 59854 Ptnml(0-2): 551; 7479; 23803; 7797; 592  closes https://github.com/official-stockfish/Stockfish/pull/2557  Bench: 4705960,True,5,2020-02-01
Unknown,vondele,2020-02-20 07:32:17+00:00,Updated KNNKP endgame.  This is a patch that significantly improves playing KNNKP endgames:  ``` Score of 2553 vs master: 132 - 38 - 830 [0.547] 1000 Elo difference: 32.8 +/- 8.7; LOS: 100.0 %; DrawRatio: 83.0 % ```  At the same time it reduces the evaluation of this mostly draw engame from ~7.5 to ~1.5  This patch does not regress against master in normal games:  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 96616 W: 18459 L: 18424 D: 59733 Ptnml(0-2): 1409; 10812; 23802; 10905; 1380 http://tests.stockfishchess.org/tests/view/5e49dfe6f8d1d52b40cd31bc  LTC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 49726 W: 6340 L: 6304 D: 37082 Ptnml(0-2): 239; 4227; 15906; 4241; 250 http://tests.stockfishchess.org/tests/view/5e4ab9ee16fb3df8c4cc01d0  Theory: KNNK is a dead draw; however the presence of the additional weakSide pawn opens up some mate opportunities. The idea is to block the pawn (preferably behind the Troitsky line) with one of the knights and press the weakSide king into a corner. If we can stalemate the king; we release the pawn with the knight (to avoid actual stalemate); and use the knight to complete the mate before the pawn promotes. This is also why there is an additional penalty for advancement of the pawn.  closes https://github.com/official-stockfish/Stockfish/pull/2553  Bench: 4981770,True,3,2020-02-01
Unknown,vondele,2020-02-15 14:13:14+00:00,Simplify Futility Move Count  remove two constants  STC LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 62050 W: 11903 L: 11802 D: 38345 Ptnml(0-2): 1002; 7346; 14283; 7320; 1065 http://tests.stockfishchess.org/tests/view/5e41d73be70d848499f63c6d  LTC LLR: 2.93 (-2.94;2.94) {-1.50;0.50} Total: 12850 W: 1679 L: 1572 D: 9599 Ptnml(0-2): 82; 1171; 3818; 1249; 96 http://tests.stockfishchess.org/tests/view/5e42bf07e70d848499f63cc0  Bench: 4762351,True,5,2020-02-01
vondele,vondele,2020-02-15 14:10:07+00:00,Fix for incorrect VALUE_MATE_IN_MAX_PLY usage.  Fixes #2533; fixes #2543; fixes #2423.  the code that prevents false mate announcements depending on the TT state (GHI); incorrectly used VALUE_MATE_IN_MAX_PLY. The latter constant; however; also includes; counterintuitively; the TB win range.  This patch fixes that; by restoring the behavior for TB win scores; while retaining the false mate correctness; and improving the mate finding ability. In particular  no alse mates are announced with the poisened hash testcase ``` position fen 8/8/8/3k4/8/8/6K1/7R w - - 0 1 go depth 40 position fen 8/8/8/3k4/8/8/6K1/7R w - - 76 1 go depth 20 ucinewgame ```  mates are found with the testcases reported in #2543 ``` position fen 4k3/3pp3/8/8/8/8/2PPP3/4K3 w - - 0 1 setoption name Hash value 1024 go depth 55 ucinewgame ``` and ``` position fen 4k3/4p3/8/8/8/8/3PP3/4K3 w - - 0 1 setoption name Hash value 1024 go depth 45 ucinewgame ```  furthermore; on the mate finding benchmark (ChestUCI_23102018.epd); performance improves over master; roughly reaching performance with the false mate protection reverted ``` Analyzing 6566 mate positions for best and found mates:                   ----------------best ---------------found            nodes master revert  fixed master revert  fixed         16000000   4233   4236   4235   5200   5201   5199         32000000   4583   4585   4585   5417   5424   5418         64000000   4852   4853   4855   5575   5584   5579        128000000   5071   5068   5066   5710   5720   5716        256000000   5280   5282   5279   5819   5827   5826        512000000   5471   5468   5468   5919   5935   5932 ```  On a testcase with TB enabled; progress is made consistently; contrary to master ``` setoption name SyzygyPath value ../../../syzygy/3-4-5/ setoption name Hash value 2048 position fen 1R6/3k4/8/K2p4/4n3/2P5/8/8 w - - 0 1 go depth 58 ucinewgame ```  The PR (prior to a rewrite for clarity)  passed STC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 65405 W: 12454 L: 12384 D: 40567 Ptnml(0-2): 920; 7256; 16285; 7286; 944 http://tests.stockfishchess.org/tests/view/5e441a3be70d848499f63d15  passed LTC: LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 27096 W: 3477 L: 3413 D: 20206 Ptnml(0-2): 128; 2215; 8776; 2292; 122 http://tests.stockfishchess.org/tests/view/5e44e277e70d848499f63d63  The incorrectly named VALUE_MATE_IN_MAX_PLY and VALUE_MATED_IN_MAX_PLY were renamed into VALUE_TB_WIN_IN_MAX_PLY and VALUE_TB_LOSS_IN_MAX_PLY; and correclty defined VALUE_MATE_IN_MAX_PLY and VALUE_MATED_IN_MAX_PLY were introduced.  One further (corner case) mistake using these constants was fixed (go mate X); which could lead to a premature return if X > MAX_PLY / 2; but TB were present.  Thanks to @svivanov72 for one of the reports and help fixing the issue.  closes https://github.com/official-stockfish/Stockfish/pull/2552  Bench: 4932981,True,5,2020-02-01
Vizvezdenec,vondele,2020-02-10 08:19:02+00:00,Modify singular beta for ttPv positions.  This patch lowers singular beta for positions that have been in pv and are not pv nodes. The idea of using ttpv && !PvNode improved scaling with TC and could be useful for other search heuristics.  passed STC http://tests.stockfishchess.org/tests/view/5e3f6d7ce70d848499f63bbc LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 154953 W: 29688 L: 29272 D: 95993 Ptnml(0-2): 2616; 17912; 36037; 18210; 2673  passed LTC http://tests.stockfishchess.org/tests/view/5e405561e70d848499f63bfa LLR: 2.95 (-2.94;2.94) {0.25;1.75} Total: 70974 W: 9305 L: 8932 D: 52737 Ptnml(0-2): 466; 6658; 20920; 6826; 569  closes https://github.com/official-stockfish/Stockfish/pull/2550  Bench: 4932981,True,0,2020-02-01
vondele,vondele,2020-02-10 08:12:07+00:00,Fix wrong assert.  can trigger an abort when compiling with debug=yes; and using 7men TB. The assert should check that less than 8 pieces are in the key for each side; matching the assumption that underlies the FEN string construction. Also take explicitly care of a 'v' character in material strings.  Fixes an issue reported in the forum: https://groups.google.com/d/msg/fishcooking/yoVC7etIpz0/7mS7ntZMBAAJ  closes https://github.com/official-stockfish/Stockfish/pull/2547  No functional change.,True,0,2020-02-01
vondele,vondele,2020-02-05 14:32:29+00:00,Small cleanups.  closes https://github.com/official-stockfish/Stockfish/pull/2532  Bench: 4869669,True,2,2020-02-01
Vizvezdenec,vondele,2020-02-05 12:42:24+00:00,Reintroduce king infiltration  This patch reintroduces the recently simplified king infiltration bonus in initiative calculation; doubling its effect; and compensating more.  passed STC http://tests.stockfishchess.org/tests/view/5e3476f630ae32da08941d5c LLR: 2.94 (-2.94;2.94) {-0.50;1.50} Total: 75323 W: 14434 L: 14140 D: 46749 Ptnml(0-2): 1231; 8729; 17528; 8826; 1331  passed LTC http://tests.stockfishchess.org/tests/view/5e377353e70d848499f638c1 LLR: 2.94 (-2.94;2.94) {0.25;1.75} Total: 171466 W: 22223 L: 21561 D: 127682 Ptnml(0-2): 1204; 15951; 50831; 16397; 1312  closes https://github.com/official-stockfish/Stockfish/pull/2545  Brench: 4869669,True,2,2020-02-01
Unknown,vondele,2020-02-02 06:11:49+00:00,Simplify away king infiltration.  STC : LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 91438 W: 17496 L: 17438 D: 56504 Ptnml(0-2): 1573; 10711; 21067; 10790; 1563 https://tests.stockfishchess.org/tests/view/5e34812630ae32da08941d65  LTC : LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 40485 W: 5246 L: 5177 D: 30062 Ptnml(0-2): 289; 3818; 11976; 3812; 327 https://tests.stockfishchess.org/tests/view/5e354daee70d848499f6380c  closes https://github.com/official-stockfish/Stockfish/pull/2542  Bench: 5047825,True,6,2020-02-01
Unknown,vondele,2020-02-01 08:05:13+00:00,Simplify Tweak late move reductions at root.  Revert change from Jan 15.  STC 10+0.1 : LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 65135 W: 12543 L: 12436 D: 40156 Ptnml(0-2): 1090; 7618; 14947; 7623; 1136 https://tests.stockfishchess.org/tests/view/5e334016708b13464ceea32e  LTC 60+0.6 : LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 17768 W: 2286 L: 2191 D: 13291 Ptnml(0-2): 128; 1602; 5273; 1679; 140 https://tests.stockfishchess.org/tests/view/5e34011e57e1ecae66ec2aab  closes https://github.com/official-stockfish/Stockfish/pull/2537  Bench: 4914050,True,5,2020-02-01
vondele,vondele,2020-01-31 18:48:44+00:00,Revert 5 recent patches  Revert 5 patches which were merged; but lead to a regression test that showed negative Elo gain:  http://tests.stockfishchess.org/tests/view/5e307251ab2d69d58394fdb9  This was discussed in depth in:  https://github.com/official-stockfish/Stockfish/issues/2531  Each patch was removed and tested as a simplification; full list below; and the whole combo as well.  After the revert the regression test showed a neutral result:  http://tests.stockfishchess.org/tests/view/5e334851708b13464ceea33c  As a result of this experience; the SPRT testing bounds will be made more strict.  Reverted patches:  1 Dynamic Complexity 6d0eabd5fe2961551477820ab7619e2c31e01ffd :  STC 10+0.1 https://tests.stockfishchess.org/tests/view/5e31fcacec661e2e6a340d08 : LLR: 2.97 (-2.94;2.94) {-1.50;0.50} Total: 38130 W: 7326 L: 7189 D: 23615 Ptnml(0-2): 677; 4346; 8843; 4545; 646  LTC 60+0.6 https://tests.stockfishchess.org/tests/view/5e32c18fec661e2e6a340d73 : LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 38675 W: 4941 L: 4866 D: 28868 Ptnml(0-2): 270; 3556; 11429; 3584; 291  3 More bonus for bestMoves on past PV nodes 71e0b5385e2717679a57c6b77d8c7ac5fff3b89f :  STC 10+0.1 https://tests.stockfishchess.org/tests/view/5e31fe93ec661e2e6a340d10 : LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 46100 W: 8853 L: 8727 D: 28520 Ptnml(0-2): 796; 5297; 10749; 5387; 813  LTC 60+0.6 https://tests.stockfishchess.org/tests/view/5e32c187ec661e2e6a340d71 : LLR: 2.96 (-2.94;2.94) {-1.50;0.50} Total: 16920 W: 2161 L: 2055 D: 12704 Ptnml(0-2): 115; 1498; 5006; 1569; 130  4 Tweak Restricted Piece Bonus 0ae00454ba6928d181b46103e5c83e6d58fcebe5 :  STC 10+0.1 https://tests.stockfishchess.org/tests/view/5e31fefaec661e2e6a340d15 : LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 88328 W: 17060 L: 16997 D: 54271 Ptnml(0-2): 1536; 10446; 20169; 10422; 1581  LTC 60+0.6 https://tests.stockfishchess.org/tests/view/5e32c17aec661e2e6a340d6f : LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 34784 W: 4551 L: 4466 D: 25767 Ptnml(0-2): 255; 3279; 10061; 3345; 262  5 History update for pruned captures 01b6088af39902001d2d6844561b6a2faa549282 :  STC 10+0.1 https://tests.stockfishchess.org/tests/view/5e31ff5eec661e2e6a340d1a : LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 29541 W: 5735 L: 5588 D: 18218 Ptnml(0-2): 483; 3445; 6820; 3469; 545  LTC 60+0.6 https://tests.stockfishchess.org/tests/view/5e32c196ec661e2e6a340d75 : LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 22177 W: 2854 L: 2757 D: 16566 Ptnml(0-2): 143; 2005; 6555; 2055; 164  6 Tweak trapped rook penalty 18fc21eba0368fd5e3c4c4b8ee1000c9ac445425 :  STC 10+0.1 https://tests.stockfishchess.org/tests/view/5e31ffb1ec661e2e6a340d1c : LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 24476 W: 4727 L: 4569 D: 15180 Ptnml(0-2): 390; 2834; 5659; 2933; 417  LTC 60+0.6 https://tests.stockfishchess.org/tests/view/5e32c19eec661e2e6a340d77 : LLR: 2.95 (-2.94;2.94) {-1.50;0.50} Total: 97332 W: 12492 L: 12466 D: 72374 Ptnml(0-2): 690; 9107; 28738; 9034; 720  All 5 as one simplification : LTC 60+0.6 https://tests.stockfishchess.org/tests/view/5e334098708b13464ceea330 : LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 7829 W: 1079 L: 964 D: 5786 Ptnml(0-2): 52; 690; 2281; 781; 65  Bench: 5153165,True,4,2020-01-01
vondele,vondele,2020-01-29 06:25:18+00:00,Fix compilation on android  Fall back to the default implementation of aligned_ttmem_alloc; which was introduced as part of 39437f4e55aaa26ef9f0d5a1c762e560e9ffde32  Fixes  #2524  No functional change.,True,2,2020-01-01
joergoster,vondele,2020-01-28 18:25:39+00:00,Simplify hashfull calculation.  We can simplify the calculation of the hashfull info by looping over exact 1;000 entries; and then divide the result by ClusterSize. Somewhat memory accesses; somewhat more accurate.  Passed non-regression LTC https://tests.stockfishchess.org/tests/view/5e30079dab2d69d58394fd5d LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 30125 W: 3987 L: 3926 D: 22212 Ptnml(0-2): 177; 2504; 9558; 2642; 141  closes https://github.com/official-stockfish/Stockfish/pull/2523  No functional change.,True,1,2020-01-01
pb00068,vondele,2020-01-28 15:28:56+00:00,More bonus for bestMoves on past PV nodes  It looks like it is important to keep past PV (ttPv) nodes as close as possible to current PV nodes. Credits to Mark Tenzer (31m059) & Stefan Geschwentner who first tried ideas on ttPv nodes.  STC: https://tests.stockfishchess.org/tests/view/5e2ff5efab2d69d58394fd52 LLR: 2.95 (-2.94;2.94) {-1.00;3.00} Total: 13302 W: 2647 L: 2507 D: 8148 Ptnml(0-2): 237; 1540; 2956; 1632; 260  LTC: https://tests.stockfishchess.org/tests/view/5e2fff38ab2d69d58394fd55 LLR: 2.95 (-2.94;2.94) {0.00;2.00} Total: 15797 W: 2137 L: 1960 D: 11700 Ptnml(0-2): 96; 1443; 4628; 1547; 130  closes https://github.com/official-stockfish/Stockfish/pull/2529  bench: 5545845,True,1,2020-01-01
31m059,vondele,2020-01-28 09:31:25+00:00,Less NMP if the position was previously in PV.  The intention of the patch is to avoid aggressive null move pruning (NMP) in positions that have previously been found to be important (PV nodes). If we already do not apply NMP for current PV nodes; it makes sense to apply it less often for positions that have previously been PV nodes too.  STC: LLR: 2.96 (-2.94;2.94) {-1.00;3.00} Total: 14959 W: 2921 L: 2782 D: 9256 Ptnml(0-2): 254; 1679; 3493; 1762; 282 http://tests.stockfishchess.org/tests/view/5e2f6637ab2d69d58394fcfd  LTC: LLR: 2.95 (-2.94;2.94) {0.00;2.00} Total: 6442 W: 899 L: 753 D: 4790 Ptnml(0-2): 42; 549; 1885; 659; 61 http://tests.stockfishchess.org/tests/view/5e2f767bab2d69d58394fd04  closes https://github.com/official-stockfish/Stockfish/pull/2525  Bench: 4725546,True,1,2020-01-01
Rocky640,vondele,2020-01-27 17:14:10+00:00,Dynamic Complexity based on psqt  Adjust initiative score by psqt/2 instead of materialScore/2 which simplifies #2516  Passed STC http://tests.stockfishchess.org/tests/view/5e2e667dab2d69d58394fc73 LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 23198 W: 4506 L: 4353 D: 14339 Ptnml(0-2): 396; 2615; 5380; 2728; 418  Passed LTC http://tests.stockfishchess.org/tests/view/5e2ed75cab2d69d58394fcbf LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 8519 W: 1179 L: 1062 D: 6278 Ptnml(0-2): 50; 775; 2472; 843; 74  closes https://github.com/official-stockfish/Stockfish/pull/2522  Bench:  4684459,True,0,2020-01-01
skiminki,vondele,2020-01-27 10:16:10+00:00,Advise the kernel to use huge pages (Linux)  Align the TT allocation by 2M to make it huge page friendly and advise the kernel to use huge pages.  Benchmarks on my i7-8700K (6C/12T) box: (3 runs per bench per config)                      vanilla (nps)               hugepages (nps)              avg ================================================================================== bench             | 3012490  3024364  3036331   3071052  3067544  3071052    +1.5% bench 16 12 20    | 19237932 19050166 19085315  19266346 19207025 19548758   +1.1% bench 16384 12 20 | 18182313 18371581 18336838  19381275 19738012 19620225   +7.0%  On my box; huge pages have a significant perf impact when using a big hash size. They also speed up TT initialization big time:                                    vanilla (s)  huge pages (s)  speed-up ======================================================================= time stockfish bench 16384 1 1  | 5.37         1.48            3.6x  In practice; huge pages with auto-defrag may always be enabled in the system; in which case this patch has no effect. This depends on the values in /sys/kernel/mm/transparent_hugepage/enabled and /sys/kernel/mm/transparent_hugepage/defrag.  closes https://github.com/official-stockfish/Stockfish/pull/2463  No functional change,True,0,2020-01-01
Rocky640,vondele,2020-01-27 08:05:55+00:00,Dynamic complexity  Instead of computing the initiative bonus on the material score + dynamic score compute it on (material score/2) + dynamic score;  Passed STC http://tests.stockfishchess.org/tests/view/5e2c4945ab2d69d58394fa8f LLR: 2.94 (-2.94;2.94) {-1.00;3.00} Total: 39387 W: 7594 L: 7386 D: 24407 Ptnml(0-2): 658; 4519; 9165; 4649; 697  Passed LTC http://tests.stockfishchess.org/tests/view/5e2c85ccab2d69d58394faa7 LLR: 2.95 (-2.94;2.94) {0.00;2.00} Total: 32588 W: 4206 L: 3986 D: 24396 Ptnml(0-2): 244; 2909; 9738; 3111; 253  closes https://github.com/official-stockfish/Stockfish/pull/2516  Bench: 4765486,True,0,2020-01-01
Lolligerhans,Lolligerhans,2020-01-25 08:44:09+00:00,"Tweak RestrictedPiece bonus  Double the ""RestrictedPiece"" bonus for restricted moves targeting occupied squares.  STC LLR: 3.58 (-2.94;2.94) {-1.00;3.00}     Total: 25504 W: 4887 L: 4697 D: 15920     Ptnml(0-2): 387; 2935; 5947; 3051; 422     https://tests.stockfishchess.org/tests/view/5e2aa15dab2d69d58394f94d  LTC LLR: 2.94 (-2.94;2.94) {0.00;2.00}     Total: 28572 W: 3826 L: 3621 D: 21125     Ptnml(0-2): 224; 2609; 8403; 2791; 239     https://tests.stockfishchess.org/tests/view/5e2ae7f4ab2d69d58394f9a6  Bench: 4719086",True,5,2020-01-01
locutus2,snicolet,2020-01-23 18:12:48+00:00,History update for pruned captures  Use a SEE pruned capture move for history updates: this patch collects pruned capture moves also in the failed captures list; so that they get an update in capture history.  STC: LLR: 2.95 (-2.94;2.94) {-1.00;3.00} Total: 11124 W: 2222 L: 2089 D: 6813 Ptnml(0-2): 186; 1280; 2506; 1381; 200 http://tests.stockfishchess.org/tests/view/5e28995fc3b97aa0d75bc294  LTC: LLR: 2.94 (-2.94;2.94) {0.00;2.00} Total: 25552 W: 3418 L: 3211 D: 18923 Ptnml(0-2): 168; 2354; 7538; 2490; 200 http://tests.stockfishchess.org/tests/view/5e2943734744cfa4d6af415b  Closes https://github.com/official-stockfish/Stockfish/pull/2511  Bench: 4810202,True,3,2020-01-01
Vizvezdenec,snicolet,2020-01-23 18:03:25+00:00,Tweak trapped rook penalty  This patch greatly increases the endgame penalty for having a trapped rook. Idea was a result of witnessing Stockfish losing some games at CCCC exchanging pieces in the position with a trapped rook which directly lead to a lost endgame. This patch should partially fix such behavior making this penalty high even in deep endgames.  Passed STC http://tests.stockfishchess.org/tests/view/5e279d7cc3b97aa0d75bc1c4 LLR: 2.94 (-2.94;2.94) {-1.00;3.00} Total: 8528 W: 1706 L: 1588 D: 5234 Ptnml(0-2): 133; 957; 1985; 1024; 159  Passed LTC http://tests.stockfishchess.org/tests/view/5e27aee4c3b97aa0d75bc1e1 LLR: 2.95 (-2.94;2.94) {0.00;2.00} Total: 88713 W: 11520 L: 11130 D: 66063 Ptnml(0-2): 646; 8170; 26342; 8492; 676  Closes https://github.com/official-stockfish/Stockfish/pull/2510  Bench: 4964462  ----------------------  Comment by Malcolm Campbell:  Congrats! I think this might be a common pattern - scores that seem to mainly apply to the midgame are often better with a similar (or at least fairly big) endgame value as well. Maybe there are others eval parameters we can tweak like this...,True,3,2020-01-01
locutus2,snicolet,2020-01-23 17:53:50+00:00,Less reduction for escape moves at ttPv nodes  At expected PV nodes or nodes which marked as PV node in the hash table; reduce escape moves even one ply less.  STC: LLR: 2.94 (-2.94;2.94) {-1.00;3.00} Total: 31795 W: 6140 L: 5953 D: 19702 Ptnml(0-2): 525; 3625; 7455; 3695; 583 http://tests.stockfishchess.org/tests/view/5e25d77fc3b97aa0d75bc013  LTC: LLR: 2.94 (-2.94;2.94) {0.00;2.00} Total: 43975 W: 5708 L: 5454 D: 32813 Ptnml(0-2): 314; 4012; 13070; 4242; 325 http://tests.stockfishchess.org/tests/view/5e2618c1c3b97aa0d75bc03c  Closes https://github.com/official-stockfish/Stockfish/pull/2505  Bench: 4475583,True,3,2020-01-01
pb00068,snicolet,2020-01-23 17:43:47+00:00,Use (strict) greater-than-operator for 'improving'  Currently on a normal bench run in ~0;7% of cases 'improving' is set to true although the static eval isn't improving at all; just keeping equal. It looks like the strict gt-operator is more appropriate here; since it returns to 'improving' its literal meaning without sideffects.  STC {-1.00;3.00} failed yellow: https://tests.stockfishchess.org/tests/view/5e1ec38c8fd5f550e4ae1c28 LLR: -2.93 (-2.94;2.94) {-1.00;3.00} Total: 53155 W: 10170 L: 10109 D: 32876 Ptnml(0-2): 863; 6282; 12251; 6283; 892  non-regression LTC passed: https://tests.stockfishchess.org/tests/view/5e1f1c0d8fd5f550e4ae1c41 LLR: 2.98 (-2.94;2.94) {-1.50;0.50} Total: 23961 W: 3114 L: 3018 D: 17829 Ptnml(0-2): 163; 2220; 7114; 2298; 170  CLoses https://github.com/official-stockfish/Stockfish/pull/2496  bench: 4561386,True,3,2020-01-01
Unknown,snicolet,2020-01-23 17:33:01+00:00,Minor fixes for misc.cpp  Fixes conflict with tune.h STRINGIFY macro.  No functional change,True,3,2020-01-01
Unknown,snicolet,2020-01-23 17:20:11+00:00,Use a std::bitset for KPKBitbase  This is a non-functional simplification. Looks like std::bitset works good for the KPKBitbase. Thanks for Jorg Oster for helping get the speed up (the [] accessor is faster than test()).  Speed testing: 10k calls to probe:   master 9.8 sec   patch 9.8 sec.  STC LLR: 2.94 (-2.94;2.94) {-1.50;0.50} Total: 100154 W: 19025 L: 18992 D: 62137 Ptnml(0-2): 1397; 11376; 24572; 11254; 1473 http://tests.stockfishchess.org/tests/view/5e21e601346e35ac603b7d2b  Closes https://github.com/official-stockfish/Stockfish/pull/2502  No functional change,True,3,2020-01-01
Unknown,snicolet,2020-01-23 16:59:03+00:00,Determine opposite colors mathematically  This is a non-functional speed-up: master has to access SquareBB twice while this patch determines opposite_colors just using the values of the squares. It doesn't seem to change the overall speed of bench; but calling opposite_colors(...) 10 Million times:  master: 39.4 seconds patch: 11.4 seconds.  The only data point I have (other than my own tests); is a quite old failed STC test: LLR: -2.93 (-2.94;2.94) [-1.50;4.50] Total: 24308 W: 5331 L: 5330 D: 13647 Ptnml(0-2): 315; 2577; 6326; 2623; 289 http://tests.stockfishchess.org/tests/view/5e010256c13ac2425c4a9a67  Closes https://github.com/official-stockfish/Stockfish/pull/2498  No functional change,True,3,2020-01-01
Unknown,snicolet,2020-01-23 16:49:10+00:00,"Simplify KPK classify  This is a non-functional simplification. If we use the ""side to move"" of the entry instead of the template; one of the classify methods goes away. Furthermore; I've resolved  the colors in some of the statements (we're already assuming direction using NORTH); and used stm (side to move) instead of ""us;"" since this is much clearer to me.  This is not tested because it is non-functional; only applies building the bitbase and there are no changes to the binary (on my machine).  Closes https://github.com/official-stockfish/Stockfish/pull/2485  No functional change",True,3,2020-01-01
Unknown,snicolet,2020-01-23 16:31:45+00:00,Simplify signature of remove_piece()  This is a non-functional simplification. Instead of passing the piece type for remove_piece; we can rely on the board. The only exception is en-passant which must be explicitly set because the destination square for the capture is not the same as the piece to remove.  Verified also in the Chess960 castling case by running a couple of perft; see the pull request discussion: https://github.com/official-stockfish/Stockfish/pull/2460  STC LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 18624 W: 4147 L: 4070 D: 10407 Ptnml(0-2): 223; 1933; 4945; 1938; 260 http://tests.stockfishchess.org/tests/view/5dfeaa93e70446e17e451163  No functional change,True,3,2020-01-01
snicolet,snicolet,2020-01-23 16:17:26+00:00,Restore development version  No functional change,True,3,2020-01-01
snicolet,snicolet,2020-01-18 00:44:37+00:00,Stockfish 11  Official release version of Stockfish 11.  Bench: 5156767  -----------------------  It is our pleasure to release Stockfish 11 to our fans and supporters.  Downloads are freely available at http://stockfishchess.org/download/  This version 11 of Stockfish is 50 Elo stronger than the last version; and 150 Elo stronger than the version which famously lost a match to AlphaZero two years ago. This makes Stockfish the strongest chess engine running on your smartphone or normal desktop PC; and we estimate that on a modern four cores CPU; Stockfish 11 could give 1:1000 time odds to the human chess champion having classical time control; and be on par with him. More specific data; including nice cumulative curves for the progression of Stockfish strength over the last seven years; can be found on [our progression page][1]; at [Stefan Pohl site][2] or at [NextChessMove][3].  In October 2019 Stockfish has regained its crown in the TCEC competition; beating in the superfinal of season 16 an evolution of the neural-network engine Leela that had won the previous season. This clash of style between an alpha-beta and an neural-network engine produced spectacular chess as always; with Stockfish [emerging victorious this time][0].  Compared to Stockfish 10; we have made hundreds of improvements to the [codebase][4]; from the evaluation function (improvements in king attacks; middlegame/endgame transitions; and many more) to the search algorithm (some innovative coordination methods for the searching threads; better pruning of unsound tactical lines; etc); and fixed a couple of bugs en passant.  Our testing framework [Fishtest][5] has also seen its share of improvements to continue propelling Stockfish forward. Along with a lot of small enhancements; Fishtest has switched to new SPRT bounds to increase the chance of catching Elo gainers; along with a new testing book and the use of pentanomial statistics to be more resource-efficient.  Overall the Stockfish project is an example of open-source at its best; as its buzzing community of programmers sharing ideas and daily reviewing their colleagues' patches proves to be an ideal form to develop innovative ideas for chess programming; while the mathematical accuracy of the testing framework allows us an unparalleled level of quality control for each patch we put in the engine. If you wish; you too can help our ongoing efforts to keep improving it; just [get involved][6] :-)  Stockfish is also special in that every chess fan; even if not a programmer; [can easily help][7] the team to improve the engine by connecting their PC to Fishtest and let it play some games in the background to test new patches. Individual contributions vary from 1 to 32 cores; but this year Bojun Guo made it a little bit special by plugging a whole data center during the whole year: it was a vertiginous experience to see Fishtest spikes with 17466 cores connected playing [25600 games/minute][8]. Thanks Guo!  The Stockfish team  [0]: <http://mytcecexperience.blogspot.com/2019/10/season-16-superfinal-games-91-100.html> [1]: <https://github.com/glinscott/fishtest/wiki/Regression-Tests> [2]: <https://www.sp-cc.de/index.htm> [3]: <https://nextchessmove.com/dev-builds> [4]: <https://github.com/official-stockfish/Stockfish> [5]: <https://tests.stockfishchess.org/tests> [6]: <https://stockfishchess.org/get-involved/> [7]: <https://github.com/glinscott/fishtest/wiki> [8]: <https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/lebEmG5vgng%5B1-25%5D>,True,5,2020-01-01
snicolet,snicolet,2020-01-15 21:25:05+00:00,Update Readme.md for the compiler command  No functional change,True,2,2020-01-01
vondele,snicolet,2020-01-15 10:40:44+00:00,Tweak late move reductions at root  More LMR at root; unless a fail low might happen.  passed STC:  LLR: 2.94 (-2.94;2.94) {-1.00;3.00} Total: 25428 W: 4960 L: 4789 D: 15679 Ptnml(0-2): 424; 2948; 5832; 3045; 460 http://tests.stockfishchess.org/tests/view/5e1c9afed12216a2857e6401  passed LTC:  LLR: 2.94 (-2.94;2.94) {0.00;2.00} Total: 187423 W: 24253 L: 23599 D: 139571 Ptnml(0-2): 1284; 17437; 55536; 18085; 1292 http://tests.stockfishchess.org/tests/view/5e1ceb9975be933c8fe635a3  Closes https://github.com/official-stockfish/Stockfish/pull/2493  Bench: 5156767,True,2,2020-01-01
locutus2,snicolet,2020-01-13 11:09:23+00:00,Tweak reductions for captures/promotions  From the third move reduce captures and promotions more if remaining depth is low.  STC: LLR: 2.94 (-2.94;2.94) {-1.00;3.00} Total: 25218 W: 5008 L: 4837 D: 15373 Ptnml(0-2): 439; 2950; 5717; 3001; 499 http://tests.stockfishchess.org/tests/view/5e1b33abd12216a2857e6359  LTC: LLR: 2.95 (-2.94;2.94) {0.00;2.00} Total: 35491 W: 4760 L: 4524 D: 26207 Ptnml(0-2): 264; 3288; 10413; 3460; 294 http://tests.stockfishchess.org/tests/view/5e1b88d5d12216a2857e6385  Closes https://github.com/official-stockfish/Stockfish/pull/2488  Bench: 4979757,True,0,2020-01-01
Vizvezdenec,snicolet,2020-01-13 10:49:27+00:00,"Tweak futility pruning constants  Based on recent improvement of futility pruning by @locutus2 : we lower the futility margin to apply it for more nodes but as a compensation we also lower the history threshold to apply it to less nodes. Further work in tweaking constants can always be done - numbers are guessed ""by hand"" and are not results of some tuning; maybe there is some more Elo to squeeze from this part of code.  Passed STC LLR: 2.98 (-2.94;2.94) {-1.00;3.00} Total: 15300 W: 3081 L: 2936 D: 9283 Ptnml(0-2): 260; 1816; 3382; 1900; 290 http://tests.stockfishchess.org/tests/view/5e18da3b27dab692fcf9a158  Passed LTC LLR: 2.94 (-2.94;2.94) {0.00;2.00} Total: 108670 W: 14509 L: 14070 D: 80091 Ptnml(0-2): 813; 10259; 31736; 10665; 831 http://tests.stockfishchess.org/tests/view/5e18fc9627dab692fcf9a180  Bench: 4643972",True,0,2020-01-01
Unknown,snicolet,2020-01-13 09:47:14+00:00,Fix previous patch in case of ponder  No functional change,True,0,2020-01-01
Unknown,snicolet,2020-01-12 21:37:24+00:00,Smarter time management near stop limit  This patch makes Stockfish search same depth again if > 60% of optimum time is already used; instead of trying the next iteration. The idea is that the next iteration will generally take about the same amount of time as has already been used in total. When we are likely to begin the last iteration; as judged by total time taken so far > 0.6 * optimum time; searching the last depth again instead of increasing the depth still helps the other threads in lazy SMP and prepares better move ordering for the next moves.  STC : LLR: 2.95 (-2.94;2.94) {-1.00;3.00} Total: 13436 W: 2695 L: 2558 D: 8183 Ptnml(0-2): 222; 1538; 3087; 1611; 253 https://tests.stockfishchess.org/tests/view/5e1618a761fe5f83a67dd964  LTC : LLR: 2.94 (-2.94;2.94) {0.00;2.00} Total: 32160 W: 4261 L: 4047 D: 23852 Ptnml(0-2): 211; 2988; 9448; 3135; 247 https://tests.stockfishchess.org/tests/view/5e162ca061fe5f83a67dd96d  The code was revised as suggested by @vondele for multithreading:  STC (8 threads): LLR: 2.95 (-2.94;2.94) {0.00;2.00} Total: 16640 W: 2049 L: 1885 D: 12706 Ptnml(0-2): 119; 1369; 5158; 1557; 108 https://tests.stockfishchess.org/tests/view/5e19826a2cc590e03c3c2f52  LTC (8 threads): LLR: 2.95 (-2.94;2.94) {-1.00;3.00} Total: 16536 W: 2758 L: 2629 D: 11149 Ptnml(0-2): 182; 1758; 4296; 1802; 224 https://tests.stockfishchess.org/tests/view/5e18b91a27dab692fcf9a140  Thanks to those discussing Stockfish lazy SMP on fishcooking which made me try this; and to @vondele for suggestions and doing related tests.  See full discussion in the pull request thread: https://github.com/official-stockfish/Stockfish/pull/2482  Bench: 4586187,True,6,2020-01-01
snicolet,snicolet,2020-01-12 10:54:15+00:00,Show compiler info at startup  This patch shows a description of the compiler used to compile Stockfish; when starting from the console.  Usage:  ``` ./stockfish compiler ```  Example of output:  ``` Stockfish 120120 64 POPCNT by T. Romstad; M. Costalba; J. Kiiski; G. Linscott  Compiled by clang++ 9.0.0 on Apple  __VERSION__ macro expands to: 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38) ```  No functional change,True,6,2020-01-01
vondele,snicolet,2020-01-10 02:31:44+00:00,Update Elo estimates for terms in search  This updates estimates from 1.5 year ago; and adds missing terms. All estimates from tests run on fishtest at 10+0.1 (STC); 20000 games; error bars +- 3 Elo; see the original message in the pull request for the full list of tests. Noteworthy changes are step 7 (futility pruning) going from ~30 to ~50 Elo and step 13 (pruning at shallow depth) going from ~170 to ~200 Elo.  Full list of tests: https://github.com/official-stockfish/Stockfish/pull/2401  @Rocky640 made the suggestion to look at time control dependence of these terms. I picked two large terms (early futility pruning and singular extension); so with small relative error. It turns out it is actually quite interesting (see figure 1). Contrary to my expectation; the Elo gain for early futility pruning is pretty time control sensitive; while singular extension gain is not.  Figure 1: TC dependence of two search terms ![elo_search_tc]( http://cassio.free.fr/divers/elo_search_tc.png )  Going back to the old measurement of futility pruning (30 Elo vs today 50 Elo); the code is actually identical but the margins have changed. It seems like a nice example of how connected terms in search really are; i.e. the value of early futility pruning increased significantly due to changes elsewhere in search.  No functional change.,True,4,2020-01-01
Unknown,snicolet,2020-01-10 00:58:27+00:00,Rewrite initialization of PseudoMoves  This is a non-functional code style change. I believe master is a bit convoluted here and propose this version for clarity.  No functional change,True,4,2020-01-01
snicolet,snicolet,2020-01-09 20:57:21+00:00,Assorted trivial cleanups January 2020  Assorted trivial cleanups.  No functional change,True,3,2020-01-01
joergoster,snicolet,2020-01-09 18:48:47+00:00,"50-moves rule improvement for transposition table  User ""adentong"" reported recently of a game where Stockfish blundered a game in a tournament because during a search there was an hash-table issue for positions inside the tree very close to the 50-moves draw rule. This is part of a problem which is commonly referred to as the Graph History Interaction (GHI); and is difficult to solve in computer chess because storing the 50-moves counter in the hash-table loses Elo in general.  Links: Issue 2451    : https://github.com/official-stockfish/Stockfish/issues/2451 About the GHI : https://www.chessprogramming.org/Graph_History_Interaction  This patch tries to address the issue in this particular game and similar reported games: it prevents that values from the transposition table are getting used when the 50-move counter is close to reaching 100 (). The idea is that in such cases values from previous searches; with a much lower 50-move count; become less and less reliable.  More precisely; the heuristic we use in this patch is that we don't take the transposition table cutoff  when we have reached a 45-moves limit; but let the search continue doing its job. There is a possible slowdown involved; but it will also help to find either a draw when it thought to be losing; or a way to avoid the draw by 50-move rule. This heuristics probably will not fix all possible cases; but seems to be working reasonably well in practice while not losing too much Elo.  Passed non-regression tests: STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 274452 W: 59700 L: 60075 D: 154677 http://tests.stockfishchess.org/tests/view/5df546116932658fe9b451bf  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 95235 W: 15297 L: 15292 D: 64646 http://tests.stockfishchess.org/tests/view/5df69c926932658fe9b4520e  Closes https://github.com/official-stockfish/Stockfish/pull/2453  Bench: 4586187",True,3,2020-01-01
Rocky640,snicolet,2020-01-09 00:43:47+00:00,Update lists of authors and contributors  Preparing for version 11 of Stockfish: update lists of authors; contributors giving CPU time to the fishtest framework; etc.  No functional change,True,3,2020-01-01
lantonov,snicolet,2020-01-07 10:47:39+00:00,Tuned nullmove search  Tuning was done with Bayesian optimisation and sequential use of gaussian process regressor and gaussian process classifier. The latter is used in lieu of ordinal categorical modelling. Details will be given in Fishcooking forum topic: https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/b3uhBBJcJG4  STC: LLR: 2.96 (-2.94;2.94) {-1.00;3.00} Total: 10248 W: 2361 L: 2233 D: 5654 Ptnml(0-2): 191; 1153; 2303; 1276; 194 http://tests.stockfishchess.org/tests/view/5e0ba4159d3fbe26f672d4e6  LTC: LLR: 2.94 (-2.94;2.94) {0.00;2.00} Total: 16003 W: 2648 L: 2458 D: 10897 Ptnml(0-2): 121; 1595; 4394; 1718; 153 http://tests.stockfishchess.org/tests/view/5e0bb8519d3fbe26f672d4fd  Closes https://github.com/official-stockfish/Stockfish/pull/2468  Bench 4747984,True,1,2020-01-01
Vizvezdenec,snicolet,2020-01-07 10:33:53+00:00,Introduce king infiltration bonus  Add king infiltration bonus to initiative calculation. Idea is somewhat similar to outflanking - endgames are hard to win if each king is on it side of the board. So this adds extra bonus for one of kings crossing the middle line.  STC LLR: 2.94 (-2.94;2.94) {-1.00;3.00} Total: 10533 W: 2372 L: 2242 D: 5919 Ptnml(0-2): 196; 1198; 2352; 1316; 202 http://tests.stockfishchess.org/tests/view/5e0e6fd1e97ea42ea89da9b3  LTC LLR: 2.96 (-2.94;2.94) {0.00;2.00} Total: 15074 W: 2563 L: 2381 D: 10130 Ptnml(0-2): 118; 1500; 4111; 1663; 129 http://tests.stockfishchess.org/tests/view/5e0e857ae97ea42ea89da9cc  Closes https://github.com/official-stockfish/Stockfish/pull/2471  Bench: 5146339,True,1,2020-01-01
locutus2,snicolet,2020-01-07 10:18:50+00:00,Tweak futility pruning  Exclude moves with a good history total from futility pruning. This adds a condition for quiet futility pruning: history total has to be low.  STC: LLR: 2.94 (-2.94;2.94) {-1.00;3.00} Total: 20095 W: 4503 L: 4342 D: 11250 Ptnml(0-2): 362; 2380; 4422; 2486; 388 http://tests.stockfishchess.org/tests/view/5e0d7c5387585b1706b68370  LTC: LLR: 2.94 (-2.94;2.94) {0.00;2.00} Total: 53016 W: 8587 L: 8302 D: 36127 Ptnml(0-2): 353; 5397; 14751; 5545; 423 http://tests.stockfishchess.org/tests/view/5e0e30d062fb773bb7047e95  Closes https://github.com/official-stockfish/Stockfish/pull/2472  Bench: 5215200,True,1,2020-01-01
Rocky640,snicolet,2020-01-07 10:00:54+00:00,Use a faster implementation of Static Exchange Evaluation  SEE (Static Exchange Evaluation) is a critical component; so we might indulge some tricks to make it faster. Another pull request #2469 showed some speedup by removing templates; this version uses Ronald de Man (@syzygy1) SEE implementation which also unrolls the for loop by suppressing the min_attacker() helper function and exits as soon as the last swap is conclusive.  See Ronald de Man version there: https://github.com/syzygy1/Cfish/blob/master/src/position.c  Patch testes against pull request #2469: LLR: 2.95 (-2.94;2.94) {-1.00;3.00} Total: 19365 W: 3771 L: 3634 D: 11960 Ptnml(0-2): 241; 1984; 5099; 2092; 255 http://tests.stockfishchess.org/tests/view/5e10eb135e5436dd91b27ba3  And since we are using new SPRT statistics; and that both pull requests finished with less than 20000 games I also tested against master as a speed-up:  LLR: 2.99 (-2.94;2.94) {-1.00;3.00} Total: 18878 W: 3674 L: 3539 D: 11665 Ptnml(0-2): 193; 1999; 4966; 2019; 250 http://tests.stockfishchess.org/tests/view/5e10febf12ef906c8b388745  Non functional change,True,1,2020-01-01
ppigazzini,snicolet,2020-01-04 20:54:20+00:00,Update Readme.md  Update fishtest server URL; fix a broken wiki link; fix a typo.,True,5,2020-01-01
Unknown,snicolet,2019-12-24 23:12:07+00:00,Tune search constants  STC failed red : LLR: -2.95 (-2.94;2.94) [0.00;3.50] Total: 41667 W: 9094 L: 9138 D: 23435 https://tests.stockfishchess.org/tests/view/5df7bb566932658fe9b45253  LTC failed yellow : LLR: -2.96 (-2.94;2.94) [0.00;3.50] Total: 113667 W: 18330 L: 18196 D: 77141 https://tests.stockfishchess.org/tests/view/5df562386932658fe9b451c7  VLTC turned green : LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 128630 W: 17747 L: 17273 D: 93610 https://tests.stockfishchess.org/tests/view/5df9054dcde01bf360ab78db  Bench 5180012,True,1,2019-12-01
pb00068,pb00068,2019-12-10 07:07:34+00:00,Refine improving-logic  Don't rely on the assumption that we are improving after surviving a check. Instead; compare with the static eval of 2 moves before.  STC https://tests.stockfishchess.org/tests/view/5dedfd7f3cff9a249bb9e44d LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 38859 W: 8621 L: 8397 D: 21841  LTC https://tests.stockfishchess.org/tests/view/5dee1b5a3cff9a249bb9e465 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 51130 W: 8308 L: 7996 D: 34826  Bench: 5371271,True,1,2019-12-01
lantonov,snicolet,2019-12-10 00:10:19+00:00,Tuned razor and futility margins  Tuning was done with Bayesian optimisation with the following parameters: Acquisition function: Expected Improvement alpha: 0.05 xi: 1e-4 TC: 60+0.6 Number of iterations: 100 Initial points: 5 Batch size: 20 games  STC http://tests.stockfishchess.org/tests/view/5dee291e3cff9a249bb9e470 LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 19586 W: 4382 L: 4214 D: 10990  LTC http://tests.stockfishchess.org/tests/view/5dee4e273cff9a249bb9e473 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 38840 W: 6315 L: 6036 D: 26489  Bench: 5033242,True,1,2019-12-01
Unknown,snicolet,2019-12-10 00:04:07+00:00,TrappedRook value and King positional tables  Small tweak to increase the TrappedRook penalty. Nice idea by Alain Savard!  STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 36977 W: 8212 L: 7993 D: 20772 https://tests.stockfishchess.org/tests/view/5dee1c1e3cff9a249bb9e46d  LTC LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 36395 W: 6070 L: 5795 D: 24530 https://tests.stockfishchess.org/tests/view/5dee90153cff9a249bb9e479  Closes https://github.com/official-stockfish/Stockfish/pull/2447  Bench: 5176990  -------------------------  Comments by Alain Savard:  For the record; the idea was to run an experimental tuning with disabled castling in the hope to get more hits on the TrappedRook and the king in the c1- f1-f2-c2 area http://tests.stockfishchess.org/tests/view/5dec57be51219d7befdc76e1  A first interpretation of that tuning was green STC (0; 4) and yellow LTC (0; 4): http://tests.stockfishchess.org/tests/view/5ded04bc51219d7befdc773a http://tests.stockfishchess.org/tests/view/5ded1e7a51219d7befdc7760  Thank you @xoto for trying this. Indeed; because the tuned Kc2 and Kf2 values were quite different; it was a good idea to try something more neutral.,True,1,2019-12-01
Vizvezdenec,snicolet,2019-12-08 23:38:16+00:00,Exclude blockers for king from mobility area  This patch excludes blockers for king from mobility area. It was tried a couple of times by now but now it passed. Performance is not enormously good but this patch makes a lot of sence - blockers for king can't really move until king moves (in most cases) so logic behind it is the same as behind excluding king square from mobility area.  STC http://tests.stockfishchess.org/tests/view/5dec388651219d7befdc76be LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 6155 W: 1428 L: 1300 D: 3427  LTC http://tests.stockfishchess.org/tests/view/5dec4a3151219d7befdc76d3 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 120800 W: 19636 L: 19134 D: 82030  Bench: 5173081,True,6,2019-12-01
Vizvezdenec,snicolet,2019-12-08 23:32:37+00:00,Do last capture extensions for every single node  This patch simplifies latest @MJZ1977 elo gainer. Seems like PvNode check in condition of last capture extension is not needed. Note - even if this is a simplification it actually causes this extension to be applied more often; thus strengthening effect of @MJZ1977's patch.  passed STC http://tests.stockfishchess.org/tests/view/5deb9a3eb7bdefd50db28d0e LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 80244 W: 17421 L: 17414 D: 45409  passed LTC http://tests.stockfishchess.org/tests/view/5deba860b7bdefd50db28d11 LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 21506 W: 3565 L: 3446 D: 14495  Bench: 5097036,True,6,2019-12-01
Unknown,snicolet,2019-12-08 23:27:12+00:00,Simplify pruning moves with negative SEE  This patch simplifies pruning moves with negative SEE values.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 18847 W: 4211 L: 4084 D: 10552 http://tests.stockfishchess.org/tests/view/5de983f2caa7c610e4d1866e  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 25556 W: 4200 L: 4087 D: 17269 http://tests.stockfishchess.org/tests/view/5de99e21caa7c610e4d18676  Bench 5390930,True,6,2019-12-01
joergoster,snicolet,2019-12-08 23:16:55+00:00,Fix output of PV lines with invalid scores #2439  As reported on the forum it is possible; on very rare occasions; that we are trying to print a PV line with an invalid previousScore; although this line has a valid actual score. This patch fixes output of PV lines with invalid scores in a MultiPV search. This is a follow-up patch to 8b15961 and makes the fix finally complete.  The reason is the i <= pvIdx condition which probably is a leftover from the times there was a special root search function. This check is no longer needed today and prevents PV lines past the current one (current pvIdx) to be flagged as updated even though they do have a valid score.  https://github.com/official-stockfish/Stockfish/commit/8b15961349e18a9ba113973c53f53913d0cd0fad https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/PrnoDLvMvro  No functional change.,True,6,2019-12-01
Unknown,snicolet,2019-12-08 23:10:47+00:00,Tweak time management (failing eval)  Adjust fallingEval with score change in last 5 iterations. FallingEval adjusts the time used on a move depending on whether the position score is better or worse than on the previous move. This change adds a dependency on the score change in the last 5 iterations of the current search.  Tests with original code: STC : LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 18728 W: 4170 L: 4005 D: 10553 https://tests.stockfishchess.org/tests/view/5de68a5bb407ee7bfda68a94  LTC : LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 180217 W: 29214 L: 28551 D: 122452 https://tests.stockfishchess.org/tests/view/5de690a4b407ee7bfda68a9a  Revised code using a simple array instead of a deque and different values gave a slightly quicker pass at LTC. The merged patch now uses this:  STC : LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 18616 W: 4114 L: 3950 D: 10552 https://tests.stockfishchess.org/tests/view/5debb790b7bdefd50db28d14  LTC : LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 134151 W: 21729 L: 21191 D: 91231 https://tests.stockfishchess.org/tests/view/5debc13fb7bdefd50db28d19  No functional change,True,6,2019-12-01
vondele,snicolet,2019-12-08 23:05:25+00:00,Remove unneeded & incorrect check.  the removed line is not needed; since with the conditions on SE; eval equals ttValue (except inCheck); which must be larger than beta if the second condition is true.  The removed line is also incorrect as eval might be VALUE_NONE at this location if inCheck. This removal addresses part of https://github.com/official-stockfish/Stockfish/pull/2406#issuecomment-552642608  No functional change.,True,6,2019-12-01
snicolet,snicolet,2019-12-08 23:00:34+00:00,The sudo tag is deprecated in Travis CI  Reported by Christian Clauss. Thanks!  No functional change,True,6,2019-12-01
FauziAkram,snicolet,2019-12-02 23:27:58+00:00,UnblockedStorm tuned  STC http://tests.stockfishchess.org/tests/view/5de155980294ec4750cba9bd LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 60206 W: 13295 L: 12895 D: 34016  LTC http://tests.stockfishchess.org/tests/view/5de22f6f0294ec4750cba9e7 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 182005 W: 29571 L: 28902 D: 123532  VLTC http://tests.stockfishchess.org/tests/view/5de4adca5e868d334be516c1 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 42101 W: 6068 L: 5978 D: 30055  Bench: 5122362,True,0,2019-12-01
Rocky640,snicolet,2019-12-01 18:12:39+00:00,King proximity tweak for passed pawns  Decrease slightly the penalty for opponent king distance to passed pawn. Instead of 5:2 ratio (or 20:8) we now have 19:8  STC http://tests.stockfishchess.org/tests/view/5de281b2727dc1d26718a673 LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 28638 W: 6297 L: 6104 D: 16237  LTC http://tests.stockfishchess.org/tests/view/5de2a2ff727dc1d26718a67b LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 59586 W: 9766 L: 9429 D: 40391  Where to go from here: Further tests will try a similar tweak on the friendly king proximity penalty; because recent experiments indicate that this penalty is quite sensitive; but I wanted to try first on the larger term.  Closes https://github.com/official-stockfish/Stockfish/pull/2435  bench: 5258928  ---------------  Increasing the penalty ratio to 21:8 was neutral. http://tests.stockfishchess.org/tests/view/5de2814d727dc1d26718a671  Decreasing the penalty ratio a bit more to 9:4 seems less promising http://tests.stockfishchess.org/tests/view/5de2f4c2727dc1d26718a691 http://tests.stockfishchess.org/tests/view/5de32ecc727dc1d26718a6b0,True,6,2019-12-01
vondele,snicolet,2019-11-28 09:39:02+00:00,Extend bench to static evaluations  this patch extends bench to print static evaluations.  ./stockfish bench 16 1 1 filename eval  will now print the evaluations for all fens in the file.  This complements the various 'go' flavors for bench and might be useful for debugging and/or tuning.  No functional change.,True,3,2019-11-01
Vizvezdenec,snicolet,2019-11-26 00:28:05+00:00,Simplify king danger  This patch is a cleanup/simplification of king flank defenders patch; removing king flanks attacks linear dependance in kingdanger. Result of experiments with quadratic kingflank defenders scaling. Rebased on the latest master.  passed STC http://tests.stockfishchess.org/tests/view/5ddc2b99e0b4af579302bacf LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 19660 W: 4309 L: 4184 D: 11167  passed LTC http://tests.stockfishchess.org/tests/view/5ddc3168e0b4af579302bade LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 24362 W: 3974 L: 3859 D: 16529  Closes https://github.com/official-stockfish/Stockfish/pull/2428  bench 5742013,True,1,2019-11-01
MJZ1977,snicolet,2019-11-25 23:01:49+00:00,Extend last non-pawn captures  Extend last non-pawn captures at principal variation nodes because they are in general decisive moves with clear endgame result.  STC http://tests.stockfishchess.org/tests/view/5ddafc86e75c0005326d2140 LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 9892 W: 2238 L: 2099 D: 5555  LTC http://tests.stockfishchess.org/tests/view/5ddb0401e75c0005326d2150 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 30369 W: 5013 L: 4756 D: 20600  Closes https://github.com/official-stockfish/Stockfish/pull/2425  Bench: 5059526,True,0,2019-11-01
31m059,snicolet,2019-11-23 23:34:43+00:00,"King danger: retire attacked-by-bishop defense  In a recent commit; ""Introduce king flank defenders;"" a term was introduced by Michael Chaly (@Vizvezdenec) to reduce king danger based on king defenders; i.e.; friendly attacks on our King Flank and Camp. This is a powerful idea and broadly applicable to all of our pieces.  An earlier; but narrower; version of a similar idea was already coded into king danger; with a term reducing king danger simply if we had a bishop and king attacking the same square -- there is also a similar term for knights; but roughly three times larger. I had attempted to tweak this term's coefficient fairly recently; in a series of tests in early September which increased this coefficient.  All failed STC with significantly negative scores.  Now that the king flank defenders term has been introduced; it appears that the bishop-defense term can be simplified away without compensation or significant Elo loss.  Where do we go from here? This PR is a natural follow-up to ""Introduce king flank defenders;"" which proposed simplification with existing and overlapping terms; such as this one.  That PR also mentioned that the coefficient it introduced appeared arbitrary; so perhaps this PR can facilitate a tweak to increase king flank defenders' coefficient.  Additionally; this pull request is extremely similar to https://github.com/official-stockfish/Stockfish/pull/1821; which was (coincidentally) merged a year ago; to the day (November 23; 2018). That patch also simplified away a linear king danger tropism term; which was soon after replaced with a quadratic term by @Vizvezdenec (which would not have passed without the simplification).  @Vizvezdenec; again by coincidence; has recently been trying to implement a quadratic term; this time for defenders rather than attackers.  This history of this evaluation code suggests that this simplification might be enough to help a patch for quadratic king-flank defenders pass.  Bench: 4959670  STC: LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 22209 W: 4920 L: 4800 D: 12489 https://tests.stockfishchess.org/tests/view/5dd444d914339111b9b6bed7  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 152107 W: 24658 L: 24743 D: 102706 https://tests.stockfishchess.org/tests/view/5dd4be31f531e81cf278ea9d  Interesting discussion on Github about this pull request: https://github.com/official-stockfish/Stockfish/pull/2424  ---  This pull request was opened less than one week before the holiday of Thanksgiving here in the United States.  In keeping with the holiday tradition of expressing gratitude; I would like to thank our generous CPU donors; talented forum contributors; innovative developers; speedy fishtest approvers; and especially our hardworking server maintainers (@ppigazzini and @tomtor). Thank you all for a year of great Stockfish progress!",True,5,2019-11-01
SFisGOD,snicolet,2019-11-23 23:23:06+00:00,Simplify endgame factor for opposite colored bishops  Stockfish is continually improving. Patches that gain elo in the past may no longer be needed as stockfish improved elsewhere. This patch removes passed pawns count dependence in opposite colored bishops scale factor. We used the mean of passed count pawns (~1.4) to compensate; and changed the base value from 16 to 22.  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 57879 W: 12657 L: 12607 D: 32615 http://tests.stockfishchess.org/tests/view/5dd1644f42928ff08153dc1e  Passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 121648 W: 19622 L: 19659 D: 82367 http://tests.stockfishchess.org/tests/view/5dd24572ccb823d41d4b47bb  Closes https://github.com/official-stockfish/Stockfish/pull/2419  Bench: 5067864,True,5,2019-11-01
Vizvezdenec,snicolet,2019-11-21 08:52:13+00:00,Do lmr for more captures  Based on machinery introduced by vondele. Logic behind patch if relatively simple - if we reduce less with high hit rate of transposition table somewhat logical is to reduce more with low hit rate. For example enable all captures for LMR.  Threshold 0.375 is arbitrary and can be tweaked :)  STC http://tests.stockfishchess.org/tests/view/5dd4d51df531e81cf278eaac LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 16495 W: 3591 L: 3434 D: 9470  LTC http://tests.stockfishchess.org/tests/view/5dd52265f531e81cf278eace LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 23598 W: 3956 L: 3716 D: 15926  Closes https://github.com/official-stockfish/Stockfish/pull/2420  Bench: 5067870,True,3,2019-11-01
Rocky640,snicolet,2019-11-21 08:32:19+00:00,Outpost Endgame values  Remove the recent rank based Outpost array by using a weighted average value computed using a frequency analysis by rank from a large set of middle game positions.  The higher eg values introduced by the new Outpost array (which were about twice the previous masters) are thus preserved.  STC http://tests.stockfishchess.org/tests/view/5dd05c870ebc5902579e1f7f LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 42466 W: 9232 L: 9151 D: 24083  LTC http://tests.stockfishchess.org/tests/view/5dd146e342928ff08153dab1 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 66968 W: 10921 L: 10873 D: 45174  Closes https://github.com/official-stockfish/Stockfish/pull/2418  Bench: 5103360,True,3,2019-11-01
Vizvezdenec,snicolet,2019-11-19 22:18:14+00:00,Simplify advanced pawn push pruning  This patch simplifies away all conditions related to advanced pawn pushes in shallow depth pruning. Idea is based on fact that in master we have advanced pawn pushes not being pruned what we are only in PV node and when non-pawn material of opponent is > Bishop; so pretty rarely. With this patch we will have all pruning heuristics working for this moves as for every other move.  STC LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 159143 W: 34271 L: 34418 D: 90454 http://tests.stockfishchess.org/tests/view/5dcdb3110ebc5902563249d7  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 63900 W: 10375 L: 10322 D: 43203 http://tests.stockfishchess.org/tests/view/5dd05e820ebc5902579e1fb8  Closes https://github.com/official-stockfish/Stockfish/pull/2416  bench 4897149,True,1,2019-11-01
vondele,snicolet,2019-11-18 08:57:53+00:00,Use exploration rate for reductions  This patch measures how frequently search is exploring new configurations. This is done be computing a running average of ttHit. The ttHitAverage rate is somewhat low (e.g. 30% for startpos) in the normal case; while it can be very high if no progress is made (e.g. 90% for the fortress I used for testing).  This information can be used to influence search. In this patch; by adjusting reductions if the rate > 50%. A first version (using a low ttHitAverageResolution and this 50% threshold) passed  testing:  STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 26425 W: 5837 L: 5650 D: 14938 http://tests.stockfishchess.org/tests/view/5dcede8b0ebc5902563258fa  LTC LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 32313 W: 5392 L: 5128 D: 21793 http://tests.stockfishchess.org/tests/view/5dcefb1f0ebc590256325c0e  However; as discussed in pull request 2414; using a larger ttHitAverageResolution gives a better approximation of the underlying distributions. This needs a slight adjustment for the threshold as the new distributions are shifted a bit compared to the older ones; and this threshold seemingly is sensitive (we used 0.53125 here). https://github.com/official-stockfish/Stockfish/pull/2414  This final version also passed testing; and is used for the patch:  STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 16025 W: 3555 L: 3399 D: 9071 http://tests.stockfishchess.org/tests/view/5dd070b90ebc5902579e20c2  LTC LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 37576 W: 6277 L: 5998 D: 25301 http://tests.stockfishchess.org/tests/view/5dd0f58e6f544e798086f224  Closes https://github.com/official-stockfish/Stockfish/pull/2414  Bench: 4989584,True,0,2019-11-01
Vizvezdenec,snicolet,2019-11-16 16:29:53+00:00,Introduce king flank defenders  This patch implements what we have been trying for quite some time - dependance of kingdanger on balance of attackers and defenders of king flank; to avoid overestimate attacking power if the opponent has enough defenders of king position. We already have some form of it in bishop and knight defenders - this is further work in this direction.  What to do based on this?  1) constant 4 is arbitrary; maybe it is not optimal 2) maybe we can use quadratic formula as in kingflankattack 3) simplification into alrealy existing terms is always a possibility :) 4) overall kingdanger tuning always can be done.  passed STC: http://tests.stockfishchess.org/tests/view/5dcf40560ebc590256325f30 LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 26298 W: 5819 L: 5632 D: 14847  passed LTC: http://tests.stockfishchess.org/tests/view/5dcfa5760ebc590256326464 LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 30600 W: 5042 L: 4784 D: 20774  Closes https://github.com/official-stockfish/Stockfish/pull/2415  Bench: 4496847,True,5,2019-11-01
locutus2,snicolet,2019-11-14 19:26:15+00:00,Prune before extension  Switch execution order in search: do move pruning before extension detection.  STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 5762 W: 1307 L: 1181 D: 3274 http://tests.stockfishchess.org/tests/view/5dcc56e90ebc59025bcbb833  LTC: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 72956 W: 11959 L: 11585 D: 49412 http://tests.stockfishchess.org/tests/view/5dcc62840ebc59025bcbb96f  Closes https://github.com/official-stockfish/Stockfish/pull/2413  Bench: 4532366,True,3,2019-11-01
SFisGOD,snicolet,2019-11-13 10:01:00+00:00,Rank-based outposts  Introduce OutpostRank[RANK_NB] which contains a bonus according to the rank of the outpost. We use it for the primary Outpost bonus. The values are based on the trends of the SPSA tuning run with some manual tweaks.  Passed STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 27454 W: 6059 L: 5869 D: 15526 http://tests.stockfishchess.org/tests/view/5dcadba20ebc590256922f09  Passed LTC: LLR: 2.94 (-2.94;2.94) [0.00;3.50] Total: 57950 W: 9443 L: 9112 D: 39395 http://tests.stockfishchess.org/tests/view/5dcaea880ebc5902569230bc  Bench: 4778405  ----------------------------  The inspiration for this patch came from Stefan Geschwentner's attempt of modifying BishopPawns into a rank-based penalty. Michael Stembera suggested that maybe the S(0; 0) ranks (3rd; 7th and also maybe 8th) can still be tuned. This would expand our definition of Outpost and OutpostRanks would be removed altogether. Special thanks to Mark Tenzer for all the help and excellent suggestions.,True,2,2019-11-01
miguel-l,snicolet,2019-11-12 00:36:06+00:00,Shallow depth pruning on NonPV advanced pawn push  Usually advanced pawn pushes are not considered in shallow depth pruning because it is risky to do so with possible promotions near the horizon. However; this heuristic is not also beneficial on NonPV nodes since we can afford to take slightly more risk on less important nodes.  STC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 54530 W: 11955 L: 11686 D: 30889 http://tests.stockfishchess.org/tests/view/5dc7dda30ebc5902ea57efd0  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 77336 W: 12786 L: 12399 D: 52151 http://tests.stockfishchess.org/tests/view/5dc8050d0ebc5902ea57f491  Closes https://github.com/official-stockfish/Stockfish/pull/2408  Bench: 4422068,True,1,2019-11-01
vondele,snicolet,2019-11-12 00:27:06+00:00,Remove explicit moveCount pruning  The removed lines approximately duplicate equivalent logic in the movePicker. Adjust the futility_move_count to componsate for some difference (the movePicker prunes one iteration of the move loop later).  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 8114 W: 1810 L: 1663 D: 4641 http://tests.stockfishchess.org/tests/view/5dc6afe60ebc5902562bd318  Passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 89956 W: 14473 L: 14460 D: 61023 http://tests.stockfishchess.org/tests/view/5dc6bdcf0ebc5902562bd3c0  Closes https://github.com/official-stockfish/Stockfish/pull/2407  Bench: 4256440  ---------------------  How to continue from there?  It would be interesting to see if we can extract some Elo gain from the new futility_move_count formula; for instance by somehow incorporating the final -1 in the 5 constant; or adding a linear term to the quadratics...  ```    futility_move_count = (5 + depth * depth) * (1 + improving) / 2 - 1 ```,True,1,2019-11-01
Rocky640,snicolet,2019-11-12 00:18:54+00:00,"Sequencing tweak in tbprobe()  Followup of ""issue"" #2372; which was in fact a small speed-up proposal by user @d3vv for the probing code of tablebases.  See comments on this issue where it was proven by Alin Savard that the proposed change is more efficient on average than master on all type of sequences it will usually be called.  Note that on gcc 4.3; this will produce a bogus warning which was solved with ulterior gcc versions: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=43949  Closes https://github.com/official-stockfish/Stockfish/issues/2372 Closes https://github.com/official-stockfish/Stockfish/pull/2379  Non functional change",True,1,2019-11-01
vondele,snicolet,2019-11-12 00:09:57+00:00,Fix incorrect mate score.  Current master 648c7ec25db2040c0af34dd846dfa3f57af5ad0a will generate an incorrect mate score for:  ``` setoption name Hash value 8 setoption name Threads value 1 position fen 8/1p2KP2/1p4q1/1Pp5/2P5/N1Pp1k2/3P4/1N6 b - - 76 40 go depth 49 ``` even though the position is a draw. Generally; SF tries to display only proven mate scores; so this is a bug.  This was posted http://www.talkchess.com/forum3/viewtopic.php?f=2&t=72166 by Uri Blass; with the correct analysis that this must be related to the 50 moves draw rule being ignored somewhere.  Indeed; this is possible as positions and there eval are stored in the TT; without reference to the 50mr counter. Depending on the search path followed a position can thus be mate or draw in the TT (GHI or Graph history interaction). Therefore; to prove mate lines; the TT content has to be used with care. Rather than ignoring TT content in general or for mate scores (which impact search or mate finding); it is possible to be more selective. In particular; @WOnder93 suggested to only ignore the TT if the 50mr draw ply is closer than the mate ply. This patch implements this idea; by clamping the eval in the TT to +-VALUE_MATED_IN_MAX_PLY. This retains the TTmove; but causes a research of these lines (with the current 50mr counter) as needed.  This patch hardly ever affects search (as indicated by the unchanged bench); but fixes the testcase. As the conditions are very specific; also mate finding will almost never be less efficient (testing welcome).  It was also shown to pass STC and LTC non-regression testing; in a form using if/then/else instead of ternary operators:  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 93605 W: 15346 L: 15340 D: 62919 http://tests.stockfishchess.org/tests/view/5db45bb00ebc5908127538d4  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 33873 W: 7359 L: 7261 D: 19253 http://tests.stockfishchess.org/tests/view/5db4c8940ebc5902d6b146fc  closes https://github.com/official-stockfish/Stockfish/issues/2370  Bench: 4362323,True,1,2019-11-01
snicolet,snicolet,2019-11-06 10:07:38+00:00,"Revert ""Rook PSQT Tuned""  This reverts the previous commit. The PSQT changes in this previous commit originated from tests against quite an old version of master which did not include the other PSQT changes of 474d133 for the other pieces; and there might be some unknown interactions between the PSQT tables. So we made a non-regression test of the last commit against the last-but-one commit. This test failed; leading to the revert decision.  Failed non-regression test: LLR: -2.96 (-2.94;2.94) [-3.00;1.00] Total: 95536 W: 15047 L: 15347 D: 65142 http://tests.stockfishchess.org/tests/view/5dc0ba1d0ebc5904493b0112  Closes https://github.com/official-stockfish/Stockfish/pull/2395  Bench: 4362323",True,2,2019-11-01
SFisGOD,snicolet,2019-11-04 23:15:23+00:00,Rook PSQT Tuned  This patch uses about half the changes of the SPSA tuning run: http://tests.stockfishchess.org/tests/view/5dba93d30ebc5925b64ed3bf  About a month ago; xoto10's patch raised the mg value of the third rank center files from -1 to 7 to encourage rook lifts to the third rank. About three days later; Rocky's patch lowered this value from 7 to 3. This patch raises that again from 3 to 12 and ends up greater than the original rook lift patch.  Passed STC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 104094 W: 22573 L: 22161 D: 59360 http://tests.stockfishchess.org/tests/view/5dbc77f20ebc5925b64ef1d0  Passed LTC: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 168291 W: 27410 L: 26777 D: 114104 http://tests.stockfishchess.org/tests/view/5dbd9f1e0ebc5925b64f0647  Bench: 4707799,True,0,2019-11-01
MichaelB7,snicolet,2019-11-04 23:01:49+00:00,Remove shuffle extension  It was noted in an earlier patch that all of the positions below needed the Shuffle Detection idea to be solved:  3r4/p3r1pk/PpBb1pRp/1KpPpP1P/2P1P1R1/8/8/8 b - - 32 86 8/8/8/1k6/2p5/p1K5/N2B2r1/8 b - - 59 109 1r4k1/1r1bq3/4p1p1/3pPpPp/pNpN1P1P/P1PnQ3/1PK5/1R3R2 b - - 13 82 5k2/3b4/5p2/p1p1pPp1/PpPpP1Pp/1P1P3P/8/3R1K2 w - - 20 1  But Stockfish has envolved a bit since the Shuffle Detection patch introduction; and this patch proves Stockfish is able to solves these drawn positions without it; even on single core without EGTB.  Passed STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 14231 W: 3114 L: 2978 D: 8139 http://tests.stockfishchess.org/tests/view/5dbe1a610ebc5925b64f09d9  Passed LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 42781 W: 6917 L: 6831 D: 29033 http://tests.stockfishchess.org/tests/view/5dbe24c20ebc5925b64f0a7a  Passed VLTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32556 W: 4573 L: 4469 D: 23514 http://tests.stockfishchess.org/tests/view/5dbec3830ebc5925b64f11aa  Closes https://github.com/official-stockfish/Stockfish/pull/2394  Bench: 4362323  ----------------------------  Example of search by Michael Byrne for the FEN position: q1B5/1P1q4/8/8/8/6R1/8/1K1k4 w - - 0 1  This position is win for white and the only moves that wins is Rg1 - all other moves either draw or lose. With single core and 1024M hash; it is solved without shuffle detection in 38 seconds on my machine (with no EGTB). This was the position that was locked in a loop in the initial shuffle detection patch!  ``` dep	score	nodes	time	(not shown:  tbhits	knps	seldep)  50	+1.71 	298.9M	2:43.63	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kd4 Rb5 Kc4 Be2+ Kc3 Rb6 Kd4 Bf3 Ke5 Kb2 Kf4 Bd1 Qe5+ Kb1 Qe4+ Ka2 Qd5+ Rb3 Qd2+ Ka3 Qc1+ Kb4 Qc7 Ka4 Qb8 Rb6 Ke5 Kb3 Qg8+ Kb4 Qf8+ Ka5 Qb8 Bb3 Kd4 Kb4 Qf8+ Ka4 Qb8 Ka5 K <snip>  49	+1.68 	288.5M	2:38.35	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kd4 Rb5 Kc4 Be2+ Kc3 Rb6 Kd4 Bf3 Ke5 Kb2 Kf4 Bd1 Qe5+ Kb1 Qe4+ Ka2 Qd5+ Rb3 Qd2+ Ka3 Qc1+ Kb4 Qc7 Ka4 Qb8 Rb6 Ke5 Kb3 Qg8+ Kb4 Qf8+ Ka5 Qb8 Bb3 Kd4 Kb4 Ke3 Be6 Ke4 Bc4 Ke <snip>  48	+1.78 	228.5M	2:01.93	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kd4 Rb5 Kc4 Be2+ Kc3 Rb6 Kd4 Bf3 Ke5 Kb2 Kf4 Bd1 Qe5+ Kb1 Qe4+ Ka2 Qd5+ Rb3 Qd2+ Ka3 Qa5+ Kb2 Qe5+ Ka2 Qb8 Rb5 Ke3 Kb1 Ke4 Bb3 Kf4 Be6 Ke3 Rb4 Kd3 Kb2 Ke3 Bd5 Qe5+ Kc2 Qh <snip>  46	+1.49 	198.4M	1:44.89	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kd4 Rb5 Kc4 Be2+ Kc3 Rb6 Kd4 Bf3 Ke5 Kb2 Kf4 Bd1 Qe5+ Kb1 Qe4+ Ka2 Qd5+ Rb3 Qd2+ Ka3 Qc1+ Kb4 Qc7 Ka4 Qb8 Rb6 Qe8+ Rb5 Qb8 Bc2 Qa7+ Kb3 Qe3+ Kc4 Qe6+ Kb4 Qd6+ Kb3 Qb8 Rb4 <snip>  45	+1.45 	154.5M	1:20.75	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kd4 Rb5 Kc4 Be2+ Kc3 Rb6 Kd4 Bf3 Ke3 Bg2 Kd4 Rb5 Kc4 Bf1+ Kd4 Kb2 Qh2+ Kb3 Qg3+ Ka4 Qb8 Be2 Ke3 Bc4 Kf4 Kb4 Qd6+ Kc3 Qb8 Kc2 Ke4 Be6 Qh2+ Kb3 Qg3+ Ka4 Qb8 Bb3 Kd4 Bd5 Ke3 <snip>  44	+1.36 	141.9M	1:14.40	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Qd6 Rc2+ Kd3 Be2+ Ke3 Rb2 Qb8 Bd1 Ke4 Rb5 Kd4 Bf3 Kc4 Be2+ Kc3 Rb6 Kd2 Bc4 Kc3 Bd5 Kd4 Bg2 Ke5 Kb2 Kd4 Rb5 Kc4 Bf1+ Kd4 Be2 Ke4 Bc4 Qh2+ Kb3 Qg3+ Ka4 Qb8 Bd5+ Kd4 Be6 Ke4 <snip>  43	+1.36 	134.1M	1:10.46	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Qd6 Rc2+ Kd3 Be2+ Ke3 Rb2 Qb8 Bd1 Ke4 Rb5 Kd4 Bf3 Kc4 Be2+ Kc3 Rb6 Kd2 Bc4 Kc3 Be6 Kd4 Rb5 Kc3 Bf7 Kd4 Kb2 Ke4 Kb3 Kf4 Kc3 Ke4 Kb2 Qh2+ Kb3 Qg3+ Ka4 Qb8 Rb4+ Ke5 Rb6 Kf4 <snip>  42	+1.36 	118.7M	1:01.60	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Qd6 Rc2+ Kd3 Be2+ Ke3 Rb2 Qb8 Bd1 Ke4 Rb5 Kd4 Bf3 Kc4 Be2+ Kc3 Rb6 Kd2 Bc4 Kc3 Be6 Kd4 Rb5 Kc3 Bf7 Kd4 Kb2 Ke4 Bc4 Qh2+ Kb3 Qg3+ Ka4 Qb8 Bd5+ Kd4 Bb3 Qa7+ Kb4 Qb8 Bc4 Ke4 <snip>  41	+1.38 	110.3M	0:56.80	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Qd6 Rc2+ Kd3 Be2+ Ke3 Rb2 Qb8 Bd1 Ke4 Rb5 Kd4 Bf3 Kc4 Be2+ Kc3 Rb6 Kd2 Bc4 Kc3 Be6 Kd4 Rb5 Kc3 Bd5 Kd4 Ba2 Ke4 Be6 Kd4 Kb2 Qh2+ Kb3 Qb8 Bc4 Ke3 Kc3 Qh8+ Kb4 Qb2+ Ka4 Qa1+  <snip>  39	+1.25 	87.3M  	0:44.48	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kd4 Rb5 Kc4 Be2+ Kc3 Rb6 Kd4 Bf3 Ke5 Kb2 Kf4 Bd1 Kg5 Kb1 Kf5 Bb3 Ke5 Kb2 Kd4 Rb5 Qh2+ Bc2 Qb8 Bd1 Kc4 Be2+ Kd4 Kc2 Ke3 Bd1 Kd4 Kb3 Qg3+ Ka4 Qb8 Bb3 Kc3 Rb6 Kd4 Kb5 Ke5 K  38	+1.25 	82.0M  	0:41.90	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kd4 Rb5 Kc4 Be2+ Kc3 Rb6 Kd4 Bf3 Ke5 Kb2 Kf4 Bd1 Kg5 Kb1 Kf5 Bb3 Ke5 Kb2 Kd4 Rb5 Qh2+ Bc2 Qb8 Kb3 Qg3+ Ka4 Qb8 Bb3 Kc3 Rb6 Kd4 Kb5 Ke5 Kb4 Kd4 Be6 Kd3 Bd5 Kd4 Bf3 Ke5 Be <snip>  37	+0.13 	79.3M  	0:40.44	Rg1+ Kd2 Rg2+ Kc3 Rc2+ Kb3 Rb2+ Kc3 Bxd7 Qf8 Ba4 Qb8 Bd1 Kc4 Bf3 Kd4 Rb5 Kc4 Rb6 Kd4 Rb2 Ke5 Rb3 Kd6 Rb5 Ke6 Rb4 Kd6 Kc2 Kc5 Kb3 Kd6 Be4 Ke7 Kc3 Qc7+ Kd3 Qg3+ Kc2 Qf2+ Kb3 Qe3+ Ka2 Qa7+ Kb2 Qb8 Kb3 Kd6 Bf3 Qg8+ Ka3 Kc7 b8=R Qx  37	+0.67!	78.3M  	0:39.90	Rg1+!  37	+0.47!	77.0M  	0:39.18	Rg1+!  37	+0.32!	76.8M  	0:39.11	Rg1+!  37	+0.23!	76.8M  	0:39.07	Rg1+!  36	+0.57!	76.1M  	0:38.72	Rg1+!  36	+0.37!	75.8M  	0:38.59	Rg1+!  36	+0.23!	75.7M  	0:38.51	Rg1+!  36	+0.13!	75.6M  	0:38.49	Rg1+!  35	+0.03?	58.0M  	0:29.84	bxa8=Q Qb5+? ```,True,0,2019-11-01
31m059,snicolet,2019-11-04 22:50:14+00:00,"Make Square and Bitboard operators commutative  As Stockfish developers; we aim to make our code as legible and as close to simple English as possible. However; one of the more notable exceptions to this rule concerns operations between Squares and Bitboards.  Prior to this pull request; AND; OR; and XOR were only defined when the Bitboard was the first operand; and the Square the second. For example; for a Bitboard b and Square s; ""b & s"" would be valid but ""s & b"" would not. This conflicts with natural reasoning about logical operators; both mathematically and intuitively; which says that logical operators should commute.  More dangerously; however; both Square and Bitboard are defined as integers ""under the hood."" As a result; code like ""s & b"" would still compile and give reasonable bench values. This trap occasionally ensnares even experienced Stockfish developers; but it is especially dangerous for new developers not aware of this peculiarity. Because there is no compilation or runtime error; and a reasonable bench; only a close review by approvers can spot this error when a test has been submitted--and many times; these bugs have slipped past review. This is by far the most common logical error on Fishtest; and has wasted uncountable STC games over the years.  However; it can be fixed by adding three non-functional lines of code. In this patch; we define the operators when the operands are provided in the opposite order; i.e.; we make AND; OR; and XOR commutative for Bitboards and Squares. Because these are inline methods and implemented identically; the executable does not change at all.  This patch has the small side-effect of requiring Squares to be explicitly cast to integers before AND; OR; or XOR with integers. This is only performed twice in Stockfish's source code; and again does not change the executable at all (since Square is an enum defined as an integer anyway).  For demonstration purposes; this pull request also inverts the order of one AND and one OR; to show that neither the bench nor the executable change. (This change can be removed before merging; if preferred.)  I hope that this pull request significantly lowers the barrier-of-entry for new developer to join the Stockfish project. I also hope that this change will improve our efficiency in using our generous CPU donors' machines; since it will remove one of the most common causes of buggy tests.  Following helpful review and comments by Michael Stembera (@mstembera); we add a further clean-up by implementing OR for two Squares; to anticipate additional traps developers may encounter and handle them cleanly.  Closes https://github.com/official-stockfish/Stockfish/pull/2387  No functional change.",True,0,2019-11-01
SFisGOD,snicolet,2019-11-02 20:19:35+00:00,Combo of Parameter Tweaks  This patch is a combo of the following tweaks:  Complexity parameters Knight PSQT Bishop PSQT King PSQT Piece Values  Passed STC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 56527 W: 12326 L: 12052 D: 32149 http://tests.stockfishchess.org/tests/view/5dbbca3f0ebc5925b64ee6d6  Passed LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 64010 W: 10549 L: 10199 D: 43262 http://tests.stockfishchess.org/tests/view/5dbc30dc0ebc5925b64eee0c  Closes https://github.com/official-stockfish/Stockfish/pull/2390  Bench: 4312945,True,5,2019-11-01
Unknown,snicolet,2019-10-31 16:47:23+00:00,Simplify kingRing  Simplify the king ring initialization and make it more regular; by just moving the king square off the edges and using PseudoAttacks by king from this new square.  There is a small functional difference from the previous master; as the old master excludes the original ksq square while this patch always includes the nine squares block (after moving the king from the edges). Additionally; master does not adjust the kingRing down if we are on relative rank 8; while this patch treats all of the edges the same.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 13263 W: 2968 L: 2830 D: 7465 http://tests.stockfishchess.org/tests/view/5db872830ebc5902d1f388aa  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 72996 W: 11819 L: 11780 D: 49397 http://tests.stockfishchess.org/tests/view/5db899c20ebc5902d1f38b5e  Closes https://github.com/official-stockfish/Stockfish/pull/2384  Bench: 4959244,True,3,2019-10-01
Unknown,snicolet,2019-10-31 16:22:09+00:00,Consolidate pawn_push and up  This is a non-functional simplification. Pawn_push and Up are redundant. If we make up pawn_push; we can use it for all of the Up's and Down's. In this version; I've also left the Up and Down constants so that there is no worse readability.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 23878 W: 5202 L: 5085 D: 13591 http://tests.stockfishchess.org/tests/view/5db5569a0ebc5902d6b14de4  Closes https://github.com/official-stockfish/Stockfish/pull/2378  No functional change,True,3,2019-10-01
locutus2,snicolet,2019-10-31 16:05:29+00:00,Tweak dynamic contempt (the birthday patch)  Make dynamic contempt weight factor dependent on static contempt so that higher static contempt implies less dynamic contempt and vice versa. For default contempt 24 this is a non-functional change. But tests with contempt 0 shows an elo gain. Also today is my birthday so i have already give to myself a gift with this patch :-)!  Further proceedings:  in the past we checked for default contempt that it doesn't regress against contempt 0. Now that the later is stronger and the former is the same strength this should be rechecked. Perhaps the default contempt have to be lowered. It would be interesting to get some idea of the impact of this patch outside of the 0-24 contempt range.  STC: (both with contempt=0) LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 21912 W: 3898 L: 3740 D: 14274 http://tests.stockfishchess.org/tests/view/5db74b6f0ebc5902d1f37405  LTC: (both with contempt=0) LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 27172 W: 3350 L: 3126 D: 20696 http://tests.stockfishchess.org/tests/view/5db760020ebc5902d1f375d0  Closes https://github.com/official-stockfish/Stockfish/pull/2382  No functional change (for current default contempt 24).,True,3,2019-10-01
vondele,snicolet,2019-10-25 23:10:55+00:00,Refactor final stats updates.  This PR refactors update_quiet_stats; update_capture_stats and search to more clearly reflect what is actually done.  Effectively; all stat updates that need to be done after search is finished and a bestmove is found; are collected in a new function ```final_stats_update()```. This shortens our main search routine; and simplifies ```update_quiet_stats```. The latter function is now more easily reusable with fewer arguments; as the handling of ```quietsSearched``` is only needed in ```final_stats_update```. ```update_capture_stats```; which was only called once is now integrated in ```final_stats_update```; which allows for removing a branch and reusing some ```stat_bonus``` calls. The need for refactoring was also suggested by the fact that the comments of ```update_quiet_stats``` and ```update_capture_stats``` were incorrect (e.g. ```update_capture_stats``` was called; correctly; also when the bestmove was a quiet and not a capture).  passed non-regression STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 75196 W: 16364 L: 16347 D: 42485 http://tests.stockfishchess.org/tests/view/5db004ec0ebc5902c06db9e1  The diff is most easily readable as ```git diff master --patience```  No functional change,True,4,2019-10-01
snicolet,snicolet,2019-10-25 22:29:12+00:00,Assorted trivial cleanups  - Cleanups by Alain - Group king attacks and king defenses - Signature of futility_move_count() - Use is_discovery_check_on_king() - Simplify backward definition - Use static asserts in move generator - Factor a statement in move generator  No functional change,True,4,2019-10-01
vondele,snicolet,2019-10-23 08:49:08+00:00,Simplify reductions on singular extension  Current master employs a scheme to adjust reductions on singular nodes that is somewhat controversial; see https://github.com/official-stockfish/Stockfish/pull/2167  This patch removes this use of a search result outside of [a;b]; by observing that the main effect of this code is to adjust the reduction by an average of ~2 (1.7) rather than 1.  Claims the first blue at STC and LTC:  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 30142 W: 6547 L: 6442 D: 17153 http://tests.stockfishchess.org/tests/view/5daf16c40ebc5902c06da566  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 45715 W: 7380 L: 7298 D: 31037 http://tests.stockfishchess.org/tests/view/5daf2f3c0ebc5902c06da6c7  Closes https://github.com/official-stockfish/Stockfish/pull/2367  Bench: 5115841,True,2,2019-10-01
vondele,snicolet,2019-10-21 22:02:46+00:00,Avoid crashing on Log File opening  Stockfish crashes immediately if users enter a wrong file name (or even an existing folder name) for debug log file. It may be hard for users to find out since it prints nothing. If they enter the string via a chess GUI; the chess GUI may remember and auto-send to Stockfish next time; makes Stockfish crashes all the time. Bug report by Nguyen Hong Pham in this issue: https://github.com/official-stockfish/Stockfish/issues/2365  This patch avoids the crash and instead prefers to exit gracefully with a error message on std:cerr; like we do with the fenFile for instance.  Closes https://github.com/official-stockfish/Stockfish/pull/2366  No functional change.,True,0,2019-10-01
Unknown,snicolet,2019-10-19 22:27:17+00:00,Remove uithread  With the current questions and issues around threading; I had a look at https://github.com/official-stockfish/Stockfish/issues/2299.  It seems there was a problem with data races when requesting eval via UCI while a search was already running. To fix this an extra thread uithread was created; presumably to avoid an overlap with Threads.main() that was causing problems. Making this eval request seems to be outside the scope of UCI; and @vondele also reports that the data race is not even fixed reliably by this change. I suggest we simplify the threading here by removing this uithread and adding a comment signaling that user should not request eval when a search is already running.  Closes https://github.com/official-stockfish/Stockfish/pull/2310  No functional change.,True,5,2019-10-01
VoyagerOne,snicolet,2019-10-18 15:05:23+00:00,Current capture for Counter-Move history  Use current capture to index the CMH table instead of prior capture.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 61908 W: 13626 L: 13220 D: 35062 http://tests.stockfishchess.org/tests/view/5da8aa670ebc597ba8eda558  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 49057 W: 8071 L: 7765 D: 33221 http://tests.stockfishchess.org/tests/view/5da8e99d0ebc597ba8eda9ca  Closes https://github.com/official-stockfish/Stockfish/pull/2362  Bench: 4423737,True,4,2019-10-01
vondele,snicolet,2019-10-17 13:03:30+00:00,Add four positions to bench  The current bench is missing a position with high 50 moves rule counter; making most 'shuffle' tests based on 50mr > N seem non-functional. This patch adds one FEN with high 50mr counter to address this issue (taken from a recent tcec game).  Four new FENs: - position with high 50mr counter - tactical position with many captures; checks; extensions; fails high/low - two losses by Stockfish in the S16 bonus games against Houdini  See the pull request for nice comments by @Alayan-stk-2 about each position in bench: https://github.com/official-stockfish/Stockfish/pull/2338  Bench: 4590210,True,3,2019-10-01
VoyagerOne,snicolet,2019-10-09 06:22:16+00:00,Introduce separate counter-move tables for inCheck  Enhance counter-move history table by adding a inCheck dimension. This doubles the size of the table but provides more accurate move ordering.  STC: (yellow) LLR: -2.94 (-2.94;2.94) [0.50;4.50] Total: 36217 W: 7790 L: 7777 D: 20650 http://tests.stockfishchess.org/tests/view/5d9b9a290ebc5902b6d04fe0  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 36665 W: 6063 L: 5788 D: 24814 http://tests.stockfishchess.org/tests/view/5d9b9fcc0ebc5902b6d05985  Closes https://github.com/official-stockfish/Stockfish/pull/2353  Bench: 4053577,True,2,2019-10-01
31m059,snicolet,2019-10-09 05:17:52+00:00,"No reachable outpost bonus for bishops  Previously; we used various control statements and ternary operators to divide Outpost into four bonuses; based on whether the outpost was for a knight or bishop; and whether it was currently an Outpost or merely a potential (""reachable"") one in the future. Bishop outposts; however; have traditionally been worth far less Elo in testing. An attempt to remove them altogether passed STC; but failed LTC.  Here we include a narrower simplification; removing the reachable Outpost bonus for bishops. This bonus was always suspect; given that its current implementation conflicts directly with BishopPawns. BishopPawns penalizes our bishops based on the number of friendly pawns on the same color of square; but by definition; Outposts must be pawn-protected! This PR helps to alleviate this conceptual contradiction without loss of Elo and with slightly simpler code.  On a code level; this allows us to simplify a ternary operator into the previous ""if"" block and distribute a multiplication into an existing constant Score. On a conceptual level; we retire one of the four traditional Outpost bonuses.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 22277 W: 4882 L: 4762 D: 12633 http://tests.stockfishchess.org/tests/view/5d9aeed60ebc5902b6cf9751  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 51206 W: 8353 L: 8280 D: 34573 http://tests.stockfishchess.org/tests/view/5d9af1940ebc5902b6cf9cd5  Closes https://github.com/official-stockfish/Stockfish/pull/2352  Bench: 3941591",True,2,2019-10-01
Alayan-stk-2,snicolet,2019-10-07 20:30:04+00:00,Adjust aspiration window with eval  This patch changes the base aspiration window size depending on the absolute value of the previous iteration score; increasing it away from zero. This stems from the observation that the further away from zero; the more likely the  evaluation is to change significantly with more depth. Conversely; a tighter aspiration window is more efficient when close to zero.  A beneficial side-effect is that analysis of won positions without a quick mate is less prone to waste nodes in repeated fail-high that change the eval by tiny steps.  STC: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 60102 W: 13327 L: 12868 D: 33907 http://tests.stockfishchess.org/tests/view/5d9a70d40ebc5902b6cf39ba  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 155553 W: 25745 L: 25141 D: 104667 http://tests.stockfishchess.org/tests/view/5d9a7ca30ebc5902b6cf4028  Future work : the values used in this patch were only a reasonable guess. Further testing should unveil more optimal values. However; the aspiration window is rather tight with a minimum of 21 internal units; so discrete integers put a practical limitation to such tweaking.  More exotic experiments around the aspiration window parameters could also be tried; but efficient conditions to adjust the base aspiration window size or allow it to not be centered on the current evaluation are not obvious.  The aspiration window increases after a fail-high or a fail-low is another avenue to explore for potential enhancements.  Bench: 4043748,True,0,2019-10-01
SFisGOD,snicolet,2019-10-07 09:14:33+00:00,Tweak kingFlankAttacks factor in kingDanger  Increase kingFlankAttacks factor in kingDanger from 5/16 to 6/16.  Failed STC: LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 77947 W: 16989 L: 16848 D: 44110 http://tests.stockfishchess.org/tests/view/5d9ac0280ebc5902b6cf63cd  Passed LTC 1: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 13443 W: 2231 L: 2037 D: 9175 http://tests.stockfishchess.org/tests/view/5d9ac88d0ebc5902b6cf6ffb  Passed LTC 2: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 23340 W: 3842 L: 3617 D: 15881 http://tests.stockfishchess.org/tests/view/5d9acf7f0ebc5902b6cf7c27  Closes https://github.com/official-stockfish/Stockfish/pull/2349  Bench: 4042155,True,0,2019-10-01
Rocky640,snicolet,2019-10-06 22:50:54+00:00,"Adjust pawn span  Run as a simplification  a) insures that pawn attacks are always included in the pawn span   (this ""fixes"" the case where some outpost or reachable outpost   bonus were awarded on squares controlled by enemy pawns).  b) compute the full span only if not ""backward"" or not ""blocked"".  By looking at ""blocked"" instead of ""opposed""; we get a nice simpli- fication and the ""new"" outpost detection is almost identical; except a few borderline cases on rank 4.  passed STC http://tests.stockfishchess.org/tests/view/5d9950730ebc5902b6cefb90 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 79113 W: 17168 L: 17159 D: 44786  passed LTC http://tests.stockfishchess.org/tests/view/5d99d14e0ebc5902b6cf0692 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41286 W: 6819 L: 6731 D: 27736  See https://github.com/official-stockfish/Stockfish/pull/2348  bench: 3812891",True,6,2019-10-01
WOnder93,snicolet,2019-10-06 21:05:30+00:00,Make priorCapture a bool  It is always used as a bool; so let's make it a bool straight away. We can always redefine it as a Piece in a later patch if we want to use the piece type or the piece color.  No functional change.,True,6,2019-10-01
VoyagerOne,snicolet,2019-10-06 00:04:19+00:00,Introduce separate counter-move tables for captures  Enhance counter-move history table by adding a capture/no-capture dimension; depending wether the previous move was a quiet move or a capture. This doubles the size of the table but provides more accurate move ordering.  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 79702 W: 17720 L: 17164 D: 44818 http://tests.stockfishchess.org/tests/view/5d97945e0ebc590c21aa724b  LTC: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 29147 W: 4907 L: 4651 D: 19589 http://tests.stockfishchess.org/tests/view/5d97ccb90ebc590c21aa7bc0  Closes https://github.com/official-stockfish/Stockfish/pull/2344  Bench: 4131643,True,6,2019-10-01
briansheppard-toast,snicolet,2019-10-05 22:57:00+00:00,Eliminate ONE_PLY  Simplification that eliminates ONE_PLY; based on a suggestion in the forum that support for fractional plies has never been used; and @mcostalba's openness to the idea of eliminating it. We lose a little bit of type safety by making Depth an integer; but in return we simplify the code in search.cpp quite significantly.  No functional change  ------------------------------------------  The argument favoring eliminating ONE_PLY:  * The term �ONE_PLY� comes up in a lot of forum posts (474 to date) https://groups.google.com/forum/?fromgroups=#!searchin/fishcooking/ONE_PLY%7Csort:relevance  * There is occasionally a commit that breaks invariance of the code with respect to ONE_PLY https://groups.google.com/forum/?fromgroups=#!searchin/fishcooking/ONE_PLY%7Csort:date/fishcooking/ZIPdYj6k0fk/KdNGcPWeBgAJ  * To prevent such commits; there is a Travis CI hack that doubles ONE_PLY and rechecks bench  * Sustaining ONE_PLY has; alas; not resulted in any improvements to the   engine; despite many individuals testing many experiments over 5 years.  The strongest argument in favor of preserving ONE_PLY comes from @locutus: �If we use par example ONE_PLY=256 the parameter space is increases by the factor 256. So it seems very unlikely that the optimal setting is in the subspace of ONE_PLY=1.�  There is a strong theoretical impediment to fractional depth systems: the transposition table uses depth to determine when a stored result is good enough to supply an answer for a current search. If you have fractional depths; then different pathways to the position can be at fractionally different depths.  In the end; there are three separate times when a proposal to remove ONE_PLY was defeated by the suggestion to �give it a few more months.� So� it seems like time to remove this distraction from the community.  See the pull request here: https://github.com/official-stockfish/Stockfish/pull/2289,True,5,2019-10-01
snicolet,snicolet,2019-10-05 09:15:24+00:00,Fix compare function in previous patch  Bench: 4012371,True,5,2019-10-01
Unknown,snicolet,2019-10-05 08:45:37+00:00,Remove temporary shelter array  Remove temporary array of shelters and avoid iterating over it each time to find if the shelter values after castling are better than the current value. Work done on top of https://github.com/official-stockfish/Stockfish/pull/2277  Speed benchmark did not measure any difference.  No functional change,True,5,2019-10-01
MJZ1977,snicolet,2019-10-02 11:37:00+00:00,More accurate pawn attack span definition  Tweak the pawn attack span for backward pawns and the zone behind opponent opposing pawns. This is important in positional play and one of weaknesses of the engine in recent high level games.  STC LLR: -2.95 (-2.94;2.94) [0.50;4.50] Total: 66843 W: 14884 L: 14717 D: 37242 http://tests.stockfishchess.org/tests/view/5d8dcb1b0ebc590f3beb2956  LTC LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 77699 W: 12993 L: 12602 D: 52104 http://tests.stockfishchess.org/tests/view/5d8de9bc0ebc590f3beb3d00  See discussion in https://github.com/official-stockfish/Stockfish/pull/2332  Bench: 4012371,True,2,2019-10-01
vondele,snicolet,2019-10-01 23:43:02+00:00,Adjust reductions based on the number of threads  In lazySMP it makes sense to prune a little more; as multiple threads search wider. We thus increase the prefactor of the reductions slowly as a function of the threads. The prefactor of the log(threads) term is a parameter; this pull request uses 1/2 after testing.  passed STC @ 8threads: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 118125 W: 23151 L: 22462 D: 72512 http://tests.stockfishchess.org/tests/view/5d8bbf4d0ebc59509180f217  passed LTC @ 8threads: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 67546 W: 10630 L: 10279 D: 46637 http://tests.stockfishchess.org/tests/view/5d8c463b0ebc5950918167e8  passed ~LTC @ 14threads: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 74271 W: 12421 L: 12040 D: 49810 http://tests.stockfishchess.org/tests/view/5d8db1f50ebc590f3beb24ef  Note: A larger prefactor (1) passed similar tests at STC and LTC (8 threads); while a very large one (2) passed STC quickly but failed LTC (8 threads).  For the single-threaded case there is no functional change.  Closes https://github.com/official-stockfish/Stockfish/pull/2337  Bench: 4088701  Fixup: remove redundant code.,True,1,2019-10-01
Unknown,snicolet,2019-10-01 07:12:57+00:00,Remove ThreatByRank  This is a functional simplification that removes ThreatByRank.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 48009 W: 10630 L: 10560 D: 26819 http://tests.stockfishchess.org/tests/view/5d92095c0ebc594fb88eb61e  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 18682 W: 3177 L: 3053 D: 12452 http://tests.stockfishchess.org/tests/view/5d9231120ebc594fb88ebacd  Moving forward; it's possible that ThreatByMinor and ThreatByRook could be combined; but I haven't really contemplated that yet.  Closes https://github.com/official-stockfish/Stockfish/pull/2336  bench 4088701,True,1,2019-10-01
vondele,snicolet,2019-09-30 08:16:43+00:00,"Remove depth dependence in value_draw().  The condition ""depth >= 4 * ONE_PLY"" does not seem needed at this point.  passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 32751 W: 7178 L: 7078 D: 18495 http://tests.stockfishchess.org/tests/view/5d8e46660ebc590f3bebad5e  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 31693 W: 5299 L: 5196 D: 21198 http://tests.stockfishchess.org/tests/view/5d8e4b4f0ebc590f3bebb165  Bench: 4062526",True,0,2019-09-01
31m059,snicolet,2019-09-27 10:46:47+00:00,"Extend castling independently of singular extension  A curious feature of Stockfish's current extension code is its repeated use of ""else if."" In most cases; this makes no functional difference; because no more than one extension is applied; once one extension has been applied; the remaining ones can be safely ignored.  However; if most singular extension search conditions are true; except ""value < singularBeta""; no non-singular extensions (e.g.; castling) can be performed!  Three tests were submitted; for three of Stockfish's four non-singular extensions. I excluded the shuffle extension; because historically there have been concerns about the fragility of its conditions; and I did not want to risk causing any serious search problems.  - Modifying the passed pawn extension appeared roughly neutral at STC. At best; it appeared to be an improvement of less than 1 Elo. - Modifying check extension performed very poorly at STC - Modifying castling extension (this patch) produced a long ""yellow"" run  at STC (insufficient to pass; but positive score) and a strong LTC.  In simple terms; prior to this patch castling extension was occasionally not applied during search--on castling moves. The effect of this patch is to perform castling extension on more castling moves. It does so without adding any code complexity; simply by replacing an ""else if"" with ""if"" and reordering some existing code.  STC: LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 108114 W: 23877 L: 23615 D: 60622 http://tests.stockfishchess.org/tests/view/5d8d86bd0ebc590f3beb0c88  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 20862 W: 3517 L: 3298 D: 14047 http://tests.stockfishchess.org/tests/view/5d8d99cd0ebc590f3beb1899  Bench: 3728191  --------  Where do we go from here?  - It seems strange to me that check extension performed so poorly -- clearly some of the singular extension conditions are also very important for check extension. I am not an expert in search; and I do not have any intuition about which of the eight conditions is/are the culprit. I will try a succession of eight STC tests to identify the relevant conditions; then try to replicate this PR for check extension.  - Recent tests interacting with the castle extension may deserve retesting. I will shortly resubmit a few of my recent castling extension tweaks; rebased on this PR/commit.  My deepest thanks to @noobpwnftw for the extraordinary CPU donation; and to all our other fishtest volunteers; who made it possible for a speculative LTC to pass in 70 minutes!  Closes https://github.com/official-stockfish/Stockfish/pull/2331",True,4,2019-09-01
Rocky640,snicolet,2019-09-27 10:37:49+00:00,Simplify RookOnPawn  Remove the RookOnPawn logic (for rook on rank 5 and above aligning with pawns on same row or file) which was overlapping with a few other parameters.  Inspired by @31m059 interesting result hinting that a direct attack on pawns instead of PseudoAttacks might work. http://tests.stockfishchess.org/tests/view/5d89a7c70ebc595091801b8d  After a few attempts by me and @31m059; and some long STC greens but red LTC; as a proof of concept I first tried a local SPSA at VSTC trying to tune related rook psqt rows; and mainly some rook related stuff in evaluate.cpp. Result was STC green; but still red LTC;  Finally a 100M fishtest SPSA at LTC proved successful both at STC and LTC.  All this was possible with the awesome fishtest contributors. At some point; I had 850 workers on the last test !  Run as a simplification  STC http://tests.stockfishchess.org/tests/view/5d8d68f40ebc590f3beaf171 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 7399 W: 1693 L: 1543 D: 4163  LTC http://tests.stockfishchess.org/tests/view/5d8d70270ebc590f3beaf63c LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41617 W: 6981 L: 6894 D: 27742  Closes https://github.com/official-stockfish/Stockfish/pull/2329  bench: 4037914,True,4,2019-09-01
vondele,snicolet,2019-09-26 22:16:49+00:00,Remove custom mutex implementation  As part of the investigation of the hang caused by an incorrect implementation of condition_variable in libwinpthread; it was realized that our custom Mutex implementation is no longer needed. Prior to lazySMP this custom implementation resulted in a 30% speedup; but now no speed difference can be measured as no mutex is used on the hot path in lazySMP.  https://github.com/official-stockfish/Stockfish/issues/2291 https://github.com/official-stockfish/Stockfish/issues/2309#issuecomment-533733393  https://github.com/official-stockfish/Stockfish/issues/2309#issuecomment-533737515  The interest of this patch is that it removes platform-specific code; which is always less tested.  No functional change.,True,3,2019-09-01
snicolet,snicolet,2019-09-26 21:27:48+00:00,Restore development version (revert previous commit)  Revert the previous patch now that the binary for the super-final of TCEC season 16 has been sent.  Maybe the feature of showing the name of compiler will be added to the master branch in the future. But we may use a cleaner way to code it; see some ideas using the Makefile approach at the end of pull request #2327 : https://github.com/official-stockfish/Stockfish/pull/2327  Bench: 3618154,True,3,2019-09-01
snicolet,snicolet,2019-09-25 20:28:51+00:00,Temporary patch to show the compiler for TCEC submission  This patch shows a description of the compiler used to compile Stockfish; when starting from the console.  Usage:  ``` ./stockfish compiler ```  Example of output:  ``` Stockfish 240919 64 POPCNT by T. Romstad; M. Costalba; J. Kiiski; G. Linscott  Compiled by clang++ 9.0.0 on Apple  __VERSION__ macro expands to: 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38) ```  No functional change,True,2,2019-09-01
snicolet,snicolet,2019-09-24 10:54:02+00:00,Increase weight for supported pawns  This patch changes the weight for counting supports of pawns from 17 to 21. Hopefully Stockfish will accept to play a bit more of closed or semi-closed positions.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 13822 W: 3158 L: 2939 D: 7725 http://tests.stockfishchess.org/tests/view/5d89c3a10ebc595091802379  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 63066 W: 10590 L: 10236 D: 42240 http://tests.stockfishchess.org/tests/view/5d89ca7f0ebc595091802680  Future work: try to tweak the evaluation to better understand the French structures.  Closes https://github.com/official-stockfish/Stockfish/pull/2326  Bench: 3618154,True,1,2019-09-01
nickpelling,snicolet,2019-09-24 08:05:54+00:00,Clarify the mapping of files to queenside  This patch replaces the obscure expressions mapping files ABCDEFGH to ABCDDCBA by explicite calls to an auxiliary function:    old:   f = min(f; ~f)   new:   f = map_to_queenside(f)  We used the Golbolt web site (https://godbolt.org) to check that the current code for the auxiliary function is optimal.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 30292 W: 6756 L: 6651 D: 16885 http://tests.stockfishchess.org/tests/view/5d8676720ebc5971531d6aa1  Achieved with a bit of help from Sopel97; snicolet and vondele; thanks everyone! Closes https://github.com/official-stockfish/Stockfish/pull/2325  No functional change,True,1,2019-09-01
Unknown,snicolet,2019-09-23 07:50:34+00:00,Encourage rook lift to third rank  This change to the Rook psqt encourages rook lifts to the third rank on the two center files.  STC 10+0.1 th 1 : LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 40654 W: 9028 L: 8704 D: 22922 http://tests.stockfishchess.org/tests/view/5d885da60ebc5906dd3e9fcd  LTC 60+0.6 th 1 : LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 56963 W: 9530 L: 9196 D: 38237 http://tests.stockfishchess.org/tests/view/5d88618c0ebc5906dd3ea45f  Thanks to @snicolet for mentioning that Komodo does this a lot and Stockfish doesn't; which gave me the idea for this patch; and to @noobpwnftw for providing cores to fishtest which allowed very quick testing.  Future work: perhaps this can be refined somehow to encourage this on other files; my attempts have failed.  Closes https://github.com/official-stockfish/Stockfish/pull/2322  Bench: 3950249,True,0,2019-09-01
snicolet,snicolet,2019-09-23 07:10:28+00:00,"Revert ""Clarify the mapping of files to queenside""  This reverts commit 7756344d5d2b93970e7cd423f8cbf6fb1da11b74.",True,0,2019-09-01
snicolet,snicolet,2019-09-23 06:54:20+00:00,Clarify the mapping of files to queenside  Author: @nickpelling  We replace in the code the obscure expressions mapping files ABCDEFGH to ABCDDCBA by an explicite call to an auxiliary function :    old:   f = min(f; ~f)   new:   f = map_to_queenside(f)  We used the Golbolt web site (https://godbolt.org) to find the optimal code for the auxiliary function.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 30292 W: 6756 L: 6651 D: 16885 http://tests.stockfishchess.org/tests/view/5d8676720ebc5971531d6aa1  No functional change,True,0,2019-09-01
vondele,snicolet,2019-09-23 05:29:00+00:00,More random draw evaluations  Use the randomized draw function value_draw() also for draw evalutions.  This extends the earlier commit https://github.com/official-stockfish/Stockfish/commit/97d2cc9a9c1c4b6ff1b470676fa18c7fc6509886 which did this only for 3folds.  As in that case; this test was yellow at STC and LTC; but green at VLTC; indicative of the fact that the higher the drawrate; the more likely this idea is beneficial.  STC: LLR: -2.96 (-2.94;2.94) [0.50;4.50] Total: 83573 W: 18584 L: 18335 D: 46654 http://tests.stockfishchess.org/tests/view/5d84e44d0ebc5971531d4f94  LTC: LLR: -2.96 (-2.94;2.94) [0.00;3.50] Total: 92252 W: 15240 L: 15160 D: 61852 http://tests.stockfishchess.org/tests/view/5d865dd90ebc5971531d68e1  VLTC: 120+1.2 @ 2th LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 51902 W: 7323 L: 7028 D: 37551 http://tests.stockfishchess.org/tests/view/5d8763620ebc595f57c22b15  Closes https://github.com/official-stockfish/Stockfish/pull/2321  Bench: 3441237,True,0,2019-09-01
Unknown,snicolet,2019-09-23 05:12:32+00:00,Simplify connected pawn scoring  When scoring the connected pawns; replace the intricate ternary expressions choosing the coefficient by a simpler addition of boolean conditions:  ` value = Connected * (2 + phalanx - opposed) `  This is the map showing the old coefficients and the new ones:  ``` phalanx and unopposed:     3x   -> 3x phalanx and opposed:       1.5x -> 2x not phalanx and unopposed: 2x   -> 2x not phalanx and opposed:   1x   -> 1x ```  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 11354 W: 2579 L: 2437 D: 6338 http://tests.stockfishchess.org/tests/view/5d8151f00ebc5971531d244f  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 41221 W: 7001 L: 6913 D: 27307 http://tests.stockfishchess.org/tests/view/5d818f930ebc5971531d26d6  Bench: 3959889  blah,True,0,2019-09-01
vondele,snicolet,2019-09-23 04:47:59+00:00,Acknowledge fishtest authors  Explicitly acknowledge fishtest authors. Their efforts are almost invisible; but essential for the project.  Many thanks to https://github.com/glinscott/fishtest/blob/master/AUTHORS !  No functional change.,True,0,2019-09-01
noobpwnftw,snicolet,2019-09-16 13:09:45+00:00,Raise stack size to 8MB for pthreads  It seems there is no other way to specify stack size on std::thread than linker flags and the effective flags are named differently in many toolchains. On toolchains where pthread is always available; this patch changes the stack size change in our C++ code via pthread to ensure a minimum stack size of 8MB; instead of relying on linker defaults which may be platform-specific.  Also raises default stack size on OSX to current Linux default (8MB) just to be safe.  Closes https://github.com/official-stockfish/Stockfish/pull/2303  No functional change,True,0,2019-09-01
snicolet,snicolet,2019-09-15 23:37:39+00:00,Scale down endgame factor when shuffling  This patch decreases the endgame scale factor using the 50 moves counter. Looking at some games with this patch; it seems to have two effects on the playing style:  1) when no progress can be made in late endgames (for instance in fortresses    or opposite bishops endgames) the evaluation will be largely tamed down    towards a draw value.  2) more interestingly; there is also a small effect in the midgame play because    Stockfish will panic a little bit if there are more than four consecutive    shuffling moves with an advantage: the engine will try to move a pawn or to    exchange a piece to keep the advantage; so the follow-ups of the position    will be discovered earlier by the alpha-beta search.  passed STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 23017 W: 5080 L: 4805 D: 13132 http://tests.stockfishchess.org/tests/view/5d7e4aef0ebc59069c36fc74  passed LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 30746 W: 5171 L: 4911 D: 20664 http://tests.stockfishchess.org/tests/view/5d7e513d0ebc59069c36ff26  Pull request: https://github.com/official-stockfish/Stockfish/pull/2304  Bench: 4272173,True,6,2019-09-01
Vizvezdenec,snicolet,2019-09-14 22:32:54+00:00,Introduce midgame initiative  This patch finally introduces something that was tried for years: midgame score dependance on complexity of position. More precisely; if the position is very simplified and the complexity measure calculated in the initiative() function is inferior to -50 by an amount d; then we add this value d to the midgame score.  One example of play of this patch will be (again!) 4 vs 3 etc same flank endgames where sides have a lot of non-pawn material: 4 vs 3 draw mostly remains the same draw even if we add a lot of equal material to both sides.  STC run was stopped after 200k games (and not converging): LLR: -1.75 (-2.94;2.94) [0.50;4.50] Total: 200319 W: 44197 L: 43310 D: 112812 http://tests.stockfishchess.org/tests/view/5d7cfdb10ebc5902d386572c  passed LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 41051 W: 6858 L: 6570 D: 27623 http://tests.stockfishchess.org/tests/view/5d7d14680ebc5902d3866196  This is the first and not really precise version; a lot of other stuff can be tried on top of it (separate complexity for middlegame; some more terms; even simple retuning of values).  Bench: 4248476,True,5,2019-09-01
snicolet,snicolet,2019-09-14 06:33:00+00:00,Assorted trivial cleanups  No functional change,True,5,2019-09-01
31m059,snicolet,2019-09-14 05:47:05+00:00,Use queens of either color in RookOnQueenFile  The recently-added RookOnQueenFile evaluation term (36e4a86) provided a bonus for placing our rook on the same file as an enemy queen.  Here; we relax a condition in this bonus; broadening its effect to any queen. It is also strategically desirable to place the rook on the same file as a friendly queen; so the restriction on the queen's color is removed.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 66856 W: 14847 L: 14815 D: 37194 http://tests.stockfishchess.org/tests/view/5d7b3c6a0ebc5902d385bcf5  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 86786 W: 14264 L: 14248 D: 58274 http://tests.stockfishchess.org/tests/view/5d7b4e9b0ebc5902d385c178  Closes https://github.com/official-stockfish/Stockfish/pull/2302  Bench: 3703909,True,5,2019-09-01
snicolet,snicolet,2019-09-14 05:34:19+00:00,Update Makefile documentation  Follow-up to previous commit. Update the documentation for the user when using `make`; to show the preferred bmi2 compile in the advanced examples section.  Note: I made a mistake in the previous commit comment; the documentation is shown when using `make` or `make help`; not `make --help`.  No functional change,True,5,2019-09-01
vondele,snicolet,2019-09-14 05:11:23+00:00,Add sse4 if bmi2 is enabled  The only change done to the Makefile to get a somewhat faster binary as discussed in #2291 is to add -msse4 to the compile options of the bmi2 build. Since all processors supporting bmi2 also support sse4 this can be done easily. It is a useful step to avoid sending around custom and poorly tested builds.  The speedup isn't enough to pass [0;4] but it is roughly 1.15Elo and a LOS of 90%: LLR: -2.95 (-2.94;2.94) [0.00;4.00] Total: 93009 W: 20519 L: 20316 D: 52174  Also rewrite the documentation for the user when using `make --help`; so that the order of architectures for x86-64 has the more performant build one on top.  Closes https://github.com/official-stockfish/Stockfish/pull/2300  No functional change,True,5,2019-09-01
Vizvezdenec,snicolet,2019-09-12 08:33:18+00:00,Scale down complexity for almost unwinnable endgames  This patch greatly scales down complexity of endgames when the following conditions are all true together:  - pawns are all on one flank - stronger side king is not outflanking weaker side - no passed pawns are present  This should improve stockfish evaluation of obvious draws 4 vs 3; 3 vs 2 and 2 vs 1 pawns in rook/queen/knight/bishop single flank endgames where strong side can not make progress.  passed STC LLR: 2.94 (-2.94;2.94) [0.50;4.50] Total: 15843 W: 3601 L: 3359 D: 8883  passed LTC LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 121275 W: 20107 L: 19597 D: 81571  Closes https://github.com/official-stockfish/Stockfish/pull/2298  Bench: 3954190  ==========================  How to continue from there?  a) This could be a powerful idea for refining some parts of the evaluation    function; a bit like when we try quadratics or other equations to emphasize    certain situations (xoto10).  b) Some other combinaison values for this bonus can be done further; or    overall retuning of weight and offset while keeping the formula simple.,True,3,2019-09-01
Unknown,snicolet,2019-09-12 08:05:35+00:00,Bonus for rook on same file as their queen  This patch creates a simple bonus for a rook that is on the same file as the opponent's queen.  STC 10+0.1 th 1 : LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 45609 W: 10120 L: 9733 D: 25756 http://tests.stockfishchess.org/tests/view/5d79895a0ebc5902d385484a  LTC 60+0.6 th 1 : LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 51651 W: 8606 L: 8288 D: 34757 http://tests.stockfishchess.org/tests/view/5d79a0850ebc5902d3854d27  Many thanks to @noobpwnftw for providing the extra cpu resources for fishtest; which led to me doing these tests.  Closes https://github.com/official-stockfish/Stockfish/pull/2297  Bench: 4024461,True,3,2019-09-01
Unknown,snicolet,2019-09-12 07:44:40+00:00,Simplify Weak Lever  This is a simplification that integrated WeakLever into doubled pawns. Since we already check for !support for Doubled pawns; it is trivial to check for weak lever by just checking more_than_one(lever).  We also introduce the Score * bool operation overload to remove some casts in the code.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 26757 W: 5842 L: 5731 D: 15184 http://tests.stockfishchess.org/tests/view/5d77ee220ebc5902d384e5a4  Closes https://github.com/official-stockfish/Stockfish/pull/2295  No functional change,True,3,2019-09-01
locutus2,snicolet,2019-09-11 16:37:08+00:00,Update reverse move stats  For a good quiet non-pawn move consider the reverse move as bad and update the main history with a negative stat bonus.  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 19292 W: 4401 L: 4141 D: 10750 http://tests.stockfishchess.org/tests/view/5d7751d50ebc594e7864973c  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 111952 W: 18762 L: 18275 D: 74915 http://tests.stockfishchess.org/tests/view/5d7771cf0ebc594e786498fa  Closes https://github.com/official-stockfish/Stockfish/pull/2294  Bench: 3914238,True,2,2019-09-01
locutus2,snicolet,2019-08-26 06:49:55+00:00,Tweak Late Move Reduction at root  Maintain best move counter at the root and allow there only moves which has a counter of zero for Late Move Reduction. For compensation only the first three moves are excluded from Late Move Reduction per default instead the first four moves.  What we can further do:  - here we use a simple counting scheme but perhaps some aging to fade out early iterations   could be helpful - use the best move counter also at inner nodes for LMR and/or pruning  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 17414 W: 3984 L: 3733 D: 9697 http://tests.stockfishchess.org/tests/view/5d6234bb0ebc5939d09f2aa2  LTC: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 38058 W: 6448 L: 6166 D: 25444 http://tests.stockfishchess.org/tests/view/5d62681a0ebc5939d09f2f27  Closes https://github.com/official-stockfish/Stockfish/pull/2282  Bench: 3568210,True,0,2019-08-01
VoyagerOne,snicolet,2019-08-25 09:09:08+00:00,NMP Tweaks  Tweak again the null move pruning preconditions.  STC: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 19675 W: 4430 L: 4169 D: 11076 http://tests.stockfishchess.org/tests/view/5d52bc0e0ebc5925cf108300  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 73895 W: 12496 L: 12114 D: 49285 http://tests.stockfishchess.org/tests/view/5d52dcbc0ebc5925cf108552  Closes https://github.com/official-stockfish/Stockfish/pull/2268  Bench: 3690065,True,6,2019-08-01
Unknown,snicolet,2019-08-24 06:21:30+00:00,Improve signature of evaluate_shelter()  Remove one parameter in function evaluate_shelter(); making all comparisons for castled/uncastled shelter locally in do_king_safety(). Also introduce BlockedStorm penalty.  Passed non-regression test at STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 65864 W: 14630 L: 14596 D: 36638 http://tests.stockfishchess.org/tests/view/5d5fc80c0ebc5939d09f0acc  No functional change,True,5,2019-08-01
Unknown,snicolet,2019-08-23 14:29:29+00:00,Consolidate CastlingSide and CastlingRights  This is a non-functional simplification that removes CastlingSide and implements the functionality in CastlingRights (thanks to J�rg Oster for a comment on the first version of this patch).  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 53854 W: 12077 L: 12019 D: 29758 http://tests.stockfishchess.org/tests/view/5d517b940ebc5925cf107474  Closes https://github.com/official-stockfish/Stockfish/pull/2265  No functional change,True,4,2019-08-01
Unknown,snicolet,2019-08-23 07:37:12+00:00,Simplify futility equation  This is a functional simplification. The 178 constant for the futility equation in master can be removed.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 42626 W: 9508 L: 9428 D: 23690 http://tests.stockfishchess.org/tests/view/5d5d4e320ebc5925cf11254e  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 26182 W: 4432 L: 4320 D: 17430 http://tests.stockfishchess.org/tests/view/5d5df70d0ebc5925cf112fee  Closes https://github.com/official-stockfish/Stockfish/pull/2278  Bench: 3985701,True,4,2019-08-01
Vizvezdenec,snicolet,2019-08-21 08:47:40+00:00,Late move reduction; captures and CUT nodes  Expand of Stefan Geschwentner's original idea: we always do LMR for captures at cutnodes.  Passed STC http://tests.stockfishchess.org/tests/view/5d5b2f8e0ebc5925cf1111b8 LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 36026 W: 8122 L: 7779 D: 20125  Passed LTC http://tests.stockfishchess.org/tests/view/5d5b40c80ebc5925cf111353 LLR: 3.22 (-2.94;2.94) [0.00;3.50] Total: 133502 W: 22508 L: 21943 D: 89051  Closes https://github.com/official-stockfish/Stockfish/pull/2273  Bench: 3494372,True,2,2019-08-01
Unknown,snicolet,2019-08-21 07:34:46+00:00,Tuned Futility Equation  @Vizvezdenec array suggested that alternate values may be better than current master (see pull request #2270 ). I tuned some linear equations to more closely represent his values and it passed. These futility values seem quite sensitive; so perhaps additional Elo improvements can be found here.  STC LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 12257 W: 2820 L: 2595 D: 6842 http://tests.stockfishchess.org/tests/view/5d5b2f360ebc5925cf1111ac  LTC LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 20273 W: 3497 L: 3264 D: 13512 http://tests.stockfishchess.org/tests/view/5d5c0d250ebc5925cf111ac3  Closes https://github.com/official-stockfish/Stockfish/pull/2272  ------------------------------------------ How to continue from there ?  a) we can try a simpler version for the futility margin; this would    be a simplification :     margin = 188 * (depth - improving)  b) on the other direction; we can try a complexification by trying    again to gain Elo with an complete array of futility values.  ------------------------------------------  Bench: 4330402,True,2,2019-08-01
OuaisBla,snicolet,2019-08-21 07:11:17+00:00,Slight speep up fetching the endgame table  Replace calls to count(key) + operator[key] with a single call to find(key). Replace the std::map with std::unordered_map which provide O(1) access; although the map has a really small number of objects.  Test with [0..4] failed yellow:  TC	10+0.1 SPRT	elo0: 0.00  alpha: 0.05  elo1: 4.00  beta: 0.05 LLR	-2.96 [-2.94;2.94] (rejected) Elo	1.01 [-0.87;3.08] (95%) LOS	85.3% Games	71860 [w:22.3%; l:22.2%; d:55.5%] http://tests.stockfishchess.org/tests/view/5d5432210ebc5925cf109d61  Closes https://github.com/official-stockfish/Stockfish/pull/2269  No functional change,True,2,2019-08-01
Rocky640,snicolet,2019-08-14 20:15:48+00:00,Assorted trivial cleanups (July 2019)  No functional change,True,2,2019-08-01
locutus2,snicolet,2019-08-14 18:59:04+00:00,Tweak unsafe checks  Remove mobility area for unsafe checks. Also separate the evaluation terms for unsafe checks and blockers for king with adjusted weights.  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 124526 W: 28292 L: 27504 D: 68730 http://tests.stockfishchess.org/tests/view/5d5138290ebc5925cf1070c3  LTC: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 84968 W: 14499 L: 14083 D: 56386 http://tests.stockfishchess.org/tests/view/5d527cfa0ebc5925cf107f93  Bench: 4139590,True,2,2019-08-01
joergoster,snicolet,2019-08-01 07:28:34+00:00,"Revert ""Improve multiPV mode""  This reverts commit a8de07cc26999e2fef7298a63bfe349aaa4650fa.",True,3,2019-08-01
Unknown,snicolet,2019-07-31 07:35:20+00:00,Tune search constants  This is the result of a 200k tuning run at LTC: http://tests.stockfishchess.org/tests/view/5d3576b70ebc5925cf0e9e1e  which passed quickly at LTC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 12954 W: 2280 L: 2074 D: 8600 http://tests.stockfishchess.org/tests/view/5d3ff3f70ebc5925cf0f87a2  STC failed; but second LTC at [0;4] passed easily: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 8004 W: 1432 L: 1252 D: 5320 http://tests.stockfishchess.org/tests/view/5d407cff0ebc5925cf0f9119  Further work? No doubt some of these changes produce most of the gain and some are neutral or even bad; so further testing on individual/groups of parameters changed here might show more gains. It does look like these tests might need to be at LTC though; so maybe not too practical to do. See the thread in the pull request for an interesting discussion: https://github.com/official-stockfish/Stockfish/pull/2260  Bench: 4024328,True,2,2019-07-01
Unknown,snicolet,2019-07-28 17:48:57+00:00,Simplify weak lever  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 14844 W: 3347 L: 3212 D: 8285 http://tests.stockfishchess.org/tests/view/5d3a2d7b0ebc5925cf0f1632  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 55261 W: 9374 L: 9309 D: 36578 http://tests.stockfishchess.org/tests/view/5d3a3d9e0ebc5925cf0f1786  Closes https://github.com/official-stockfish/Stockfish/pull/2257  bench: 3484124,True,6,2019-07-01
Unknown,snicolet,2019-07-26 01:33:32+00:00,Bug fix: always choose shortest mate in multithread mode  In current master; with the voting scheme the best thread selection may pick a non mate or not the shortest mate thread. This patch fixes this bug. Formatting suggestion by J�rg Oster.  Related past pull requests: https://github.com/official-stockfish/Stockfish/pull/1074 https://github.com/official-stockfish/Stockfish/pull/1215  Passed a [-4..0] verification test with 3 threads: LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 57158 W: 11374 L: 11424 D: 34360 http://tests.stockfishchess.org/tests/view/5d22deb30ebc5925cf0caefd  Closes https://github.com/official-stockfish/Stockfish/pull/2226  No functional change (in single threaded mode)  ----------------------------------------------------  Comment by J�rg Oster  Just one sample output to demonstrate the effect of this patch. 5 Threads; 1 GB Hash   +---+---+---+---+---+---+---+---+  | r |   | b |   |   | r | k |   |  +---+---+---+---+---+---+---+---+  |   |   |   | n |   | p | b |   |  +---+---+---+---+---+---+---+---+  |   |   | p |   | p |   | p |   |  +---+---+---+---+---+---+---+---+  | p |   |   |   |   |   | P |   |  +---+---+---+---+---+---+---+---+  | P | p |   |   | B |   | N | Q |  +---+---+---+---+---+---+---+---+  |   | q |   |   |   |   | P |   |  +---+---+---+---+---+---+---+---+  |   |   | R |   |   | P |   |   |  +---+---+---+---+---+---+---+---+  |   |   |   | R |   |   | K |   |  +---+---+---+---+---+---+---+---+  Fen: r1b2rk1/3n1pb1/2p1p1p1/p5P1/Pp2B1NQ/1q4P1/2R2P2/3R2K1 w - - 8 34 Key: 38B4CA1067D4F477 Checkers: ucinewgame isready readyok go mate 17 searchmoves d1d7 info depth 65 seldepth 36 multipv 1 score mate 18 nodes 785875935 nps 8650448 hashfull 1000 tbhits 0 time 90848 pv d1d7 c8d7 g4f6 g7f6 g5f6 b3a3 g1g2 a3a1 h4g5 a1f6 g5f6 e6e5 c2c1 d7h3 g2h3 a8a6 h3g2 c6c5 f6a6 g8g7 c1c5 f7f6 a6e6 f8f7 c5c8 f6f5 e4d5 g7h6 e6f7 f5f4 f7e7 f4f3 d5f3 b4b3 c8h8 info depth 63 seldepth 36 multipv 1 score mate 17 nodes 785875935 nps 8650448 hashfull 1000 tbhits 0 time 90848 pv d1d7 c8d7 g4f6 g7f6 g5f6 b3a3 g1g2 a3a1 h4g5 a1f6 g5f6 e6e5 c2c1 d7h3 g2h3 a8a6 c1d1 b4b3 h3g2 c6c5 f6a6 g8g7 d1d7 g7g8 a6f6 b3b2 e4g6 b2b1q g6f7 f8f7 f6f7 g8h8 f7g7 bestmove d1d7 ponder c8d7,True,4,2019-07-01
Unknown,snicolet,2019-07-26 00:12:23+00:00,Remove operators for color  This is a non-functional and untested simplification. The increment operator for color isn't really necessary and seems a bit unnatural to me.  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 47027 W: 10589 L: 10518 D: 25920 http://tests.stockfishchess.org/tests/view/5d3472d10ebc5925cf0e8d3e  Closes https://github.com/official-stockfish/Stockfish/pull/2247  No functional change,True,4,2019-07-01
Vizvezdenec,snicolet,2019-07-25 07:16:53+00:00,Tweak of SEE pruning condition  passed STC http://tests.stockfishchess.org/tests/view/5d386bda0ebc5925cf0ef49a LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 56874 W: 12820 L: 12373 D: 31681  passed LTC http://tests.stockfishchess.org/tests/view/5d38873a0ebc5925cf0ef86e LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 43512 W: 7547 L: 7247 D: 28718  Additional thanks to @locutus2 ; @miguel-l and @xoto10 for fruitful discussion. There may be some more elo there since this tweak was the first one and numbers are more or less arbitrary.  Closes https://github.com/official-stockfish/Stockfish/pull/2256  Bench 3935523,True,3,2019-07-01
Rocky640,snicolet,2019-07-25 07:05:08+00:00,"Pawn clean up  Non functional simplification when we find the passed pawns in pawn.cpp and some code clean up. It also better follows the pattern ""flag the pawn"" and ""score the pawn"".  -------------------------  The idea behind the third condition for candidate passed pawn is a little bit difficult to visualize. Just for the record; the idea is the following:  Consider White e5 d4 against black e6. d4 can (in some endgames) push to d5 and lever e6. Thanks to this sacrifice; or after d5xe6; we consider e5 as ""passed"".  However: - if White e5/d4 against black e6/c6: d4 cannot safely push to d5 since d5 is double attacked; - if White e5/d4 against black e6/d5: d4 cannot safely push to d5 since it is occupied.  This is exactly what the following expression does:  ```    && (shift<Up>(support) & ~(theirPawns | dblAttackThem))) ```  --------------------------  http://tests.stockfishchess.org/tests/view/5d3325bb0ebc5925cf0e6e91 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 124666 W: 27586 L: 27669 D: 69411  Closes https://github.com/official-stockfish/Stockfish/pull/2255  No functional change",True,3,2019-07-01
VoyagerOne,snicolet,2019-07-25 06:46:26+00:00,LMR Tweak  Reset statScore to zero if negative and most stats shows >= 0  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 23097 W: 5242 L: 4963 D: 12892 http://tests.stockfishchess.org/tests/view/5d31dd650ebc5925cf0e598f  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 227597 W: 39013 L: 38191 D: 150393 http://tests.stockfishchess.org/tests/view/5d31fcdf0ebc5925cf0e5c13  Closes https://github.com/official-stockfish/Stockfish/pull/2252  Bench: 3242229,True,3,2019-07-01
Rocky640,snicolet,2019-07-25 06:32:49+00:00,Passed file cleanup  Protonspring had a successful functional simplification that removes the PassedFile array using a simple linear equation.  Merge the additive term S(5; 10) of protonspring passed file simplification (pull request https://github.com/official-stockfish/Stockfish/pull/2250) into the PassedRank array. This harmless change has a different bench because the candidate passer evaluation will always get less compared to #2250; as we apply bonus = bonus /2.  Tested as a non-regression against #2250  Passed STC http://tests.stockfishchess.org/tests/view/5d33427e0ebc5925cf0e6fa2 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 81459 W: 18174 L: 18171 D: 45114  Passed LTC http://tests.stockfishchess.org/tests/view/5d335c8d0ebc5925cf0e731e LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 18525 W: 3176 L: 3052 D: 12297  Closes https://github.com/official-stockfish/Stockfish/pull/2250 Closes https://github.com/official-stockfish/Stockfish/pull/2251  Bench: 3859856,True,3,2019-07-01
Lolligerhans,snicolet,2019-07-25 06:23:43+00:00,No influence on unsafeSquares of passers by pieces  Remove their pieces from influencing 'unsafeSquares' in passer evaluation.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 36421 W: 8170 L: 8078 D: 20173 http://tests.stockfishchess.org/tests/view/5d22fc8e0ebc5925cf0cb26e  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 18927 W: 3253 L: 3129 D: 12545 http://tests.stockfishchess.org/tests/view/5d26e2b20ebc5925cf0d3218  Closes https://github.com/official-stockfish/Stockfish/pull/2248  Bench: 3285659,True,3,2019-07-01
Vizvezdenec,snicolet,2019-07-25 06:17:11+00:00,Tweak LMR and killers  Give extra stat bonus/malus in case of LMR for killers.  passed STC http://tests.stockfishchess.org/tests/view/5d2c8e760ebc5925cf0dcf23 LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 67188 W: 15030 L: 14534 D: 37624  passed LTC http://tests.stockfishchess.org/tests/view/5d2d0ce40ebc5925cf0de115 LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 144355 W: 24739 L: 24153 D: 95463  Closes https://github.com/official-stockfish/Stockfish/pull/2246  bench 3723147,True,3,2019-07-01
Rocky640,snicolet,2019-07-25 06:07:55+00:00,Space Invaders  Try a more ambitius simplification of the space bonus  STC http://tests.stockfishchess.org/tests/view/5d2b62c90ebc5925cf0da2a4 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 51299 W: 11320 L: 11257 D: 28722  LTC http://tests.stockfishchess.org/tests/view/5d2bac270ebc5925cf0db215 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 49761 W: 8409 L: 8335 D: 33017  Closes https://github.com/official-stockfish/Stockfish/pull/2243  bench: 3395999,True,3,2019-07-01
mcostalba,mcostalba,2019-07-14 13:21:08+00:00,Fix bench  Bench: 3357457,True,6,2019-07-01
vondele,mcostalba,2019-07-14 12:47:50+00:00,UCI_Elo implementation (#2225)  This exploits the recent fractional Skill Level; and is a result from some discussion in #2221 and the older #758.    Basically; if UCI_LimitStrength is set; it will internally convert UCI_Elo to a matching fractional Skill Level.  The Elo estimate is based on games at  TC 60+0.6; Hash 64Mb; 8moves_v3.pgn; rated with Ordo; anchored to goldfish1.13 (CCRL 40/4 ~2000).  Note that this is mostly about internal consistency; the anchoring to CCRL is a bit weak; e.g. within this tournament;  goldfish and sungorus only have a 200Elo difference; their rating difference on CCRL is 300Elo.    I propose that we continue to expose 'Skill Level' as an UCI option; for backwards compatibility.    The result of a tournament under those conditions are given by the following table; where the player name reflects the UCI_Elo.       # PLAYER          :  RATING  ERROR  POINTS  PLAYED   (%)  CFS(%)     1 Elo2837         :  2792.2   50.8   536.5     711    75     100     2 Elo2745         :  2739.0   49.0   487.5     711    69     100     3 Elo2654         :  2666.4   49.2   418.0     711    59     100     4 Elo2562         :  2604.5   38.5   894.5    1383    65     100     5 Elo2471         :  2515.2   38.1   651.5     924    71     100     6 Elo2380         :  2365.9   35.4   478.5     924    52     100     7 Elo2289         :  2290.0   28.0   864.0    1596    54     100     8 sungorus1.4     :  2204.9   27.8   680.5    1596    43      60     9 Elo2197         :  2201.1   30.1   523.5     924    57     100    10 Elo2106         :  2103.8   24.5   730.5    1428    51     100    11 Elo2014         :  2030.5   30.3   377.5     756    50      98    12 goldfish1.13    :  2000.0   ----   511.0    1428    36     100    13 Elo1923         :  1928.5   30.9   641.5    1260    51     100    14 Elo1831         :  1829.0   42.1   370.5     756    49     100    15 Elo1740         :  1738.3   42.9   277.5     756    37     100    16 Elo1649         :  1625.0   42.1   525.5    1260    42     100    17 Elo1558         :  1521.5   49.9   298.0     756    39     100    18 Elo1467         :  1471.3   51.3   246.5     756    33     100    19 Elo1375         :  1407.1   51.9   183.0     756    24     ---    It can be observed that all set Elos correspond within the error bars with the observed Ordo rating.    No functional change,True,6,2019-07-01
Unknown,mcostalba,2019-07-14 12:46:10+00:00,Remove std::pow from reduction. (#2234)  This is a functional simplification that removes the std::pow from reduction. The resulting reduction values are within 1% of master.    This is a simplification because i believe an fp addition and multiplication is much faster than a call to std::pow() which is historically slow and performance varies widely on different architectures.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 23471 W: 5245 L: 5127 D: 13099  http://tests.stockfishchess.org/tests/view/5d27ac1b0ebc5925cf0d476b    LTC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 51533 W: 8736 L: 8665 D: 34132  http://tests.stockfishchess.org/tests/view/5d27b74e0ebc5925cf0d493c    Bench 3765158,True,6,2019-07-01
31m059,mcostalba,2019-07-14 12:42:30+00:00,"Just blockSq; not forward file. Bench: 3377831 (#2240)  This is another functional simplification to Stockfish passed pawn evaluation.    Stockfish evaluates some pawns which are not yet passed as ""candidate"" passed pawns; which are given half the bonus of fully passed ones. Prior to this commit; Stockfish considered a passed pawn to be a ""candidate"" if (a) it would not be a passed pawn if moved one square forward (the blocking square); or (b) there were other pawns (of either color) in front of it on the file. This latter condition used a fairly complicated method; forward_file_bb; here; rather than inspect the entire forward file; we simply re-use the blocking square. As a result; some pawns previously considered ""candidates""; but which are able to push forward; no longer have their bonus halved.    Simplification tests passed quickly at both STC and LTC. The results from both tests imply that this simplification is; most likely; additionally a small Elo gain; with a LTC likelihood of superiority of 87 percent.    STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 12908 W: 2909 L: 2770 D: 7229  http://tests.stockfishchess.org/tests/view/5d2a1c880ebc5925cf0d9006    LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 20723 W: 3591 L: 3470 D: 13662  http://tests.stockfishchess.org/tests/view/5d2a21fd0ebc5925cf0d9118    Bench: 3377831",True,6,2019-07-01
Vizvezdenec,mcostalba,2019-07-14 12:41:28+00:00,tviigg. (#2238)  Current master code made sence when we had 2 types of bonuses for protected path to queen. But it was simplified so we have only one bonus now and code was never cleaned.  This non-functional simplification removes useless defendedsquares bitboard and removes one bitboard assignment (defendedSquares &= attackedBy[Us][ALL_PIECES] + defendedSquares & blockSq becomes just attackedBy[Us][ALL_PIECES] & blockSq also we never assign defendedSquares = squaresToQueen because we don't need it).  So should be small non-functional speedup.  Passed simplification SPRT.  http://tests.stockfishchess.org/tests/view/5d2966ef0ebc5925cf0d7659  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 23319 W: 5152 L: 5034 D: 13133    bench 3361902,True,6,2019-07-01
31m059,mcostalba,2019-07-14 12:40:45+00:00,Linear formula for w. Bench: 3328507 (#2239)  In Stockfish; both the middlegame and endgame bonus for a passed pawn are calculated as a product of two factors. The first is k; chosen based on the presence of defended and unsafe squares. The second is w; a quadratic function of the pawn's rank. Both are only applied if the pawn's relative rank is at least RANK_4.    It does not appear that the complexity of a quadratic function is necessary for w. Here; we replace it with a simpler linear one; which performs equally at both STC and LTC.    STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 46814 W: 10386 L: 10314 D: 26114  http://tests.stockfishchess.org/tests/view/5d29686e0ebc5925cf0d76a1    LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 82372 W: 13845 L: 13823 D: 54704  http://tests.stockfishchess.org/tests/view/5d2980650ebc5925cf0d7bfd    Bench: 3328507,True,6,2019-07-01
locutus2,snicolet,2019-07-13 03:49:14+00:00,Full bonus for LMR stats update  Simplify previous commit by using the full bonus for LMR-triggered stats update.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 23684 W: 5255 L: 5137 D: 13292 http://tests.stockfishchess.org/tests/view/5d2826660ebc5925cf0d5180  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 16245 W: 2832 L: 2704 D: 10709 http://tests.stockfishchess.org/tests/view/5d282e9c0ebc5925cf0d529b  Closes https://github.com/official-stockfish/Stockfish/pull/2236  Bench: 3361902,True,5,2019-07-01
locutus2,snicolet,2019-07-12 07:26:45+00:00,Late Move reduction and continuation history  Update continuation history after LMR-triggered full depth research. Directly after a LMR-triggered full depth research; we update the continuation history for quiet moves (but with only half stat bonus).  STC: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 39657 W: 8966 L: 8604 D: 22087 http://tests.stockfishchess.org/tests/view/5d279fa40ebc5925cf0d4566  LTC: LLR: 2.96 (-2.94;2.94) [0.50;3.50] Total: 32582 W: 5740 L: 5427 D: 21415 http://tests.stockfishchess.org/tests/view/5d27dbf90ebc5925cf0d4b7e  Bench: 3239357,True,4,2019-07-01
31m059,snicolet,2019-07-11 21:05:28+00:00,Exclude passed pawns from Attacked2Unsupported  We recently added a bonus for double pawn attacks on unsupported enemy pawns; on June 27. However; it is possible that the unsupported pawn may become a passer by simply pushing forward out of the double attack. By rewarding double attacks; we may inadvertently reward the creation of enemy passers; by encouraging both of our would-be stoppers to attack the enemy pawn even if there is no opposing friendly pawn on the same file.  Here; we revise this term to exclude passed pawns. In order to simplify the code with this change included; we non-functionally rewrite Attacked2Unsupported to be a penalty for enemy attacks on friendly pawns; rather than a bonus for our attacks on enemy pawns. This allows us to exclude passed pawns with a simple & ~e->passedPawns[Us]; while passedPawns[Them] is not yet defined in this part of the code.  This dramatically reduces the proportion of positions in which Attacked2Unsupported is applied; to about a third of the original. To compensate; maintaining the same average effect across our bench positions; we nearly triple Attacked2Unsupported from S(0; 20) to S(0; 56). Although this pawn formation is rare; it is worth more than half a pawn in the endgame!  STC: (stopped automatically by fishtest after 250;000 games) LLR: -0.87 (-2.94;2.94) [0.50;4.50] Total: 250000 W: 56585 L: 55383 D: 138032 http://tests.stockfishchess.org/tests/view/5d25795e0ebc5925cf0cfb51  LTC: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 81038 W: 13965 L: 13558 D: 53515 http://tests.stockfishchess.org/tests/view/5d25f3920ebc5925cf0d10dd  Closes https://github.com/official-stockfish/Stockfish/pull/2233  Bench: 3765158,True,3,2019-07-01
mcostalba,snicolet,2019-07-11 10:22:20+00:00,Assorted trivial cleanups June 2019  No functional change.,True,3,2019-07-01
VoyagerOne,snicolet,2019-07-11 09:59:36+00:00,Tweak capture scoring formula  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 20556 W: 4685 L: 4438 D: 11433 http://tests.stockfishchess.org/tests/view/5d25d26e0ebc5925cf0d0b4a  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 14856 W: 2649 L: 2446 D: 9761 http://tests.stockfishchess.org/tests/view/5d25d8b20ebc5925cf0d0c6d  bench: 3206912,True,3,2019-07-01
Unknown,snicolet,2019-07-11 09:51:27+00:00,Combo of statscore divisor and pawn psqt changes  Passed STC 10+0.1 th 1: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 13282 W: 3100 L: 2881 D: 7301 http://tests.stockfishchess.org/tests/view/5d21132e0ebc5925cf0c81f4  Passed LTC 60+0.6 th 1: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 44243 W: 7768 L: 7468 D: 29007 http://tests.stockfishchess.org/tests/view/5d2119050ebc5925cf0c832b  Bench 3705891,True,3,2019-07-01
Unknown,snicolet,2019-07-11 09:42:08+00:00,Use score instead of array to evaluate shelter  This is a non-functional simplification. Instead of an array of values; just use a Score.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 16309 W: 3673 L: 3541 D: 9095 http://tests.stockfishchess.org/tests/view/5d24f3b80ebc5925cf0ceb5b  No functional change,True,3,2019-07-01
daxtens,snicolet,2019-07-11 09:30:09+00:00,Enable popcount and prefetch for ppc-64  PowerPC has had popcount instructions for a long time; at least as far back as POWER5 (released 2004). Enable them via a gcc builtin.  Using a gcc builtin has the added bonus that if compiled for a processor that lacks a hardware instruction; gcc will include a software popcount implementation that does not use the instruction. It might be slower than the table lookups (or it might be faster) but it will certainly work. So this isn't going to break anything.  On my POWER8 VM; this leads to a ~4.27% speedup.  Fir prefetch; the gcc builtin generates a 'dcbt' instruction; which is supported at least as far back as the G5 (2002) and POWER4 (2001).  This leads to a ~5% speedup on my POWER8 VM.  No functional change,True,3,2019-07-01
vondele,mcostalba,2019-07-01 12:07:54+00:00,Smoothly change playing strength with skill level. (#2142)  The current skill levels (1-20) allow for adjusting playing strengths; but  do so in big steps (e.g. level 10 vs level 11 is a ~143 Elo jump at STC).  Since the 'Skill Level' input can already be a floating point number; this  patch uses the fractional part of the input to provide the user with  fine control; allowing for varying the playing strength essentially  continuously.    The implementation internally still uses integer skill levels (needed since they pick Depths);  but non-deterministically rounds up or down the used skill level such that the average integer  skill corresponds to the input floating point one. As expected; intermediate  (fractional) skill levels yield intermediate playing strenghts.    Tested at STC; playing level 10 against levels between 10 and 11 for 10000 games    level 10.25 ELO:  24.26 +-6.2  level 10.5  ELO:  67.51 +-6.3  level 10.75 ELO:  98.52 +-6.4  level 11    ELO: 143.65 +-6.7    http://tests.stockfishchess.org/tests/view/5cd9c6b40ebc5925cf056791  http://tests.stockfishchess.org/tests/view/5cd9d22b0ebc5925cf056989  http://tests.stockfishchess.org/tests/view/5cd9cf610ebc5925cf056906  http://tests.stockfishchess.org/tests/view/5cd9d2490ebc5925cf05698e    No functional change.,True,0,2019-07-01
vondele,mcostalba,2019-07-01 12:07:23+00:00,Introduce coordination between searching threads (#2204)  this patch improves threading performance by introducing some coordination between threads.    The observation is that threading is an area where a lot of Elo can potentially be gained:  https://github.com/glinscott/fishtest/wiki/UsefulData#elo-from-threading  At STC; 8 threads gain roughly 320 Elo; vs sequential at the same time;  however; loses 66 Elo against a single thread with 8x more time.  This 66 Elo should be partially recoverable with improved threading.    To improve threading; this patch introduces some LMR at nodes that are already being searched by other threads.  This requires some coordination between threads; avoiding however synchronisation.  To do so; threads leave a trail of breadcrumbs to mark the nodes they are searching.  These breadcrumbs are stored in a small hash table; which is only probed at low plies (currently ply < 8).    A couple of variants of this patch passed both STC and LTC threaded tests.  I picked the simpler; more robust version.  I expect that further tests can find further improvements.    STC (5+0.05 @ 8 threads):  LLR: 2.95 (-2.94;2.94) [0.50;4.50]  Total: 26209 W: 5359 L: 5079 D: 15771  http://tests.stockfishchess.org/tests/view/5d0a9b030ebc5925cf0a8e6f    LTC (20+0.2 @ 8 threads):  LLR: 2.96 (-2.94;2.94) [0.00;3.50]  Total: 34832 W: 5650 L: 5382 D: 23800  http://tests.stockfishchess.org/tests/view/5d0c67a20ebc5925cf0aafa7    other passed/tested variants:  http://tests.stockfishchess.org/tests/view/5d0a9b030ebc5925cf0a8e6f  http://tests.stockfishchess.org/tests/view/5d0c67ca0ebc5925cf0aafa9  http://tests.stockfishchess.org/tests/view/5d0c67810ebc5925cf0aafa3  http://tests.stockfishchess.org/tests/view/5d0958ca0ebc5925cf0a74c6    For the sequential code there is no change in bench; and an earlier version of this patch passed a non-regression test.  STC (10+0.1 @ 1 thread)  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 10471 W: 2364 L: 2220 D: 5887  http://tests.stockfishchess.org/tests/view/5d087ee20ebc5925cf0a6381    passed the additional non-regression tests at 2 and 4 threads 20+0.2 TC. The code was rebased on master prior to testing.    2 threads:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 218863 W: 40927 L: 41153 D: 136783  http://tests.stockfishchess.org/tests/view/5d18c6c30ebc5925cf0b9566    4threads:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 16839 W: 3017 L: 2889 D: 10933  http://tests.stockfishchess.org/tests/view/5d18c6ea0ebc5925cf0b9568    No functional change.,True,0,2019-07-01
Unknown,mcostalba,2019-06-30 13:22:37+00:00,Move storm special condition to UnblockedStorm array (#2210)  This is a functional simplification.    Looks like we can accommodate the special initialization of Value in evaluate_shelter in the UnblockedStorm array.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 32483 W: 7422 L: 7322 D: 17739  http://tests.stockfishchess.org/tests/view/5d14c5f80ebc5925cf0b48da    LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 35361 W: 6139 L: 6042 D: 23180  http://tests.stockfishchess.org/tests/view/5d14d69c0ebc5925cf0b4bd0    Bench 3596270,True,6,2019-06-01
joergoster,mcostalba,2019-06-30 13:16:20+00:00,Try to get a more precise bench time (#2211)  Initialization of larger hash sizes can take some time.  Don't include this time in the bench by resetting the timer after Search::clear().  Also move 'ucinewgame' command down in the list; so that it is processed  after the configuration of Threads and Hash size.    No functional change.,True,6,2019-06-01
Unknown,snicolet,2019-06-27 07:46:36+00:00,Bonus for double attacks on unsupported pawns  This is a functional change that rewards double attacks on an unsupported pawns.  STC (non-functional difference) LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 83276 W: 18981 L: 18398 D: 45897 http://tests.stockfishchess.org/tests/view/5d0970500ebc5925cf0a77d4  LTC (incomplete looping version) LLR: 0.50 (-2.94;2.94) [0.00;3.50] Total: 82999 W: 14244 L: 13978 D: 54777 http://tests.stockfishchess.org/tests/view/5d0a8d480ebc5925cf0a8d58  LTC (completed non-looping version). LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 223381 W: 38323 L: 37512 D: 147546 http://tests.stockfishchess.org/tests/view/5d0e80510ebc5925cf0ad320  Closes https://github.com/official-stockfish/Stockfish/pull/2205  Bench 3633546  ----------------------------------  Comments by Alain SAVARD:  interesting result ! I would have expected that search would resolve such positions correctly on the very next move. This is not a very common pattern; and when it happens; it will quickly disappear. So I'm quite surprised that it passed LTC. I would be even more surprised if this would resist a simplification.  Anyway; let's try to imagine a few cases.  a) If you have White d5 f5 against Black e6; and White to move last move by Black was probably a capture on e6 and White is about to recapture on e6  b) If you have White d5 f5 against e6; and Black to move last move by White was possibly a capture on d5 or f5 or the pawn on e6 was pinned or could not move for some reason. and white wants to blast open the position and just pushed d4-d5 or f4-f5  Some possible follow-ups a) Motif is so rare that the popcount() can be safely replaced with a bool() But this would not pass a SPRT[0;4]; So try a simplification with bool() and also without the & ~theirAttacks  b) If it works; we probably can simply have this in the loop if (lever) score += S(0; 20);  c) remove all this and tweak something in search for pawn captures (priority; SEE; extension;..),True,3,2019-06-01
Vizvezdenec,snicolet,2019-06-27 07:26:08+00:00,Introduce attacks on space area  This patch introduces a small malus for every square in our space mask that is attacked by enemy. The value of the malus is completely arbitrary and is something we can tweak; also maybe we can gain some elo with tweaking space threshold after this addition.  Passed STC http://tests.stockfishchess.org/tests/view/5d10ce590ebc5925cf0af30b LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 7082 W: 1648 L: 1449 D: 3985  Passed LTC http://tests.stockfishchess.org/tests/view/5d10d2d80ebc5925cf0af3fd LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 79494 W: 13727 L: 13324 D: 52443  Closes https://github.com/official-stockfish/Stockfish/pull/2207  bench 3516460,True,3,2019-06-01
svivanov72,snicolet,2019-06-27 07:05:03+00:00,Do not define increment operators on Value; Depth and Direction  These operators are never used and do not make sense for these types.  No functional change.,True,3,2019-06-01
joergoster,snicolet,2019-06-27 06:57:59+00:00,Improve multiPV mode  Skip all moves during the Non-PV (zero-window) search which will be searched as PV moves later anyways. We also wake sure the moves will be reported to the GUI despite they're not being searched � some GUIs may get confused otherwise; and it would unnecessarily complicate the code.  Tested with MultiPV=4 STC http://tests.stockfishchess.org/tests/view/5ce7137c0ebc5925cf070d69 LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 8233 W: 3708 L: 3424 D: 1101  LTC http://tests.stockfishchess.org/tests/view/5ce798d60ebc5925cf071d17 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 7369 W: 3197 L: 2911 D: 1261  Closes https://github.com/official-stockfish/Stockfish/pull/2163  No functional change. (in single PV mode),True,3,2019-06-01
vondele,snicolet,2019-06-22 07:57:07+00:00,Make the debug counters thread safe.  needed to use them in a threaded run.  No functional change.,True,5,2019-06-01
Vizvezdenec,snicolet,2019-06-21 08:05:50+00:00,"Rewrite ""More bonus for free passed pawn""  -removes wideUnsafeSquares bitboard -removes a couple of bitboard operations -removes one if operator -updates comments so they actually represent what this part of code is doing now.  passed non-regression STC http://tests.stockfishchess.org/tests/view/5d0c1ae50ebc5925cf0aa8db LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 16892 W: 3865 L: 3733 D: 9294  No functional change",True,4,2019-06-01
Vizvezdenec,snicolet,2019-06-20 14:52:02+00:00,More bonus for free passed pawn  Give even more bonus to passed pawn if adjacent squares to its path are not attacked.  passed STC http://tests.stockfishchess.org/tests/view/5d08c9b10ebc5925cf0a6630 LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 175197 W: 39859 L: 38816 D: 96522  passed LTC http://tests.stockfishchess.org/tests/view/5d0ab8240ebc5925cf0a8fe4 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 92928 W: 16124 L: 15682 D: 61122  Bench: 3398333,True,3,2019-06-01
miguel-l,snicolet,2019-06-20 14:39:22+00:00,"Change multi-cut pruning condition  Use comparison of eval with beta to predict potential cutNodes. This allows multi-cut pruning to also prune possibly mislabeled Pv and NonPv nodes.  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 54305 W: 12302 L: 11867 D: 30136 http://tests.stockfishchess.org/tests/view/5d048ba50ebc5925cf0a15e8  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 189512 W: 32620 L: 31904 D: 124988 http://tests.stockfishchess.org/tests/view/5d04bf740ebc5925cf0a17f0  Normally I would think such changes are risky; specially for PvNodes; but after trying a few other versions; it seems this version is more sound than I initially thought.  Aside from this; a small funtional change is made to return singularBeta instead of beta to be more consistent with the fail-soft logic used in other parts of search.  =============================  How to continue from there ?  We could try to audit other parts of the search where the ""cutNode"" variable is used; and try to use dynamic info based on heuristic eval rather than on this variable; to check if the idea behind this patch could also be applied successfuly.  Bench: 3503788",True,3,2019-06-01
VoyagerOne,snicolet,2019-06-20 14:22:45+00:00,QuietPick Speed-up  Non-functional speedup: no need to generate; score; or sort quiet moves if SkipQuiet is true. Thanks to @mstembera for his suggestion.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 27910 W: 6406 L: 6129 D: 15375 http://tests.stockfishchess.org/tests/view/5d07e0920ebc5925cf0a58a8  Closes https://github.com/official-stockfish/Stockfish/pull/2194  No functional change,True,3,2019-06-01
vondele,snicolet,2019-06-20 14:15:57+00:00,Fix progress issue with shuffling extensions  Fixes issues #2126 and #2189 where no progress in rootDepth is made for particular fens:  8/8/3P3k/8/1p6/8/1P6/1K3n2 b - - 0 1 8/1r1rp1k1/1b1pPp2/2pP1Pp1/1pP3Pp/pP5P/P5K1/8 w - - 79 46  the cause are the shuffle extensions. Upon closer analysis; it appears that in these cases a shuffle extension is made for every node searched; and progess can not be made. This patch implements a fix; namely to limit the number of extensions relative to the number of nodes searched. The ratio employed is 1/4; which fixes the issues seen so far; but it is a heuristic; and I expect that certain positions might require an even smaller fraction.  The patch was tested as a bug fix and passed:  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 56601 W: 12633 L: 12581 D: 31387 http://tests.stockfishchess.org/tests/view/5d02b37a0ebc5925cf09f6da  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 52042 W: 8907 L: 8837 D: 34298 http://tests.stockfishchess.org/tests/view/5d0319420ebc5925cf09fe57  Furthermore; to confirm that the shuffle extension in this form indeed still brings Elo; one more test at VLTC was performed: VLTC: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 142022 W: 20963 L: 20435 D: 100624 http://tests.stockfishchess.org/tests/view/5d03630d0ebc5925cf0a011a  Bench: 3961247,True,3,2019-06-01
syzygy1,snicolet,2019-06-20 14:09:40+00:00,"Partial revert of ""Assorted trivial cleanups 5/2019"".  Since root_probe() and root_probe_wdl() do not reset all tbRank values if they fail; it is necessary to do this in rank_root_move(). This fixes issue #2196. Alternatively; the loop could be moved into both root_probe() and root_probe_wdl().  No functional change",True,3,2019-06-01
VoyagerOne,mcostalba,2019-06-14 17:59:17+00:00,Simplify SEE Pruning (#2191)  Simplify SEE Pruning  Note this should also be a speedup...  If givesCheck is extended we know (except for DC) that it will have a positive SEE. So this new logic will be triggered before doing another expensive SEE function.    STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 24429 W: 5484 L: 5368 D: 13577  http://tests.stockfishchess.org/tests/view/5cffbccd0ebc5925cf09a154    LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 28428 W: 4873 L: 4765 D: 18790  http://tests.stockfishchess.org/tests/view/5d0015f60ebc5925cf09acb1    Bench: 3897263,True,4,2019-06-01
Unknown,mcostalba,2019-06-14 06:22:02+00:00,Remove backmost_sq (#2190)  This is a non-functional simplification.    backmost_sq and frontmost_sq are redundant. It seems quite clear to always use frontmost_sq and use the correct color.    Non functional change.,True,4,2019-06-01
locutus2,mcostalba,2019-06-14 05:36:42+00:00,Increase pawns cache (#2187)  Increase size of the pawns table by the factor 8. This decreases the number of recalculations of pawn structure information significantly (at least at LTC).    I have done measurements for different depths and pawn cache sizes.  First are given the number of pawn entry calculations are done (in parentheses is the frequency that a call to probe triggers a pawn entry calculation). The delta% are the percentage of less done pawn entry calculations in comparison to master    VSTC:   bench 1 1 12  STC:    bench 8 1 16  LTC:    bench 64 1 20  VLTC:   bench 512 1 24                VSTC       STC         LTC          VLTC  master      82218(6%)  548935(6%)  2415422(7%)  9548071(7%)  pawncache*2 79859(6%)  492943(5%)  2084794(6%)  8275206(6%)  pawncache*4 78551(6%)  458758(5%)  1827770(5%)  7112531(5%)  pawncache*8 77963(6%)  439421(4%)  1649169(5%)  6128652(4%)    delta%(p2-m)  -2.9%      -10.2%      -13.7%       -13.3%  delta%(p4-m)  -4.5%      -16.4%      -24.3%       -25.5%  delta%(p8-m)  -5.2%      -20.0%      -31.7%       -35.8%    STC: (non-regression test because at STC the effect is smaller than at LTC)  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 22767 W: 5160 L: 5040 D: 12567  http://tests.stockfishchess.org/tests/view/5d00f6040ebc5925cf09c3e2    LTC:  LLR: 2.94 (-2.94;2.94) [0.00;4.00]  Total: 26340 W: 4524 L: 4286 D: 17530  http://tests.stockfishchess.org/tests/view/5d00a3810ebc5925cf09ba16    No functional change.,True,4,2019-06-01
VoyagerOne,mcostalba,2019-06-09 22:26:47+00:00,No DC prune in QS (#2185)  Don't prune discover checks in qSearch    STC:  LLR: 2.96 (-2.94;2.94) [0.50;4.50]  Total: 23176 W: 5320 L: 5039 D: 12817  http://tests.stockfishchess.org/tests/view/5cfbc9350ebc5925cf094ab3    LTC:  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 128428 W: 22222 L: 21679 D: 84527  http://tests.stockfishchess.org/tests/view/5cfbf0b70ebc5925cf094ebc    Bench: 3883245,True,6,2019-06-01
mcostalba,mcostalba,2019-06-09 12:57:08+00:00,Assorted trivial cleanups 5/2019  No functional change.  bench: 4178282,True,6,2019-06-01
locutus2,mcostalba,2019-06-09 12:34:51+00:00,Remove depth condition for ttPv (#2166)  Currently PV nodes with a depth <= 4 were ignored for ttPv. Now remove this constraint and use all PV nodes.    STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 52209 W: 11755 L: 11694 D: 28760  http://tests.stockfishchess.org/tests/view/5cebc2d30ebc5925cf07b93a    LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 20874 W: 3689 L: 3568 D: 13617  http://tests.stockfishchess.org/tests/view/5cec01fc0ebc5925cf07c62d,True,6,2019-06-01
Unknown,mcostalba,2019-06-09 12:33:34+00:00,Simplify passed pawns. (#2159)  This is a functional simplification.    If all of the stoppers are levers; a simple pawn push passes.    STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 41768 W: 9360 L: 9278 D: 23130  http://tests.stockfishchess.org/tests/view/5ce82ed60ebc5925cf073a79    LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 40463 W: 6964 L: 6875 D: 26624  http://tests.stockfishchess.org/tests/view/5ce87d0b0ebc5925cf07472b,True,6,2019-06-01
Unknown,mcostalba,2019-06-09 12:31:16+00:00,Remove a few file_of's (simplify adjacent_files_bb) #2171  This is a non-functional simplification that removes two file_of(s).    STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 22030 W: 5106 L: 4984 D: 11940  http://tests.stockfishchess.org/tests/view/5cf028de0ebc5925cf0839e7,True,6,2019-06-01
Unknown,mcostalba,2019-06-09 12:28:42+00:00,Simplify WeakUnopposedPawn #2181  This is a functional simplification.    Moves WeakUnopposedPawn to pawns.cpp and remove piece dependency.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 8699 W: 2000 L: 1853 D: 4846  http://tests.stockfishchess.org/tests/view/5cf7721b0ebc5925cf08ee79    LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 46605 W: 7969 L: 7890 D: 30746  http://tests.stockfishchess.org/tests/view/5cf7d5f70ebc5925cf08fa96,True,6,2019-06-01
VoyagerOne,mcostalba,2019-06-09 12:27:50+00:00,SEE Pruning Tweak (#2183)  Don't SEE prune any check extensions    STC (yellow):  LLR: -2.96 (-2.94;2.94) [0.50;4.50]  Total: 129934 W: 29390 L: 28905 D: 71639  http://tests.stockfishchess.org/tests/view/5cf6b1a70ebc5925cf08dedb    LTC:  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 102115 W: 17692 L: 17224 D: 67199  http://tests.stockfishchess.org/tests/view/5cf830710ebc5925cf090331,True,6,2019-06-01
Vizvezdenec,mcostalba,2019-06-09 12:26:53+00:00,Advanced pawn pushes tweak (#2175)  passed STC  http://tests.stockfishchess.org/tests/view/5cf586ee0ebc5925cf08c0ed  LLR: 2.96 (-2.94;2.94) [0.50;4.50]  Total: 29496 W: 6718 L: 6406 D: 16372    passed LTC  http://tests.stockfishchess.org/tests/view/5cf59b630ebc5925cf08c343  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 40778 W: 7057 L: 6765 D: 26956    original idea from early 2018 by @jerrydonaldwatson  Code slightly rewritten to be shorter and more logical; no functinal changes   compared to passed patch.,True,6,2019-06-01
Unknown,mcostalba,2019-06-09 12:24:06+00:00,"Simplify Outposts #2176  This is a functional simplification. This is NOT the exact version that was tested. Beyond the testing; an assignment was removed and a piece changes for consistency.  Instead of rewarding ANY square past an opponent pawn as an ""outpost;"" only use squares that are protected by our pawn. I believe this is more consistent with what the chess world calls an ""outpost.""  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 23540 W: 5387 L: 5269 D: 12884 http://tests.stockfishchess.org/tests/view/5cf51e6d0ebc5925cf08b823  LTC LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 53085 W: 9271 L: 9204 D: 34610 http://tests.stockfishchess.org/tests/view/5cf5279e0ebc5925cf08b992  bench 3424592",True,6,2019-06-01
31m059,mcostalba,2019-06-09 12:19:07+00:00,Simplify k-value for passers. Bench: 3854907 (#2182)  Stockfish evaluates passed pawns in part based on a variable k; which shapes the passed pawn bonus based on the number of squares between the current square and promotion square that are attacked by enemy pieces; and the number defended by friendly ones. Prior to this commit; we gave a large bonus when all squares between the pawn and the promotion square were defended; and if they were not; a somewhat smaller bonus if at least the pawn's next square was. However; this distinction does not appear to provide any Elo at STC or LTC.    Where do we go from here? Many promising Elo-gaining patches were attempted in the past few months to refine passed pawn calculation; by altering the definitions of unsafe and defended squares. Stockfish uses these definitions to choose the value of k; so those tests interact with this PR. Therefore; it may be worthwhile to retest previously promising but not-quite-passing tests in the vicinity of this patch.    STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 42344 W: 9455 L: 9374 D: 23515  http://tests.stockfishchess.org/tests/view/5cf83ede0ebc5925cf0904fb    LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 69548 W: 11855 L: 11813 D: 45880  http://tests.stockfishchess.org/tests/view/5cf8698f0ebc5925cf0908c8    Bench: 3854907,True,6,2019-06-01
Unknown,mcostalba,2019-05-31 12:35:39+00:00,Scale lazy threshold according to material. (#2170)  STC  LLR: 2.95 (-2.94;2.94) [0.50;4.50]  Total: 58543 W: 13238 L: 12782 D: 32523  http://tests.stockfishchess.org/tests/view/5cef3efa0ebc5925cf081f07    LTC  LLR: 3.70 (-2.94;2.94) [0.00;3.50]  Total: 82232 W: 14281 L: 13825 D: 54126  http://tests.stockfishchess.org/tests/view/5cef595d0ebc5925cf082441    bench 3807737,True,4,2019-05-01
Unknown,mcostalba,2019-05-29 08:00:32+00:00,Simplify semiopen_file (#2165)  This is a non-functional simplification. Since our file_bb handles either Files or Squares; using Square here removes some code. Not likely any performance difference despite the test.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 6081 W: 1444 L: 1291 D: 3346  http://tests.stockfishchess.org/tests/view/5ceb3e2e0ebc5925cf07ab03    Non functional change.,True,2,2019-05-01
vondele,mcostalba,2019-05-25 07:43:52+00:00,Remove one division. (#2158)  Can be included in the earlier calculation; with a small rounding difference.    passed STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 17912 W: 4044 L: 3915 D: 9953  http://tests.stockfishchess.org/tests/view/5ce711f90ebc5925cf070d0e    passed LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 56061 W: 9579 L: 9516 D: 36966  http://tests.stockfishchess.org/tests/view/5ce716820ebc5925cf070e37    Bench: 3817662,True,5,2019-05-01
31m059,mcostalba,2019-05-17 11:38:23+00:00,Allow RQ through pieces. Bench: 3415326 (#2153)  We evaluate defended and unsafe squares for a passed pawn push based on friendly and enemy rooks and queens on the passed pawn's file. Prior to this patch; we further required that these rooks and queens be able to directly attack the passed pawn. However; this restriction appears unnecessary and worth almost exactly 0 Elo at LTC.    The simplified code allows rooks and queens to attack/defend the passed pawn through other pieces of either color.    STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 29019 W: 6488 L: 6381 D: 16150  http://tests.stockfishchess.org/tests/view/5cdcf7270ebc5925cf05d30c    LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 54224 W: 9200 L: 9133 D: 35891  http://tests.stockfishchess.org/tests/view/5cddc6210ebc5925cf05eca3    Bench: 3415326,True,4,2019-05-01
svivanov72,mcostalba,2019-05-16 12:14:11+00:00,Remove unused code (#2150)  Remove an unused operator in has_game_cycle (thanks @vondele)  and modify its comment to explain other code.    No functional change.,True,3,2019-05-01
Unknown,mcostalba,2019-05-16 12:13:16+00:00,"Score and Select Best Thread in same loop (#2125)  This is a non-functional simplification that combines vote counting and thread selecting in the same loop.    It is possible that the best thread would be updated more frequently than master; but I'm not sure it matters here. Perhaps ""mostVotes"" is a better name than ""bestVote?""    STC (stopped early).  LLR: 0.70 (-2.94;2.94) [-3.00;1.00]  Total: 10714 W: 2329 L: 2311 D: 6074  http://tests.stockfishchess.org/tests/view/5ccc71470ebc5925cf03d244    No functional change.",True,3,2019-05-01
Unknown,mcostalba,2019-05-16 12:11:00+00:00,Consolidate some code in set_state. (#2151)  Non functional change.,True,3,2019-05-01
Unknown,mcostalba,2019-05-15 09:23:07+00:00,Update failedHighCnt rule #2063  Treat all threads the same as main thread and increment failedHighCnt on fail highs. This makes the search try again at lower depth.  @vondele suggested also changing the reset of failedHighCnt when there is a fail low. Tests including this passed so the branch has been updated to include both changes. failedHighCnt is now handled exactly the same in helper threads and the main thread. Thanks vondele :-)  STC @ 5+0.05 th 4 : LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 7769 W: 1704 L: 1557 D: 4508 http://tests.stockfishchess.org/tests/view/5c9f19520ebc5925cfffd2a1  LTC @ 20+0.2 th 8 : LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 37888 W: 5983 L: 5889 D: 26016 http://tests.stockfishchess.org/tests/view/5c9f57d10ebc5925cfffd696  Bench 3824325,True,2,2019-05-01
mcostalba,mcostalba,2019-05-15 08:52:15+00:00,"Revert ""Make rootDepth local to search. (#2077)""  This reverts commit 44c320a572188b5875291103edb344c584b91d19.  Fix a compile error.  Bench: 3824325",True,2,2019-05-01
mstembera,mcostalba,2019-05-15 08:41:58+00:00,Remove per thread instances of Endgames. (#2056)  Similar to PSQT we only need one instance of the Endgames resource. The current per thread copies are identical and read only(after initialization) so from a design point of view it doesn't make sense to have them.    Tested for no slowdown.  http://tests.stockfishchess.org/tests/view/5c94377a0ebc5925cfff43ca  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 17320 W: 3487 L: 3359 D: 10474    No functional change.,True,2,2019-05-01
vondele,mcostalba,2019-05-15 08:35:58+00:00,Make rootDepth local to search. (#2077)  passed STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 61869 W: 13668 L: 13626 D: 34575  http://tests.stockfishchess.org/tests/view/5ca660eb0ebc5925cf004f0c    No functional change.,True,2,2019-05-01
Unknown,mcostalba,2019-05-15 08:31:21+00:00,Simplify connected #2114  This is a functional simplification that simplifies some of the math for connected pawns. The bench is different because I moved a /2 from opposed into the connected array.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 37954 W: 8504 L: 8415 D: 21035 http://tests.stockfishchess.org/tests/view/5cbf599a0ebc5925cf028156  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 27780 W: 4682 L: 4572 D: 18526 http://tests.stockfishchess.org/tests/view/5cbf6a5e0ebc5925cf0284b8  Bench 3824325,True,2,2019-05-01
MJZ1977,mcostalba,2019-05-15 08:26:32+00:00,Simplify reduction formula #2122  Simplify reduction formula    No functional change.,True,2,2019-05-01
Unknown,mcostalba,2019-05-15 08:24:00+00:00,Simplify Thread Voting Scheme #2129  This is a functional simplification of the math in the voting scheme.    It took a bit longer to pass LTC 8 threads; so perhaps more testing is needed at longer times and/or more threads.    STC 4 threads  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 22315 W: 4852 L: 4732 D: 12731  http://tests.stockfishchess.org/tests/view/5ccc86280ebc5925cf03d439    STC 8 threads  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 42427 W: 8451 L: 8369 D: 25607  http://tests.stockfishchess.org/tests/view/5cccb67c0ebc5925cf03da90    LTC 4 Threads  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 23513 W: 4208 L: 4092 D: 15213  http://tests.stockfishchess.org/tests/view/5ccce94d0ebc5925cf03e1ec    LTC 8 Threads  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 70098 W: 11442 L: 11399 D: 47257  http://tests.stockfishchess.org/tests/view/5ccd22aa0ebc5925cf03e463    No functional change (in single thread),True,2,2019-05-01
svivanov72,mcostalba,2019-05-15 08:22:21+00:00,Precompute repetition info (#2132)  Store repetition info in StateInfo instead of recomputing it in  three different places. This saves some work in has_game_cycle()  where this info is needed for positions before the root.    Tested for non-regression at STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 34104 W: 7586 L: 7489 D: 19029  http://tests.stockfishchess.org/tests/view/5cd0676e0ebc5925cf044b56    No functional change.,True,2,2019-05-01
Unknown,mcostalba,2019-05-15 08:18:49+00:00,Remove pawn count in space() calculation #2139  Simplification. Various attempts to optimise the pawn count bonus showed little effect; so remove pawn count altogether and compensate by subtracting 1 instead of 4.  STC 10+0.1 th 1: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 152244 W: 33709 L: 33847 D: 84688 http://tests.stockfishchess.org/tests/view/5cceed330ebc5925cf04170e  LTC 60+0.6 th 1: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 24100 W: 4079 L: 3964 D: 16057 http://tests.stockfishchess.org/tests/view/5cd5b6b80ebc5925cf04e889  Bench: 3648841,True,2,2019-05-01
Unknown,mcostalba,2019-05-15 08:12:38+00:00,Add eg component to evaluate_shelter() #2137  Add an endgame component to the blockedstorm penalty so that the penalty applies more uniformly through the game.  STC 10+0.1 th 1 : LLR: -2.95 (-2.94;2.94) [0.50;4.50] Total: 94063 W: 21426 L: 21118 D: 51519 http://tests.stockfishchess.org/tests/view/5cd4605c0ebc5925cf04bf43  LTC 60+0.6 th 1 : LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 188232 W: 32808 L: 32090 D: 123334 http://tests.stockfishchess.org/tests/view/5cd47d0a0ebc5925cf04c4fd  Refactored code with higher constant values gave a more convincing LTC result: LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 30050 W: 5330 L: 5066 D: 19654 http://tests.stockfishchess.org/tests/view/5cd6a0000ebc5925cf050653  Bench: 3687700,True,2,2019-05-01
vondele,mcostalba,2019-05-15 07:52:27+00:00,Allow for higher depths. (#2147)  High rootDepths; selDepths and generally searches are increasingly  common with long time control games; analysis; and improving hardware.  In this case; depths of MAX_DEPTH/MAX_PLY (128) can be reached;  and the search tree is truncated.    In principle MAX_PLY can be easily increased; except for a technicality  of storing depths in a signed 8 bit int in the TT. This patch increases  MAX_PLY by storing the depth in an unsigned 8 bit; after shifting by the  most negative depth stored in TT (DEPTH_NONE).    No regression at STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 42235 W: 9565 L: 9484 D: 23186  http://tests.stockfishchess.org/tests/view/5cdb35360ebc5925cf0595e1    Verified to reach high depths on  k1b5/1p1p4/pP1Pp3/K2pPp2/1P1p1P2/3P1P2/5P2/8 w - -  info depth 142 seldepth 154 multipv 1 score cp 537 nodes 26740713110 ...    No bench change.,True,2,2019-05-01
Vizvezdenec,mcostalba,2019-05-15 07:49:29+00:00,Decrease reduction in case we had singular extension. #2146  Passed STC http://tests.stockfishchess.org/tests/view/5cda71790ebc5925cf057a84  LLR: 2.95 (-2.94;2.94) [0.50;4.50]  Total: 73454 W: 16482 L: 15954 D: 41018    Passed LTC http://tests.stockfishchess.org/tests/view/5cdab17b0ebc5925cf05822f  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 56696 W: 9877 L: 9538 D: 37281    Original idea by @locutus2    bench 3378510,True,2,2019-05-01
miguel-l,snicolet,2019-05-09 16:00:58+00:00,Remove PvNode template from reduction  This functional simplification removes the PvNode reduction and adjusts the ttPv lmr condition accordingly. Their definitions only differ by the inclusions of ttPv. Aside from this; shallow move pruning definition will be the only other functional difference; but this does not seem to matter too much.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 58908 W: 12980 L: 12932 D: 32996 http://tests.stockfishchess.org/tests/view/5cd1aaaa0ebc5925cf046c6a  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20351 W: 3521 L: 3399 D: 13431 http://tests.stockfishchess.org/tests/view/5cd23fa70ebc5925cf047cd2  Bench: 3687854,True,3,2019-05-01
svivanov72,snicolet,2019-05-09 13:39:57+00:00,Fix cycle detection in presence of repetitions  In master search() may incorrectly return a draw score in the following corner case: there was a 2-fold repetition during the game; and the current position can be reached by a move from a repeated one. This case is treated as an upcoming 3-fold repetition; which it is not.  Here is a testcase demonstrating the issue (note that the moves after FEN are required). The input:    position fen 8/8/8/8/8/8/p7/2k4K b - - 0 1 moves c1b1 h1g1 b1c1 g1h1 c1b1 h1g1 b1a1 g1h1   go movetime 1000  produces the output:    [...]   info depth 127 seldepth 2 multipv 1 score cp 0 [...]   bestmove a1b1  saying that the game will be drawn by repetion. However the other possible move for black; Kb2; avoids repetitions and wins. The patch fixes this behavior. In particular it finds mate in 10 in the above position.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 10604 W: 2390 L: 2247 D: 5967 http://tests.stockfishchess.org/tests/view/5cb373e00ebc5925cf0167bf  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 19620 W: 3308 L: 3185 D: 13127 http://tests.stockfishchess.org/tests/view/5cb3822f0ebc5925cf016b2d  Bench is not changed since it does not test positions with history of moves.  Bench: 3184182,True,3,2019-05-01
locutus2,snicolet,2019-05-09 13:25:39+00:00,Less LMR at root  Do no LMR for the first four moves if at root node.  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 19686 W: 4524 L: 4261 D: 10901 http://tests.stockfishchess.org/tests/view/5cd3577b0ebc5925cf04a089  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 88335 W: 15193 L: 14766 D: 58376 http://tests.stockfishchess.org/tests/view/5cd35e600ebc5925cf04a1c3  Bench: 3184182,True,3,2019-05-01
locutus2,snicolet,2019-05-05 21:18:17+00:00,LMR for captures not cracking alpha  Enable LMR for a capture/promotion move which does not seem to have a good chance to fail high according to static eval and value of captured piece.  STC: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 40477 W: 9158 L: 8792 D: 22527 http://tests.stockfishchess.org/tests/view/5cceedc60ebc5925cf04174f  LTC: LLR: 2.94 (-2.94;2.94) [0.00;3.50] Total: 21926 W: 3873 L: 3634 D: 14419 http://tests.stockfishchess.org/tests/view/5ccf04310ebc5925cf041ab0  Bench: 3644175,True,6,2019-05-01
VoyagerOne,mcostalba,2019-05-04 11:41:53+00:00,Stat Score reset at rootNode - Bench: 3393330 (#2124)  At rootNode reset great great grandchildren stat score i.e (ss + 4)->statScore = 0    STC: (yellow)  LLR: -2.96 (-2.94;2.94) [0.50;4.50]  Total: 256079 W: 57423 L: 56315 D: 142341  http://tests.stockfishchess.org/tests/view/5ccb0c420ebc5925cf03a6a5    LTC:  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 61550 W: 10611 L: 10260 D: 40679  http://tests.stockfishchess.org/tests/view/5ccbf9d00ebc5925cf03c487    Bench: 3393330,True,5,2019-05-01
mcostalba,mcostalba,2019-05-02 17:30:26+00:00,Assorted trivial cleanups 4/2019  No functional change.,True,3,2019-05-01
vondele,mcostalba,2019-05-02 17:22:29+00:00,Simplified shuffle extension version (#2121)  only the extension part of the shuffle patch is sufficient to  pass [0;3.5] bounds at VLTC as shown by two more tests.    http://tests.stockfishchess.org/tests/view/5cc168bc0ebc5925cf02bda8  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 120684 W: 17875 L: 17400 D: 85409    http://tests.stockfishchess.org/tests/view/5cc14d510ebc5925cf02bcb5  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 68415 W: 10250 L: 9905 D: 48260    this patch proposes to simplify back to this basic and easier to  understand version. In case there is a need to run a [-3; 1] VLTC on  this one; it can be done; but it is resource intensive; and not needed  IMO.    Bench: 3388643,True,3,2019-05-01
vondele,mcostalba,2019-04-27 18:47:06+00:00,Allow for address sanitizer. (#2119)  Properly allow for sanitize=address (-fsanitize=address) as an argument to the Makefile.    No functional change,True,5,2019-04-01
mcostalba,mcostalba,2019-04-27 09:37:51+00:00,Fix bench number of previous patch  bench: 3388643,True,5,2019-04-01
Vizvezdenec,mcostalba,2019-04-27 09:31:55+00:00,Include bishop protection in king Danger evaluation. #2118  Same idea as fisherman's knight protection.    passed STC  LLR: 2.96 (-2.94;2.94) [0.50;4.50]  Total: 17133 W: 3952 L: 3701 D: 9480   http://tests.stockfishchess.org/tests/view/5cc3550b0ebc5925cf02dada    passed LTC  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 37316 W: 6470 L: 6188 D: 24658   http://tests.stockfishchess.org/tests/view/5cc3721d0ebc5925cf02dc90    Looking at this 2 ideas being recent clean elo gainers I have a feeling that we can add also rook and queen protection bonuses or overall move this stuff in pieces loop in the same way as we do pieces attacking bonuses on their kingring... :) Thx fisherman for original idea.    Bench 3429173,True,5,2019-04-01
MJZ1977,mcostalba,2019-04-27 09:25:23+00:00,Shuffle detection #2108  Bench: 3402947,True,5,2019-04-01
vondele,mcostalba,2019-04-24 17:51:57+00:00,Remove useless initializations (#2115)  Removes two unneeded inits; they are always set before their use later on.    No functional change.,True,2,2019-04-01
Unknown,mcostalba,2019-04-20 06:34:14+00:00,Remove DistanceRing #2107  Remove the DistanceRing array. This reduces the memory footprint by about 4kb.  http://tests.stockfishchess.org/tests/view/5cba35350ebc5925cf020d7f LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 101421 W: 22491 L: 22528 D: 56402  No functional change.,True,5,2019-04-01
vondele,mcostalba,2019-04-19 15:33:26+00:00,Remove capping in reduction (#2110)  Saves two std::min.    Bench is unchanged to high depth; but in principle this is a functional change so tested both STC and LTC.    passed STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 78193 W: 17220 L: 17210 D: 43763  http://tests.stockfishchess.org/tests/view/5cb789540ebc5925cf01b90b    passed LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 93846 W: 15964 L: 15962 D: 61920  http://tests.stockfishchess.org/tests/view/5cb8066d0ebc5925cf01c72b    Bench: 3402947,True,4,2019-04-01
vondele,mcostalba,2019-04-18 14:53:52+00:00,Simplify distance (#2109)  Only called with Squares as argument; so remove unused variants.    As this is just syntax changes; only verified bench at high depth.    No functional change.,True,3,2019-04-01
Unknown,mcostalba,2019-04-17 19:13:39+00:00,"Remove Movepick::move (#2085)  The ""move"" class variable is Movepick is removed (removes some abstraction) which saves a few assignment operations; and the effects of ""filter"" is limited to the current move (movePtr). The resulting code is a bit more verbose; but it is also more clear what is going on. This version is NOT tested; but is substantially similar to:    STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 29191 W: 6474 L: 6367 D: 16350  http://tests.stockfishchess.org/tests/view/5ca7aab50ebc5925cf006e50    This is a non-functional simplification.",True,2,2019-04-01
Unknown,mcostalba,2019-04-16 21:10:53+00:00,Move pawnsOnSquares to Position (#2100)  We can remove the values in Pawns if we just use the piece arrays in Position. This reduces the size of a pawn entry. This simplification passed individually; and in concert with ps_passedcount100 (removes passedCount storage in pawns.).    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 19957 W: 4529 L: 4404 D: 11024  http://tests.stockfishchess.org/tests/view/5cb3c2d00ebc5925cf016f0d    Combo STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 17368 W: 3925 L: 3795 D: 9648  http://tests.stockfishchess.org/tests/view/5cb3d3510ebc5925cf01709a    This is a non-functional simplification.,True,1,2019-04-01
Unknown,mcostalba,2019-04-16 14:12:47+00:00,Calculate passedCount real-time #2099  This is a non-functional simplification which removes the passedCount variable in pawns.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 27982 W: 6227 L: 6118 D: 15637  http://tests.stockfishchess.org/tests/view/5cb3cdd30ebc5925cf017025    Combo STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 17368 W: 3925 L: 3795 D: 9648  http://tests.stockfishchess.org/tests/view/5cb3d3510ebc5925cf01709a    Non functional test.,True,1,2019-04-01
Unknown,mcostalba,2019-04-16 14:09:36+00:00,Remove semiopenFiles in pawns and simplify space #2102  This is a functional simplification.        1. semiopenFiles is removed in pawns and uses the piece arrays in position instead.        2. popcount is removed in space calculations and uses pawn piece count instead.    STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 33327 W: 7423 L: 7324 D: 18580  http://tests.stockfishchess.org/tests/view/5cb4be090ebc5925cf018511    LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 10173 W: 1774 L: 1636 D: 6763  http://tests.stockfishchess.org/tests/view/5cb4c5920ebc5925cf018696    bench 3402947,True,1,2019-04-01
vondele,mcostalba,2019-04-13 15:17:47+00:00,Remove two useless assignments (#2093)  These variables are initialized before their use in the movepicker loop.    passed STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 138732 W: 30727 L: 30838 D: 77167  http://tests.stockfishchess.org/tests/view/5cb07af40ebc5925cf012c32    No functional change.,True,5,2019-04-01
vondele,mcostalba,2019-04-13 15:15:15+00:00,Give penalty for all early quiets of prev. ply  passed STC: LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 32884 W: 7283 L: 7184 D: 18417 http://tests.stockfishchess.org/tests/view/5cacb1b20ebc5925cf00ce97  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 22869 W: 3920 L: 3803 D: 15146 http://tests.stockfishchess.org/tests/view/5cacbd760ebc5925cf00cfce  Bench: 3723099,True,5,2019-04-01
Unknown,mcostalba,2019-04-13 14:58:41+00:00,Simplify Connected Pawn Scoring #2090  This is a functional simplification that simplifies connected scoring of pawns.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 37472 W: 8318 L: 8228 D: 20926 http://tests.stockfishchess.org/tests/view/5cae74ef0ebc5925cf00f8a5  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 43035 W: 7366 L: 7281 D: 28388 http://tests.stockfishchess.org/tests/view/5caea3b50ebc5925cf00fe1e  Bench: 3470173,True,5,2019-04-01
mcostalba,mcostalba,2019-04-12 11:48:04+00:00,"Revert ""Shuffle detection #2064""  It causes a serious regression hanging a simple fixed depth search. Reproducible with:  position fen q1B5/1P1q4/8/8/8/6R1/8/1K1k4 w - - 0 1 go depth 13  The reason is a search tree explosion due to:  if (... && depth < 3 * ONE_PLY)       extension = ONE_PLY;  This is very dangerous code by itself because triggers **at the leafs** and in the above position keeps extending endlessly. In normal games time deadline makes the search to stop sooner or later; but in fixed seacrch we just hang possibly for a very long time. This is not acceptable because 'go depth 13' shall not be a surprise for any position.  This patch reverts commit 76f1807baa90eb69f66001d25df2a28533f9406f. and fixes the issue https://github.com/official-stockfish/Stockfish/issues/2091  Bench: 3243738",True,4,2019-04-01
miguel-l,mcostalba,2019-04-10 17:35:47+00:00,Extend dangerous passed pawn moves (#2089)  Introduce a new search extension when pushing an advanced passed pawn is  also suggested by the first killer move. There have been previous tests  which have similar ideas; mostly about pawn pushes; but it seems to be  overkill to extend too many moves. My idea is to limit the extension to  when a move happens to be noteworthy in some other way as well; such as  in this case; when it is also a killer move.    STC:  LLR: 2.96 (-2.94;2.94) [0.50;4.50]  Total: 19027 W: 4326 L: 4067 D: 10634  http://tests.stockfishchess.org/tests/view/5cac2cde0ebc5925cf00c36d    LTC:  LLR: 2.94 (-2.94;2.94) [0.00;3.50]  Total: 93390 W: 15995 L: 15555 D: 61840  http://tests.stockfishchess.org/tests/view/5cac42270ebc5925cf00c4b9    For future tests; it looks like this will interact heavily with passed  pawn evaluation. It may be good to try more variants of some of the more  promising evaluations tests/tweaks.    Bench: 3666092,True,2,2019-04-01
Unknown,mcostalba,2019-04-10 17:33:57+00:00,Simplify castlingPath (#2088)  Instead of looping through kfrom;kto; rfrom; rto; we can use BetweenBB. This is less lines of code and it is more clear what castlingPath actually is. Personal benchmarks are all over the place. However; this code is only executed when loading a position; so performance doesn't seem that relevant.    No functional change.,True,2,2019-04-01
31m059,mcostalba,2019-04-09 17:35:17+00:00,Raise kingDanger threshold and adjust constant term #2087  The kingDanger term is intended to give a penalty which increases rapidly in the middlegame but less so in the endgame. To this end; the middlegame component is quadratic; and the endgame component is linear. However; this produces unintended consequences for relatively small values of kingDanger: the endgame penalty will exceed the middlegame penalty. This remains true up to kingDanger = 256 (a S(16; 16) penalty); so some of these inaccurate penalties are actually rather large.    In this patch; we increase the threshold for applying the kingDanger penalty to eliminate some of this unintended behavior. This was very nearly; but not quite; sufficient to pass on its own. The patch was finally successful by integrating a second kingDanger tweak by @Vizvezdenec; increasing the kingDanger constant term slightly and improving both STC and LTC performance.    Where do we go from here? I propose that in the future; any attempts to tune kingDanger coefficients should also consider tuning the kingDanger threshold. The evidence shows clearly that it should not be automatically taken to be zero.    Special thanks to @Vizvezdenec for the kingDanger constant tweak. Thanks also to all the approvers and CPU donors who made this possible!    STC:  LLR: -2.96 (-2.94;2.94) [0.00;4.00]  Total: 141225 W: 31239 L: 30846 D: 79140  http://tests.stockfishchess.org/tests/view/5cabbdb20ebc5925cf00b86c    LTC:  LLR: 2.95 (-2.94;2.94) [0.00;4.00]  Total: 30708 W: 5296 L: 5043 D: 20369  http://tests.stockfishchess.org/tests/view/5cabff760ebc5925cf00c22d    Bench: 3445945,True,1,2019-04-01
Unknown,mcostalba,2019-04-09 11:46:12+00:00,Remove BetweenBB Array #2076  Non functional change.,True,1,2019-04-01
mcostalba,web-flow,2019-04-06 10:43:41+00:00,Fix sed for OS X (#2080)  The sed command is a bit different in Mac OS X (why not!).    The �-i� option required a parameter to tell what extension to add for the   backup file. To fix it; just add extension for backup file; for example �.bak�     Fix broken Trevis CI test    No functional change.,True,5,2019-04-01
erbsenzaehler,mcostalba,2019-04-06 09:15:17+00:00,Make ONE_PLY value independent again  And a Trevis CI test to catch future issues.  No functional change.,True,5,2019-04-01
mcostalba,web-flow,2019-04-06 00:03:15+00:00,Fix a missing assignment in previous commit  While reformatting the patch; I got wrong a statement and converted it badly.,True,5,2019-04-01
Unknown,mcostalba,2019-04-05 18:37:16+00:00,Use average bestMoveChanges across all threads #2072  The current update only by main thread depends on the luck of whether main thread sees any/many changes to the best move or not. It then makes large; lumpy changes to the time to be used (1x; 2x; 3x; etc) depending on that sample of 1. Use the average across all threads to get a more reliable number with a smoother distribution.  STC @ 5+0.05 th 4 : LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 51899 W: 11446 L: 11029 D: 29424 http://tests.stockfishchess.org/tests/view/5ca32ff20ebc5925cf0016fb  STC @ 5+0.05 th 8 : LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 13851 W: 2843 L: 2620 D: 8388 http://tests.stockfishchess.org/tests/view/5ca35ae00ebc5925cf001adb  LTC @ 20+0.2 th 8 : LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 48527 W: 7941 L: 7635 D: 32951 http://tests.stockfishchess.org/tests/view/5ca37cb70ebc5925cf001cec  Further work: Similar changes might be possible for the fallingEval and timeReduction calculations (and elsewhere?); using either the min; average or max values across all threads.  Bench 3506898,True,4,2019-04-01
MJZ1977,mcostalba,2019-04-04 07:40:34+00:00,Remove pureStaticEval #2069  Remove pureStaticEval variable and keep only one static evaluation (ss->staticEval).  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 64617 W: 14348 L: 14312 D: 35957 Elo -0.24 http://tests.stockfishchess.org/tests/view/5c9e1ad70ebc5925cfffc106  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 82200 W: 13703 L: 13680 D: 54817 Elo -0.24 http://tests.stockfishchess.org/tests/view/5c9e4efd0ebc5925cfffc68b  Bench : 3506898,True,3,2019-04-01
MJZ1977,mcostalba,2019-04-04 06:49:35+00:00,Add attacked by 2 pawns to attackedBy2 (#2074)  Add squares attacked by 2 pawns to the attackedBy2 array    STC :  LLR: -2.95 (-2.94;2.94) [0.50;4.50]  Total: 132722 W: 29583 L: 29090 D: 74049  http://tests.stockfishchess.org/tests/view/5ca231ba0ebc5925cf000794    LTC :  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 94589 W: 16161 L: 15718 D: 62710  http://tests.stockfishchess.org/tests/view/5ca25d180ebc5925cf000ba4    Bench: 3337864,True,3,2019-04-01
mcostalba,web-flow,2019-03-31 09:47:36+00:00,Assorted trivial cleanups 3/2019 (#2030)  No functional change.,True,6,2019-03-01
Unknown,mcostalba,2019-03-31 09:28:48+00:00,Use simple array for Pawns Connected bonus #2061  Simplification which removes the pawns connected array. Instead of storing the values in an array; the values are calculated real-time. This is about 1.6% faster on my machines.  Performance: master ave nps: 159;248;672 patch ave nps: 161;905;592  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 20363 W: 4579 L: 4455 D: 11329 http://tests.stockfishchess.org/tests/view/5c9925ba0ebc5925cfff79a6  Non functional change.,True,6,2019-03-01
MJZ1977,mcostalba,2019-03-31 08:51:08+00:00,Shuffle detection #2064  Shuffle detection procedure :    Shuffling positions are detected if        the last 36 moves are reversible (rule50_count() > 36);      the position have been already in the TT;      there is a still a pawn on the board (to avoid special endings like KBN vs K).    The position is then judged as a draw.    An extension is realized if we already made 14 successive reversible moves in PV to accelerate the detection of the eventual draw.    To go further : we can still improve the idea. The length of the tests need a lot of ressources.        the limit of 36 is logic but must be checked again for special zugzwang positions;      this limit can be decreased in special positions;      the limit of 14 moves for extension has not been tuned.    STC  LLR: -2.94 (-2.94;2.94) [0.50;4.50]  Total: 32595 W: 7273 L: 7275 D: 18047 Elo +0.43  http://tests.stockfishchess.org/tests/view/5c90aa330ebc5925cfff1768    LTC  LLR: 2.95 (-2.94;2.94) [0.00;3.50]  Total: 51249 W: 8807 L: 8486 D: 33956 Elo +1.85  http://tests.stockfishchess.org/tests/view/5c90b2450ebc5925cfff1800    VLTC  LLR: 2.96 (-2.94;2.94) [0.00;3.50]  Total: 137974 W: 20503 L: 19983 D: 97488 Elo +1.05  http://tests.stockfishchess.org/tests/view/5c9243a90ebc5925cfff2a93    Bench: 3548313,True,6,2019-03-01
Unknown,mcostalba,2019-03-31 08:48:27+00:00,Replace std::mins/max with clamp function (#2062)  Adding a clamp function makes some of these range limitations a bit prettier and removes some #include's.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 28117 W: 6300 L: 6191 D: 15626  http://tests.stockfishchess.org/tests/view/5c9aa1df0ebc5925cfff8fcc    Non functional change.,True,6,2019-03-01
vondele,mcostalba,2019-03-31 08:44:55+00:00,Remove duplication. (#2068)  always use the implementation of gives_check in position; no need to  hand-inline part of the implementation in search.    LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 57895 W: 12632 L: 12582 D: 32681  http://tests.stockfishchess.org/tests/view/5c9eaa4b0ebc5925cfffc9e3    No functional change.,True,6,2019-03-01
Unknown,mcostalba,2019-03-31 08:43:20+00:00,Accessor for SquareBB #2067  This is a non-functional code style change.    If we add an accessor function for SquareBB we can consolidate all of the asserts. This is also a bit cleaner because all SquareBB accesses go through this method making future changes easier to manage.    STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 63406 W: 14084 L: 14045 D: 35277  http://tests.stockfishchess.org/tests/view/5c9ea6100ebc5925cfffc9af    No functional change.,True,6,2019-03-01
Unknown,mcostalba,2019-03-24 16:41:25+00:00,Simplify pawn asymmetry (remove use of semiopen files). (#2054)  This is a functional simplification.    To me; the exclusive OR of semiopenFiles here is quite convoluted. Looks like it can be removed.    STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 43885 W: 9731 L: 9653 D: 24501  http://tests.stockfishchess.org/tests/view/5c9041680ebc5925cfff10ea    LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 68437 W: 11577 L: 11533 D: 45327  http://tests.stockfishchess.org/tests/view/5c9101740ebc5925cfff1cbf    bench 3575627,True,6,2019-03-01
vondele,mcostalba,2019-03-24 16:40:29+00:00,Remove unneeded condition. (#2057)  This is covered by the line just before. If we would like to protect  against the piece value of e.g. a N == B; this could be done by an  assert; no need to do this at runtime.    No functional change.,True,6,2019-03-01
Unknown,mcostalba,2019-03-24 16:37:38+00:00,Simplify Passed Pawns (#2058)  This is a non-functional simplification/speedup.    The truth-table for popcount(support) >= popcount(lever) - 1 is:  ------------------lever  ------------------0-------1---------2  support--0------X-------X---------0  -----------1------X-------X---------X  -----------2------X-------X---------X    Thus; it is functionally equivalent to just do: support || !more_than_one(lever) which removes the expensive popcounts and the -1.    Result of 20 runs:  base (...h_master.exe) = 1451680 +/- 8202  test (./stockfish ) = 1454781 +/- 8604  diff = +3101 +/- 931    STC  LLR: 2.94 (-2.94;2.94) [-3.00;1.00]  Total: 35424 W: 7768 L: 7674 D: 19982  Http://tests.stockfishchess.org/tests/view/5c970f170ebc5925cfff5e28    No functional change.,True,6,2019-03-01
Unknown,mcostalba,2019-03-20 13:57:34+00:00,Remove !extension check #2045  While looking at pruning using see_ge() (which is very valuable) it became apparent that the !extension test is not adding any value - simplify it away.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 56843 W: 12621 L: 12569 D: 31653 http://tests.stockfishchess.org/tests/view/5c8588cb0ebc5925cffe77f4  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 78622 W: 13223 L: 13195 D: 52204 http://tests.stockfishchess.org/tests/view/5c8611cc0ebc5925cffe7f86  Further work could be to optimize the remaining see_ge() test. The idea of less pruning at higher depths is valuable; but perhaps the test (-PawnValueEg * depth) can be improved.  Bench: 3188688,True,2,2019-03-01
CoffeeOne,mcostalba,2019-03-20 13:50:41+00:00,Skip skipping thread scheme (#1972)    Several simplification tests (all with the bounds [-3;1]) were run:  5+0.05 8 threads; failed very quickly:  http://tests.stockfishchess.org/tests/view/5c439a020ebc5902bb5d3970    20+0.2 8 threads; also failed; but needed a lot more games:  http://tests.stockfishchess.org/tests/view/5c44b1b70ebc5902bb5d4e34    60+0.6 8 threads passed:  http://tests.stockfishchess.org/tests/view/5c48bfe40ebc5902bca15325    60+0.6 4 threads passed:  http://tests.stockfishchess.org/tests/view/5c4b71a00ebc593af5d49904    No functional change.,True,2,2019-03-01
mcostalba,web-flow,2019-03-12 07:35:10+00:00,Increase thread stack for OS X (#2035)  On OS X threads other than the main thread are created with a reduced stack  size of 512KB by default; this is dangerously low for deep searches; so  adjust it to TH_STACK_SIZE. The implementation calls pthread_create() with  proper stack size parameter.    Verified for no regression at STC enabling the patch on all platforms where  pthread is supported.    LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 50873 W: 9768 L: 9700 D: 31405    No functional change.,True,1,2019-03-01
Unknown,mcostalba,2019-03-10 09:53:39+00:00,Remove popcount16() (#2038)  This is a non-functional simplification / code-style change.    This popcount16 method does nothing but initialize the PopCnt16 arrays.    This can be done in a single bitset line; which is less lines and more clear. Performance for this code is moot.    No functional change.,True,6,2019-03-01
Unknown,mcostalba,2019-03-10 09:47:42+00:00,Simplify failedLow away #1986  FailedLow doesn't seem to add any value so remove it.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 43915 W: 9682 L: 9604 D: 24629 http://tests.stockfishchess.org/tests/view/5c5339770ebc592fc7baef74  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 58515 W: 9670 L: 9609 D: 39236 http://tests.stockfishchess.org/tests/view/5c53cc840ebc592fc7baf6c1  Ideas for further work:      Tune the values in the revised fallingEval calculation     Consider adding a term using delta; e.g. c * (delta - 20) as an indicator of eval instability  Bench: 3318033,True,6,2019-03-01
mcostalba,mcostalba,2019-03-09 12:28:11+00:00,"Revert ""Allowing singular extension in mate positions""  It was causing an assert: value > -VALUE_INFINITE under some conditions.  See https://github.com/official-stockfish/Stockfish/issues/2036  Bench: 3318033",True,5,2019-03-01
Unknown,mcostalba,2019-03-05 19:48:29+00:00,Remove FutilityMoveCounts array. (#2024)  This is a functional simplification that removes the FutilityMoveCounts array with a simple equation using only ints.    LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 14175 W: 3123 L: 2987 D: 8065    LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 9900 W: 1735 L: 1597 D: 6568    Bench: 3380343,True,1,2019-03-01
Unknown,mcostalba,2019-03-05 18:02:04+00:00,Shrink Reductions[] array to one dimension  This is a non-functional patch which shrinks the reductions array. This saves about 8Kb of memory.  The only slow part of master's reductions array is the calculation of the log values; so using a separate array for those values and calculating the rest real-time appears to be just as fast as master.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 63245 W: 13906 L: 13866 D: 35473 http://tests.stockfishchess.org/tests/view/5c7b571f0ebc5925cffdc104  No funcional change.,True,1,2019-03-01
SFisGOD,mcostalba,2019-03-05 13:54:25+00:00,Pawn value tweak  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 47166 W: 10664 L: 10311 D: 26191 http://tests.stockfishchess.org/tests/view/5c7dfc370ebc5925cffdf830  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 35439 W: 6034 L: 5767 D: 23638 http://tests.stockfishchess.org/tests/view/5c7e41020ebc5925cffdfe9b  Bench: 3470519,True,1,2019-03-01
mcostalba,mcostalba,2019-03-05 10:13:02+00:00,Assorted trivial cleanups 2/2019  No functional change.,True,1,2019-03-01
Vizvezdenec,mcostalba,2019-03-05 10:10:10+00:00,Add continuation history 5  Original patch passed STC: http://tests.stockfishchess.org/tests/view/5c7439ff0ebc5925cffd3e64 LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 26348 W: 5926 L: 5632 D: 14790  and LTC: http://tests.stockfishchess.org/tests/view/5c745a8b0ebc5925cffd41a8 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 198411 W: 33238 L: 32510 D: 132663  But had undefined behavior. After fixing (thx to @vondele )  passed LTC: http://tests.stockfishchess.org/tests/view/5c763c7c0ebc5925cffd5de2 LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 112253 W: 18711 L: 18225 D: 75317  bench 3049229,True,1,2019-03-01
vondele,mcostalba,2019-02-27 12:36:48+00:00,Remove skipQuiets with mate fix. (#2021)  This removes the skipQuiets variable; as was done in an earlier round by  @protonspring; but fixes an oversight which led to wrong mate  announcements. Quiets can only be pruned when there is no mate score; so  set moveCountPruning at the right spot.    tested as a fix at STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 66321 W: 14690 L: 14657 D: 36974  http://tests.stockfishchess.org/tests/view/5c74f3170ebc5925cffd4b3c    and as the full patch at LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 25903 W: 4341 L: 4228 D: 17334  http://tests.stockfishchess.org/tests/view/5c7540030ebc5925cffd506f    Bench: 3292342,True,2,2019-02-01
mcostalba,mcostalba,2019-02-26 12:23:09+00:00,"Revert ""Remove skipQuiets variable in search()""  This reverts commit 76d2f5b94a0df20d84ccf922bd1c0fcf1c779090.  Due to a bug; see https://github.com/official-stockfish/Stockfish/issues/2019  Bench: 3516616",True,1,2019-02-01
Kurtbusch,snicolet,2019-02-21 18:53:03+00:00,Add KNNvKP Endgame Heuristic  This is a somewhat different patch. It fixes blindspots for  two knights vs pawn endgame.  With local testing starting from random KNNvKP positions where the pawn has not advanced beyond the 4th rank (thanks @protonspring !) at 15+0.15 (4 cores); this went +105=868-27 against master. All except two losses were won in reverse.  The heuristic is simple but effective - the strategy in these endgames is to push the opposing king to the corner; then move the knight that's blocking the pawn in for the checkmate while the pawn is free to move and prevents stalemate. This patch gives SF the little boost it needs to search the relevant king-cornering mating lines.  See the discussion in pull request 1939 for some more good results for this test in independant tests: https://github.com/official-stockfish/Stockfish/pull/1939  Bench: 3310239,True,3,2019-02-01
MJZ1977,snicolet,2019-02-21 18:36:48+00:00,ProbCutCount limit dependancy to cutNode  Use the ProbCutCount limit `2 + 2 * cutNode` instead of constant 3.  STC LLR: -2.95 (-2.94;2.94) [0.50;4.50] Total: 61812 W: 13599 L: 13459 D: 34754 http://tests.stockfishchess.org/tests/view/5c6d19240ebc5925cffca07a  LTC LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 27549 W: 4614 L: 4363 D: 18572 http://tests.stockfishchess.org/tests/view/5c6d45c10ebc5925cffca7a6  Closes https://github.com/official-stockfish/Stockfish/pull/2015  Bench: 3368889,True,3,2019-02-01
Unknown,snicolet,2019-02-21 18:24:02+00:00,Remove PvNode dimension from Reductions array  This is a functional simplification: if we simply subtract one to Reductions[] when PvNode is set; we can remove this dimension of the multidimensional array. I think this saves about 8K of memory.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 10118 W: 2282 L: 2138 D: 5698 http://tests.stockfishchess.org/tests/view/5c6332b60ebc5925cffbdfed  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 70765 W: 11617 L: 11575 D: 47573 http://tests.stockfishchess.org/tests/view/5c63379e0ebc5925cffbe0de  Closes https://github.com/official-stockfish/Stockfish/pull/2010  Bench 3261078,True,3,2019-02-01
Unknown,snicolet,2019-02-21 18:18:02+00:00,Remove skipQuiets variable in search()  This is a functional simplification. The moveCountPruning variable and the skipQuiets variable are similar enough in function that they can be combined. This removes the skipQuiets variable in search.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 23278 W: 5210 L: 5091 D: 12977 http://tests.stockfishchess.org/tests/view/5c65dc490ebc5925cffc12e9  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 77107 W: 12792 L: 12761 D: 51554 http://tests.stockfishchess.org/tests/view/5c65e4360ebc5925cffc1490  Closes https://github.com/official-stockfish/Stockfish/pull/2011  bench 3640330,True,3,2019-02-01
Unknown,mcostalba,2019-02-08 09:31:28+00:00,Change outposts to single value #1946  This is a functional simplification of the Outposts array moving it to a single value. This is a duplicate PR because I couldn't figure out how to fix the original one.  The idea is from @31m059 with formatting recommendations by @snicolet.  See #1940 for additional information.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 23933 W: 5279 L: 5162 D: 13492 http://tests.stockfishchess.org/tests/view/5c3575800ebc596a450c5ecb  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 41718 W: 6919 L: 6831 D: 27968 http://tests.stockfishchess.org/tests/view/5c358c440ebc596a450c6117  bench 3783543,True,4,2019-02-01
mcostalba,mcostalba,2019-02-08 09:20:43+00:00,Assorted trivial cleanups 1/2019  To address #1862  No functional change.,True,4,2019-02-01
mcostalba,mcostalba,2019-02-08 09:19:00+00:00,Log message of: Less king danger...  The commit:  Less king danger if we have a knight near by to defend it  went in withouth proper commit message; here below we add it:  STC: LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 113106 W: 25087 L: 24367 D: 63652 http://tests.stockfishchess.org/tests/view/5c5517540ebc592fc7bb0eb4  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 96669 W: 16318 L: 15872 D: 64479 http://tests.stockfishchess.org/tests/view/5c55352b0ebc592fc7bb11c8  bench: 3653942,True,4,2019-02-01
Unknown,mcostalba,2019-02-08 08:54:38+00:00,Remove Some Bitboard Arrays (#1963)  This is non-functional. These 5 arrays are simple enough to calculate real-time and maintaining an array for them does not help. Decreases the memory footprint.    This seems a tiny bit slower on my machine; but passed STC well enough. Could someone verify speed?    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 44745 W: 9780 L: 9704 D: 25261  http://tests.stockfishchess.org/tests/view/5c47aa2d0ebc5902bca13fc4    The slowdown is minimal even in 32 bit case (thanks to @mstembera for testing):    Compiled using make build ARCH=x86-32 CXX=i686-w64-mingw32-c++ and benched  This patch only:    ```  Results for 40 tests for each version:                Base      Test      Diff            Mean    1455204   1450033   5171            StDev   49452     34533     59621         p-value: 0.465  speedup: -0.004  ```    No functional change.,True,4,2019-02-01
mstembera,mcostalba,2019-02-03 13:16:34+00:00,Less king danger if we have a knight near by to defend it. (#1987)  bench: 3653942,True,6,2019-02-01
miguel-l,snicolet,2019-02-01 15:27:21+00:00,Extend discovered checks regardless of SEE  A simple idea; but it makes sense: in current master the search is extended for checks that are considered somewhat safe; and for for this we use the static exchange evaluation which only considers the `to_sq` of a move. This is not reliable for discovered checks; where another piece is giving the check and is arguably a more dangerous type of check. Thus; if the check is a discovered check; the result of SEE is not relevant and can be ignored.  STC: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 29370 W: 6583 L: 6274 D: 16513 http://tests.stockfishchess.org/tests/view/5c5062950ebc593af5d4d9b5  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 227341 W: 37972 L: 37165 D: 152204 http://tests.stockfishchess.org/tests/view/5c5094fb0ebc593af5d4dc2c  Bench: 3611854,True,4,2019-02-01
snicolet,snicolet,2019-02-01 14:34:46+00:00,Tweak tropism weight in king danger  There was a simplification attempt last week for the tropism term in king danger; which passed STC but failed LTC. This was an indirect sign that maybe the tropism factor was sightly untuned in current master; so we tried to change it from 1/4 to 5/16.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 28098 W: 6264 L: 5990 D: 15844 http://tests.stockfishchess.org/tests/view/5c518db60ebc593af5d4e306  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 103709 W: 17387 L: 16923 D: 69399 http://tests.stockfishchess.org/tests/view/5c52a5510ebc592fc7baea8b  Bench: 4016000,True,4,2019-02-01
Vizvezdenec,snicolet,2019-02-01 11:43:33+00:00,"More precise checks evaluation in king danger  Remove overlapping safe checks from kingdanger: - rook and queen checks from the same square: rook check is preferred - bishop and queen checks form the same square: queen check is preferred  Increase bishop and rook check values as a compensation.  STC LLR: 2.95 (-2.94;2.94) [0.50;4.50] Total: 27480 W: 6111 L: 5813 D: 15556 http://tests.stockfishchess.org/tests/view/5c521d050ebc593af5d4e66a  LTC LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 78500 W: 13145 L: 12752 D: 52603 http://tests.stockfishchess.org/tests/view/5c52b9460ebc592fc7baecc5  Closes https://github.com/official-stockfish/Stockfish/pull/1983  ------------------------------------------  I have quite a few ideas of how to improve this patch.  - actually rethinking it now it will maybe be useful to discount   queen/bishop checks if there is only one square that they can   give check from and it's ""occupied"" by more valuable check. Right   now count of this squares does not really matter.  - maybe some small extra bonus can be given for overlapping checks.  - some ideas about using popcount() on safechecks can be retried.  - tune this safecheck values since they were more or less randomly handcrafted in this patch.  Bench: 3216489",True,4,2019-02-01
Unknown,snicolet,2019-01-31 14:21:24+00:00,Simplify Stat Score bonus  This is a functional simplification of this statScore bonus. There seems to be little risk of regression with this one.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 26829 W: 5892 L: 5781 D: 15156 http://tests.stockfishchess.org/tests/view/5c5086bb0ebc593af5d4db75  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 28232 W: 4684 L: 4575 D: 18973 http://tests.stockfishchess.org/tests/view/5c50d7690ebc593af5d4dec9  Closes https://github.com/official-stockfish/Stockfish/pull/1979  Bench: 4001014,True,3,2019-01-01
Unknown,snicolet,2019-01-29 16:40:00+00:00,Don't update pvHit after IID  This patch removes line 875 of search.cpp; which was updating pvHit after IID. Bench testing at depth 22 shows that line 875 of search.cpp never changes the value of pvHit at NonPV nodes; while at PV nodes it often changes the value from true to false (and never the reverse). This is because the definition of pvHit at line 642 is :  ``` pvHit = (ttHit && tte->pv_hit()) || (PvNode && depth > 4 * ONE_PLY); ```  while the assignment after IID omits the ` (PvNode && depth > 4 * ONE_PLY) ` condition. As such; unlike the other two post-IID tte reads; this line of code does not make SF's state more consistent; but rather introduces an inconsistency in the definition of pvHit. Indeed; changing line 875 read  ``` pvHit = (ttHit && tte->pv_hit()) || (PvNode && depth > 4 * ONE_PLY); ```  to match line 642 is functionally equivalent to removing the line entirely; as this patch does.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 62756 W: 13787 L: 13746 D: 35223 http://tests.stockfishchess.org/tests/view/5c446c850ebc5902bb5d4b75  LTC LLR: 3.19 (-2.94;2.94) [-3.00;1.00] Total: 61900 W: 10179 L: 10111 D: 41610 http://tests.stockfishchess.org/tests/view/5c45bf610ebc5902bb5d5d62  Bench: 3796134,True,1,2019-01-01
miguel-l,snicolet,2019-01-29 16:32:41+00:00,Change pinning logic in Static Exchange Evaluation (SEE)  This changes 2 parts with regards to static exchange evaluation.  Currently; we do not allow pinned pieces to recapture if *all* opponent pinners are still in their starting squares. This changes that to having a less strict requirement; checking if *any* pinners are still in their starting square. This makes our SEE give more respect to the pinning side with regards to exchanges; which makes sense because it helps our search explore more tactical options.  Furthermore; we change the logic for saving pinners into our state variable when computing slider_blockers. We will include double pinners; where two sliders may be looking at the same blocker; a similar concept to our mobility calculation for sliders in our evaluation section. Interestingly; I think SEE is the only place where the pinners bitboard is actually used; so as far as I know there are no other side effects to this change.  An example and some insights:  White Bf2; Kg1 Black Qe3; Bc5  The move Qg3 will be given the correct value of 0. (Previously < 0) The move Qd4 will be incorrectly given a value of 0. (Previously < 0)  It seems the tradeoff in search is worth it. Qd4 will likely be pruned soon by something like probcut anyway; while Qg3 could help us spot tactics at an earlier depth.  STC: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 62162 W: 13879 L: 13408 D: 34875 http://tests.stockfishchess.org/tests/view/5c4ba1a70ebc593af5d49c55  LTC: (Thanks to @alayant) LLR: 3.40 (-2.94;2.94) [0.00;3.50] Total: 140285 W: 23416 L: 22825 D: 94044 http://tests.stockfishchess.org/tests/view/5c4bcfba0ebc593af5d49ea8  Bench: 3937213,True,1,2019-01-01
zenczykowski,snicolet,2019-01-29 16:26:24+00:00,Use int8_t instead of int for SquareDistance[]  This patch saves (4-1) * 64 * 64 = 12KiB of cache.  STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 176120 W: 38944 L: 38087 D: 99089 http://tests.stockfishchess.org/tests/view/5c4c9f840ebc593af5d4a7ce  LTC As a pure speed up; I've been informed it should not require LTC.  No functional change,True,1,2019-01-01
Unknown,snicolet,2019-01-22 08:54:10+00:00,Simplify TrappedRook  Simplified TrappedRook to a single penalty removing the dependency on mobility.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 106718 W: 23530 L: 23577 D: 59611 http://tests.stockfishchess.org/tests/view/5c43f6bd0ebc5902bb5d4131  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 54053 W: 8890 L: 8822 D: 36341 http://tests.stockfishchess.org/tests/view/5c44932a0ebc5902bb5d4d59  bench 3665090,True,1,2019-01-01
vondele,mcostalba,2019-01-20 18:14:24+00:00,Simplify pondering time management (#1899)  stopOnPonderhit is used to stop search quickly on a ponderhit. It is set by mainThread as part of its time management. However; master employs it as a signal between mainThread and the UCI thread. This is not necessary; it is sufficient for the UCI thread to signal that pondering finished; and mainThread should do its usual time-keeping job; and in this case stop immediately.    This patch implements this; removing stopOnPonderHit as an atomic variable from the ThreadPool;  and moving it as a normal variable to mainThread; reducing its scope. In MainThread::check_time() the search is stopped immediately if ponder switches to false; and the variable stopOnPonderHit is set.    Furthermore; ponder has been moved to mainThread; as the variable is only used to exchange signals between the UCI thread and mainThread.    The version has been tested locally (as fishtest doesn't support ponder):    Score of ponderSimp vs master: 2616 - 2528 - 8630 [0.503] 13774  Elo difference: 2.22 +/- 3.54    which indicates no regression.    No functional change.,True,6,2019-01-01
marotear,mcostalba,2019-01-20 11:24:03+00:00,Simplify pvHit (#1953)  Removing unnecessary excludedMove condition (there is not excluded move for PvNodes) and re-ordering computation.    Non functional change.,True,6,2019-01-01
Unknown,mcostalba,2019-01-20 11:21:16+00:00,Clean-up some shifting in space calculation (#1955)  No functional change.,True,6,2019-01-01
SFisGOD,mcostalba,2019-01-20 11:20:21+00:00,Tweak initiative and Pawn PSQT (#1957)  Small changes in initiative(). For Pawn PSQT; endgame values for d6-e6 and d7-e7 are now symmetric. The MG value of d2 is now smaller than e2 (d2=13; e2=21 now compared to d2=19; e2=16 before). The MG values of h5-h6-h7 also increased so this might encourage stockfish for more h-pawn pushes.    STC  LLR: -2.96 (-2.94;2.94) [0.00;4.00]  Total: 81141 W: 17933 L: 17777 D: 45431  http://tests.stockfishchess.org/tests/view/5c4017350ebc5902bb5cf237    LTC  LLR: 2.96 (-2.94;2.94) [0.00;4.00]  Total: 83078 W: 13883 L: 13466 D: 55729  http://tests.stockfishchess.org/tests/view/5c40763f0ebc5902bb5cff09    Bench: 3266398,True,6,2019-01-01
Unknown,snicolet,2019-01-17 07:11:09+00:00,Remove AdjacentFiles  This is a non-functional simplification that removes the AdjacentFiles array. This array is simple enough to calculate that the pre-calculated array provides no benefit. Reduces the memory footprint.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 74839 W: 16390 L: 16373 D: 42076 http://tests.stockfishchess.org/tests/view/5c3d75920ebc596a450cfb67  No functionnal change,True,3,2019-01-01
Unknown,mcostalba,2019-01-14 14:03:31+00:00,Simplify pawn moves (#1900)  If we define dcCandidates with & pawnsNotOn7;   we don't have to & it both times.    This seems more clear to me as well.    Tested for no regression.  STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 44042 W: 9663 L: 9585 D: 24794  http://tests.stockfishchess.org/tests/view/5c21d9120ebc5902ba12e84d    No functional change.,True,0,2019-01-01
vondele,snicolet,2019-01-14 08:25:22+00:00,Simplify time management a bit  The new form is likely to trigger a bit more at LTC. Given that LTC appears to be an improvement; I think that is fine.  The change is not very invasive: it does the same as before; use potentially less time for moves that are very stable. Most of the time; the full bonus was given if the bonus was given; so the gradual part {3; 4; 5} didn't matter much. Whereas previously 'stable' was expressed as the last 80% of iterations are the same; now I use a fixed depth (10 iterations). For TCEC style TC; it will presumably imply some more moves that are played quicker (and thus more time on the clock when it potentially matters). Note that 10 iterations of stability means we've been proposing that move for 99.9% of search time.  passed STC http://tests.stockfishchess.org/tests/view/5c30d2290ebc596a450c055b LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 70921 W: 15403 L: 15378 D: 40140  passed LTC http://tests.stockfishchess.org/tests/view/5c31ae240ebc596a450c1881 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17422 W: 2968 L: 2842 D: 11612  No functional change.,True,0,2019-01-01
vondele,snicolet,2019-01-10 15:46:04+00:00,Remove pvExact  The variable pvExact now overlaps with the pvHit concept. So you simplify the logic with small code tweaks to have pvHit trigger where pvExact previously triggered.  passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20558 W: 4497 L: 4373 D: 11688 http://tests.stockfishchess.org/tests/view/5c36e9fd0ebc596a450c7885  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 23482 W: 3888 L: 3772 D: 15822 http://tests.stockfishchess.org/tests/view/5c37072d0ebc596a450c7a52  Bench: 3739723,True,3,2019-01-01
Unknown,snicolet,2019-01-10 15:36:59+00:00,Minor cleanup to recent 'Flag critical search tree in hash table' patch  No functional change,True,3,2019-01-01
vondele,snicolet,2019-01-09 15:57:24+00:00,Small improvements to the CI infrastructure  - avoid inlining for the debug testing so that suppressions work - provide more output for triggered errors  No functional change.,True,2,2019-01-01
MJZ1977,snicolet,2019-01-09 14:05:33+00:00,"Flag critical search tree in hash table  Introducing new concept; saving principal lines into the transposition table to generate a ""critical search tree"" which we can reuse later for intelligent pruning/extension decisions.  For instance in this patch we just reduce reduction for these lines. But a lot of other ideas are possible.  To go further : tune some parameters; how to add or remove lines from the critical search tree; how to use these lines in search choices; etc.  STC : LLR: 2.94 (-2.94;2.94) [0.50;4.50] Total: 59761 W: 13321 L: 12863 D: 33577 +2.23 ELO http://tests.stockfishchess.org/tests/view/5c34da5d0ebc596a450c53d3  LTC : LLR: 2.96 (-2.94;2.94) [0.00;3.50] Total: 26826 W: 4439 L: 4191 D: 18196 +2.9 ELO http://tests.stockfishchess.org/tests/view/5c35ceb00ebc596a450c65b2  Special thanks to Miguel Lahoz for his help in transposition table in/out.  Bench: 3399866",True,2,2019-01-01
miguel-l,snicolet,2019-01-06 15:02:31+00:00,"Introduce Multi-Cut  This was inspired after reading about [Multi-Cut](https://www.chessprogramming.org/Multi-Cut).  We now do non-singular cut node pruning. The idea is to prune when we have a ""backup plan"" in case our expected fail high node does not fail high on the ttMove.  For singular extensions; we do a search on all other moves but the ttMove. If this fails high on our original beta; this means that both the ttMove; as well as at least one other move was proven to fail high on a lower depth search. We then assume that one of these moves will work on a higher depth and prune.  STC: LLR: 2.96 (-2.94;2.94) [0.50;4.50] Total: 72952 W: 16104 L: 15583 D: 41265 http://tests.stockfishchess.org/tests/view/5c3119640ebc596a450c0be5  LTC: LLR: 2.95 (-2.94;2.94) [0.00;3.50] Total: 27103 W: 4564 L: 4314 D: 18225 http://tests.stockfishchess.org/tests/view/5c3184c00ebc596a450c1662  Bench: 3145487",True,6,2019-01-01
vondele,snicolet,2019-01-04 14:36:39+00:00,Check tablebase files  This addresses partially issue #1911 in that it documents in our Readme the command that users can use to verifying the md5sum of their downloaded tablebase files.  Additionally; a quick check of the file size (the size of each tablebase file modulo 64 is 16 as pointed out by @syzygy1) has been implemented at launch time in Stockfish.  Closes https://github.com/official-stockfish/Stockfish/pull/1927 and https://github.com/official-stockfish/Stockfish/issues/1911  No functional change.,True,4,2019-01-01
mcostalba,snicolet,2019-01-04 13:23:14+00:00,Delay castling legality check  Delay legality check of castling moves at search time; just before making the move; as is the standard with all the other move types.  This should avoid an useless and not trivial legality check when the castling is then not tried later. For instance due to a previous cut-off.  The patch is also a big simplification and allows to entirely remove generate_castling()  Bench changes due to a different move sequence out of MovePicker.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 45073 W: 9918 L: 9843 D: 25312 http://tests.stockfishchess.org/tests/view/5c2f176f0ebc596a450bdfb3  LTC: LLR: 3.15 (-2.94;2.94) [-3.00;1.00] Total: 10156 W: 1707 L: 1560 D: 6889 http://tests.stockfishchess.org/tests/view/5c2e7dfd0ebc596a450bcdf4  Verified with perft both in standard and Chess960 cases.  Closes https://github.com/official-stockfish/Stockfish/pull/1929  Bench: 3559104,True,4,2019-01-01
mcostalba,web-flow,2019-01-01 13:10:26+00:00,Assorted trivial cleanups (#1894)  To address https://github.com/official-stockfish/Stockfish/issues/1862    No functional change.,True,1,2019-01-01
Unknown,mcostalba,2019-01-01 12:38:09+00:00,Remove openFiles in pawns. (#1917)  A single popcount in evaluate.cpp replaces all openFiles stuff in pawns. It doesn't seem to affect performance at all.    STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 28103 W: 6134 L: 6025 D: 15944  http://tests.stockfishchess.org/tests/view/5b7d70a20ebc5902bdbb1999    No functional change.,True,1,2019-01-01
Unknown,mcostalba,2019-01-01 12:36:56+00:00,"Remove ""Any"" predicate filter (#1914)  This custom predicate filter creates an unnecessary abstraction layer; but doesn't make the code any more readable. The code is clear enough without it.    No functional change.",True,1,2019-01-01
Unknown,mcostalba,2019-01-01 12:35:53+00:00,Remove as useless micro-optimization in pawns generation (#1915)  The extra condition is used as a shortcut to skip the following 3 assignments:    ```C++          Bitboard b1 = shift<UpRight>(pawnsOn7) & enemies;          Bitboard b2 = shift<UpLeft >(pawnsOn7) & enemies;          Bitboard b3 = shift<Up     >(pawnsOn7) & emptySquares;  ```    In case of EVASION with no target on 8th rank (the common case); we end up performing the 3 statements for nothing because b1 = b2 = b3 = 0.    But this is just a small micro-optimization and the condition is quite confusing; so just remove it and prefer a readable code instead.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 78020 W: 16978 L: 16967 D: 44075  http://tests.stockfishchess.org/tests/view/5c27b4fe0ebc5902ba135bb0    No functional change.,True,1,2019-01-01
erbsenzaehler,snicolet,2018-12-29 10:49:16+00:00,Improve the Readme  I tried to improve the Readme because many people in my local chess club do not understand some of the UCO options properly. Starting point of this was Cfish's Readme by Ronald de Man; some internet resources and the Stockfish code itself.  Closes https://github.com/official-stockfish/Stockfish/pull/1898  Initial commit by user @erbsenzaehler; with help from users Adrian Petrescu; @alayan-stk-2 and Elvin Liu.  No functional change  Co-Authored-By: Alayan-stk-2 <alayan-stk-2@users.noreply.github.com> Co-Authored-By: Adrian Petrescu <apetresc@gmail.com> Co-Authored-By: Elvin Liu <solarlight2@users.noreply.github.com>,True,5,2018-12-01
31m059,snicolet,2018-12-27 20:38:31+00:00,Always initialize and evaluate king safety  Recent tests by @xoto10; @Vizvezdenec; and myself seemed to hint that Elo could be gained by expanding the number of cases where king safety is applied. Several users (@Spliffjiffer; @Vizvezdenec) have anticipated benefits specifically in evaluation of tactics. It appears that we actually do not need to restrict the cases in which we initialize and evaluate king safety at all: initializing and evaluating it in every position appears roughly Elo-neutral at STC and possibly a substantial Elo gain at LTC.  Any explanation for this scaling is; at this point; conjecture. Assuming it is not due to chance; my hypothesis is that initialization of king safety in all positions is a mild slowdown; offset by an Elo gain of evaluating king safety in all positions. At STC this produces Elo gains and losses that offset each other; while at longer time control the slowdown is much less important; leaving only the Elo gain. It probably helps SF to explore king attacks much earlier in search with high numbers of enemy pieces concentrating but not essentially attacking king ring.  Thanks to @xoto10 and @Vizvezdenec for helping run my LTC!  Closes https://github.com/official-stockfish/Stockfish/pull/1906  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 35432 W: 7815 L: 7721 D: 19896 http://tests.stockfishchess.org/tests/view/5c24779d0ebc5902ba131b26  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 12887 W: 2217 L: 2084 D: 8586 http://tests.stockfishchess.org/tests/view/5c25049a0ebc5902ba132586  Bench: 3163951  ------------------  How to continue from there?  * Next step will be to tune all the king danger terms once more after that :-),True,3,2018-12-01
noobpwnftw,mcostalba,2018-12-24 10:24:29+00:00,Simplify SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX loop (#1892)  When iterating through 'SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX' structure; do not use structure member beyond known size.    API is guaranteed to provide us at lease one element upon successful; and no element in the structure can have a zero size.    No functional change.,True,0,2018-12-01
noobpwnftw,snicolet,2018-12-24 10:20:14+00:00,Fix crash in best_group() (#1891)  This pull request fixes a rare crashing bug on Windows inside our NUMA code; first reported by Dann Corbit in the following forum thread (thanks!): https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/gA6aoMEuOwg  The fix is to not use structure member beyond known size when iterating through 'SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX' structure. We note that the Microsoft API is guaranteed to provide us at least one element upon successful; and no element in the structure can have a zero size.  No functional change.,True,0,2018-12-01
vondele,snicolet,2018-12-24 10:06:47+00:00,Extend stack to ss-5; and remove conditions  The `&& (ss-1)->killers[0] ` conditions are there seemingly to protect accessing ss-5.  This is unneeded and not so intuitive (as the killer is checked for equality with currentMove; and that one is non-zero once we're high enough in the stack; this protects access to ss-5). We can just extend the stack from ss-4 to ss-5; so we can call update_continuation_histories(ss-1; ..) always in search.  This goes a bit further than #1881 and addresses a comment in #1878.  passed STC: http://tests.stockfishchess.org/tests/view/5c1aa8d50ebc5902ba127ad0 LLR: 3.12 (-2.94;2.94) [-3.00;1.00] Total: 53515 W: 11734 L: 11666 D: 30115  passed LTC: http://tests.stockfishchess.org/tests/view/5c1b272c0ebc5902ba12858d LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 140176 W: 23123 L: 23192 D: 93861  Bench: 3451321,True,0,2018-12-01
Unknown,snicolet,2018-12-24 09:44:38+00:00,Improve endgame KBN vs K (#1877)  Even when playing without endgame table bases; this particular endgame should be a win 100% of the time when Stockfish is given a KRBK position; assuming there are enough moves remaining in the FEN to finish the game without hitting the 50 move rule.  PROBLEM: The issue with master here is that the PushClose difference per square is 20; however; the difference in squares for the PushToCorners array is usually less. Thus; the engine prefers to move the kings closer together rather than pushing the weak king to the correct corner.  What happens is if the weak king is in a safe corner; SF still prefers pushing the kings together. Occasionally; the strong king traps the weak king in the safe corner. It takes a while for SF to figure it out; but often draws the game by the 50 move rule (on shorter time controls).  This patch increases the PushToCorners values to correct this problem. We also added an assert to catch any overflow problem if anybody would want to increase the array values again in the future.  It was tested in a couple of matches starting with random KRBK positions and showed increased winning rates; see https://github.com/official-stockfish/Stockfish/pull/1877  No functional change,True,0,2018-12-01
erbsenzaehler,mcostalba,2018-12-23 17:17:44+00:00,Update our continuous integration machinery (#1889)  * Update our continuous integration machinery    Ubuntu 16.04 can now be used with travis. Updating all the other stuff  when there.  Invoking the lld linker seems to save 5 minutes with clang on linux.    No functional change.    * fix,True,6,2018-12-01
mstembera,mcostalba,2018-12-23 15:10:07+00:00,Use a bit less code to calculate hashfull() (#1830)  * Use a bit less code to calculate hashfull(). Change post increment to preincrement as is more standard  in the rest of stockfish.  Scale result so we report 100% instead of 99.9% when completely full.    No functional change.,True,6,2018-12-01
mstembera,mcostalba,2018-12-23 15:09:03+00:00,Turn on random access for Syzygy files in Windows (#1840)  * This is the Windows version of  https://github.com/official-stockfish/Stockfish/pull/1829    No functional change.,True,6,2018-12-01
Unknown,mcostalba,2018-12-23 15:05:24+00:00,Simplify generate_castling (#1885)  Although this is a compile-time constant; we stick the castlingSide into a CastlingRight; then pull it out again. This seems unecessarily complex.    No functional change.,True,6,2018-12-01
Unknown,snicolet,2018-12-20 09:47:18+00:00,Simplify KBNK endgame implementation  We do not need to change the winnerKSq variable; so we can simplify a little bit the logic of the code by changing only the loserKSq variable when it is necessary. Also consolidate and clarify comments.  See the pull request thread for a proof that the code is correct: https://github.com/official-stockfish/Stockfish/pull/1854  No functional change,True,3,2018-12-01
pb00068,snicolet,2018-12-18 08:38:06+00:00,Tweak main killer penalty  Apply refuted main killer penalty also on early TT cut-offs. This makes penalty logic more consistent with the logic at normal search.  Failed STC: http://tests.stockfishchess.org/tests/view/5c121e730ebc5902ba11aad8 LLR: -2.95 (-2.94;2.94) [0.00;5.00] Total: 72193 W: 15848 L: 15625 D: 40720 Elo +1.07  Passed LTC: http://tests.stockfishchess.org/tests/view/5c17b1b10ebc5902ba123c24 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 35073 W: 5886 L: 5625 D: 23562 Elo +2.59  Closes https://github.com/official-stockfish/Stockfish/pull/1878  bench: 3393939,True,1,2018-12-01
Unknown,snicolet,2018-12-18 07:51:25+00:00,New voting formula for threads  We now use a quadratic formula during the vote for threads when deciding on which thread to pick a move from.  time control 5+0.05; with 8 threads: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 20202 W: 4031 L: 3813 D: 12358 http://tests.stockfishchess.org/tests/view/5c16c8e60ebc5902ba1223e2  time control 20+0.2; with 8 threads: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 14330 W: 2290 L: 2115 D: 9925 http://tests.stockfishchess.org/tests/view/5c16efca0ebc5902ba122993  20000 games match at time control 5+0.05; with 31 threads: ELO: 5.63 +-2.8 (95%) LOS: 100.0% Total: 20000 W: 3539 L: 3215 D: 13246 http://tests.stockfishchess.org/tests/view/5c16f07a0ebc5902ba122a20  Closes https://github.com/official-stockfish/Stockfish/pull/1876  No functional change (in simple thread mode),True,1,2018-12-01
31m059,snicolet,2018-12-16 09:04:49+00:00,Use stronglyProtected  ~stronglyProtected is quite similar to ~attackedBy[Them][PAWN] & ~attackedBy2[Them]; the only difference appears to be that the former includes squares attacked twice by both sides. The resulting logic is simpler; and the change appears to be at least Elo-neutral at both STC and LTC.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 35924 W: 7978 L: 7885 D: 20061 http://tests.stockfishchess.org/tests/view/5c14a5c00ebc5902ba11ed72  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 37078 W: 6125 L: 6030 D: 24923 http://tests.stockfishchess.org/tests/view/5c14ae880ebc5902ba11eed8  Bench: 3646542,True,6,2018-12-01
Rocky640,snicolet,2018-12-16 08:57:43+00:00,"Refactor king ring calculation  Compute the ""double protection by pawns"" expression only once in initialize(); instead of once for each piece in the piece loop.  Passed STC http://tests.stockfishchess.org/tests/view/5c1506380ebc5902ba11f3b4 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 9494 W: 2191 L: 2045 D: 5258  Inspired by Nick Pelling's test    http://tests.stockfishchess.org/tests/view/5c144d110ebc5902ba11e4af and an older test of mine    http://tests.stockfishchess.org/tests/view/5c0402810ebc5902bcee1fc8  Non functional change.",True,6,2018-12-01
vondele,snicolet,2018-12-16 08:53:11+00:00,Fix a segfault.  this patch fixes a rare but reproducible segfault observed playing a multi-threaded match; it is discussed somewhat in fishcooking.  From the core file; it could be observed that the issue was in qsearch; namely:  ````    ss->pv[0] = MOVE_NONE; ````  and the backtrace shows the it arrives there via razoring; called from the rootNode:  ````     (gdb) bt     alpha=-19; beta=682; depth=DEPTH_ZERO) at search.cpp:1247 ````  Indeed; ss->pv can indeed by a nullptr at the rootNode. However; why is the segfault so rare ?  The reason is that the condition that guards razoring:  ````    (depth < 2 * ONE_PLY &&  eval <= alpha - RazorMargin) ````  is almost never true; since at the root alpha for depth < 5 is -VALUE_INFINITE.  Nevertheless with the new failHigh scheme; this is not guaranteed; and rootDepth > 5; can still result in a depth < 2 search at the rootNode. If now another thread; via the hash; writes a new low eval to the rootPos qsearch can be entered. Rare but not unseen... I assume that some of the crashes in fishtest recently might be due to this.  Closes https://github.com/official-stockfish/Stockfish/pull/1860  No functional change,True,6,2018-12-01
vondele,snicolet,2018-12-16 08:41:09+00:00,Start a TT resize only after search finished.  As noticed in the forum; a crash in extract_ponder_from_tt could result if hash size is set before the ponder move is printed. While it is arguably a GUI issue (but it got me on the cli); it is easy to avoid this issue.  Closes https://github.com/official-stockfish/Stockfish/pull/1856  No functional change.,True,6,2018-12-01
31m059,snicolet,2018-12-16 08:32:37+00:00,Remove Null Move Pruning material threshold  On November 30th; @xoto10 experimented with removing this threshold; but the simplification barely failed LTC. I was inspired to try various [0; 4] tweaks to increase its value; which would narrow the effects of this threshold without removing it entirely. Various values repeatedly led to Elo gains at both STC and LTC; most of which were insufficient to pass.  After a couple of weeks; I tried again to find an Elo-gaining tweak but noticed that I could raise the threshold higher and higher without regression. I decided to try removing it entirely--forgetting that @xoto10 had already attempted this. However; this now performs much better at both STC and LTC; producing a STC Elo gain and also potentially a smaller LTC one.  The reason appears to be a recent change in master (e8ffca3) near this code; which interacts with this patch. This simplification governs the conditions under which that patch's effects are applied. Something non-obvious about that change has significantly improved the performance of this simplification.  I recognize and thank @xoto10; who originally had this idea. Since I ran several LTCs recently (to determine whether to open this PR; or one for a related [0; 4]); I would also like to acknowledge the other developers and CPU donors for their patience. Thank you all!  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 13445 W: 3000 L: 2862 D: 7583 http://tests.stockfishchess.org/tests/view/5c11f01b0ebc5902ba11a6b8  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 33868 W: 5663 L: 5563 D: 22642 http://tests.stockfishchess.org/tests/view/5c11ffe90ebc5902ba11a8a9  Closes https://github.com/official-stockfish/Stockfish/pull/1870  Bench: 3343286,True,6,2018-12-01
SFisGOD,snicolet,2018-12-13 12:35:35+00:00,A combo of parameter tweaks  Joint work by SFisGOD; xoroshiro and Chess13234.  This combo consists of the following tweaks: Assorted bonuses and penalties by SFisGOD Bishop and Rook PSQT by SFisGOD Tempo Value by xoroshiro Futility pruning by Chess13234  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 9005 W: 2082 L: 1882 D: 5041 http://tests.stockfishchess.org/tests/view/5c11628c0ebc5902ba119e90  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 44207 W: 7451 L: 7157 D: 29599 http://tests.stockfishchess.org/tests/view/5c1172a40ebc5902ba119fa3  Bench: 3332460,True,3,2018-12-01
Kurtbusch,snicolet,2018-12-13 12:20:31+00:00,Asymmetrical 8x8 Pawn PSQT  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 13323 W: 3015 L: 2818 D: 7490 http://tests.stockfishchess.org/tests/view/5c00a2520ebc5902bcedd41b  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 52294 W: 9093 L: 8756 D:34445 http://tests.stockfishchess.org/tests/view/5c00b2c40ebc5902bcedd596  Some obvious followups to this are to further tune this PSQT; or try 8x8 for other pieces. As of now I don't plan on trying this for other pieces as I think the majority of the ELO it brings is for pawns and kings.  Looking at the new values; the differences between kingside and queenside are quite significant. I am very hopeful that this a llows SF to understand and plan pawn structures even better than it already does. Cheers!  Closes https://github.com/official-stockfish/Stockfish/pull/1839  Bench: 3569243,True,3,2018-12-01
Unknown,mcostalba,2018-12-11 12:47:56+00:00,Changes identified in RENAME/REFORMATTING thread (#1861)  I've gone through the RENAME/REFORMATTING thread and changed everything I could find; plus a few more. With this; let's close the previous issue and open another.    No functional change.,True,1,2018-12-01
VoyagerOne,snicolet,2018-12-09 12:11:13+00:00,Tweak CMH pruning  STC: (yellow) LLR: -2.94 (-2.94;2.94) [0.00;5.00] Total: 48919 W: 10625 L: 10517 D: 27777 http://tests.stockfishchess.org/tests/view/5c07e6a20ebc5902bcee7395  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 50360 W: 8424 L: 8102 D: 33834 http://tests.stockfishchess.org/tests/view/5c0812450ebc5902bcee76f4  Bench: 3775064,True,6,2018-12-01
Unknown,snicolet,2018-12-09 11:59:57+00:00,remove extra line.,True,6,2018-12-01
Unknown,snicolet,2018-12-09 11:59:57+00:00,remove parenthesis.,True,6,2018-12-01
Unknown,snicolet,2018-12-09 11:59:57+00:00,add paren.,True,6,2018-12-01
Unknown,snicolet,2018-12-09 11:59:57+00:00,simplify opposite_colors,True,6,2018-12-01
snicolet,snicolet,2018-12-06 14:04:04+00:00,"Revert ""pseudo_legal() and MOVE_NONE""  This reverts commit 33d95482182e459eb033de47a31f142880aa9afb ; which crashed in DEBUG mode because of the following assert in position.h  ```` Assertion failed: (is_ok(m)); function capture; file ./position.h; line 369. ````  No functional change",True,3,2018-12-01
VoyagerOne,snicolet,2018-12-06 13:40:08+00:00,Simplify Killer Move Penalty  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20816 W: 4525 L: 4402 D: 11889 http://tests.stockfishchess.org/tests/view/5c017cb90ebc5902bcede5b4  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 39287 W: 6401 L: 6309 D: 26577 http://tests.stockfishchess.org/tests/view/5c01825e0ebc5902bcede686  Bench: 3773021,True,3,2018-12-01
Unknown,snicolet,2018-12-06 13:08:39+00:00,Simplify time manager in search()  Remove the F[] array which I find unhelpful and rename `improvingFactor` to `fallingEval` since larger values indicate a falling eval and more time use.  I realise a test was not strictly necessary; but I ran STC [-3;1] just to check there are no foolish errors before creating the pull request:  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 35804 W: 7753 L: 7659 D: 20392 http://tests.stockfishchess.org/tests/view/5bef3a0c0ebc595e0ae39c19  It was then suggested to clean the constants around `fallingEval` to make it more clear this is a factor around ~1 that adjusts time up or downwards depending on some conditions. We then ran a double test with this simplification suggestion:  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 68435 W: 14936 L: 14906 D: 38593 http://tests.stockfishchess.org/tests/view/5c02c56b0ebc5902bcee0184  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 37258 W: 6324 L: 6230 D: 24704 http://tests.stockfishchess.org/tests/view/5c030a520ebc5902bcee0a32  No functional change,True,3,2018-12-01
Unknown,snicolet,2018-12-06 13:02:29+00:00,pseudo_legal() and MOVE_NONE  MOVE_NONE is represented as SQ_A1 to SQ_A1 which is never pseudo_legal.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 38807 W: 8363 L: 8275 D: 22169 http://tests.stockfishchess.org/tests/view/5c05f11d0ebc5902bcee4c86  No functional change,True,3,2018-12-01
Vizvezdenec,snicolet,2018-12-02 19:18:51+00:00,Introduce concept of double pawn protection.  Exclude doubly protected by pawns squares when calculating attackers on king ring. Idea of this patch is not to count attackers if they attack only squares that are protected by two pawns.  STC LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 70040 W: 15476 L: 15002 D: 39562 http://tests.stockfishchess.org/tests/view/5c0354860ebc5902bcee1106  LTC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 16530 W: 2795 L: 2607 D: 11128 http://tests.stockfishchess.org/tests/view/5c0385080ebc5902bcee14b5  This is third king safety patch in recent times so we probably need retuning of king safety parameters.  Bench: 3057978,True,6,2018-12-01
miguel-l,snicolet,2018-12-01 10:28:10+00:00,Penalize refuted killers in continuation history  Currently we apply a penalty in continuation history for refuted TT moves. We can use the same idea to also penalize refuted killer moves in continuation history.  STC: http://tests.stockfishchess.org/tests/view/5c00ccbd0ebc5902bcedd768 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 54366 W: 12086 L: 11687 D: 30593  LTC: http://tests.stockfishchess.org/tests/view/5c0107880ebc5902bceddc9c LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 25457 W: 4302 L: 4078 D: 17077  Bench: 3419069,True,5,2018-12-01
ElbertoOne,snicolet,2018-12-01 09:29:10+00:00,Remove Overload bonus  Compensate by giving the Hanging bonus to weak doubly-attacked non pawn enemies pieces.  STC: http://tests.stockfishchess.org/tests/view/5bfd53c40ebc5902bced9237 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 62107 W: 13664 L: 13622 D: 34821  LTC: http://tests.stockfishchess.org/tests/view/5bfd74700ebc5902bced9618 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 86406 W: 14381 L: 14365 D: 57660  A possible follow up would be to tune the hanging bonus and/or try to simplify the hanging bonus condition.  Bench: 3810849,True,5,2018-12-01
snicolet,snicolet,2018-11-29 15:17:23+00:00,Restore development version  No functional change,True,3,2018-11-01
snicolet,snicolet,2018-11-29 14:45:26+00:00,Stockfish 10  Official release version of Stockfish 10.  This is also the 10th anniversary version of the Stockfish project; which started exactly ten years ago! I wish to extend a huge thank you to all contributors and authors in our amazing community :-)  Bench: 3939338,True,3,2018-11-01
snicolet,snicolet,2018-11-29 14:15:43+00:00,Update list of authors  No functional change,True,3,2018-11-01
UniQP,snicolet,2018-11-29 14:01:54+00:00,Use emplace_back() in TB code  The patch was tested for correctness by running bench with and without the change against current master; and the tablebase hit numbers were found to be identical in both cases. See the pull request comments for details: https://github.com/official-stockfish/Stockfish/pull/1826  No functional change.,True,3,2018-11-01
31m059,snicolet,2018-11-27 07:53:14+00:00,Simplify casting extension  On November 16th; before the removal of the depth condition; I tried revising castling extensions to only handle castling moves; rather than moves that change castling rights generally. It appeared to be a slight Elo gain at STC but insufficient to pass [0; 4] (+0.5 Elo); but what I overlooked was that it made pos.can_castle(us) irrelevant and should have been a simplification. Recent discussion with @Chess13234 and Michael Chaly (@Vizvezdenec) inspired me to take a second look; and the simplification continues to pass when rebased on the current master.  This replaces two conditions with one; because type_of(move) == CASTLING implies pos.can_castle(Us); allowing us to remove the latter condition.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 110948 W: 24209 L: 24263 D: 62476 http://tests.stockfishchess.org/tests/view/5bf8f65c0ebc5902bced3a63  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 88283 W: 14681 L: 14668 D: 58934 http://tests.stockfishchess.org/tests/view/5bf994a60ebc5902bced4349  Bench: 3939338,True,1,2018-11-01
sesse,snicolet,2018-11-27 07:39:23+00:00,Turn on MADV_RANDOM for Syzygy mmaps (on Unix-like builds)  When running on a cloud VM (n1-highcpu-96) with several NVMe SSDs and some non-SSDs for tablebases; I noticed that the average SSD request size was more than 256 kB. This doesn't make a lot of sense for Syzygy tablebases; which have a block size of 32 bytes and very low locality.  Seemingly; the tablebase access patterns during probing make the OS; at least Linux; think that readahead is advantageous; normally; it gives up doing readahead if there are too many misses; but it doesn't; perhaps due to the fairly high overall hit rates. (It seems the kernel cannot distinguish between reading a block that was paged in because the userspace wanted it explicitly; and one that was read as part of readahead.)  Setting MADV_RANDOM effectively turns off readahead; which causes the request size to drop to 4 kB. In the aforemented cloud VM test; this roughly tripled the amount of I/O requests that were able to go through; while reducing the total traffic from 2.8 GB/sec to 56 MB/sec (moving the bottleneck to the non-SSDs; it seems the SSDs could have sustained many more requests).  Closes https://github.com/official-stockfish/Stockfish/pull/1829  No functional change.,True,1,2018-11-01
joergoster,mcostalba,2018-11-25 10:27:40+00:00,Qsearch simplification. (#1828)  Don't do an extra TT update in case of a fail-high;  but simply break off the moves loop and let the TT update  at the end of qsearch do this job.  Same workflow/logic as in our main search function now.    Tested for no regression to be on the safe side.  STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 30237 W: 6665 L: 6560 D: 17012  http://tests.stockfishchess.org/tests/view/5bf928e80ebc5902bced3f3a    LTC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 51067 W: 8625 L: 8553 D: 33889  http://tests.stockfishchess.org/tests/view/5bf937180ebc5902bced3fdc    No functional change.,True,6,2018-11-01
Vizvezdenec,snicolet,2018-11-24 01:14:18+00:00,Reintroduce tropism to kingdanger  Tropism in kingdanger was simplified away in this pull request #1821. This patch reintroduces tropism in kingdanger with using quadratic scaling.  Passed STC http://tests.stockfishchess.org/tests/view/5bf7c1b10ebc5902bced1f8f LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 52803 W: 11835 L: 11442 D: 29526  Passed LTC http://tests.stockfishchess.org/tests/view/5bf816e90ebc5902bced24f1 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 17204 W: 2988 L: 2795 D: 11421  How do we continue from there?  I've recently tried to introduce tropism difference term in kingdanger which passed STC 6 times but failed LTC all the time. Maybe using quadratic scaling for it will also be helpful.  Bench 4041387,True,5,2018-11-01
31m059,snicolet,2018-11-24 01:09:35+00:00,Remove the tropism term from kingDanger  A recent LTC tuning session by @candirufish showed this term decreasing significantly. It appears that it can be removed altogether without significant Elo loss.  I also thank @GuardianRM; whose attempt to remove tropism from king danger inspired this one.  After this PR is merged; my next step will be to attempt to tune the coefficients of this new; simplified kingDanger calculation.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 12518 W: 2795 L: 2656 D: 7067 http://tests.stockfishchess.org/tests/view/5befadda0ebc595e0ae3a289  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 164771 W: 26463 L: 26566 D: 111742 http://tests.stockfishchess.org/tests/view/5befcca70ebc595e0ae3a343  LTC 2; rebased on Stockfish 10 beta: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 75226 W: 12563 L: 12529 D: 50134 http://tests.stockfishchess.org/tests/view/5bf2e8910ebc5902bcecb919  Bench: 3412071,True,5,2018-11-01
vondele,snicolet,2018-11-20 07:00:19+00:00,Force time check on TB probe in search.  Because of aggressive time management and optimistic assumptions about move overhead; it's still very easy to get Stockfish to forfeit on time when we hit an endgame and have Syzygy EGTB on a spinning drive. The latency from serving a few thousand EGTB probes (~10ms each); of which there can currently be up to 4000 outstanding before a time check; will easily overwhelm the default Move Overhead of 30ms.  This problem was first raised by Gian-Carlo Pascutto and some solutions and improvements were discussed in the following pull requests: https://github.com/official-stockfish/Stockfish/pull/1471 https://github.com/official-stockfish/Stockfish/pull/1623 https://github.com/official-stockfish/Stockfish/pull/1783  This patch is a minimal change proposed by Marco Costalba to lower the impact of the bug. We now force a check of the clock right after each tablebase read.  No functional change.,True,1,2018-11-01
Unknown,snicolet,2018-11-20 06:50:12+00:00,Bonus for restricting opponent's piece moves  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 51883 W: 11297 L: 10915 D: 29671 http://tests.stockfishchess.org/tests/view/5bf1e2ee0ebc595e0ae3cacd  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 15859 W: 2752 L: 2565 D: 10542 http://tests.stockfishchess.org/tests/view/5bf337980ebc5902bcecbf62  Notes:  (1) The bonus value has not been carefully tested; so it may be possible to find slightly better values.  (2) Plan is to now try adding similar restriction for pawns. I wanted to include that as part of this pull request; but I was advised to do it as two separate pull requests. STC is currently running here; but may not add enough value to pass green.  Bench: 3679086,True,1,2018-11-01
snicolet,snicolet,2018-11-19 10:18:21+00:00,Stockfish 10-beta  Preparation commit for the upcoming Stockfish 10 version; giving a chance to catch last minute feature bugs and evaluation regression during the one-week code freeze period. Also changing the copyright dates to include 2019.  No functional change,True,0,2018-11-01
SFisGOD,snicolet,2018-11-19 09:50:55+00:00,Tweak Queen PSQT based on tuned values  STC: (Yellow) LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 63140 W: 13433 L: 13353 D: 36354 http://tests.stockfishchess.org/tests/view/5bed42c90ebc595e0ae37cf5  LTC: (Green) LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 47714 W: 7785 L: 7485 D: 32444 http://tests.stockfishchess.org/tests/view/5bec3b8c0ebc595e0ae36dec  Closes https://github.com/official-stockfish/Stockfish/pull/1816  Bench: 3717396,True,0,2018-11-01
Kurtbusch,snicolet,2018-11-19 09:42:46+00:00,Tune evaluation scores  STC: LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 84697 W: 18173 L: 18009 D: 48515 http://tests.stockfishchess.org/tests/view/5bea366f0ebc595e0ae34793  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 157625 W: 25533 L: 24893 D: 107199 http://tests.stockfishchess.org/tests/view/5be8b69e0ebc595e0ae33024  Personally; I feel like SF has been tuned to death recently and that we need to step away from existing-parameter tunes for a bit and focus more on new ideas. I don't really think there's much more ELO in these tunes (for now). For me at least; this was the last existing-parameter tune I'll be running for quite a while. Cheers!  Bench: 3572567,True,0,2018-11-01
Unknown,snicolet,2018-11-19 09:37:34+00:00,Remove BlockedStorm array  Apparently; only RANK_3 is relevant. This removes a look-up and the BlockedStorm array; but adds another conditional.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 84340 W: 18054 L: 18054 D: 48232 http://tests.stockfishchess.org/tests/view/5bea10f40ebc595e0ae3457b  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 31874 W: 5135 L: 5032 D: 21707 http://tests.stockfishchess.org/tests/view/5beadb6a0ebc595e0ae35542  Closes https://github.com/official-stockfish/Stockfish/pull/1814  Bench: 3799443,True,0,2018-11-01
VoyagerOne,snicolet,2018-11-19 09:28:55+00:00,Simplify Castle Extension  Remove depth condition in castle extension; also don't extend if Singular Extension and Check Extansion fail to extend.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 42070 W: 9118 L: 9036 D: 23916 http://tests.stockfishchess.org/tests/view/5be899cc0ebc595e0ae32f07  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 78278 W: 12490 L: 12458 D: 53330 http://tests.stockfishchess.org/tests/view/5be8ac420ebc595e0ae33010  Bench: 3611041,True,0,2018-11-01
Unknown,snicolet,2018-11-19 09:16:07+00:00,Code style in search.cpp  It does not appear to be not necessary or advantageous to conditionally initialize kingRing[Us] or kingAttackersCount[Them]; so the 'else' can be removed.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 22873 W: 4923 L: 4804 D: 13146 http://tests.stockfishchess.org/tests/view/5be9a8270ebc595e0ae33c7e  No functional change,True,0,2018-11-01
NikolayIT,snicolet,2018-11-19 09:10:47+00:00,Update a comment in the evaluate.cpp file to reflect recent change  No functional change,True,0,2018-11-01
SFisGOD,snicolet,2018-11-19 09:02:31+00:00,Rook PSQT Tuned  Failed STC (Yellow ) LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 56302 W: 12007 L: 11953 D: 32342 http://tests.stockfishchess.org/tests/view/5be69d210ebc595e0ae3185b  Passed 1st LTC (Green) LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 8745 W: 1480 L: 1301 D: 5964 http://tests.stockfishchess.org/tests/view/5be682960ebc595e0ae31818  Failed 2nd LTC (Red) LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 19398 W: 3040 L: 3133 D: 13225 http://tests.stockfishchess.org/tests/view/5be69b840ebc595e0ae31856  Passed 3rd LTC (Green) LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 107516 W: 17342 L: 16858 D: 73316 http://tests.stockfishchess.org/tests/view/5bea879a0ebc595e0ae34d80  Closes https://github.com/official-stockfish/Stockfish/pull/1809  How to continue from there?  The values in the rook table now look a bit strange for a human eye and are hard to explain; maybe it would be nice to simplify them by hand and see if we can pass another (clean) double green with a more regular array.  Bench: 3188070,True,0,2018-11-01
Vizvezdenec,snicolet,2018-11-19 08:47:19+00:00,"Change default contempt from 21 to 24 centipawns  To top the rating lists and get more interesting middle play; it is a good habit to set the default contempt to the highest value that does not regress against contempt=0. We recently decreased PawnValueEg it is logical that to raise a little bit the default higher contempt because of the following internal dependency in line 334 of search.cpp :  ```` int ct = int(Options[""Contempt""]) * PawnValueEg / 100; // From centipawns ````  STC: contempt=24 passed non-regression vs contempt=0 http://tests.stockfishchess.org/tests/view/5bd6d7f80ebc595e0ae21e14  LTC: contempt=24 passed non-regression LTC vs contempt=0 http://tests.stockfishchess.org/tests/view/5bd6e0980ebc595e0ae21f07  On 2018-11-01; we also tested the effects of contempt=21 and contempt=24 against Stockfish 9; and the net result was neutral:  Contempt 21 ELO: 51.68 +-1.9 (95%) LOS: 100.0% Total: 40000 W: 9487 L: 3581 D: 26932 http://tests.stockfishchess.org/tests/view/5bdb1a140ebc595e0ae2620a  Contempt 24 ELO: 52.21 +-2.0 (95%) LOS: 100.0% Total: 40000 W: 9759 L: 3793 D: 26448 http://tests.stockfishchess.org/tests/view/5bdb1b680ebc595e0ae2620d  Bench: 3459874",True,0,2018-11-01
Unknown,snicolet,2018-11-12 19:33:07+00:00,Replace the PassedDanger array by an equation  This equation seems to do as well as the current PassedDanger array.  Master values were: 3; 7; 11; 20 The new values given by the equation are: 3; 6; 11; 18  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 84301 W: 18155 L: 18156 D: 47990 http://tests.stockfishchess.org/tests/view/5bda03180ebc595e0ae2518e  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 7940 W: 1358 L: 1217 D: 5365 http://tests.stockfishchess.org/tests/view/5bdc69880ebc595e0ae27d28  We stopped a LTC run after 70000 games: LLR: 0.74 (-2.94;2.94) [0.00;4.00] Total: 70257 W: 11319 L: 11064 D: 47874 http://tests.stockfishchess.org/tests/view/5bdca8420ebc595e0ae281a9  Bench: 3913185,True,0,2018-11-01
Unknown,snicolet,2018-11-12 18:45:05+00:00,Remove redundant king square parameter  We don't need to pass the king square as an explicit parameter to the functions king_safety() and do_king_safety() since we already pass in the position.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 69686 W: 14894 L: 14866 D: 39926 http://tests.stockfishchess.org/tests/view/5be84ac20ebc595e0ae3283c  No functional change.,True,0,2018-11-01
31m059,mcostalba,2018-11-11 21:14:28+00:00,Simplify tropism. (#1807)  We calculate tropism as a sum of two factors. The first is the number of squares in our kingFlank and Camp that are attacked by the enemy; the second is number of these squares that are attacked twice. Prior to this commit; we excluded squares we defended with pawns from this second value; but this appears unnecessary. (Doubly-attacked squares near our king are still dangerous.) The removal of this exclusion is a possible small Elo gain at STC (estimated +1.59) and almost exactly neutral at LTC (estimated +0.04).    STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 20942 W: 4550 L: 4427 D: 11965  http://tests.stockfishchess.org/tests/view/5be4e0ae0ebc595e0ae308a0    LTC:  LLR: 2.94 (-2.94;2.94) [-3.00;1.00]  Total: 56941 W: 9172 L: 9108 D: 38661  http://tests.stockfishchess.org/tests/view/5be4ec340ebc595e0ae30938    Bench: 3813986,True,6,2018-11-01
snicolet,snicolet,2018-11-08 16:09:44+00:00,Update list of top CPU contributors  Contributors with >10;000 CPU hours as of November 4; 2018. Thank you!  No functional change,True,3,2018-11-01
SFisGOD,snicolet,2018-11-08 15:34:10+00:00,Pawn and Piece Values Tuned at LTC  Failed STC LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 27487 W: 5846 L: 5903 D: 15738 http://tests.stockfishchess.org/tests/view/5be1d3190ebc595e0ae2e5b8  Passed 1st LTC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 38503 W: 6270 L: 5999 D: 26234 http://tests.stockfishchess.org/tests/view/5be1f5ef0ebc595e0ae2e750  Passed 2nd LTC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 34016 W: 5584 L: 5326 D: 23106 http://tests.stockfishchess.org/tests/view/5be2a1970ebc595e0ae2f1b4  This pull request lead to an interesting discussion about testing methodology for Stockfish: https://github.com/official-stockfish/Stockfish/pull/1804  Bench: 3647775,True,3,2018-11-01
vondele,snicolet,2018-11-08 15:20:23+00:00,fixup,True,3,2018-11-01
vondele,snicolet,2018-11-08 15:20:23+00:00,Extension for king moves changing castling rights  passed STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 8463 W: 1919 L: 1747 D: 4797 http://tests.stockfishchess.org/tests/view/5be15d510ebc595e0ae2dec6  passed LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 142590 W: 23263 L: 22587 D: 96740 http://tests.stockfishchess.org/tests/view/5be1667b0ebc595e0ae2df2d  Bench: 3607243,True,3,2018-11-01
ianfab,snicolet,2018-11-04 20:30:35+00:00,Simplify mobility danger  Check sign only after adding mobility danger term.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 9090 W: 2001 L: 1856 D: 5233 http://tests.stockfishchess.org/tests/view/5bdc5ee10ebc595e0ae27bc2  LTC LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 123466 W: 19766 L: 19805 D: 83895 http://tests.stockfishchess.org/tests/view/5bdc678e0ebc595e0ae27cf3  bench: 3630207,True,6,2018-11-01
snicolet,snicolet,2018-11-02 21:08:26+00:00,Rook tweaks in evaluation  Some small changes in evaluation to try to convince Stockfish to centralize her rooks more in middle game and avoid trapping them in the corners. Joint work by SFisGOD and snicolet.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 99826 W: 21895 L: 21341 D: 56590 http://tests.stockfishchess.org/tests/view/5bdc3e280ebc595e0ae277df  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 21467 W: 3541 L: 3322 D: 14604 http://tests.stockfishchess.org/tests/view/5bdc9ff30ebc595e0ae28119  Bench: 3631608,True,4,2018-11-01
vondele,snicolet,2018-11-01 15:00:56+00:00,Fix issues from using adjustedDepth too broadly  The recently committed Fail-High patch (081af9080542a0d076a5482da37103a96ee15f64) had a number of changes beyond adjusting the depth of search on fail high; with some undesirable side effects.  1) Decreasing depth on PV output; confusing GUIs and players alike as described in    issue #1787. The depth printed is anyway a convention; let's consider adjustedDepth    an implementation detail; and continue to print rootDepth. Depth; nodes; time and    move quality all increase as we compute more. (fixing this output has no effect on    play).  2) Fixes go depth output (now based on rootDepth again; no effect on play); also    reported in issue #1787  3) The depth lastBestDepth is used to compute how long a move is stable; a new move    found during fail-high is incorrectly considered stable if based on adjustedDepth    instead of rootDepth (this changes time management). Reverting this passed STC    and LTC:     STC    LLR: 2.95 (-2.94;2.94) [-3.00;1.00]    Total: 82982 W: 17810 L: 17808 D: 47364    http://tests.stockfishchess.org/tests/view/5bd391a80ebc595e0ae1e993     LTC    LLR: 2.95 (-2.94;2.94) [-3.00;1.00]    Total: 109083 W: 17602 L: 17619 D: 73862    http://tests.stockfishchess.org/tests/view/5bd40c820ebc595e0ae1f1fb  4) In the thread voting scheme; the rank of the fail-high thread is now artificially    low; incorrectly since the quality of the move is much better than what adjustedDepth    suggests (e.g. if it takes 10 iterations to find VALUE_KNOWN_WIN; it has very low    depth). Further evidence comes from a test that showed that the move of highest    depth is not better than that of the last PV (which is potentially of much lower    adjustedDepth).     I.e. this test http://tests.stockfishchess.org/tests/view/5bd37a120ebc595e0ae1e7c3    failed SPRT[0; 5]:     LLR: -2.95 (-2.94;2.94) [0.00;5.00]    Total: 10609 W: 2266 L: 2345 D: 5998     In a running 5+0.05 th 8 test (more than 10000 games) a positive Elo estimate is    shown (strong enough for a [-3;1]; possibly not [0;4]):     http://tests.stockfishchess.org/tests/view/5bd421be0ebc595e0ae1f315    LLR: -0.13 (-2.94;2.94) [0.00;4.00]    Total: 13644 W: 2573 L: 2532 D: 8539    Elo	1.04 [-2.52;4.61] / LOS 71%  Thus; restore old behavior as a bugfix; keeping the core of the fail-high patch idea as resolving scheme. This is non-functional for bench; but changes searches via time management and in the threaded case.  Bench: 3556672,True,3,2018-11-01
SFisGOD,snicolet,2018-11-01 14:39:19+00:00,Combo  Combo of two parameter tweaks and tuned values for Queen and ThreatByKing.  STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 20180 W: 4439 L: 4198 D: 11543 http://tests.stockfishchess.org/tests/view/5bd7b8250ebc595e0ae22e97  LTC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 86312 W: 14106 L: 13685 D: 58521 http://tests.stockfishchess.org/tests/view/5bd803560ebc595e0ae23213  This combo consists of the following:  Queen Value (tuned values) Iter: 72056; A: 5000; alpha 0.602000; gamma 0.101000; clipping old; rounding deterministic param: QueenValueMg; best: 2528.91; start: 2528.00 param: QueenValueEg; best: 2687.12; start: 2698.00  ThreatByKing (tuned values) Green STC (50.8k games) http://tests.stockfishchess.org/tests/view/5bd1d5a00ebc595e0ae1cbec LTC (I stopped this test at 71.2k games. It's likely yellow.) http://tests.stockfishchess.org/tests/view/5bd263e70ebc595e0ae1d77e  WeakUnopposedPawn (tweak) by xoto (https://github.com/xoto10) Green STC (102.8k games) http://tests.stockfishchess.org/tests/view/5bd306bb0ebc595e0ae1e146 Yellow LTC (90.8k games) http://tests.stockfishchess.org/tests/view/5bd3ea660ebc595e0ae1f16b  aspiTune1 (tweak) by vondele (https://github.com/vondele) Green STC (125.9k games) http://tests.stockfishchess.org/tests/view/5bd2ae100ebc595e0ae1dab0 Yellow LTC (107.9k games) http://tests.stockfishchess.org/tests/view/5bd3eb700ebc595e0ae1f16f  Thank you @31m059 (Mark Tenzer) for helping me! Also; thank you very much for recognizing my efforts. I genuinely appreciate it.  Bench: 3556672,True,3,2018-11-01
Vizvezdenec,mcostalba,2018-10-27 07:23:11+00:00,Tweak of knight PSQT and mobility bonuses  STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 16906 W: 3745 L: 3516 D: 9645 http://tests.stockfishchess.org/tests/view/5bd306a40ebc595e0ae1e144  LTC LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 62779 W: 10249 L: 9901 D: 42629 http://tests.stockfishchess.org/tests/view/5bd3188f0ebc595e0ae1e296  Bench 3166402,True,5,2018-10-01
pb00068,snicolet,2018-10-25 21:08:06+00:00,On main thread: reduce depth after fail high  This helps resolving consecutive FH's during aspiration more efficiently  STC: http://tests.stockfishchess.org/tests/view/5bc857920ebc592439f85765 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 4992 W: 1134 L: 980 D: 2878 Elo +10.72   LTC: http://tests.stockfishchess.org/tests/view/5bc868050ebc592439f857ef LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 8123 W: 1363 L: 1210 D: 5550 Elo +6.54  No-Regression test with 8 threads; tc=15+0.15: http://tests.stockfishchess.org/tests/view/5bc874ca0ebc592439f85938 LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 24740 W: 3977 L: 3863 D: 16900 Elo +1.60  This was a cooperation between me and Michael Stembera: -me recognizing SF having problems with resolving FH's efficiently at high depths; thus starting some tests based on consecutive FH's. -mstembera picking up the idea with first success at STC & LTC (so full credits to him!) -me suggesting how to resolve the issues pinpointed by S.G on PR #1768 and finally restricting the logic to the main thread so that it don't regresses at multi-thread.  bench: 3314347,True,3,2018-10-01
CoffeeOne,snicolet,2018-10-25 21:03:25+00:00,NUMA for 9 threads or more  Enable numa machinery only for STRICTLY MORE than 8 threads. Reason for this change is that nowadays SMP tests are always done with 8 threads. That is a problem for multi-socket Windows machines running on fishtest.  No functional change,True,3,2018-10-01
pb00068,mcostalba,2018-10-23 16:04:30+00:00,Revert Pull Request #1771; see issue #1785 (#1786)  no functional change    bench: 4274207,True,1,2018-10-01
Unknown,mcostalba,2018-10-21 06:15:04+00:00,Small simplification in castling rights  There is no need for a special struct with a static member to generate castling rights.  No functional change.,True,6,2018-10-01
ElbertoOne,snicolet,2018-10-14 18:40:57+00:00,Simplify check extensions  Remove the !moveCountPruning condition for check extensions; which seems not necessary.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 22238 W: 4835 L: 4715 D: 12688 http://tests.stockfishchess.org/tests/view/5bb3241a0ebc592439f6d2ac  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 36593 W: 5898 L: 5802 D: 24893 http://tests.stockfishchess.org/tests/view/5bb34c220ebc592439f6d5dc  Bench: 4274207,True,6,2018-10-01
vondele,snicolet,2018-10-14 18:33:52+00:00,Randomize draw eval  The patch adds a small random component (+-1) to VALUE_DRAW for the evaluation of draw positions (mostly 3folds). This random component is not static; but potentially different for each visit of the node (hence derived from the node counter). The effect is that in positions with many 3fold draw lines; different lines are followed at each iteration. This keeps the search much more dynamic; as opposed to being locked to one particular 3fold.  An example of a position where master suffers from 3fold-blindness and this patch solves quickly is the famous TCEC game 53:  FEN: 3r2k1/pr6/1p3q1p/5R2/3P3p/8/5RP1/3Q2K1 b - - 0 51  master doesn't see that this is a lost position (draw eval up to depth 50) as Qf6-e6 d4-d5 (found by patch at depth 23) leads to a loss.  The 3fold-blindness is more important at longer TC; the patch was yellow STC and LTC; but passed VLTC:  STC LLR: -2.95 (-2.94;2.94) [0.00;5.00] Total: 46328 W: 10048 L: 9953 D: 26327 http://tests.stockfishchess.org/tests/view/5b9c0ca20ebc592cf275f7c7  LTC LLR: -2.95 (-2.94;2.94) [0.00;5.00] Total: 54663 W: 8938 L: 8846 D: 36879 http://tests.stockfishchess.org/tests/view/5b9ca1610ebc592cf27601d3  VLTC LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 31789 W: 4512 L: 4284 D: 22993 http://tests.stockfishchess.org/tests/view/5b9d1a670ebc592cf276076d  Credit to @crossbr for pointing to this problem repeatedly; and giving the hint that many draw lines are typical in those situations.  Bench: 4756639,True,6,2018-10-01
pb00068,snicolet,2018-10-14 18:19:46+00:00,Correctly track down pv even in fail-high case  Currently we update (track up) the pv even in the fail high case. However most times in such cases the pv in the ply below remains unset because there we have value == alpha and so finally we see truncated pv's (=just one move) in fail high cases. Of course tracking down these pv's (+sending them to the gui) comes at a certian cost; but no-regression tests passed:  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 16300 W: 3556 L: 3424 D: 9320 http://tests.stockfishchess.org/tests/view/5b9b73500ebc592cf275ea92  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 202411 W: 32734 L: 32897 D: 136780 http://tests.stockfishchess.org/tests/view/5b9baed10ebc592cf275ef6d  N.B.: Digging also into qsearch was tried in another version but seemed not to pass the tests. This means that we don't always will get a pv until the very tips.  No functional change,True,6,2018-10-01
miguel-l,snicolet,2018-10-14 18:15:16+00:00,Simplify evaluation of blockers_for_king  Currently; we have two evaluation terms which account for pinned pieces. One is for all pinned pieces in kingDanger computation and another for just pinned pawns in ThreatByRank. We can increase the relevant bonus for kingDanger calculation and do away with the ThreatByRank; which seems to just add more complexity.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 113353 W: 24299 L: 24356 D: 64698 http://tests.stockfishchess.org/tests/view/5ba348c20ebc592cf2766e61  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 96458 W: 15514 L: 15511 D: 65433 http://tests.stockfishchess.org/tests/view/5ba398830ebc592cf2767563  At 100k games; I thought it struggles a bit; but some related [0;4] tests attempting individual tweaks seem to fail:  I tried directly tweaking ThreatByRank: http://tests.stockfishchess.org/tests/view/5ba3c6300ebc592cf276791c http://tests.stockfishchess.org/tests/view/5ba3c6190ebc592cf2767917  @Vizveznedec was also recently trying to tweak the same coeffecients for kingDanger calculation: http://tests.stockfishchess.org/tests/view/5ba2c7320ebc592cf27664b2 http://tests.stockfishchess.org/tests/view/5ba2c8220ebc592cf27664b8 http://tests.stockfishchess.org/tests/view/5ba2c7880ebc592cf27664b4 http://tests.stockfishchess.org/tests/view/5ba2c7ce0ebc592cf27664b6  Bench: 4648095,True,6,2018-10-01
vondele,snicolet,2018-10-14 18:10:47+00:00,small ttCapture simplification.  ttCapture can be assigned to only once outside of the main loop. The patch seems functional at higher depths (seems possible in the case of non-legal TTmoves that are captures).  passed STC LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 23189 W: 5098 L: 4980 D: 13111 http://tests.stockfishchess.org/tests/view/5bb3822c0ebc592439f6d966  passed LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 10336 W: 1665 L: 1529 D: 7142 http://tests.stockfishchess.org/tests/view/5bb39a190ebc592439f6db8a  unchanged bench: 4312846,True,6,2018-10-01
31m059,snicolet,2018-10-14 18:02:31+00:00,Combo  This PR is a combination of two unrelated [0; 4] patches that appeared promising but not quite strong enough to pass on their own. The combination initially failed STC with a positive score after a long run; and the subsequent speculative LTC test passed.  * tweak_threatOnQueen4 :  Increase the middlegame components of ThreatByMinor[QUEEN] and ThreatByRook[QUEEN] by 15 each. Bryan's (@crossbr) analysis of CCC Bonus Game 10 inspired several tests on penalizing a queen with limited safe mobility. While attempting to implement this idea; I noticed that when I did not include the queen's current square in the calculations; the Elo gains seemed to vanish--and only then did I have the idea to revisit ThreatByMinor[QUEEN] and ThreatByRook[QUEEN]; adding a corresponding value to each. Without Bryan's work; this test would never have been submitted. I would also like to recognize the efforts and contributions of @SFisGOD; who also vigorously worked on this idea.  * Use pure static eval for null move pruning :  This idea was directly re-purposed from a promising test by Jerry Donald Watson (@jerrydonaldwatson) in August. It was also independently developed and tested by Stefan Geschwentner (@locutus2) previously. Thank you all!  STC (failed yellow): LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 83913 W: 17986 L: 17825 D: 48102 http://tests.stockfishchess.org/tests/view/5bbc59300ebc592439f76aa5  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 137198 W: 22351 L: 21772 D: 93075 http://tests.stockfishchess.org/tests/view/5bbce35f0ebc592439f77639  Bench: 4312846,True,6,2018-10-01
eduherminio,snicolet,2018-09-27 19:39:36+00:00,Fix two typos in comments  Note by snicolet: I use this non-functional change patch as a pretext to correct the wrong bench number I introduced in the message of the previous commit.  Bench: 4059356,True,3,2018-09-01
vondele,snicolet,2018-09-27 19:28:38+00:00,Remove essentially unused code  this was added recently as part of a larger commit; but only changes eval of positions at MAX_PLY depth a little. Can be safely removed:  passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 7424 W: 1640 L: 1492 D: 4292 http://tests.stockfishchess.org/html/live_elo.html?5ba3bcbe0ebc592cf27677ff  passed LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 73554 W: 12028 L: 11990 D: 49536 http://tests.stockfishchess.org/html/live_elo.html?5ba397ee0ebc592cf2767556  unchanged Bench: 4248710,True,3,2018-09-01
Unknown,snicolet,2018-09-27 19:18:18+00:00,Two simplifications in passed pawns evaluation  These two simplifications appear to be affecting and/or offsetting each other. Neither can be removed independently; but in combination they pass -3;1.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 36391 W: 7888 L: 7795 D: 20708 http://tests.stockfishchess.org/tests/view/5b9bce410ebc592cf275f1b2  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 19513 W: 3237 L: 3114 D: 13162 http://tests.stockfishchess.org/tests/view/5b9c0edf0ebc592cf275f80e  Closes https://github.com/official-stockfish/Stockfish/pull/1769  bench 4059356,True,3,2018-09-01
Rocky640,snicolet,2018-09-27 18:58:40+00:00,"Pawn PSQT Tuned  Tested against master ""Tweak opposite color bishops endgame scaling"" using values from a 100K SPSA with ck=10  Passed STC http://tests.stockfishchess.org/tests/view/5ba7fe7a0ebc592cf276b971 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 27717 W: 6052 L: 5782 D: 15883  Passed LTC http://tests.stockfishchess.org/tests/view/5ba815790ebc592cf276bb6b LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 17486 W: 2919 L: 2712 D: 11855  bench: 4441247",True,3,2018-09-01
vondele,snicolet,2018-09-27 18:48:11+00:00,Remove unneeded branch  Storing unconditionally the current generation and bound is equivalent to master. Part of the condition was added as a speed optimization in #429. Here the branch is fully eliminated.  passed STC single-threaded: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 73515 W: 16378 L: 16359 D: 40778 http://tests.stockfishchess.org/tests/view/5b2fc38c0ebc5902b2e57fd5  passed STC multi-threaded: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 63725 W: 12916 L: 12874 D: 37935 http://tests.stockfishchess.org/tests/view/5b307b8f0ebc5902b2e5895f  The multithreaded test was run after a plausible suggestion by @mstembera that the effect of this could be larger with many cores. The result seems to indicate this doesn't really matter on the 8core architecture abundantly available on fishtest.  No functional change,True,3,2018-09-01
Vizvezdenec,locutus2,2018-09-10 10:22:44+00:00,Tweak opposite colord bishops endgame scaling.  Make scale factor dependant on asymmetry of pawn structure.  STC http://tests.stockfishchess.org/tests/view/5b92a2a80ebc592cf2753dd4 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 31490 W: 6870 L: 6587 D: 18033  LTC http://tests.stockfishchess.org/tests/view/5b92f8170ebc592cf2754438 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 54928 W: 8988 L: 8653 D: 37287  This patch shows that SF can use some more complicated endgame heuristics to evaluate endgames better from the distance.  Closes https://github.com/official-stockfish/Stockfish/pull/1767  Bench: 4248710,True,0,2018-09-01
ElbertoOne,snicolet,2018-09-04 08:43:02+00:00,Parameter tweaks in PSQT and NMP  This patch is a combinaison of two parameters tweaks patches which have failed as strong yellows at LTC recently; by Alain Savard (Rocky640) and Fabian Fichter (ianfab):   http://tests.stockfishchess.org/tests/view/5b8a71e60ebc592cf2749b1d   http://tests.stockfishchess.org/tests/view/5b81ce3b0ebc5902bdbb6585  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 57200 W: 12392 L: 12008 D: 32800 http://tests.stockfishchess.org/tests/view/5b8d0a5a0ebc592cf274c48f  And LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 37215 W: 6233 L: 5962 D: 25020 http://tests.stockfishchess.org/tests/view/5b8d56090ebc592cf274cb53  Closes https://github.com/official-stockfish/Stockfish/pull/1764  Bench: 4136116  ---------------  How to continue from there?  The null move reduction formula in line 769 of search.cpp is quite convoluted and full of mysterious magic constants at the moment; it would certainly be nice to simplify it and/or gain more Elo from it:  ``` Depth R = (  (823 + 67 * depth / ONE_PLY) / 256            + std::min(int(eval - beta) / 200; 3)) * ONE_PLY; ```,True,1,2018-09-01
snicolet,snicolet,2018-09-03 20:11:30+00:00,Update list of authors  And also fix some spaces and formatting oddities in the code.  No functional change,True,0,2018-09-01
snicolet,snicolet,2018-09-01 09:30:38+00:00,"Re-introduce ""keep pawns on both flanks""  Re-introduce the ""keep pawns on both flanks"" idea.  STC yellow: LLR: -2.95 (-2.94;2.94) [0.00;5.00] Total: 93279 W: 20175 L: 19853 D: 53251 http://tests.stockfishchess.org/tests/view/5b8a00370ebc592cf274916a  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 11440 W: 1960 L: 1792 D: 7688 http://tests.stockfishchess.org/tests/view/5b8a329f0ebc592cf2749615  Closes https://github.com/official-stockfish/Stockfish/pull/1761  Bench: 4609645",True,5,2018-09-01
Rocky640,snicolet,2018-09-01 02:33:17+00:00,"Long Diagonal Tweaks  a) Reduce PSQT values along the long diagonals on non-central squares and increase the LongDiagonal bonus accordingly. The effect is to penalise bishops on the long diagonal which can not ""see"" the 2 central squares. The ""good"" bishops still have more or less the same bonus as current master.  b) For a bishop on a central square; because of the ""| s"" term in the code; the LongDiagonalBonus was always given. So while being there; remove the ""| s"" and compensate the central Bishop PSQT accordingly.  Passed STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 44498 W: 9658 L: 9323 D: 25517 http://tests.stockfishchess.org/tests/view/5b8992770ebc592cf2748942  Passed LTC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 63092 W: 10324 L: 9975 D: 42793 http://tests.stockfishchess.org/tests/view/5b89a17a0ebc592cf2748b59  Closes https://github.com/official-stockfish/Stockfish/pull/1760  bench: 4693901",True,5,2018-09-01
Unknown,snicolet,2018-08-29 00:49:10+00:00,Remove PawnsOnBothFlanks  It looks like PawnsOnBothFlanks can be removed from initiative(). A barrage of tests seem to confirm that the adjustment to -110 does not gain elo to offset any potential loss by removing PawnsOnBothFlanks.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 22014 W: 4760 L: 4639 D: 12615 http://tests.stockfishchess.org/tests/view/5b7f50cc0ebc5902bdbb3a3e  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 40561 W: 6667 L: 6577 D: 27317 http://tests.stockfishchess.org/tests/view/5b801f9f0ebc5902bdbb4467  The barrage of 0;4 tests on the -136 value are in my ps_tunetests branch. http://tests.stockfishchess.org/tests/user/protonspring  Closes https://github.com/official-stockfish/Stockfish/pull/1751  Bench: 4413173  -------------  How to continue from there?  The fact that endgames with all the pawns on only one flank are drawish is a well-known chess idea; so it seems quite strange that this can be removed so easily without losing Elo.  In the past there had been attempts to improve on PawnsOnBothFlanks with similar concepts (for instance using the pawn span value); but the tests were at best neutral. Maybe Stockfish is now mature enough that these refined ideas would work to replace PawnsOnBothFlanks?,True,2,2018-08-01
MJZ1977,snicolet,2018-08-29 00:28:09+00:00,"Fix bug with ""excludedMove"" for probcut  Bugfix: ""excludedMove"" has to be skipped in the probcut loop too. If it is not skipped; the probcut can exit quickly with a wrong return value corresponding to the excluded move. See the following forum thread for a discussion: https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/GGithf_VwSU  STC : LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17130 W: 3747 L: 3617 D: 9766 http://tests.stockfishchess.org/tests/view/5b8460c40ebc5902bdbb999a  LTC : LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 12387 W: 2064 L: 1930 D: 8393 http://tests.stockfishchess.org/tests/view/5b8466f90ebc5902bdbb9a21  To go further : it can be perhaps useful to tune the singular extension search parameters.  Closes https://github.com/official-stockfish/Stockfish/pull/1754  Bench: 4308541",True,2,2018-08-01
sesse,snicolet,2018-08-29 00:00:20+00:00,Shrink the hash table of tablebases back to 4096 entries  There is no need to make this as large as 65536 just for the sake of the single 7-man tablebase that happens to have the key 0xf9247fff. Idea for the fix by Ronald de Man; who suggested simply to allow more buckets past the end.  We also implement Robin Hood hashing for the hash table; which takes the worst -case search for full 7-man tablebases down from 68 to 11 probes (Also takes the average probe length from 2.06 to 2.05). For a table with 8K entries; the corresponding numbers would be worst-case from 9 to 4; with average from 1.30 to 1.29.  https://github.com/official-stockfish/Stockfish/pull/1747  No functional change,True,2,2018-08-01
WOnder93,snicolet,2018-08-28 23:24:45+00:00,Refactor pure static eval code  This commit tries to make the new pure static eval code more readable by splitting up the nested assignments into separate lines and making a few more cosmetic tweaks.  No functional change.,True,1,2018-08-01
Unknown,snicolet,2018-08-28 23:07:38+00:00,"make DistanceRing more consistent  This is a non-functional change. By pre-incrementing minKingPawnDistance instead of post-incrementing; we can remove this -1.  This also makes DistanceRing more consistent with the rest of stockfish since it now holds an actual ""distance"" instead of a less natural distance-1.  In current master; PseudoAttacks[KING][ksq] == DistanceRingBB[ksq][0] With this patch; it will be PseudoAttacks[KING][ksq] == DistanceRingBB[ksq][1] ie squares at distance 1 from the king. This is more natural use of distance.  The current array size DistanceRingBB[SQUARE_NB][8] is still OK with the new definition; because maximum distance between two squares on a chess board is seven (for example Kh1 and a8).  No functional change.",True,1,2018-08-01
Vizvezdenec,snicolet,2018-08-28 22:53:31+00:00,"Tweak stat bonus formula  Tweak stat bonus formula on top of latest elo gain by @snicolet  STC http://tests.stockfishchess.org/tests/view/5b830a810ebc5902bdbb7e9c LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 27797 W: 6113 L: 5842 D: 15842  LTC http://tests.stockfishchess.org/tests/view/5b831f2c0ebc5902bdbb8038 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 13655 W: 2294 L: 2099 D: 9262  I think that more elo can be found in tweaks of this parameters so I plan to further try some ""hand-tuning""; including increasing/decreasing ratio of two constants and making bonus assimetric to 0. Thx to @AndyGrant for helping with github and @jerrydonaldwatson for original idea.  Closes https://github.com/official-stockfish/Stockfish/pull/1748  Bench: 4172767",True,1,2018-08-01
VoyagerOne,snicolet,2018-08-28 22:41:53+00:00,Don't modify Eval with search stats at ttHits  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 28344 W: 6148 L: 6040 D: 16156 http://tests.stockfishchess.org/tests/view/5b7d6b4e0ebc5902bdbb1914  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 41084 W: 6769 L: 6680 D: 27635 http://tests.stockfishchess.org/tests/view/5b7d7f5b0ebc5902bdbb1b85  Bench: 4457440,True,1,2018-08-01
locutus2,snicolet,2018-08-20 19:52:29+00:00,Store only unchanged static evaluations in TT  A recent commit introduced a decrease of the static evaluation of an inner node dependent on the previous stat score; which finally was also stored in the transposition table. Now only the unchanged static evaluation are stored there.  Remark: For the case that a static evaluation can be retrieved from the transposition table the value is now used unchanged. Another test which also applies the modification in this case failed: http://tests.stockfishchess.org/tests/view/5b7af6df0ebc5902bdbae2f6  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 6707 W: 1547 L: 1383 D: 3777 http://tests.stockfishchess.org/tests/view/5b7a92df0ebc5902bdbadcf3  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 36203 W: 6046 L: 5781 D: 24376 http://tests.stockfishchess.org/tests/view/5b7abaa10ebc5902bdbadfa9  Closes https://github.com/official-stockfish/Stockfish/pull/1742  Bench: 4457440,True,0,2018-08-01
snicolet,snicolet,2018-08-17 23:23:36+00:00,Use an affine formula to mix stats and eval  Follow-up for the previous patch: we use an affine formula to mix stats and evaluation in search. The idea is to give a bonus if the previous move of the opponent was historically bad; and a malus if the previous move of the opponent was historically good.  More precisely; if x is the stat score of the previous move by the opponent; we implement the following formulas to tweak the evaluation at an internal node of the tree for our pruning decisions at this node:  if x = 0; use v' = eval(P) if x > 0; use v' = eval(P) - 5 - x/1024 if x < 0; use v' = eval(P) + 5 - x/1024  For reference; the previous master had this simpler rule:  if x > 0; use v' = eval(P) - 10 if x <= 0; use v' = eval(P)  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 29322 W: 6359 L: 6088 D: 16875 http://tests.stockfishchess.org/tests/view/5b76a5980ebc5902bdba957f  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 30893 W: 5154 L: 4910 D: 20829 http://tests.stockfishchess.org/tests/view/5b76ca6d0ebc5902bdba9914  Closes https://github.com/official-stockfish/Stockfish/pull/1740  Bench: 4592766,True,4,2018-08-01
VoyagerOne,snicolet,2018-08-17 09:40:29+00:00,Mix search stats with evaluation  Mix search stats with evaluation: if the opponent's move has a good historyStat; then decrease the evaluation of the internal node a bit for the pruning decisions during search.  STC; LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 72083 W: 15683 L: 15203 D: 41197 http://tests.stockfishchess.org/tests/view/5b74c3ea0ebc5902bdba7d41  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 29104 W: 4867 L: 4630 D: 19607 http://tests.stockfishchess.org/tests/view/5b7565000ebc5902bdba851b  Closes https://github.com/official-stockfish/Stockfish/pull/1738  Bench: 4514101  -----------  How to continue from there?  � the use of the previous stat score can probably be simplified in lines 587 and 716 � we could try to use a continuous bonus based on the previous stat score; instead   of just a fixed offset of -10 when the opponent previous move was good.  ----------  Comments by Stefan Geschwentner:  Interesting idea. Because only the eval in search is tweak this should only influence the eval and static eval used at inner nodes; and not on the return search value (which comes in the end from quiescence search); except through saving in TT followed by a TT cutoff.  So essentialy this effects diverse pruning/reduction parts -- eval and static eval  are lowered for good opponent moves:  � tt cutoff (ttValue) � improving (static eval) � more razoring (eval) � less futility pruning (eval) � less null move pruning (eval + static eval) (but with little more depth) � more probcut (static eval) � more move futility pruning (static eval),True,4,2018-08-01
Unknown,snicolet,2018-08-17 08:21:20+00:00,Simplify king file dependancy in evaluate_shelter()  Remove the special value we used for the file of the king in the evaluate_shelter() function; and compensate by tweaking some of the ShelterStrength[] array values.  STC LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 17069 W: 3782 L: 3652 D: 9635 http://tests.stockfishchess.org/tests/view/5b75eb0d0ebc5902bdba8f3d  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 42639 W: 6973 L: 6887 D: 28779 http://tests.stockfishchess.org/tests/view/5b75fd7f0ebc5902bdba906b  Closes https://github.com/official-stockfish/Stockfish/pull/1739  Bench: 4639508,True,4,2018-08-01
snicolet,snicolet,2018-08-14 08:12:31+00:00,"Double weight of capture history  We double in this patch the weight of the capture history table in the local scoring of captures for move ordering.  The capture history table is indexed by the triplet (capturing piece; capture square; captured piece) and gets information like ""it seems to have been historically good in that part of the search tree to capture a pawn with a rook on g3; even if it seems to lose material""; and affect the normaly pure � Most Valuable Victim � ordering of captures.  Finished yellow at STC after 228842 games (posting a +1.36 Elo gain): LLR: -2.95 (-2.94;2.94) [0.00;4.00] Total: 228842 W: 50894 L: 50152 D: 127796 http://tests.stockfishchess.org/tests/view/5b714bb00ebc5902bdba332d  Passed LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 43251 W: 7425 L: 7131 D: 28695 http://tests.stockfishchess.org/tests/view/5b71c7d40ebc5902bdba3e51  Thanks to user Vizvezdenec for running the LTC test.  Closes https://github.com/official-stockfish/Stockfish/pull/1736  Bench: 4272361",True,1,2018-08-01
Rocky640,snicolet,2018-08-14 06:36:27+00:00,Remove pawncount array in imbalance  This is a natural follow up to last commit where values on the QuadraticOurs diagonal and some piece value deltas were changed. @Stefano80 tried to simplify the newly introduced pawncount array using QuadraticOurs[1][1] =52 and a -30 adjustment on pawn values  His STC [-3;1] was green http://tests.stockfishchess.org/tests/view/5b707f5b0ebc5902bdba2745 but not his LTC[-3;1] http://tests.stockfishchess.org/tests/view/5b7095700ebc5902bdba2a49  So I started a 80000 30+0.3 SPSA on the QuadraticOurs diagonal and on the piece values using @Stefano80 start values.  SPSA gave the new values QuadraticOurs[1][1] =38 and a -33 on pawn values (the other changes on QuadraticOurs were kept; but were not ignificant according to this test http://tests.stockfishchess.org/tests/view/5b710ccb0ebc5902bdba2f27)  STC http://tests.stockfishchess.org/tests/view/5b710b220ebc5902bdba2f19 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 50902 W: 11214 L: 11150 D: 28538  LTC http://tests.stockfishchess.org/tests/view/5b7124ef0ebc5902bdba3106 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 34271 W: 5852 L: 5753 D: 22666  Closes https://github.com/official-stockfish/Stockfish/pull/1735  bench: 4738555,True,1,2018-08-01
GuardianRM,snicolet,2018-08-12 16:40:11+00:00,Non-linear bonus for pawn count  This patch introduces a non-linear bonus for pawns; along with some (linear) corrections for the other pieces types.  The original values were obtained by a massive non-linear tuning of both pawns and other pieces by GuardianRM; while Alain Savard and Chris Cain later simplified the patch by observing that; apart from the pawn case; the tuned corrections were in fact almost affine and could be incorporated in our current code base via the piece values in types.h (offset) and the diagonal of the quadratic matrix (slope). See discussion in PR#1725 : https://github.com/official-stockfish/Stockfish/pull/1725  STC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 42948 W: 9662 L: 9317 D: 23969 http://tests.stockfishchess.org/tests/view/5b6ff6e60ebc5902bdba1d87  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 19683 W: 3409 L: 3206 D: 13068 http://tests.stockfishchess.org/tests/view/5b702dbd0ebc5902bdba216b  How to continue from there? - Maybe the non-linearity for the pawn value could be somewhat tempered   again and a simpler linear correction for pawns would work?  Closes https://github.com/official-stockfish/Stockfish/pull/1734  Bench: 4681496,True,6,2018-08-01
Stefano80,snicolet,2018-08-12 08:09:30+00:00,Combo of several promising parameter tweaks  Combo of several tuning patches which finished yellow at LTC.  [STC](http://tests.stockfishchess.org/tests/view/5b6ead340ebc5902bdba14ce) LR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 10668 W: 2445 L: 2239 D: 5984 Elo: 6.25 [1.76;10.69] (95%)  [LTC](http://tests.stockfishchess.org/tests/view/5b6eb50e0ebc5902bdba151f) LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 23761 W: 4155 L: 3923 D: 15683 Elo: 3.02 [0.29;5.67] (95%)  Original patches: - [Piece values](http://tests.stockfishchess.org/tests/view/5b6d2cc00ebc5902bdba02d5) by Stefano Cardanobile - [Stat bonus](http://tests.stockfishchess.org/tests/view/5b6adbc90ebc5902bdb9da73) by Stefan Geschwentner - [Rook on pawn](http://tests.stockfishchess.org/tests/view/5b62a95b0ebc5902bdb961c0) by Mark Tenzer - [Hanging bonus](http://tests.stockfishchess.org/tests/view/5b5d2fa00ebc5902bdb90855) by Ivan Ilvec - [ss tweak](http://tests.stockfishchess.org/tests/view/5b58b7240ebc5902bdb89025) by miguel-l  Bench: 4694813,True,6,2018-08-01
Unknown,snicolet,2018-08-12 07:54:16+00:00,Simple razoring: depth 1 only; no distinction between PV / NonPV  We simplify the razoring logic by applying it to all nodes at depth 1 only. An added advantage is that only one razor margin is needed now; and we treat PV and Non-PV nodes in the same manner.  How to continue? - There may be some conditions in which depth 2 razoring is beneficial. - We can see whether the razor margin can be tuned; perhaps even with a   different value for PV nodes. - Perhaps we can unify the treatment of PV and Non-PV nodes in other parts   of the search as well.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 5474 W: 1281 L: 1127 D: 3066 http://tests.stockfishchess.org/tests/view/5b6de3b20ebc5902bdba0d1e  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 62670 W: 10749 L: 10697 D: 41224 http://tests.stockfishchess.org/tests/view/5b6dee340ebc5902bdba0eb0  In addition; we ran a fixed LTC test against a similar patch which also passed SPRT [-3; 1]:  ELO: 0.23 +-2.1 (95%) LOS: 58.6% Total: 36412 W: 6168 L: 6144 D: 24100 http://tests.stockfishchess.org/tests/view/5b6e83940ebc5902bdba1485  We are opting for this patch as the more logical and simple of the two; and it appears to be no less strong. Thanks in particular to @DU-jdto for input into this patch.  Bench: 4476945,True,6,2018-08-01
miguel-l,snicolet,2018-08-10 04:16:29+00:00,Remove Condition For Passed Pawns  Currently; we do not consider pawns passed if there is another pawn of the same color in front of them. It appears that this condition is not necessary. The idea is that the doubled pawns are likely to be weak and one of them will be likely captured anyway. On the other hand; if we do somehow manage to promote a pawn; then the pawn behind it becomes passed as well. In any case; the end result is we end up with an extra potentially passed pawn. The current evaluation for passed pawns already handles this case by also scaling down this effect.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 28291 W: 6287 L: 6178 D: 15826 http://tests.stockfishchess.org/tests/view/5b6c4b960ebc5902bdb9f256  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 30717 W: 5256 L: 5151 D: 20310 http://tests.stockfishchess.org/tests/view/5b6c82980ebc5902bdb9f863  Bench: 4938285,True,4,2018-08-01
locutus2,snicolet,2018-08-09 12:45:35+00:00,"LMR simplification  Unify the ""quiet"" and ""non-quiet"" reduction rules for use at any kind of moves. The idea behind it was that both rules reduce at similiar cases in master: one directly for late previous moves and the other indirectly by using a bad stat score which is used for most move sorting and so approximates the late move condition.  For captures/promotions the old rule was triggered in 25% but the new rule only for 3% of all cases (so now more reductions are done; whereas for quiet moves reductions keep the same level).  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 162327 W: 35976 L: 36134 D: 90217 http://tests.stockfishchess.org/tests/view/5b6a9a430ebc5902bdb9d5c1  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 29570 W: 5083 L: 4976 D: 19511 http://tests.stockfishchess.org/tests/view/5b6bc5d00ebc5902bdb9e9d6  Bench: 4526980",True,3,2018-08-01
Stefano80,snicolet,2018-08-08 15:58:41+00:00,First check threshold in space evaluation  Currently; we first calculate some bitboards at the top of Evaluation::space() and then check whether we actually need them. Invert the ordering. Of course this does not make a difference in current master because the constexpr bitboard calculations are in fact done at compile time by any decent compiler; but I find my version a bit healthier since it will always meet or exceed current implementation even if we eventually change the spaceMask to something not contsexpr.  No functional change.,True,2,2018-08-01
FauziAkram,snicolet,2018-08-08 15:49:16+00:00,King Psqt Tuning  After a session of tuning for King Psqt I got some new values; which was later tweaked manually by me Fauzi; to result in an Elo-gain patch which seems to scale pretty well:  STC: LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 100653 W: 22550 L: 22314 D: 55789 [Yellow patch]  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 147079 W: 25584 L: 24947 D: 96548 [Green Patch]  Bench: 4669050,True,2,2018-08-01
Stefano80,snicolet,2018-08-08 15:34:12+00:00,Introduce voting system for best move selection  Introduce voting system for best move selction in multi-threads mode. Joint work with Stefan Geschwentner; based on ideas introduced by Michael Stembera.  Moves are upvoted by every thread using the margin to the minimum score across threads and the completed depth.  First thread voting for the winner move is selected as best thread.  Passed STC; LTC. A further LTC test with only 4 threads failed with positive score. A LTC with 31 threads was stopped with LLR 0.77 after 25k games to avoid use of excessive resources (equivalent to 1.5M STC games).  Similar ideas were proposed by Michael Stembera 2 years ago #507; #508. This implementation seems simpler and more understandable; the results slightly more promising.  Further possible work:  1) Tweak of the formula using for assigning votes. 2) Use a different baseline for the score dependent part: maximum score or winning probability could make more sense. 3) Assign votes in `Thread::Search` as iterations are completed and use voting results to stop search. 4) Select best thread as the threads voting for best move with the highest completed depth or; alternatively; vote on PV moves.  Link to SPRT tests  [stopped LTC; 31 threads 20+0.02](http://tests.stockfishchess.org/tests/view/5b61dc090ebc5902bdb95192) LLR: 0.77 (-2.94;2.94) [0.00;5.00] Total: 25602 W: 3977 L: 3850 D: 17775 Elo: 1.70 [-0.68;4.07] (95%)  [passed LTC; 8 threads 20+0.02](http://tests.stockfishchess.org/tests/view/5b5df5180ebc5902bdb9162d) LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 44478 W: 7602 L: 7300 D: 29576 Elo: 1.92 [-0.29;3.94] (95%)  [failed LTC; 4 threads 20+0.02](http://tests.stockfishchess.org/tests/view/5b5f39ef0ebc5902bdb92792) LLR: -2.94 (-2.94;2.94) [0.00;5.00] Total: 29922 W: 5286 L: 5285 D: 19351 Elo: 0.48 [-1.98;3.10] (95%)  [passed STC; 4 threads 5+0.05](http://tests.stockfishchess.org/tests/view/5b5dbf0f0ebc5902bdb9131c) LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 9108 W: 2033 L: 1858 D: 5217 Elo: 6.11 [1.26;10.89] (95%)  No functional change (in simple threat mode),True,2,2018-08-01
mcostalba,snicolet,2018-08-01 10:40:12+00:00,Improve Stats definition  Use operator const T&() instead of operator T() to avoid possible costly hidden copies of non-scalar nested types.  Currently StatsEntry has a single member T; so assuming sizeof(StatsEntry) == sizeof(T) it happens to work; but it's better to use the size of the proper entry type in std::fill. Note that current code works because std::array items are ensured to be allocated in contiguous memory and there is no padding among nested arrays. The latter condition does not seem to be strictly enforced by the standard; so be careful here.  Finally use address-of operator instead of get() to fully hide the wrapper class StatsEntry at calling sites. For completness add the arrow operator too and simplify the C++ code a bit more.  Same binary code as previous master under the Clang compiler.  No functional change.,True,2,2018-08-01
mcostalba,snicolet,2018-07-31 09:56:10+00:00,"Small tweaks to recent code changes  As a note; current 2 LMR conditions on stat score could be simplified in a single line:  r -= ((ss->statScore >= 0) - ((ss-1)->statScore >= 0)) * ONE_PLY;  We keep them splitted in 2 ""if"" statements because are easier to (immediately) read.  No functional change.",True,1,2018-07-01
noobpwnftw,snicolet,2018-07-31 09:24:28+00:00,Unknown message,True,1,2018-07-01
snicolet,snicolet,2018-07-30 06:26:48+00:00,Introduce tropism measure in king danger  This patch adds the tropism measure as a new term in the king danger variable. Since we then trasform this variable as a Score via a quadratic formula; the main effect of the patch is the positive correlation of the tropism measure with some checks and pins information already present in the king danger code.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 6805 W: 1597 L: 1431 D: 3777 http://tests.stockfishchess.org/tests/view/5b5df8d10ebc5902bdb91699  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 32872 W: 5782 L: 5523 D: 21567 http://tests.stockfishchess.org/tests/view/5b5e08d80ebc5902bdb917ee  How to continue from there?  � it may be possible to use CloseEnemies=S(7;0) � we may want to try incorporating other strategic features in the quadratic   king danger.  Closes https://github.com/official-stockfish/Stockfish/pull/1717  Bench: 5591925,True,0,2018-07-01
miguel-l,snicolet,2018-07-28 05:34:37+00:00,Increase the mg->eg gradient for the PawnlessFlank malus  Just a change of value to S(19; 84). Also somewhat of a follow up to the recent tweak in definition of KingFlank.  I tried a lot of other values before this; increasing and decreasing but with little success; and before giving up I wanted to try tweaking the middlegame and endgame values in the opposite directions. I guess this is somewhat lucky.  STC: LLR: 2.94 (-2.94;2.94) [0.00;4.00] Total: 67685 W: 15399 L: 14963 D: 37323 http://tests.stockfishchess.org/tests/view/5b5b5ae80ebc5902bdb8e4f8  LTC: (Also thanks to Stephane Nicolet) LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 54635 W: 9505 L: 9172 D: 35958 http://tests.stockfishchess.org/tests/view/5b5b78f20ebc5902bdb8ece5  Closes https://github.com/official-stockfish/Stockfish/pull/1714  Bench: 4883742,True,5,2018-07-01
VoyagerOne,snicolet,2018-07-27 14:23:45+00:00,Simplify cmh pruning  Simplify cmh pruning by removing PvNode exception  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 9935 W: 2330 L: 2184 D: 5421 http://tests.stockfishchess.org/tests/view/5b587dc00ebc5902bdb88424  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 20635 W: 3585 L: 3464 D: 13586 http://tests.stockfishchess.org/tests/view/5b58910a0ebc5902bdb885b9  Closes https://github.com/official-stockfish/Stockfish/pull/1711  Bench: 4905530,True,4,2018-07-01
snicolet,snicolet,2018-07-27 13:46:13+00:00,Fix a compilation error for MSVC  The previous commit wouldn't compile on the Microsoft Virtual Studio C++ compiler. So use a more compatible style for the same idea (which we already use in numerous places of evaluate.cpp; for instance in line 563).  Under the Clang compiler; both versions generate exactly the same machine code (same md5 signatures for the two binaries).  No functional change.,True,4,2018-07-01
snicolet,snicolet,2018-07-27 13:23:57+00:00,Remove a popcount for HinderPassedPawn  Remove a popcount for HinderPassedPawn; and compensate by doubling  the bonus from S(4;0) to to S(8;0).  Maybe it was pure luck; but we got the idea of this Elo gaining patch by seing the simplification attempt by Mike Whiteley in pull request #1703. This suggests that whenever we have a passed evaluation simplification; we should consider the possibility that the master bonus has become slightly out of tune with time; and we should try a few Elo gaining [0..4] tests by hand-tuning the master bonus.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 19136 W: 4388 L: 4147 D: 10601 http://tests.stockfishchess.org/tests/view/5b59be6f0ebc5902bdb8ac06  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 99382 W: 17324 L: 16843 D: 65215 http://tests.stockfishchess.org/tests/view/5b59d2410ebc5902bdb8afa8  Closes https://github.com/official-stockfish/Stockfish/pull/1710  Bench: 4688817,True,4,2018-07-01
miguel-l,snicolet,2018-07-27 08:38:20+00:00,Tweak KingFlank when king is on edge files  This tweak excludes files D and E from the KingFlank bitboard when our king is on the A or H files respectively. As far as I can tell; this affects two things: the calculation for CloseEnemies and PawnlessFlank. Aside from filtering out slightly less relevant attacks in the flank; I suspect this helps with king prophylaxis; avoiding attacks and moving towards the center when the pawns start to come off.  STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 56755 W: 12881 L: 12489 D: 31385 http://tests.stockfishchess.org/tests/view/5b58a94c0ebc5902bdb88c72  LTC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 130205 W: 22536 L: 21957 D: 85712 http://tests.stockfishchess.org/tests/view/5b58b7580ebc5902bdb89029  How to continue: Tweaking the two bonuses mentioned might give some gain; although as far as I can tell; CloseEnemies is very sensitive to even small changes.  Closes https://github.com/official-stockfish/Stockfish/pull/1705  Bench: 5026009,True,4,2018-07-01
Jekaa,snicolet,2018-07-27 08:30:53+00:00,Small reformat in evaluate threats (non functional)  When evaluating threat by safe pawn and pawn push the same expression is used.  STC LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 19444 W: 4540 L: 4309 D: 10595 http://tests.stockfishchess.org/tests/view/5b5a6e150ebc5902bdb8c5c0  Closes https://github.com/official-stockfish/Stockfish/pull/1709  No functional change.  --------------------  Comments by St�phane Nicolet:  I don't measure any speed-up on my system; with two parallel benches at depth 22:  Total time (ms) : 74989 Nodes searched : 144830258 Nodes/second : 1931353 master  Total time (ms) : 75341 Nodes searched : 144830258 Nodes/second : 1922329 testedpatch  And anyway; like Stefan Geschwentner; I don't think that a 0.3% speed-up would be enough to pass a [0..5] LTC test -- as a first approximation; we have this rule of thumb that 1% speed-up gives about 1 Elo point.  However; considering the facts that the reformatting by itself is interesting; that this is your first green test and that you played by the rules by running the SPRT[0..5] test before opening the pull request; I will commit the change. I will only take the liberty to change the occurrences of safe in lines 590 and 591 to b; to make the code more similar to lines 584 and 585.  So approved; and congrats :-),True,4,2018-07-01
ianfab,snicolet,2018-07-27 08:16:33+00:00,Fix condition for error message of signature script  Use obtained bench instead of reference bench when checking for crash.  No functional change.,True,4,2018-07-01
Unknown,snicolet,2018-07-26 07:34:22+00:00,Remove condition for pawn threats  It appears as though removing squares that are already attacked by our pawns can be removed.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 51242 W: 11503 L: 11440 D: 28299 http://tests.stockfishchess.org/tests/view/5b58b5a40ebc5902bdb88f52  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 35246 W: 6063 L: 5966 D: 23217 http://tests.stockfishchess.org/tests/view/5b58f8e20ebc5902bdb8959b  How to continue after this patch: there is now a slight semantic overlap between the ThreatByPawnPush and the ThreatBySafePawn bonuses; so hand-tuning either of these; or both at the same time; is natural.  Closes https://github.com/official-stockfish/Stockfish/pull/1702  Bench 4734881,True,3,2018-07-01
locutus2,snicolet,2018-07-25 23:29:12+00:00,Rank threats on pinned pawns  Add for pinned pawns half of the standard rank based threat bonus.  STC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 44010 W: 9987 L: 9635 D: 24388 http://tests.stockfishchess.org/tests/view/5b58aa780ebc5902bdb88c7a  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 29475 W: 5089 L: 4847 D: 19539 http://tests.stockfishchess.org/tests/view/5b58b56c0ebc5902bdb88f37  Closes https://github.com/official-stockfish/Stockfish/pull/1701  Bench: 4503866,True,2,2018-07-01
snicolet,snicolet,2018-07-25 16:31:02+00:00,Code clean-up  This patch implements some idea by Alain Savard and Mike Whiteley taken from the perpertual renaming/reformatting thread.  This is a pure code cleaning patch (so no change in functionality); but I use it as a pretext to correct the bogus bench number that I introduced in the previous commit.  Bench: 4413383,True,2,2018-07-01
locutus2,snicolet,2018-07-25 16:02:07+00:00,Tweak stat bonus  Increase stat bonus by 1/32 and adjust the divisor of main and capture history tables to 10692.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 28437 W: 6444 L: 6166 D: 15827 http://tests.stockfishchess.org/tests/view/5b579b4d0ebc5902bdb87139  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 111204 W: 19160 L: 18644 D: 73400 http://tests.stockfishchess.org/tests/view/5b57a7c60ebc5902bdb872d3  Closes https://github.com/official-stockfish/Stockfish/pull/1698  Bench: 4778882,True,2,2018-07-01
VoyagerOne,snicolet,2018-07-25 15:55:16+00:00,CounterMove History Pruning Tweak  STC: (Yellow) LLR: -2.96 (-2.94;2.94) [0.00;5.00] Total: 40124 W: 8817 L: 8751 D: 22556 http://tests.stockfishchess.org/tests/view/5b5690180ebc5902bdb85c8a  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 21599 W: 3811 L: 3599 D: 14189 http://tests.stockfishchess.org/tests/view/5b5757010ebc5902bdb86b1f  Closes https://github.com/official-stockfish/Stockfish/pull/1697  Bench:  4794161,True,2,2018-07-01
locutus2,snicolet,2018-07-25 05:39:06+00:00,"Revert ""Tweak reductions formula: 0.88 * depth + 0.12""  This patch reverts the recent commit called ""Tweak reductions formula; etc."" The decisions for the revert decision were as follows:  1) The original commit called ""Tweak reductions formula: 0.88 * depth + 0.12"" showed bad scaling at in a Very Long Time Control (VLTC) test:  VLTC (180+1.8): LLR: -1.59 (-2.94;2.94) [0.00;5.00] Total: 14968 W: 2247 L: 2257 D: 10464 http://tests.stockfishchess.org/tests/view/5b559ffa0ebc5902bdb84f36  2) So there was a suspicion that the original fast passing LTC test which lead us to accept the patch may have been a statistical accident; so we organized a match against the previous master at LTC to get an Elo estimate for the patch:  LTC match: ELO: -1.83 +-2.1 (95%) LOS: 4.3% Total: 36018 W: 6018 L: 6208 D: 23792 http://tests.stockfishchess.org/tests/view/5b55f8110ebc5902bdb8526f  3) Based on these results; we ran a simplification test with [-3..1] bounds for the revert at LTC:  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41501 W: 7107 L: 7020 D: 27374 http://tests.stockfishchess.org/tests/view/5b5738670ebc5902bdb86932  4) So we revert.  Bench: 4491691",True,2,2018-07-01
Unknown,snicolet,2018-07-24 06:39:08+00:00,Slight decrease of overload value  Set overload value to S(13;6)  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 27606 W: 6371 L: 6094 D: 15141 http://tests.stockfishchess.org/tests/view/5b5455840ebc5902bdb82425  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 112435 W: 19442 L: 18921 D: 74072 http://tests.stockfishchess.org/tests/view/5b546d4a0ebc5902bdb82741  Closes https://github.com/official-stockfish/Stockfish/pull/1694  Bench: 4937000,True,1,2018-07-01
locutus2,snicolet,2018-07-23 07:16:29+00:00,Tweak reductions formula: 0.88 * depth + 0.12  Replace the depth part in the reduction formula for higher depths with a slower growing linear function. So for depth > 3 less reductions are used.  What we can try next: - move the break point to even higher depths - tweak the slope for lower and higher depth - even possibly use a further higher depth threshold for a another   slower growing function  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 25317 W: 5763 L: 5505 D: 14049 http://tests.stockfishchess.org/tests/view/5b54f9f70ebc5902bdb840ed  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 7451 W: 1320 L: 1167 D: 4964 http://tests.stockfishchess.org/tests/view/5b54feeb0ebc5902bdb84244  Closes https://github.com/official-stockfish/Stockfish/pull/1692  Bench: 4617359,True,0,2018-07-01
goodkov,snicolet,2018-07-22 22:03:05+00:00,Simplify condition for ThreatByRook  Remove stronglyProtected Queen for ThreatByRook. Idea is that in the current master the  SliderOnQueen bonus and the see_ge() function do something similar as ThreatByRook for Queen; so this patch removes some redundancy; in that sense.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 21878 W: 4939 L: 4818 D: 12121 http://tests.stockfishchess.org/tests/view/5b53a83b0ebc5902bdb815d1  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 35307 W: 5979 L: 5882 D: 23446 http://tests.stockfishchess.org/tests/view/5b53b60b0ebc5902bdb8174c  Close https://github.com/official-stockfish/Stockfish/pull/1690  Bench: 4834554,True,6,2018-07-01
Unknown,snicolet,2018-07-22 15:59:39+00:00,simplified forward ranks.  This is a non-functional simplification. We change replaces an 'OR' and a lookup (rank_bb(ksq)) with a bitwise ~.  This is fewer operations and is probably faster.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 25441 W: 5689 L: 5575 D: 14177 http://tests.stockfishchess.org/tests/view/5b52d05a0ebc5902bdb8010e  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 26904 W: 4664 L: 4553 D: 17687 http://tests.stockfishchess.org/tests/view/5b543df70ebc5902bdb8212d  No functional change.,True,6,2018-07-01
mcostalba,snicolet,2018-07-22 15:55:41+00:00,Slight tidy up in endgame machinery  No functional change.,True,6,2018-07-01
locutus2,snicolet,2018-07-22 15:53:31+00:00,Non functional LMR rewrite.,True,6,2018-07-01
Rocky640,snicolet,2018-07-21 05:05:50+00:00,"Simplify the ""overload"" condition  This is a follow-up of the previous pull request (#1686) by Miguel. We simplify the ""Overload"" bonus condition by re-using the ""weak"" variable; which captures well the essence of the overload condition. This may also be a small speed optimization because the weak variable is in a register at this point of the code.  http://tests.stockfishchess.org/tests/view/5b527b440ebc5902bdb7f7db LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 10925 W: 2517 L: 2374 D: 6034  http://tests.stockfishchess.org/tests/view/5b527f930ebc5902bdb7f883 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 15569 W: 2697 L: 2568 D: 10304  Closes https://github.com/official-stockfish/Stockfish/pull/1687  Bench: 5010472",True,5,2018-07-01
miguel-l,snicolet,2018-07-21 04:56:48+00:00,"Remove connectivity.  There seems to be some strange interaction between Overload and Connectivity. Overload encourages us to not have too many defended and attacked pieces; as this may expose us to various tactics. This feels somewhat like it is in conflict with Connectivity; where pieces are defended preemptively.  Here I take the ""pick one or the other"" approach and just remove connectivity; while strengthening the effect of Overload to compensate. The reasoning is that if we defend our pieces preemptively; then it does get attacked; we want to do something about it so we don't get penalized by Overload. On the other hand; if it doesn't get attacked; then there's no need to defend it.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 27734 W: 6174 L: 6064 D: 15496 http://tests.stockfishchess.org/tests/view/5b5073bd0ebc5902bdb7ba5c  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 51606 W: 8897 L: 8827 D: 33882 http://tests.stockfishchess.org/tests/view/5b50aa900ebc5902bdb7bf29  Bench: 4658006",True,5,2018-07-01
locutus2,snicolet,2018-07-19 16:27:20+00:00,"Better check evasion move sorting  Use in addition the counter move history table for sorting quiet check evasion moves in main and quiecence search. Also rename ""contHistory"" to ""continuationHistory"" while there.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 73284 W: 16433 L: 15938 D: 40913 http://tests.stockfishchess.org/tests/view/5b4f526e0ebc5902bdb7a401  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 12135 W: 2171 L: 1997 D: 7967 http://tests.stockfishchess.org/tests/view/5b4fc0ef0ebc5902bdb7ae0e  Closes https://github.com/official-stockfish/Stockfish/pull/1685  Bench 4817583",True,3,2018-07-01
miguel-l,snicolet,2018-07-18 06:44:45+00:00,Use single value for KingProtector.  After some recent big tuning session; the values for King Protector were simplified to only be used on minor pieces. This patch tries to further simplify by just using a single value; since current S(6;5) and S(5;6) are close to each other. The value S(6;6) ended up passing; although S(5;5) was also tried and failed STC.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 14261 W: 3288 L: 3151 D: 7822 http://tests.stockfishchess.org/tests/view/5b4ccdf50ebc5902bdb77f65  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 19606 W: 3396 L: 3273 D: 12937 http://tests.stockfishchess.org/tests/view/5b4ce4280ebc5902bdb7803b  Bench: 5448998,True,2,2018-07-01
ElbertoOne,snicolet,2018-07-18 06:37:13+00:00, Simplify Overload condition  Extend the bonus for Overload to cases where our side  has more than one attacker to a non pawn piece. Based on an idea by Bryan in the forum. For instance;  now black gets the overload bonus in this position:  8/5R1k/6pb/p6p/P1N4P/1Pp5/2K3P1/2N4r b - - 6 46  because two black pieces are attacking the knight on c1  that is defended only by the king.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 57446 W: 12762 L: 12711 D: 31973 http://tests.stockfishchess.org/tests/view/5b4ca9970ebc5902bdb77a88  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 42113 W: 7295 L: 7209 D: 27609 http://tests.stockfishchess.org/tests/view/5b4ccea00ebc5902bdb77f69  Bench: 4667263,True,2,2018-07-01
Unknown,snicolet,2018-07-18 06:26:33+00:00,Minor code style tweaks  No functional change.,True,2,2018-07-01
ianfab,snicolet,2018-07-18 06:25:08+00:00,Minor whitespace formatting changes  No functional change.,True,2,2018-07-01
gcp,snicolet,2018-07-18 06:14:57+00:00,Allow Position::init() to be called multiple times.  For the rationale to allow this; see commit a66c73deef420104e74b6645ee60e20b37fd8549  This was broken when cuckoo hashing was added; and subtly broke (for example) lichess' Android application; thus illustrating the original judgement was sound.  No functional change.,True,2,2018-07-01
Unknown,snicolet,2018-07-14 06:27:33+00:00,Remove rank limitation for MinorBehindPawn  This is a functional simplification.  It seems like the rank restriction for MinorBehindPawn can be removed.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 61195 W: 13404 L: 13360 D: 34431 http://tests.stockfishchess.org/tests/view/5b47e6f00ebc5978f4be3fc0  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 31701 W: 5367 L: 5264 D: 21070 http://tests.stockfishchess.org/tests/view/5b48a2cb0ebc5978f4be4769  Bench: 4938702,True,5,2018-07-01
candirufish,snicolet,2018-07-14 06:13:15+00:00,Tuned Values after 2 million spsa games  Various king and pawn eval values tuned after 2 million games. Rounding slightly adjusted.  LTC: http://tests.stockfishchess.org/tests/view/5b477a260ebc5978f4be3ed4 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 32783 W: 5852 L: 5588 D: 21343  STC: http://tests.stockfishchess.org/tests/view/5b472d420ebc5978f4be3e4d LLR: 3.23 (-2.94;2.94) [0.00;4.00] Total: 44380 W: 10201 L: 9841 D: 24338  I think I reached the limit of the fishtest framework. It frequently crashed at 2 million games already. The small values also moved a lot throughout the entire tuning session though with smaller margin. The passed danger and close enemies values seems the most sensitive (changing close enemies alone to 6 failed before but now it passes); whether or not they are close to optimal I don't know; but it seems some parameters are also correlated to others.  Closes https://github.com/official-stockfish/Stockfish/pull/1670  bench: 5103722,True,5,2018-07-01
vondele,snicolet,2018-07-07 08:42:06+00:00,Remove offset in thread redistribution scheme.  doesn't have a benefit.  passed STC (8 threads): LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 19574 W: 4028 L: 3904 D: 11642 http://tests.stockfishchess.org/tests/view/5b3e48950ebc5902b9fff080  passed LTC (8 threads): LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21293 W: 3626 L: 3506 D: 14161 http://tests.stockfishchess.org/tests/view/5b3eefd60ebc5902b9fffa81  Closes https://github.com/official-stockfish/Stockfish/pull/1667  No functional change single threaded.,True,5,2018-07-01
31m059,snicolet,2018-07-05 23:34:01+00:00,Simplify ThreatByKing to be a single Score.  In the current master; ThreatByKing is an array of two Scores; one for when we have a single attack and one for when we have many. The latter case is very rarely called during bench and was recently given a strange negative value during a tuning run; as pointed out by @candirufish on commit efd4ca2.  Here; we simplify away this second case entirely; and increase the remaining ThreatByKing to compensate.  Although I derived the parameter tweak independently; with the goal of preserving the same average bonus; I later noticed that a very similar Score had already been derived by an ongoing SPSA tuning session. I therefore recognize @candirufish for first discovering these values.  I would also like to thank @Rocky640 for valuable feedback that pointed me in the direction of ThreatByKing.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 7677 W: 1772 L: 1623 D: 4282 http://tests.stockfishchess.org/tests/view/5b3db0320ebc5902b9ffe97a  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 108031 W: 18329 L: 18350 D: 71352 http://tests.stockfishchess.org/tests/view/5b3dbf4b0ebc5902b9ffe9db  Closes https://github.com/official-stockfish/Stockfish/pull/1666  Bench: 4678861,True,3,2018-07-01
VoyagerOne,snicolet,2018-07-03 23:12:16+00:00,Capture Stat Tweak  Penalize capture moves that fail to create a cutoff even at quiet move cutoff.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 19004 W: 4284 L: 4059 D: 10661 http://tests.stockfishchess.org/tests/view/5b3a7d4d0ebc5902b9ffb6ea  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 23100 W: 3981 L: 3765 D: 15354 http://tests.stockfishchess.org/tests/view/5b3aa4550ebc5902b9ffb8cf  Closes https://github.com/official-stockfish/Stockfish/pull/1664  Bench: 5232010,True,1,2018-07-01
vondele,snicolet,2018-07-03 22:59:15+00:00,Simplify saving a TT entry.  Avoid passing TT.generation() to TTEntry::save() at every call; moving the implementation of TTEntry::save from tt.h to tt.cpp.  tested for no regression: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 53787 W: 11948 L: 11890 D: 29949 http://tests.stockfishchess.org/tests/view/5b2ff37f0ebc5902b2e582fe  Closes https://github.com/official-stockfish/Stockfish/pull/1662  No functional change.,True,1,2018-07-01
vondele,snicolet,2018-07-03 22:51:10+00:00,Reduce scope of variables  Small cleanup TranspositionTable:clear().  Closes https://github.com/official-stockfish/Stockfish/pull/1659  No functional change.,True,1,2018-07-01
WOnder93,snicolet,2018-06-27 09:42:25+00:00,Move PSQ score to Position  This patch simplifies Position::do_move() by moving the PSQ score from StateInfo to Position and updating it inside the put/remove/move_piece functions.  The downside is that there is now slightly more computation done in Position::undo_move(); but the fishtest results are Elo neutral.  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 78820 W: 15775 L: 15760 D: 47285 http://tests.stockfishchess.org/tests/view/5b1cd1d00ebc5902ab9c64ab  Passed LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 32966 W: 5716 L: 5615 D: 21635 http://tests.stockfishchess.org/tests/view/5b31e1230ebc5902b2e5a833  Closes https://github.com/official-stockfish/Stockfish/pull/1647  No functional change.,True,2,2018-06-01
Unknown,snicolet,2018-06-26 07:08:15+00:00,Remove make_bitboard()  In current master; the function make_bitboard() does nothing apart from helping initialize the SquareBB[] array. This seems like an unnecessary abstraction layer.  The advantage of make_bitboard() is we can define a bitboard; in a simple and general way; not only from a single square but also from a list of squares. It is more elegant; faster and  readable than combining multiple SquareBB explicitly; but the last complex use case in evaluation was simplified away a few months ago.  If make_bitboard() becomes useful again to define complicated bitboards; it will be easy enough to reintroduce it using this pull request as an implementation reference.  No functional change.,True,1,2018-06-01
joergoster,snicolet,2018-06-26 06:55:35+00:00,Simplify KingProtector penalty.  Recent tuning results implied this penalty is more important for knights and bishops; and almost negligible for rooks and queen.  Passed as simplification both STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 20873 W: 4592 L: 4469 D: 11812 http://tests.stockfishchess.org/tests/view/5b2fb4d00ebc5902b2e57e84  and LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 46069 W: 7949 L: 7870 D: 30250 http://tests.stockfishchess.org/tests/view/5b2fcc4b0ebc5902b2e580c5  Closes https://github.com/official-stockfish/Stockfish/pull/1660  Bench: 5487679,True,1,2018-06-01
Rocky640,snicolet,2018-06-26 06:16:37+00:00,"Simplify HinderPassedPawn bonus  Make sure each piece is not scored more than once as a passed pawn ""hinderer""; by scoring only the blockers along the passed pawn path. Inspired by TCEC Game 29.  Passed STC as a simplification http://tests.stockfishchess.org/tests/view/5b3016d00ebc5902b2e58552 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 75388 W: 16656 L: 16641 D: 42091  Passed LTC as a simplification http://tests.stockfishchess.org/tests/view/5b302ed90ebc5902b2e587fc LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 49157 W: 8460 L: 8386 D: 32311  Current master was also counting the number of attacks along a passed pawn path; which might be misleading:  a) a defender might be counted many times for the same pawn path. For example a    White rook on a1 attacking a black pawn on a7 would score the bonus * 6 but    would be probably better placed on a8  b) a defender might be counted on different pawn paths and might be overloaded. For    example a Ke4 or Qe4 against pawns on d6  and f6 would score the bonus * 6.  Counting each blocker or attacker only once is more complicated; and does not help either: http://tests.stockfishchess.org/tests/view/5b2ff1cb0ebc5902b2e582b2  After this small simplification; there might be ways to increase the HinderPassedPawn penalty.  Closes https://github.com/official-stockfish/Stockfish/pull/1661  Bench: 4520519",True,1,2018-06-01
candirufish,snicolet,2018-06-23 07:03:58+00:00,Another set of tuned values after one million games  Another set of tuned values; obtained by a long session of one million games.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 15810 W: 3687 L: 3458 D: 8665 http://tests.stockfishchess.org/tests/view/5b2d32f60ebc5902b2e55d9e  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 102118 W: 18146 L: 17651 D: 66321 http://tests.stockfishchess.org/tests/view/5b2d372c0ebc5902b2e55e0a  Closes https://github.com/official-stockfish/Stockfish/pull/1658  Bench: 4557946,True,5,2018-06-01
snicolet,snicolet,2018-06-21 23:29:25+00:00,"Increase outflanking weight to 12  Give more incentive to king activity in the endgame by increasing the weight of the ""outflanking"" variable from 8 to 12 in the function evaluate_initiative().  Finished yellow after 133102 games at STC:  LLR: -3.07 (-2.94;2.94) [0.00;4.00] Total: 133102 W: 29535 L: 29179 D: 74388 http://tests.stockfishchess.org/tests/view/5b2b63fe0ebc5902b2e54475  Passed LTC:  LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 28027 W: 4918 L: 4672 D: 18437 http://tests.stockfishchess.org/tests/view/5b2ba39e0ebc5902b2e54a64  Closes https://github.com/official-stockfish/Stockfish/pull/1657  Bench: 4721753",True,3,2018-06-01
candirufish,snicolet,2018-06-21 08:23:05+00:00,Tuned values after 505k games  Various king and pawn tuned eval values after 505k 60 sec 600 nodes time SPSA games. Adjusted passed rank and file values to be symmetrical.  Passed LTC (after passed rank/file adjustment): LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 37906 W: 6953 L: 6668 D: 24285 http://tests.stockfishchess.org/tests/view/5b2790960ebc5902b8d17ba1  A previous; very similar version with raw tuned values passed STC and LTC:  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 39515 W: 9227 L: 8900 D: 21388 http://tests.stockfishchess.org/tests/view/5b277e3e0ebc5902b8d17ac9  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 14618 W: 2743 L: 2537 D: 9338 http://tests.stockfishchess.org/tests/view/5b2785020ebc5902b8d17b98  Closes https://github.com/official-stockfish/Stockfish/pull/1654  bench: 4777396,True,3,2018-06-01
man4,snicolet,2018-06-21 07:51:31+00:00,"Fix GCC 8 cast warnings  Silences the following warnings when compiling with GCC 8. The fix is to use an intermediate pointer to anonymous function:  ``` misc.cpp: In function 'int WinProcGroup::get_group(size_t)': misc.cpp:241:77: warning: cast between incompatible function types from 'FARPROC' {aka 'long long int (*)()'} to 'fun1_t' {aka 'bool (*)(_LOGICAL_PROCESSOR_RELATIONSHIP; _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX*; long unsigned int*)'} [-Wcast-function-type]    auto fun1 = (fun1_t)GetProcAddress(k32; ""GetLogicalProcessorInformationEx"");                                                                              ^ misc.cpp: In function 'void WinProcGroup::bindThisThread(size_t)': misc.cpp:309:71: warning: cast between incompatible function types from 'FARPROC' {aka 'long long int (*)()'} to 'fun2_t' {aka 'bool (*)(short unsigned int; _GROUP_AFFINITY*)'} [-Wcast-function-type]    auto fun2 = (fun2_t)GetProcAddress(k32; ""GetNumaNodeProcessorMaskEx"");                                                                        ^ misc.cpp:310:67: warning: cast between incompatible function types from 'FARPROC' {aka 'long long int (*)()'} to 'fun3_t' {aka 'bool (*)(void*; const _GROUP_AFFINITY*; _GROUP_AFFINITY*)'} [-Wcast-function-type]    auto fun3 = (fun3_t)GetProcAddress(k32; ""SetThreadGroupAffinity"");                                                                    ^ ```  No functional change.",True,3,2018-06-01
Unknown,snicolet,2018-06-20 03:43:00+00:00,Fix MSVC error  Compiling the current master with MSVC gives the following error:  ``` search.cpp(956): error C2660: 'operator *': function does not take 1 arguments types.h(303): note: see declaration of 'operator *' ```  This was introduced in commit: https://github.com/official-stockfish/Stockfish/commit/88de112b84a5285c2afb3e075a05c2ab8ad3fd33  We use a suggestion by @vondele to fix the error; thanks!  No functional change.,True,2,2018-06-01
Stefano80,snicolet,2018-06-20 03:27:24+00:00,Slight simplification in scale factor computation  [STC](http://tests.stockfishchess.org/tests/view/5b2614000ebc5902b8d17193) LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 17733 W: 3996 L: 3866 D: 9871  [LTC](http://tests.stockfishchess.org/tests/view/5b264d0f0ebc5902b8d17206) LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 55524 W: 9535 L: 9471 D: 36518  Use pawn count scaling also for opposite bishops endings with additional material; with a slope of 2 instead of 7. This simplifies slightly the code.  This PR is a functionally equivalent refactoring of the version which was submitted.  Four versions tried; 2 passed both STC and LTC. I picked the one which seemed more promising at LTC.  Slope 4 passed STC (-0.54 Elo); LTC not attempted Slope 3 passed STC (+2.51 Elo); LTC (-0.44 Elo) Slope 2 passed STC (+2.09 Elo); LTC (+0.04 Elo) Slope 1 passed STC (+0.90 Elo); failed LTC (-3.40 Elo)  Bench: 4761613,True,2,2018-06-01
Unknown,snicolet,2018-06-13 19:52:53+00:00,Remove lmrDepth restriction on quiet see pruning  And tweak the threshold value. With this threshold and the current piece values; this permits see pruning on quiets to be done up to an lmrDepth of 9 (beyond that the threshold is below -QueenValueMg and see_ge will pass unconditionally).  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 110316 W: 24612 L: 24667 D: 61037 http://tests.stockfishchess.org/tests/view/5b20aa760ebc5902ab9c9c1d  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17352 W: 2968 L: 2842 D: 11542 http://tests.stockfishchess.org/tests/view/5b20cf1e0ebc5902ab9c9fb6  Closes https://github.com/official-stockfish/Stockfish/pull/1651  Bench: 5069074,True,2,2018-06-01
vondele,snicolet,2018-06-13 19:46:12+00:00,Remove depth condition for pruning captures.  The SEE condition alone is sufficient.  passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 109863 W: 24339 L: 24392 D: 61132 http://tests.stockfishchess.org/tests/view/5b1f5b000ebc5902ab9c8668  passed LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 23390 W: 4020 L: 3903 D: 15467 http://tests.stockfishchess.org/tests/view/5b1f94b40ebc5902ab9c8b5e  Closes https://github.com/official-stockfish/Stockfish/pull/1648  Bench: 4834747,True,2,2018-06-01
Unknown,snicolet,2018-06-11 08:22:55+00:00,Optimize an expression in endgame.cpp  I believe using foward_file_bb() here is fewer instructions.  a) Fewer instructions and probably more clear (debatable). b) Possible that a lookup is slower than a few local operations; but the    forward_file_bb table is probably used often enough that it is always    cached.  Passed LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21004 W: 4263 L: 4141 D: 12600 http://tests.stockfishchess.org/tests/view/5b1cad830ebc5902ab9c6239  Closes https://github.com/official-stockfish/Stockfish/pull/1644  No functional change.,True,0,2018-06-01
candirufish,snicolet,2018-06-11 08:03:33+00:00,Simplify capture pruning margin formula  Using just `PawnValueEg * depth` as Capture Prune Margin. There was a bunch of patches that passed recently regarding captures; maybe this part of the master code redundant? The patch was tested as a simplification:  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 20833 W: 4218 L: 4096 D: 12519 http://tests.stockfishchess.org/tests/view/5b1cf2100ebc5902ab9c6651  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 27050 W: 3975 L: 3864 D: 19211 http://tests.stockfishchess.org/tests/view/5b1cfdc80ebc5902ab9c6776  Closes https://github.com/official-stockfish/Stockfish/pull/1643  Bench: 4980482,True,0,2018-06-01
locutus2,snicolet,2018-06-11 07:54:32+00:00,Optimize contempt value (21)  After several tests it seems best to increase contempt from 12 to 21. This does not regress against contempt=0 and gives a gain of around 7-8 elo against SF 7 in comparison to current default contempt.  STC: Test for non-regression contempt=21 against contempt=0 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 71250 W: 13956 L: 13926 D: 43368 http://tests.stockfishchess.org/tests/view/5b19a58d0ebc5902ab9c3bfa  STC: Test contempt 21 against SF 7 ELO: 190.06 +-2.8 (95%) LOS: 100.0% Total: 40000 W: 22608 L: 2676 D: 14716 http://tests.stockfishchess.org/tests/view/5b19a6520ebc5902ab9c3c0e  STC: Test master against SF 7 for comparison ELO: 182.95 +-2.7 (95%) LOS: 100.0% Total: 40000 W: 21905 L: 2595 D: 15500 http://tests.stockfishchess.org/tests/view/5b16f5bc0ebc59214346d5ca  LTC: Test for non-regression contempt=21 against contempt=0 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 47666 W: 6914 L: 6832 D: 33920 http://tests.stockfishchess.org/tests/view/5b1a170b0ebc5902ab9c3fde  LTC: Test contempt 21 against SF 7 ELO: 203.92 +-2.6 (95%) LOS: 100.0% Total: 40000 W: 22447 L: 1340 D: 16213 http://tests.stockfishchess.org/tests/view/5b1a174b0ebc5902ab9c3fe1  LTC: Test master against SF 7 for comparison ELO: 196.08 +-2.6 (95%) LOS: 100.0% Total: 40000 W: 21639 L: 1191 D: 17170 http://tests.stockfishchess.org/tests/view/5b1a17e40ebc5902ab9c3fe4  Closes https://github.com/official-stockfish/Stockfish/pull/1646  Bench: 4786912,True,0,2018-06-01
vondele,snicolet,2018-06-11 07:46:26+00:00,Remove failedLow from the mainThread struct  failedLow is in fact a local variable in Thread::search().  Also clean some spaces and tabs in code.  No functional change.,True,0,2018-06-01
candirufish,snicolet,2018-06-06 08:16:48+00:00,Quiet move soft fail high bonus  Extra bonus for quiet move creating a huge soft fail high (triggered in 21% of quiet bestmoves on a normal bench run). Pb00067 original idea using PawnValueMg.  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 138207 W: 28060 L: 27295 D: 82852 http://tests.stockfishchess.org/tests/view/5b14471b0ebc5902a81689c1  Passe LTC: LLR: 2.94 (-2.94;2.94) [0.00;5.00] Total: 157289 W: 23200 L: 22518 D: 111571 http://tests.stockfishchess.org/tests/view/5b149dde0ebc5902a8b41c5a  bench: 4441320,True,2,2018-06-01
VoyagerOne,snicolet,2018-06-06 07:58:34+00:00,Simplify capture bonus  Simplify capture bonus by simply adding ONE_DEPTH instead of being dependent on BestValue.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 24419 W: 4939 L: 4824 D: 14656 http://tests.stockfishchess.org/tests/view/5b16b2040ebc5963ba37e2a5  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 44560 W: 6524 L: 6438 D: 31598 http://tests.stockfishchess.org/tests/view/5b16ccc00ebc59214346d403  Closes https://github.com/official-stockfish/Stockfish/pull/1640  Bench: 4782637,True,2,2018-06-01
snicolet,snicolet,2018-06-05 16:15:54+00:00,Call cycle detection before qsearch()  This has the property of raising alpha before calling qsearch(); thus maybe giving some more cuts during qsearch(). The patch is equivalent to the use of cycle detection inside qsearch() at depth 0; but is in fact implemented by re-ordering code inside search(); which explains the [0..4] bounds in the following tests.  STC (interrupted after 124250 games; with LLR=0.87): http://tests.stockfishchess.org/tests/view/5b1500bd0ebc5902a8b420bf LLR: 0.87 (-2.94;2.94) [0.00;4.00] Total: 124250 W: 24973 L: 24470 D: 74807  LTC: http://tests.stockfishchess.org/tests/view/5b1590eb0ebc5902a84dcd09 LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 74234 W: 11098 L: 10733 D: 52403  Closes https://github.com/official-stockfish/Stockfish/pull/1635  Bench: 4326784,True,1,2018-06-01
vondele,snicolet,2018-06-05 16:06:13+00:00,Stabilize AppVeyor CI  After a helpful suggestion from AppVeyor support staff; moving the Stockfish execution from ps to cmd seems to work. Alternative to PR #1624 tested in PR #1637.  No functional change.,True,1,2018-06-01
pb00068,snicolet,2018-06-05 08:10:32+00:00,Remove a superfluous subtrahend  The '- 1' subtrahend was introduced for guarding against null move search at root; which would be nonsense. But this is actually already guaranteed by the !PvNode condition. This followed from the discussion in pull request 1609: https://github.com/official-stockfish/Stockfish/pull/1609  No functional change,True,1,2018-06-01
VoyagerOne,snicolet,2018-06-05 07:58:10+00:00,Simplify LMR for captures  Simplify LMR for captures by removing capture's stat score logic for reduction.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 37068 W: 7462 L: 7370 D: 22236 http://tests.stockfishchess.org/tests/view/5b115bc30ebc591af58a6fd2  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 80061 W: 11706 L: 11671 D: 56684 http://tests.stockfishchess.org/tests/view/5b117f590ebc59033d2d5315  Closes https://github.com/official-stockfish/Stockfish/pull/1631  Bench: 4470519,True,1,2018-06-01
joergoster,snicolet,2018-06-04 05:45:12+00:00,Bugfix of Position::has_repeated()  The function Position::has_repeated() is used by Tablebases::root_probe() to determine whether we can rank all winning moves with the same value; or if we need to strictly rank by dtz in case the position has already been repeated once; and we are risking to run into the 50-move rule and thus losing the win (especially critical in some very complicated endgames).  To check whether the current position or one of the previous positions after the last zeroing move has already been occured once; we start looking for a repetition of the current position; and if that is not the case; we step one position back and repeat the check for that position; and so on.  If you now look at how this was done before the new root ranking patch was merged two months ago; it seems quite obvious that it is a simple oversight: https://github.com/official-stockfish/Stockfish/commit/108f0da4d7f993732aa2e854b8f3fa8ca6d3b46c  More specifically; after we stepped one position back with  ``` stc = stc->previous; ```  we now have to start checking for a repetition with  ``` StateInfo* stp = stc->previous->previous; ```  and not with  ``` StateInfo* stp = st->previous->previous; ```  Closes https://github.com/official-stockfish/Stockfish/pull/1625  No functional change,True,0,2018-06-01
snicolet,snicolet,2018-06-03 07:19:13+00:00,Fix overload ambiguity  Fix an error when compiling current master with MSVC due to the ambiguity of which operator* overload was intended (reported by Jarrod Torriero).  No functional change.,True,6,2018-06-01
pb00068,snicolet,2018-06-02 16:02:35+00:00,Extra bonus for capture creating a huge fail high  STC: http://tests.stockfishchess.org/tests/view/5b114f3d0ebc596e9e0881f6 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 13007 W: 2730 L: 2541 D: 7736  LTC: http://tests.stockfishchess.org/tests/view/5b1176740ebc59033d2d52c6 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 15594 W: 2417 L: 2239 D: 10938  See https://github.com/official-stockfish/Stockfish/pull/1627  Bench: 4790240,True,5,2018-06-01
snicolet,snicolet,2018-06-02 15:41:37+00:00,Fix comments; rename variables  Thanks everybody for the various hints in the perpetual renaming thread: https://github.com/official-stockfish/Stockfish/issues/1426  No functional change,True,5,2018-06-01
vondele,snicolet,2018-06-02 15:03:01+00:00,Reallocate TT on threadpool resize.  Makes sure the potential benefit of first touch does not depend on the order of the UCI commands Threads and Hash; by reallocating the hash if a Threads is issued. The cost is zeroing the TT once more than needed. In case the prefered order (first Threads than Hash) is employed; this amounts to zeroing the default sized TT (16Mb); which is essentially instantaneous.  Follow up for https://github.com/official-stockfish/Stockfish/pull/1601 where additional data and discussion is available.  Closes https://github.com/official-stockfish/Stockfish/pull/1620  No functional change.,True,5,2018-06-01
vondele,snicolet,2018-05-30 11:38:11+00:00,Simplify depth reduction in IID.  Use a constant reduction instead of a depth dependent reduction.  passed STC: http://tests.stockfishchess.org/tests/view/5b06eb600ebc5914abc12ba8 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 58086 W: 11710 L: 11657 D: 34719  passed LTC: http://tests.stockfishchess.org/tests/view/5b07b25e0ebc5914abc12c6d LLR: 3.09 (-2.94;2.94) [-3.00;1.00] Total: 110414 W: 16217 L: 16219 D: 77978  Bench: 4521056,True,2,2018-05-01
tjaderxyz,snicolet,2018-05-30 11:07:18+00:00,Use threads to clear the TT faster.  Stockfish currently takes a while to clear the TT when using larger hash sizes.  On one machine with 128 GB hash it takes about 50 seconds with a single thread; allowing it to use all allocated cores brought that time down to 4 seconds on some Linux systems. The patch was further tested on Windows and refined with NUMA binding of the hash initializing threads (we refer to pull request #1601 for the complete discussion and the speed measurements).  Closes https://github.com/official-stockfish/Stockfish/pull/1601  No functional change,True,2,2018-05-01
VoyagerOne,snicolet,2018-05-24 17:06:24+00:00,LMR Capture Tweak  Increase capture reduction by comparing opponent's stat score  STC: (Yellow) LLR: -2.96 (-2.94;2.94) [0.00;5.00] Total: 92291 W: 18647 L: 18350 D: 55294 http://tests.stockfishchess.org/tests/view/5b04225e0ebc5914abc1291b  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 20176 W: 3061 L: 2868 D: 14247 http://tests.stockfishchess.org/tests/view/5b04bb3f0ebc5914abc129a3  How to continue? � we could try a different value for the capture history threeshold  Closes https://github.com/official-stockfish/Stockfish/pull/1612  Bench: 5167159,True,3,2018-05-01
Unknown,snicolet,2018-05-24 16:46:55+00:00,Simplify BlockedByPawn to one dimension  I was able to get this to pass which reduces BlockedByPawn to one dimension with NO distance from edge offset.  GOOD)  It's more simple and may provide additional clarity for further simplifications.  Facilitates migrating unblocked to one dimension as well.  BAD) If there is indeed a distance component to BlockedStorm (may or may not be the case); this obfuscates this component into ShelterStrength and UnblockedStorm. This may be more convoluted. Also; it may be more convenient to have each of the three arrays (ShelterStrength; BlockedStorm; and UnBlocked) be the same size.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 96173 W: 19326 L: 19343 D: 57504 http://tests.stockfishchess.org/tests/view/5b04544d0ebc5914abc12965  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 49818 W: 7441 L: 7363 D: 35014 http://tests.stockfishchess.org/tests/view/5b0487d50ebc5914abc12990  Closes https://github.com/official-stockfish/Stockfish/pull/1611  Bench: 5133208,True,3,2018-05-01
vondele,snicolet,2018-05-24 16:26:34+00:00,Correctly prevent recursive verification in nmp.  As discussed with @pb00068; the condition to prevent recursive verification was not completely correct. This patch corrects that condition; and adds an assert. In the current implementation; recursive verification needs to be avoided in order not to break the verification of the move closer to the root (i.e. to not set thisThread->nmp_min_ply to zero prematurely).  This patch is tested as a bug fix; based on and tested against PR #1609 .  passed STC: http://tests.stockfishchess.org/tests/view/5b050f170ebc5914abc129c5 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 7875 W: 1669 L: 1523 D: 4683  passed LTC: http://tests.stockfishchess.org/tests/view/5b0513970ebc5914abc129cd LLR: 3.00 (-2.94;2.94) [-3.00;1.00] Total: 24048 W: 3525 L: 3407 D: 17116  Bench changes at high depth.  Closes https://github.com/official-stockfish/Stockfish/pull/1610 and    https://github.com/official-stockfish/Stockfish/pull/1609  Bench: 4484288,True,3,2018-05-01
vondele,vondele,2018-05-22 20:43:17+00:00,Simplify color usage in search.  define Color us and use this instead of pos.side_to_move() and nmp_odd. The latter allows to clarify the nmp verification criterion.  Tested for no regression: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 76713 W: 15303 L: 15284 D: 46126 http://tests.stockfishchess.org/tests/view/5b046a0d0ebc5914abc12971  No functional change.,True,1,2018-05-01
VoyagerOne,snicolet,2018-05-22 05:23:04+00:00,Simply reset StatScore to zero at beta cutoff  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 43154 W: 8706 L: 8625 D: 25823 http://tests.stockfishchess.org/tests/view/5b01a7660ebc5914abc1271d  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 48155 W: 7036 L: 6955 D: 34164 http://tests.stockfishchess.org/tests/view/5b01b2e50ebc5914abc1272c  Closes https://github.com/official-stockfish/Stockfish/pull/1608  Bench: 4484288,True,1,2018-05-01
Unknown,snicolet,2018-05-21 07:51:05+00:00,Simplify shelter: always do strength and danger  This check of pawns before subtracting danger can be removed.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21174 W: 4361 L: 4239 D: 12574 http://tests.stockfishchess.org/tests/view/5b00b9f90ebc5914abc12680  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 56980 W: 8377 L: 8309 D: 40294 http://tests.stockfishchess.org/tests/view/5b00ca750ebc5914abc12683  Closes https://github.com/official-stockfish/Stockfish/pull/1607  Bench: 4746692,True,0,2018-05-01
snicolet,snicolet,2018-05-21 07:37:44+00:00,Simplifying away the progressKey  Simplifying away all the progressKey stuff gives exactly the same bench; without any speed impact. Tested for speed against master with two benches at depth 22 ran in parallel:  **testedpatch** Total time (ms) : 92350 Nodes searched : 178962949 Nodes/second : 1937877  **master** Total time (ms) : 92358 Nodes searched : 178962949 Nodes/second : 1937709  We also tested the patch at STC for no-regression with [-3; 1] bounds:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 57299 W: 11529 L: 11474 D: 34296 http://tests.stockfishchess.org/tests/view/5b015a1c0ebc5914abc126e5  Closes https://github.com/official-stockfish/Stockfish/pull/1603  No functional change.,True,0,2018-05-01
Unknown,snicolet,2018-05-16 21:40:23+00:00,Fix MSVC errors in tbprobe.cpp  Default template parameters values and recursive functions do not play well together. Fix for below errors that showed up after updating to latest MSVC.  ```` tbprobe.cpp(1156): error C2672:     'search': no matching overloaded function found  tbprobe.cpp(1198): error C2783:   'Tablebases::WDLScore `anonymous-namespace'::search(Position &;Tablebases::ProbeState *)': could not deduce template argument for 'CheckZeroingMoves'  ````  Closes https://github.com/official-stockfish/Stockfish/pull/1594  No functional change.,True,2,2018-05-01
Unknown,snicolet,2018-05-16 20:51:43+00:00,"Use cycle detection to bound search value  A position which has a move which draws by repetition; or which could have been reached from an earlier position in the game tree; is considered to be at least a draw for the side to move.  Cycle detection algorithm by Marcel van Kervink:         https://marcelk.net/2013-04-06/paper/upcoming-rep-v2.pdf  ----------------------------  How does the algorithm work in practice? The algorithm is an efficient method to detect if the side to move has a drawing move; without doing any move generation; thus possibly giving a cheap cutoffThe most interesting conditions are both on line 1195:  ```   if (   originalKey == (progressKey ^ stp->key)       || progressKey == Zobrist::side) ```  This uses the position keys as a sort-of Bloom filter; to avoid the expensive checks which follow. For ""upcoming repetition"" consider the opening Nf3 Nf6 Ng1. The XOR of this position's key with the starting position gives their difference; which can be used to look up black's repeating move (Ng8). But that look-up is expensive; so line 1195 checks that the white pieces are on their original squares.  This is the subtlest part of the algorithm; but the basic idea in the above game is there are 4 positions (starting position and the one after each move). An XOR of the first pair (startpos and after Nf3) gives a key matching Nf3. An XOR of the second pair (after Nf6 and after Ng1) gives a key matching the move Ng1. But since the difference in each pair is the location of the white knight those keys are ""identical"" (not quite because while there are 4 keys the the side to move changed 3 times; so the keys differ by Zobrist::side). The loop containing line 1195 does this pair-wise XOR-ing.  Continuing the example; after line 1195 determines that the white pieces are back where they started we still need to make sure the changes in the black pieces represents a legal move. This is done by looking up the ""moveKey"" to see if it corresponds to possible move; and that there are no pieces blocking its way. There is the additional complication that; to match the behavior of is_draw(); if the repetition is not inside the search tree then there must be an additional repetition in the game history. Since a position can have more than one upcoming repetition a simple count does not suffice. So there is a search loop ending on line 1215.  On the other hand; the ""no-progress' is the same thing but offset by 1 ply. I like the concept but think it currently has minimal or negative benefit; and I'd be happy to remove it if that would get the patch accepted. This will not; however; save many lines of code.  -----------------------------  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 36430 W: 7446 L: 7150 D: 21834 http://tests.stockfishchess.org/tests/view/5afc123f0ebc591fdf408dfc  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 12998 W: 2045 L: 1876 D: 9077 http://tests.stockfishchess.org/tests/view/5afc2c630ebc591fdf408e0c  How could we continue after the patch:  � The code in search() that checks for cycles has numerous possible variants.   Perhaps the check need could be done in qsearch() too.  � The biggest improvement would be to get ""no progress"" to be of actual benefit;   and it would be helpful understand why it (probably) isn't. Perhaps there is an   interaction with the transposition table or the (fantastically complex) tree   search. Perhaps this would be hard to fix; but there may be a simple oversight.  Closes https://github.com/official-stockfish/Stockfish/pull/1575  Bench: 4550412",True,2,2018-05-01
VoyagerOne,snicolet,2018-05-14 04:52:48+00:00,Update search.cpp  At PvNodes allow bonus for prior counter move that caused a fail low for depth 1 and 2. Note : I did a speculative LTC on yellow STC patch since history stats tend to be highly TC sensitive  STC (Yellow): LLR: -2.96 (-2.94;2.94) [0.00;5.00] Total: 64295 W: 13042 L: 12873 D: 38380 http://tests.stockfishchess.org/tests/view/5af507c80ebc5968e6524153  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 22407 W: 3413 L: 3211 D: 15783 http://tests.stockfishchess.org/tests/view/5af85dd40ebc591fdf408b87  Also use local variable excludedMove in NMP (marotear)  Bench:  5294316,True,0,2018-05-01
snicolet,snicolet,2018-05-13 05:20:39+00:00,Tweak kingAttackersCount and KingAttackWeights  Use the whole kingRing for pawn attackers instead of only the squares directly around the king. This tends to give quite a lot more kingAttackersCount; so to compensate and to avoid raising the  king danger too fast we lower the values in the KingAttackWeights array a little bit.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 51892 W: 10723 L: 10369 D: 30800 http://tests.stockfishchess.org/tests/view/5af6d4dd0ebc5968e652428e  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 24536 W: 3737 L: 3515 D: 17284 http://tests.stockfishchess.org/tests/view/5af709890ebc5968e65242ac  Credits to user @xoroshiro for the idea of using the kingRing for pawn attackers.  How to continue? It seems that the KingAttackWeights[] array stores values which are quite Elo-sensitive; yet they have not been tuned with SPSA recently. There might be easy Elo points to get there.  Closes https://github.com/official-stockfish/Stockfish/pull/1597  Bench: 5282815,True,6,2018-05-01
Unknown,snicolet,2018-05-10 21:36:16+00:00,"Include all blockers in king danger  Simplification: in king danger; include all blockers and not only pinned pieces; since blockers enemy pieces can result in discovered checks which are also bad.  STC  http://tests.stockfishchess.org/tests/view/5af35f9f0ebc5968e6523fe9 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 145781 W: 29368 L: 29478 D: 86935  LTC http://tests.stockfishchess.org/tests/view/5af3cb430ebc5968e652401f LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 76398 W: 11272 L: 11232 D: 53894  I also incorrectly scheduled STC with [0;5] which it failed. http://tests.stockfishchess.org/tests/view/5af283c00ebc5968e6523f33 LLR: -2.94 (-2.94;2.94) [0.00;5.00] Total: 12338 W: 2451 L: 2522 D: 7365  Closes https://github.com/official-stockfish/Stockfish/pull/1593  bench: 4698290  ----------------------------------------  Thanks to @vondele and @Rocky640 for a cleaner version of the patch; and the following comments!  > Most of the pinned; (or for this pull request; blocking) squares were > already computed in the unsafeChecks; the only missing squares being: > > a) squares attacked by a Queen which are occupied by friendly piece >    or ""unsafe"". Note that adding such squares never passed SPRT[0;5]. > > b) squares not in mobilityArea[Us]. > > There is a strong relationship between the blockers and the unsafeChecks; > but the bitboard unsafeChecks is still useful when the checker is not > aligned with the king; and the checking square is occupied by friendly > piece or is ""unsafe"". This is always the case for the Knight.",True,3,2018-05-01
Unknown,snicolet,2018-05-10 13:46:32+00:00,Consolidate pawn storm types  Simplification: the Unopposed and Unblocked pawn storm types are mathematically similar enough to combine with no Elo loss. This reduces the pawn storm types to BlockedByPawn and UnBlocked.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 116869 W: 23549 L: 23605 D: 69715 http://tests.stockfishchess.org/tests/view/5af2def90ebc5968e6523f82  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 39912 W: 6090 L: 5998 D: 27824 http://tests.stockfishchess.org/tests/view/5af3b2e20ebc5968e6524013  Closes https://github.com/official-stockfish/Stockfish/pull/1592  Bench: 5244314,True,3,2018-05-01
locutus2,snicolet,2018-05-10 10:28:18+00:00,Tune null move pruning  Use a lower stat score threshold of 22500.  Failed yellow at STC after many games (~0.92 Elo): LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 73978 W: 14947 L: 14834 D: 44197 http://tests.stockfishchess.org/tests/view/5af2deec0ebc5968e6523f80  But scales good and passed LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 23147 W: 3453 L: 3237 D: 16457 http://tests.stockfishchess.org/tests/view/5af3cf820ebc5968e6524022  Closes https://github.com/official-stockfish/Stockfish/pull/1591  Bench: 4777674,True,3,2018-05-01
candirufish,snicolet,2018-05-09 07:22:11+00:00,Tuned some pawns and evaluation constants  Tuned values in pawns.cpp and evaluate.cpp after a SPSA session: 419k games 60sec 600nodetime.  We have adjusted the PassedRank[] output of the SPSA session to keep increasing values with rank; and PassedFile[] output to keep the West <�> East symmetry of the evaluation.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 58948 W: 12431 L: 12046 D: 34471 http://tests.stockfishchess.org/tests/view/5af2302f0ebc5968e6523f0a  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 22211 W: 3468 L: 3251 D: 15492 http://tests.stockfishchess.org/tests/view/5af264c80ebc5968e6523f1a  See https://github.com/official-stockfish/Stockfish/pull/1587 and https://github.com/official-stockfish/Stockfish/pull/1590  bench: 4437531,True,2,2018-05-01
vondele,snicolet,2018-05-08 23:42:34+00:00,Remove goto; limit skipping to NMP  This patch simplifies the control flow in search(); removing an if and a goto. A side effect of the patch is that Stockfish is now a little bit more selective at low depths; because we allow razoring; futility pruning and probcut pruning after a null move.  passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32035 W: 6523 L: 6422 D: 19090 http://tests.stockfishchess.org/tests/view/5af142ca0ebc597fb3d39bb6  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41431 W: 6187 L: 6097 D: 29147 http://tests.stockfishchess.org/tests/view/5af148770ebc597fb3d39bc1  Ideas for further work:  � Use the nodes credit opened by the patch (the increased selectivity)   to try somewhat higher razoring; futility or probcut margins at [0..4].  Bench: 4855031,True,1,2018-05-01
locutus2,snicolet,2018-05-08 21:31:55+00:00,Tweak null move pruning conditions  Allow null move pruning only if last stat score < 30000.  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 12653 W: 2641 L: 2454 D: 7558 http://tests.stockfishchess.org/tests/view/5af1d8830ebc5968e6523edb  Passed LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 19782 W: 3072 L: 2878 D: 13832 http://tests.stockfishchess.org/tests/view/5af1ee8c0ebc5968e6523ee4  Ideas for further work:  � Tune the stat score threshold. � Try depth based stat score threshold. � Try stat score condition for other prunings.  Closes https://github.com/official-stockfish/Stockfish/pull/1589  Bench: 5088156,True,1,2018-05-01
Rocky640,snicolet,2018-05-08 09:14:43+00:00,"Drop the lever condition for backwards  We can view the patch version as adding some ""undermining bonus"" for level pawns; when the defending side can not easily avoid the exchange by advancing her pawn.  � Case 1) White b2;c3; Black a3;b3:           Black is breaking through; b2 deserves a penalty  � Case 2) White b2;c3; Black a3;c4:           if b2xa3 then White ends up with a weak pawn on a3           and probably a weak pawn on c3 too.  In either case; White can still not safely play b2-b3 and make a phalanx with c3; which is the essence of a backward pawn definition.  Passed STC in SPRT[0; 4]: LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 131169 W: 26523 L: 26199 D: 78447 http://tests.stockfishchess.org/tests/view/5aefa4d50ebc5902a409a151 ELO 1.19 [-0.38;2.88] (95%)  Passed LTC in SPRT[-3; 1]: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 24824 W: 3732 L: 3617 D: 17475 http://tests.stockfishchess.org/tests/view/5af04d3f0ebc5902a88b2e55 ELO 1.27 [-1.21;3.70] (95%)  Closes https://github.com/official-stockfish/Stockfish/pull/1584  How to continue from there?  There were some promising tests a couple of months ago about adding a lever condition for king danger in evaluate.cpp; maybe it would be time to re-try this after all the recent changes in pawns.cpp  Bench: 4773882",True,1,2018-05-01
vondele,snicolet,2018-05-08 08:43:56+00:00,Remove skipEarlyPruning argument to search()  Remove nine boolean arguments and the corresponding skipEarlyPruning variable. Instead; skip early pruning only when there is an excluded move; and try null move pruning only if the previous move was not itself a null move.  passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 33623 W: 6853 L: 6755 D: 20015 http://tests.stockfishchess.org/tests/view/5aef462a0ebc5902a409a10e  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 39474 W: 5882 L: 5789 D: 27803 http://tests.stockfishchess.org/tests/view/5aefd4b80ebc5902a409a164  Closes https://github.com/official-stockfish/Stockfish/pull/1585  Bench: 4953556,True,1,2018-05-01
vondele,snicolet,2018-05-08 08:32:23+00:00,Improve signature script  Catch case of missing bench; indicative of a crash or assert.  No functional change,True,1,2018-05-01
Unknown,snicolet,2018-05-06 07:44:14+00:00,"Simplify the backward pawns code  The two lines of code in the patch seem to be just as good as master.  1. We now only look at the current square to see if it is currently backward; whereas master looks there AND further ahead in the current file (master would declare a pawn ""backward"" even though it could still safely advance a little). This simplification allows us to avoid the use of the difficult logic with `backmost_sq(Us; neighbours | stoppers)`.  2. The condition `relative_rank(Us;s) < RANK_5` is simplified away.  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 68132 W: 14025 L: 13992 D: 40115 http://tests.stockfishchess.org/tests/view/5aedc97a0ebc5902a4099fd6  Passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 23789 W: 3643 L: 3527 D: 16619 http://tests.stockfishchess.org/tests/view/5aee4f970ebc5902a409a03a  Ideas for further work:  � The new code flags some pawns on the 5th rank as backward; which was not the case in the old master. So maybe we should test a version with that included?  � Further tweaks of the backward condition with [0..5] bounds?  Closes https://github.com/official-stockfish/Stockfish/pull/1583  Bench: 5122789",True,6,2018-05-01
snicolet,snicolet,2018-05-03 20:00:07+00:00,Tweak the connected[] array value for pawns on rank 5  A recent tuning session by Jerry Donald Watson suggested that the value for the pawns on the fifth rank in the connected[] array were a little bit too high in master. We lower here this value from 75 to 65.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 27399 W: 5646 L: 5384 D: 16369 http://tests.stockfishchess.org/tests/view/5aea17c50ebc5902a1bed396  LTC: LLR: 3.66 (-2.94;2.94) [0.00;4.00] Total: 95590 W: 14529 L: 14062 D: 66999 http://tests.stockfishchess.org/tests/view/5aea34a40ebc5902a104ebe5  Closes https://github.com/official-stockfish/Stockfish/pull/1580  Bench: 5186783,True,3,2018-05-01
snicolet,snicolet,2018-05-02 11:38:00+00:00,"Correct a bug introduced by St�phane in the previous patch.  When we are using the ""Bitboard + Square"" overloaded operators; the compiler uses the interpediate SquareBB[s] to transform the square into a Bitboard; and then calculate the result.  For instance; the following code:  ```    b = pos.pieces(Us; PAWN) & s ```  generates in fact the code:  ```    b = pos.pieces(Us; PAWN) & SquareBB[s]` ```  The bug introduced by St�phane in the previous patch was the use of `b = pos.pieces(Us; PAWN) & (s + Up)` which can result in out-of-bounds errors for the SquareBB[] array if s in the last rank of the board.  We coorect the bug; and also add some asserts in bitboard.h to make the code more robust for this particular bug in the future.  Bug report by Joost VandeVondele. Thanks!  Bench: 5512000",True,2,2018-05-01
Unknown,snicolet,2018-05-01 21:55:30+00:00,Use special rule for BlockedByKing  Simplification: remove BlockedByKing from storm array and use a special rule.  The BlockedByKing section in the storm array is substantially similar to the Unopposed section except for two extreme values V(-290); V(-274). Turns out removing BlockedByKing and using a special rule for these two values shows no Elo loss. All the other values in the BlockedByKing section are apparently irrelevant. BlockedByKing now falls under unopposed which (to me) is a bit more logical since there is no defending pawn on this file. Also; retuning the Unopposed section may be another improvement.  GOOD) This is a simplification because the entire BlockedByKing section of the storm array goes away reducing a few lines of code (and less values to tune). This also brings clarity because the special rule is self documenting.  BAD) It takes execution time to apply the special rule. This should be negli- gible because it is based on a template parameter and is boiled down to two bitwise AND's.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 33470 W: 6820 L: 6721 D: 19929 http://tests.stockfishchess.org/tests/view/5ae7b6e60ebc5926dba90e13  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 47627 W: 7045 L: 6963 D: 33619 http://tests.stockfishchess.org/tests/view/5ae859ff0ebc5926dba90e85  Closes https://github.com/official-stockfish/Stockfish/pull/1574  Bench: 5512000  -----------  How to continue after this patch?  This patch may open the possibility to move the special rule to evaluate.cpp in the evaluate::king() function; where we could refine the rule using king danger information. For instance; with a king in H2 blocking an opponent pawn in H3; it may be critical to know that the opponent has no safe check in G2 before giving the bonus :-),True,1,2018-05-01
MJZ1977,snicolet,2018-05-01 05:12:27+00:00,Penalty for bad bishop with blocked central files  We increase the penalty for bad bishops by a factor proportional to the number of our blocked pawns in the center files C; D; E or F.  STC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 8868 W: 1870 L: 1700 D: 5298 http://tests.stockfishchess.org/html/live_elo.html?5ae7674f0ebc590e39268b34  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 5813 W: 950 L: 808 D: 4055 http://tests.stockfishchess.org/html/live_elo.html?5ae77bae0ebc5926dba90dd9  Closes https://github.com/official-stockfish/Stockfish/pull/1573  Bench: 5364190,True,1,2018-05-01
Stefano80,snicolet,2018-04-29 05:26:25+00:00,Always scale using pawn contribution  This is a further step in the long quest for a simple way of determining scale factors for the endgame.  Here we remove the artificial restriction in evaluate_scale_factor() based on endgame score. Also SCALE_FACTOR_ONEPAWN can be simplified away. The latter is a small non functional simplification with respect to the version that was testedin the framework; verified on bench with depth 22 for good measure.  Passed STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 49438 W: 9999 L: 9930 D: 29509 http://tests.stockfishchess.org/tests/view/5ae20c8b0ebc5963175205c8  Passed LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 101445 W: 15113 L: 15110 D: 71222 http://tests.stockfishchess.org/tests/view/5ae2a0560ebc5902a1998986  How to continue from there?  Maybe the general case could be scaled with pawns from both colors without losing Elo. If that is the case; then this could be merged somehow with the scaling in evaluate_initiative(); which also uses a additive malus down when the number of pawns in the position goes down.  Closes https://github.com/official-stockfish/Stockfish/pull/1570  Bench: 5254862,True,6,2018-04-01
vondele,snicolet,2018-04-29 04:59:17+00:00,Simplifiy IID condition  do IID for all sufficiently deep searches without TT move.  passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 25494 W: 5313 L: 5199 D: 14982 http://tests.stockfishchess.org/tests/view/5ae1e8dd0ebc596317520583  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 80582 W: 12162 L: 12130 D: 56290 http://tests.stockfishchess.org/tests/view/5ae1f5ab0ebc5963175205a4  Bench: 4966970,True,6,2018-04-01
vondele,snicolet,2018-04-29 04:53:51+00:00,Fix 'make strip' for mingw.  Currently the make strip target is broken on mingw as the exe name is wrong (stockfish instead of stockfish.exe).  Needs some testing by mingw users (both profile-build and strip; native and cross).  No functional change.,True,6,2018-04-01
snicolet,snicolet,2018-04-29 04:48:18+00:00,Update various comments  Spotted by Alain Savard; Joost VandeVondele; Ronald de Man; Fabian Fichter; Chris Cain; xoto10  No functional change,True,6,2018-04-01
Rocky640,snicolet,2018-04-24 12:41:50+00:00,"No Queen in the MobilityArea  Queen was recently excluded from the mobility area of friendly minor pieces. Exclude queen also from the mobility area of friendly majors too.  Run as a simplification:  STC http://tests.stockfishchess.org/tests/view/5ade396f0ebc59602d053742 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 46972 W: 9511 L: 9437 D: 28024  LTC http://tests.stockfishchess.org/tests/view/5ade64b50ebc5949f20a24d3 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 66855 W: 10157 L: 10105 D: 46593  How to continue from there?  The mobilityArea is used in various places of the evaluation as a soft proxy for ""not attacked by the opponent pawns"". Now that the mobility area is getting smaller and smaller; it may be worth to hunt for Elo gains by trying the more direct ~attackedBy[Them][PAWN] instead of mobilityArea[Us] in these places.  Bench: 4650572",True,1,2018-04-01
snicolet,snicolet,2018-04-23 07:49:05+00:00,Simplify the ShelterStrength[] array  Remove the distinction between the king file and the two neighbours files in the ShelterStrength[] array. Instead we initialize the safety variable in the evaluate_shelter() function with a -10 penalty if our king is on a semi-open file (ie. if our king is on a file without a pawn protection).  Also rename shelter_storm() to evaluate_shelter() while there.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 23153 W: 4795 L: 4677 D: 13681 http://tests.stockfishchess.org/tests/view/5adcb83d0ebc595ec7ff8aa7  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 25728 W: 3934 L: 3821 D: 17973 http://tests.stockfishchess.org/tests/view/5adcdcb60ebc595ec7ff8adb  See the commit history in PR#1559 for the proof that the committed version is equivalent to the version in the tests above: https://github.com/official-stockfish/Stockfish/pull/1559  Full credit to @protonspring for the renormalized values of the ShelterStrength[] array used for the simplification. Thanks!  Bench: 4703935,True,0,2018-04-01
ceebo,snicolet,2018-04-23 07:13:27+00:00,Alternative formula for dynamic contempt  Replace the formula involving arctan with something having similar behaviour that can be implemented using integer-only operations.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 34781 W: 7189 L: 7093 D: 20499 http://tests.stockfishchess.org/tests/view/5ad7c95f0ebc595700526e76  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 39743 W: 5950 L: 5857 D: 27936 http://tests.stockfishchess.org/tests/view/5ad886ee0ebc595700526e9b  Closes https://github.com/official-stockfish/Stockfish/pull/1558  Bench: 5549801,True,0,2018-04-01
vondele,snicolet,2018-04-23 06:46:32+00:00,Remove template W param  Different W template parameters for the different statEntries are not needed; simplify by consistently using 32.  Passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21683 W: 4545 L: 4424 D: 12714 http://tests.stockfishchess.org/tests/view/5ad797550ebc595700526e59  Passed LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 110391 W: 16551 L: 16562 D: 77278 http://tests.stockfishchess.org/tests/view/5ad7a88f0ebc595700526e61  Closes https://github.com/official-stockfish/Stockfish/pull/1557  Bench: 5120532,True,0,2018-04-01
snicolet,snicolet,2018-04-23 06:08:27+00:00,"Allow UCI parameters to be double  Change the operators of the Option type in uci.h to accept floating point numbers in double precision on input as the numerical type for the ""spin"" values of the UCI protocol.  The output of Stockfish after the ""uci"" command is unaffected.  This change is compatible with all the existing GUI (as they will continue sending integers that we can interpret as doubles in SF); and allows us to pass double parameters to Stockfish in the console via the ""setoption"" command. This will be useful if we implement another tuner as an alternative for SPSA.  Closes https://github.com/official-stockfish/Stockfish/pull/1556  No functional change.  ---------------------  A example of the new functionality in action in the branch `tune_float2'`: https://github.com/snicolet/Stockfish/commit/876c322d0f20ee232da977b4d3489c4cc929765e  I have added the following lines in ucioptions.cpp:  ```C++  void on_pi(const Option& o) {       double x = Options[""PI""];  // or double x = o;       std::cerr << ""received value is x = "" << x << std::endl; }  ...  o[""PI""]   << Option(3.1415926; -10000000; 10000000; on_pi); ```  Then I can change the value of Pi in Stockfish via the command line; and check that Stockfish understands a floating point:  ```` > ./stockfish > setoption name PI value 2.7182818284  received value is x = 2.71828 ````  On output; the default value of Pi is truncated to 3 (to remain compatible with the UCI protocol and GUIs):  ```` > uci  [...] option name SyzygyProbeLimit type spin default 6 min 0 max 6 option name PI type spin default 3 min -10000000 max 10000000 uciok ````",True,0,2018-04-01
Unknown,snicolet,2018-04-18 18:03:52+00:00,Simplify BlockedByKing in pawn storms  This patch is non-functional. Current master does four operations to determine whether an enemy pawn on this file is blocked by the king or not  ``` f == file_of(ksq) && rkThem == relative_rank(Us; ksq) + 1 ) ```  By adding a direction (based on the template color); this is reduced to two operations. This works because b is limited to enemy pawns that are ahead of the king and on the current file.  ``` shift<Down>(b) & ksq ```  I've added a line of code; but the number of executing instructions is reduced (I think). I'm not sure if this counts as a simplification; but it should theoretically be a little faster (barely). The code line length is also reduced making it a little easier to read.  Closes https://github.com/official-stockfish/Stockfish/pull/1552  No functional change.,True,2,2018-04-01
snicolet,snicolet,2018-04-18 17:53:39+00:00,Simplify the shelter mask  The line 246 of pawns.cpp is not necessary; because we restrict the bitboards to file_of(f) in lines 253 and 256 anyway.  No functional change.,True,2,2018-04-01
Rocky640,snicolet,2018-04-18 17:44:41+00:00,Tidy up on Overload  Move new code in the if (defended | weak) {} section.  No functional change,True,2,2018-04-01
vondele,snicolet,2018-04-18 17:17:37+00:00,Document Elo impact of the LMR part of search  Similar to before; document Elo impact of various LMR steps  Tests run by @jerrydonaldwatson  t1 http://tests.stockfishchess.org/tests/view/5abece950ebc591a560aad0b t2 http://tests.stockfishchess.org/tests/view/5abecf0c0ebc591a560aad0d t3 http://tests.stockfishchess.org/tests/view/5abecf7b0ebc591a560aad0f t4 http://tests.stockfishchess.org/tests/view/5abecfe70ebc591a560aad14 t5 http://tests.stockfishchess.org/tests/view/5abed42b0ebc591a560aad33 t6 http://tests.stockfishchess.org/tests/view/5abed0b90ebc591a560aad19 t7 http://tests.stockfishchess.org/tests/view/5abed1240ebc591a560aad1b t8 http://tests.stockfishchess.org/tests/view/5abed1b90ebc591a560aad1d  No functional change.,True,2,2018-04-01
syzygy1,snicolet,2018-04-18 16:46:24+00:00,"Tablebases root ranking  This patch corrects both MultiPV behaviour and ""go searchmoves"" behaviour for tablebases.  We change the logic of table base probing at root positions from filtering to ranking. The ranking code is much more straightforward than the current filtering code (this is a simplification); and also more versatile.  If the root is a TB position; each root move is probed and assigned a TB score and a TB rank. The TB score is the Value to be displayed to the user for that move (unless the search finds a mate score); while the TB rank determines which moves should appear higher in a multi-pv search. In game play; the engine will always pick a move with the highest rank.  Ranks run from -1000 to +1000:  901 to 1000   : TB win 900           : normally a TB win; in rare cases this could be a draw 1 to 899      : cursed TB wins 0             : draw -1 to -899    : blessed TB losses -900          : normally a TB loss; in rare cases this could be a draw -901 to -1000 : TB loss  Normally all winning moves get rank 1000 (to let the search pick the best among them). The exception is if there has been a first repetition. In that case; moves are ranked strictly by DTZ so that the engine will play a move that lowers DTZ (and therefore cannot repeat the position a second time).  Losing moves get rank -1000 unless they have relatively high DTZ; meaning they have some drawing chances. Those get ranks towards -901 (when they cross -900 the draw is certain).  Closes https://github.com/official-stockfish/Stockfish/pull/1467  No functional change (without tablebases).",True,2,2018-04-01
syzygy1,snicolet,2018-04-18 15:49:19+00:00,"Analysis Contempt combo box  This patch introduces an Analysis Contempt UCI combo box to control the behaviour of contempt during analysis. The possible values are Both; Off; White; Black. Technically; the engine is supposed to be in analysis mode if UCI_AnalyseMode is set by the graphical user interface or if the user has chosen infinite analysis mode (""go infinite"").  Credits: the idea for the combo box is due to Michel Van den Bergh.  No functional change (outside analysis mode).  -----------------------------------------------------  The so-called ""contempt"" is an optimism value that the engine adds to one color to avoid simplifications and keep tension in the position during its search. It was introduced in Stockfish 9 and seemed to give good results during the TCEC 11 tournament (Stockfish seemed to play a little bit more actively than in previous seasons).  The patch does not change the play during match or blitz play; but gives more options for correspondance players to decide for which color(s) they would like to use contempt in analysis mode (infinite time). Here is a description of the various options:  * Both  : in analysis mode; use the contempt for both players (alternating) * Off   : in analysis mode; use the contempt for none of the players * White : in analysis mode; White will play actively; Black will play passively * Black : in analysis mode; Black will play actively; White will play passively",True,2,2018-04-01
syzygy1,snicolet,2018-04-14 06:36:41+00:00,Fix reported DTZ for mate-in-1-ply positions  This corrects a bug in Tablebases::probe_dtz() which sometimes causes a higher DTZ value to be returned for the position one ply before mate than for the position two plies before mate.  The problem was reported by Kolja K�hn here: http://talkchess.com/forum/viewtopic.php?p=757497#757497  It is explained here: http://talkchess.com/forum/viewtopic.php?p=757506#757506  I have also adjusted some comments to make clear that probe_dtz() returns -1 for a mate position.  Closes https://github.com/official-stockfish/Stockfish/pull/1546  No functional change,True,5,2018-04-01
mcostalba,snicolet,2018-04-12 07:37:18+00:00,Further documentation and coding style on TB code  This patch adds some documentation and code cleanup to tablebase code.  It took me some time to understand the relation among the differrent structs; although I have rewrote them fully in the past. So I wrote some detailed documentation to avoid the same efforts for future readers.  Also noteworthy is the use a standard hash table implementation with a more efficient 1D array instead of a 2D array. This reduces the average lookup steps of 90% (from 343 to 38 in a bench 128 1 16 run) and reduces also the table from 5K to 4K entries.  I have tested on 5-men and no functional and no slowdown reported. It should be verified on 6-men that the new hash does not overflow. It is enough to run ./stockfish with 6-men available: if it does not assert at startup it means everything is ok with 6-men too.  EDIT: verified for 6-men tablebase by J�rg Oster. Thanks!  No functional change.,True,3,2018-04-01
Unknown,snicolet,2018-04-10 15:47:55+00:00,Simplify condition in space definition  We remove an unnecessary condition in the definition of safe squares in the space evaluation. Only the squares which are occupied by our pawns or attacked by our opponent's pawns are now excluded.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21096 W: 4321 L: 4199 D: 12576 http://tests.stockfishchess.org/tests/view/5acbf7510ebc59547e537d4e  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 23437 W: 3577 L: 3460 D: 16400 http://tests.stockfishchess.org/tests/view/5acc0f750ebc59547e537d6a  It may be possible to further refine the definition of such safe squares.  Bench: 5351765,True,1,2018-04-01
VoyagerOne,snicolet,2018-04-07 18:26:49+00:00,Reset negative statScore on fail high  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 9073 W: 1937 L: 1766 D: 5370  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 53530 W: 8139 L: 7823 D: 37568  Bench: 5170165,True,5,2018-04-01
Unknown,snicolet,2018-04-06 23:31:23+00:00,"Introduce Overload  This patch applies a S(10; 5) bonus for every square that is:  - Occupied by an enemy piece which is not a pawn - Attacked exactly once by our pieces - Defended exactly once by enemy pieces  The idea is that these pieces must be defended. Their defenders have dramatically limited mobility; and they are vulnerable to our future attack.  As with connectivity; there are probably many more tests to be run in this area. In particular:  - I believe @snicolet's queen overload tests have demonstrated a potential   need for a queen overload bonus above and beyond this one; however; the   conditions for ""overload"" in this patch are different (excluding pieces   we attack twice).  My next test after this is (hopefully) merged will be   to intersect the Bitboard I define here with the enemy's queen attacks and   attempt to give additional bonus. - Perhaps we should exclude pieces attacked by pawns--can pawns really be   overloaded? Should they have the same weight; or less?  This didn't work   with a previous version; but it could work with this one. - More generally; different pieces may need more or less bonus. We could   change bonuses based on what type of enemy piece is being overloaded; what   type of friendly piece is attacking; and/or what type of piece is being   defended by the overloaded piece and attacked by us; or any intersection   of these three.  For example; here attacked/defended pawns are excluded;   but they're not totally worthless targets; and could be added again with   a smaller bonus. - This list is by no means exhaustive.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 17439 W: 3599 L: 3390 D: 10450 http://tests.stockfishchess.org/tests/view/5ac78a2e0ebc59435923735e  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 43304 W: 6533 L: 6256 D: 30515 http://tests.stockfishchess.org/tests/view/5ac7a1d80ebc59435923736f  Closes https://github.com/official-stockfish/Stockfish/pull/1533  Bench: 5248871  ----------------  This is my first time opening a PR; so I apologize if there are errors. There are too many people to thank since I submitted my first test just over a month ago. Thank you all for the warm welcome and here is to more green patches!  In particular; I would like to thank: - @crossbr; whose comment in a FishCooking thread first inspired me to             consider the overloading of pieces other than queens; - @snicolet; whose queen overload tests inspired this one and served as              the base of my first overload attempts; - @protonspring; whose connectivity tests inspired this one and who provided                  much of the feedback needed to take this from red to green; - @vondele; who kindly corrected me when I submitted a bad LTC test; - @Rocky640; who has helped me over and over again in the past month.  Thank you all!",True,4,2018-04-01
Rocky640,snicolet,2018-04-03 22:07:40+00:00,"Remove the Queen from the mobility area of minor pieces  In master; we already remove the King from the mobility area of minor pieces because the King simply stands in the way of other pieces; and since opponent cannot capture the King; any piece which ""protects"" the King cannot recapture.  Similarly; this patch introduces the idea that it is rarely a need for a Queen to be ""protected"" by a minor (unless it is attacked only by a Queen; in fact). We used to have a LoosePiece bonus; and in a similar vein the Queen was excluded from that penalty.  Idea came when reviewing an old game of Kholmov. He was a very good midgame player; but in the opening his misplace his Queen (and won in the end :-) :      http://www.chessgames.com/perl/chessgame?gid=1134645  Both white queen moves 10.Qd3 and 13.Qb3 are in the way of some minor piece. I would prefer to not give a bishop mobility bonus at move 10 for the square d3; or later a knight mobility bonus at move 13 for the square b3. And the textbook move is 19.Qe3! which prepares 20.Nb3. This short game sample shows how much a queen can be ""in the way"" of minor pieces.  STC http://tests.stockfishchess.org/tests/view/5ac2c15f0ebc591746423fa3 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 22066 W: 4561 L: 4330 D: 13175  LTC http://tests.stockfishchess.org/tests/view/5ac2d6500ebc591746423faf LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 25871 W: 3953 L: 3738 D: 18180  Closes https://github.com/official-stockfish/Stockfish/pull/1532  Ideas for future work in this area:  � tweak some more mobility areas for other piece type. � construct a notion of global mobility for the whole piece set. � bad bishops.  Bench: 4989125",True,1,2018-04-01
torfranz,snicolet,2018-04-03 21:34:10+00:00,Simplify ThreatBySafePawn evaluation  Simplify ThreatBySafePawn evaluation by removing the 'if (weak)' speed optimization check from threats evaluation. This is a non functional change as it removes just a speed optimization conditional which was probably useful before but does no longer provide benefits. This section section had a few more lines not long ago; with ThreatByHangingPawn and a loop through the threatened pieces; but now there is not much left.  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 47775 W: 9696 L: 9624 D: 28455 http://tests.stockfishchess.org/tests/view/5ac298910ebc591746423f8b  Closes https://github.com/official-stockfish/Stockfish/pull/1531  Non functional change.,True,1,2018-04-01
vondele,snicolet,2018-04-02 22:13:38+00:00,Simplify Singular Extension condition  Avoid defining a singly used variable; removes one condition.  passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 53489 W: 10814 L: 10752 D: 31923 http://tests.stockfishchess.org/tests/view/5ac08a8d0ebc590e9457cd94  Closes https://github.com/official-stockfish/Stockfish/pull/1530  No functional change.,True,0,2018-04-01
vondele,snicolet,2018-04-01 01:21:45+00:00,Document Elo impact of various parts of search  In order to understand better the impact of various techniques used in search; Elo estimates have been run at STC for 60000 games (statistical error ~1.8 Elo); disabling each feature in turn. This should help future improvements and simplifications to pick suitable targets.  The list of tests is: step  7 : http://tests.stockfishchess.org/tests/view/5abcbb4b0ebc5902926cf1ca step  8 : http://tests.stockfishchess.org/tests/view/5abcbb680ebc5902926cf1cc step  9 : http://tests.stockfishchess.org/tests/view/5abcbb850ebc5902926cf1ce step 10 : http://tests.stockfishchess.org/tests/view/5abcbbeb0ebc5902926cf1d2 step 11 : http://tests.stockfishchess.org/tests/view/5abcbbbf0ebc5902926cf1d0 step 13 : http://tests.stockfishchess.org/tests/view/5abd03680ebc5902926cf20b step 13a: http://tests.stockfishchess.org/tests/view/5abd29660ebc5902926cf22a step 13b: http://tests.stockfishchess.org/tests/view/5abd29820ebc5902926cf22c step 14 : http://tests.stockfishchess.org/tests/view/5abd03860ebc5902926cf20f step 14a: http://tests.stockfishchess.org/tests/view/5abd2b6c0ebc5902926cf230 step 14b: http://tests.stockfishchess.org/tests/view/5abd2b8d0ebc5902926cf232 step 14c: http://tests.stockfishchess.org/tests/view/5abd2bad0ebc5902926cf234 step 14d: http://tests.stockfishchess.org/tests/view/5abd2bcf0ebc5902926cf236 step 14e: http://tests.stockfishchess.org/tests/view/5abd2bf10ebc5902926cf238  This patch documents this in the code.  Note that it will be a waste to recompute these estimates often; even a couple of [0;5] patches are unlikely to change them by more than the error bars. The interest of the Elo annotations in the code is not in the details; but in high- lighting trends such as razoring (2 Elo) and singular extensions (60 Elo). These estimates should be recomputed at most once a year.  Closes https://github.com/official-stockfish/Stockfish/pull/1522  No functional change.,True,6,2018-04-01
Unknown,snicolet,2018-04-01 00:32:55+00:00,Some small changes  1) Use make_bitboard() in Bitboards::init()  2) Fix MSVC warning: search.h(85): warning C4244: '=': conversion from    'TimePoint' to 'int'; possible loss of data.  Closes https://github.com/official-stockfish/Stockfish/pull/1524  No functional change.,True,6,2018-04-01
snicolet,snicolet,2018-04-01 00:19:42+00:00,"Simplify KBPKB endgame with opposite bishops  When we reach a position with only two opposite colored bishops and one pawn on the board; current master would give it a scale factor of 9/64=0.14 in about one position out of 7200; and a scale factor of 0.0 in the 7199 others. The patch gives a scale factor of 0.0 in 100% of the cases.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 55845 W: 11467 L: 11410 D: 32968 http://tests.stockfishchess.org/tests/view/5abc585f0ebc5902926cf15e  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 11915 W: 1852 L: 1719 D: 8344 http://tests.stockfishchess.org/tests/view/5abc7f750ebc5902926cf18c  We also have exhaustive coverage analysis of this patch effect by Alain Savard; comparing the perfect evaluation given by the Syzygy tablebase with the heuristic play after this patch for the set of all legal positions of the KBPKP endgame with opposite bishops; in the comments thread for this pull request: https://github.com/official-stockfish/Stockfish/pull/1520  Alain's conclusion: > According to this definition and the data; I consider this PR is > identical to master to ""solve for draw"" and slightly better than > master to solve earlier for ""wins"".  Note: this patch is a side effect of an ongoing effort to improve the evaluation of positions involving a pair of opposite bishops. See the GitHub diff of this LTC test which almost passed at sprt[0..5] for a discussion: http://tests.stockfishchess.org/tests/view/5ab9030b0ebc5902932cbf93  No functional change (at small bench depths)",True,6,2018-04-01
vondele,snicolet,2018-03-31 21:10:35+00:00,Refine SEE threshold for capture pruning.  eloDoc suggests that this part of search is worth ~18 Elo. This patch refines the depth dependence of the SEE threshold.  passed STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 21398 W: 4474 L: 4245 D: 12679 http://tests.stockfishchess.org/tests/view/5abfb0630ebc591a560aae07  passed LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 9028 W: 1439 L: 1285 D: 6304 http://tests.stockfishchess.org/tests/view/5abfbff30ebc591a560aae11  Closes https://github.com/official-stockfish/Stockfish/pull/1527  Bench: 6036915,True,5,2018-03-01
Rocky640,snicolet,2018-03-30 23:16:51+00:00,Candidate Passed Pawn  Include some not fully supported levers in the (candidate) passed pawns bitboard; if otherwise unblocked. Maybe levers are usually very short lived; and some inaccuracy in the lever balance for the definition of candidate passed pawns just triggers a deeper search.  Here is a example of a case where the patch has an effect on the definition of candidate passers: White c5/e5 pawns; against Black d6 pawn. Let's say we want to test if e5 is a candidate passer. The previous master looks only at files d; e and f (which is already very good) and reject e5 as a candidate. However; the lever d6 is challenged by 2 pawns; so it should not fully count. Indirectly; this patch will view such case (and a few more) to be scored as candidates.  STC http://tests.stockfishchess.org/tests/view/5abcd55d0ebc5902926cf1e1 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 16492 W: 3419 L: 3198 D: 9875  LTC http://tests.stockfishchess.org/tests/view/5abce1360ebc5902926cf1e6 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 21156 W: 3201 L: 2990 D: 14965  This was inspired by this test of Jerry Donald Watson; except the case of zero supporting pawns against two levers is excluded; and it seems that not excluding that case is bad; while excluding is it beneficial. See the following tests on fishtest:  https://github.com/official-stockfish/Stockfish/pull/1519 http://tests.stockfishchess.org/tests/view/5abccd850ebc5902926cf1dd http://tests.stockfishchess.org/tests/view/5abcdd490ebc5902926cf1e4  Closes https://github.com/official-stockfish/Stockfish/pull/1521  Bench: 5568461  ----  Comments by Jerry Donald Watson:  > My thinking as to why this works: > > The evaluation is either called in an interior node or in the qsearch. > The calls at the end of the qsearch are the more important as they > ultimately determine the scoring of each move; whereas the internal > values are mainly used for pruning decisions with a margin. Some strong > engines don't even call the eval at all nodes. Now the whole point of > the qsearch is to find quiet positions where captures do not change the > evaluation of the position with regards to the search bounds - i.e. if > there were good captures they would be tried.* So when a candidate lever > appears in the evaluation at the end of the qsearch; the qsearch has > guaranteed that it cannot just be captured; or if it can; this does not > take the score past the search bounds. Practically this may mean that > the side with the candidate lever has the turn; or perhaps the stopping > lever pawn is pinned; or that side is forced for other reasons to make > some other move (e.g. d6 can only take one of the pawns in the example > above). > > Hence granting the full score for only one lever defender makes some > sense; at least; to me. > > IMO this is also why huge bonuses for possible captures in the evaluation > (e.g. threat on queen and our turn); etc. don't tend to work. Such things > are best left to the search to figure out.,True,4,2018-03-01
WOnder93,snicolet,2018-03-30 08:48:57+00:00,"Use per-thread dynamic contempt  We now use per-thread dynamic contempt. This patch has the following effects:   * for Threads=1: **non-functional**  * for Threads>1:    * with MultiPV=1: **no regression; little to no ELO gain**    * with MultiPV>1: **clear improvement over master**  First; I tried testing at standard MultiPV=1 play with [0;5] bounds. This yielded 2 yellow and 1 red test:  5+0.05; Threads=5: LLR: -2.96 (-2.94;2.94) [0.00;5.00] Total: 82689 W: 16439 L: 16190 D: 50060 http://tests.stockfishchess.org/tests/view/5aa93a5a0ebc5902952892e6  5+0.05; Threads=8: LLR: -2.96 (-2.94;2.94) [0.00;5.00] Total: 27164 W: 4974 L: 4983 D: 17207 http://tests.stockfishchess.org/tests/view/5ab2639b0ebc5902a6fbefd5  5+0.5; Threads=16: LLR: -2.97 (-2.94;2.94) [0.00;5.00] Total: 41396 W: 7127 L: 7082 D: 27187 http://tests.stockfishchess.org/tests/view/5ab124220ebc59029516cb62  Then; I tested with Skill Level=17 (implicitly MutliPV=4); showing a clear improvement:  5+0.05; Threads=5: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 3498 W: 1316 L: 1135 D: 1047 http://tests.stockfishchess.org/tests/view/5ab4b6580ebc5902932aeca2  Next; I tested the patch with MultiPV=1 again; this time checking for non-regression ([-3; 1]):  5+0.5; Threads=5: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 65575 W: 12786 L: 12745 D: 40044 http://tests.stockfishchess.org/tests/view/5ab4e8500ebc5902932aecb3  Finally; I ran some tests with fixed number of games; checking if reverting dynamic contempt gains more elo with Skill Level=17 (i.e. MultiPV) than applying the ""prevScore"" fix and this patch. These tests showed; that this patch gains 15 ELO when playing with Skill Level=17:  5+0.05; Threads=3; ""revert dynamic contempt"" vs. ""WITHOUT this patch"": ELO: -11.43 +-4.1 (95%) LOS: 0.0% Total: 20000 W: 7085 L: 7743 D: 5172 http://tests.stockfishchess.org/tests/view/5ab636450ebc590295d88536  5+0.05; Threads=3; ""revert dynamic contempt"" vs. ""WITH this patch"": ELO: -26.42 +-4.1 (95%) LOS: 0.0% Total: 20000 W: 6661 L: 8179 D: 5160 http://tests.stockfishchess.org/tests/view/5ab62e680ebc590295d88524  --- ***FAQ***  **Why should this be commited?** I believe that the gain for multi-thread MultiPV search is a sufficient justification for this otherwise neutral change. I also believe this implementation of dynamic contempt is more logical; although this may be just my opinion.  **Why is per-thread contempt better at MultiPV?** A likely explanation for the gain in MultiPV mode is that during search each thread independently switches between rootMoves and via the shared contempt score skews each other's evaluation.  **Why were the tests done with Skill Level=17?** This was originally suggested by @Hanamuke and the idea is that with Skill Level Stockfish sometimes plays also moves it thinks are slightly sub-optimal and thus the quality of all moves offered by the MultiPV search is checked by the test.  **Why are the ELO differences so huge?** This is most likely because of the nature of Skill Level mode -- since it slower and weaker than normal mode; bugs in evaluation have much greater effect.  ---  Closes https://github.com/official-stockfish/Stockfish/pull/1515.  No functional change -- in single thread mode.",True,4,2018-03-01
vondele,snicolet,2018-03-30 08:23:48+00:00,"Integrate syzygy in automated testing (v2).  Extends valgrind/sanitizer testing to cover syzygy code.  The script downloads 4 man syzygy as needed. The time needed for the additional testing is small (in fact hard to see a difference compared to the large fluctuations in testing time in travis).  Possible follow-ups:   * include more TB sensitive positions in bench.  * include the test script of recent commit ""Refactor tbprobe.cpp"".  * verify unchanged bench with TB (with a long run).  * make the TB part of the continuation integration tests optional.  Closes https://github.com/official-stockfish/Stockfish/pull/1518 and    https://github.com/official-stockfish/Stockfish/pull/1490  No functional change.",True,4,2018-03-01
Unknown,snicolet,2018-03-27 22:31:47+00:00,Change reduction/improving interaction  Adjust criterion for applying extra reduction if not improving. We now add an extra ply of reduction if r > 1.0; instead of the previous condition Reductions[NonPV][imp][d][mc] >= 2.  Why does this work? Previously; reductions when not improving had a discontinuity as the depth and/or move count increases due to the Reductions[NonPV][imp][d][mc] >= 2 condition. Hence; values of r such that 0.5 < r < 1.5 would be mapped to a reduction of 1; while 1.5 < r < 2.5 would be mapped to a reduction of 3. This patch allows values of r satisfying 1.0 < r < 1.5 to be mapped to a reduction of 2; making the reduction formula more continuous.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 35908 W: 7382 L: 7087 D: 21439 http://tests.stockfishchess.org/tests/view/5aba723a0ebc5902a4743e8f  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 23087 W: 3584 L: 3378 D: 16125 http://tests.stockfishchess.org/tests/view/5aba89070ebc5902a4743ea9  Ideas for future work: - We could look at retuning the LMR formula. - We could look at adjusting the reductions in PV nodes if not improving.  Bench: 5326261,True,1,2018-03-01
snicolet,snicolet,2018-03-27 15:51:11+00:00,Tweak queen values for midgame and endgame  Queen midgame value: -1% Queen endgame value: +1%  This patch failed STC; but was exceptionally tested at LTC; where it passed two independant SPRT tests with bounds [0..4]:  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 20651 W: 3191 L: 2980 D: 14480 http://tests.stockfishchess.org/tests/view/5ab73faa0ebc5902932cbdca  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 89111 W: 13647 L: 13233 D: 62231 http://tests.stockfishchess.org/tests/view/5ab8c0e50ebc5902932cbeae  See https://github.com/official-stockfish/Stockfish/pull/1511 for the discussion of this patch.  How to continue from there? � there is probably some more Elo gains to get from the tuning of the queen value.  Bench: 5460229,True,1,2018-03-01
Unknown,snicolet,2018-03-27 15:30:52+00:00,Simplification: remove pawn shelter/storm masks  Encode the pawn shelter/storm masks into the danger score  This highly specialized rule directly contradicts the VERY high danger score for blocked pawns. Reducing the danger score for blocked pawns and removing this rule is apparently an effective compromise.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 36597 W: 7522 L: 7429 D: 21646 http://tests.stockfishchess.org/tests/view/5ab935f30ebc5902932cc016  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 100690 W: 15373 L: 15372 D: 69945 http://tests.stockfishchess.org/tests/view/5ab9501f0ebc5902932cc042  Closes https://github.com/official-stockfish/Stockfish/pull/1514  Bench: 5980822,True,1,2018-03-01
WOnder93,snicolet,2018-03-27 15:14:55+00:00,Fix dynamic contempt for MultiPV  Use rootMoves[PVIdx].previousScore instead of bestValue for dynamic contempt. This is equivalent for MultiPV=1 (bench remained the same; even for higher depths); but more correct for MultiPV.  STC (MultiPV=3): LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 2657 W: 1079 L: 898 D: 680 http://tests.stockfishchess.org/tests/view/5aaa47cb0ebc590297330403  LTC (MultiPV=3): LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 2390 W: 874 L: 706 D: 810 http://tests.stockfishchess.org/tests/view/5aaa593a0ebc59029733040b  VLTC 240+2.4 (MultiPV=3): LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 2399 W: 861 L: 694 D: 844 http://tests.stockfishchess.org/tests/view/5aaf983e0ebc5902a182131f  LTC (MultiPV=4; Skill Level=17): LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 747 W: 333 L: 175 D: 239 http://tests.stockfishchess.org/tests/view/5aabccee0ebc5902997ff006  Note: although the ELO differences seem huge; they are inflated by the nature of Skill Level / MultiPV search; so I don't think they can be reasonably compared with classic ELO strength.  See https://github.com/official-stockfish/Stockfish/pull/1491 for some verifications searches with MultiPV = 10 at depths 12 and 24 from the starting position and the position after 1.e4; comparing the outputs of the full PV by the old master and by this patch.  No functional change for MultiPV=1,True,1,2018-03-01
WOnder93,snicolet,2018-03-27 15:08:08+00:00,Refactor tbprobe.cpp  This involves:  * replacing the union hacks with simply reusing the EntryPiece arrays    for the no-pawns case  * merging the PairsData structure with the EntryPiece/-Pawn structs    (with credit to Marco: @mcostalba)  * simplifying some HashTable functions  * thanks to previous changes; removing the ugly memsets  * simplifying the template logic for WDL/DTZ distinction    (now we distinguish based on an enum type; not the entry classes)  * removing the unneeded Atomic wrapper  -----------------------------  For reference; here is a manual way to check that patches concerning table bases code are non-functional changes:  0) Download the Syzygy table bases (up to 6 men). 1) Make sure you have branches master and the pull request pointing to    the right commits. 2) Download the bench calculation scripts from the following URL:          https://gist.github.com/WOnder93/b5fcf9c989b4a1715684d5c82367cdbe     and copy into src inside your Stockfish repo. 3) Make the scripts executable (chmod +x *.sh). 4) Run the following command to use TBs located at <path>:         export SYZYGY_PATH='<path>'  5) After that; run this (it will take a long time; this is a deep bench):         BENCH_ARGS='128 1 22' ./check_benches.sh master tbprobe_cleanup 2>/dev/null`  ==> You should see two equal numbers printed.     (Of course; now we have to trust that the script itself is correct :)  -----------------------------  Closes https://github.com/official-stockfish/Stockfish/pull/1477  No functional change.,True,1,2018-03-01
mcostalba,snicolet,2018-03-27 14:45:12+00:00,Fix indentation in movepicker.cpp  Fix indentation in movepicker.cpp and evaluate.cpp. Also move the PickType enum out of global space.  No functional change,True,1,2018-03-01
snicolet,snicolet,2018-03-27 14:25:41+00:00,"Switch time management to 64 bits  This is a patch to fix issue #1498; switching the time management variables to 64 bits to avoid overflow of time variables after 25 days.  There was a bug in Stockfish 9 causing the output to be wrong after 2^31 milliseconds search. Here is a long run from the starting position:  info depth 64 seldepth 87 multipv 1 score cp 23 nodes 13928920239402 nps 0 tbhits 0 time -504995523 pv g1f3 d7d5 d2d4 g8f6 c2c4 d5c4 e2e3 e7e6 f1c4 c7c5 e1g1 b8c6 d4c5 d8d1 f1d1 f8c5 c4e2 e8g8 a2a3 c5e7 b2b4 f8d8 b1d2 b7b6 c1b2 c8b7 a1c1 a8c8 c1c2 c6e5 d1c1 c8c2 c1c2 e5f3 d2f3 a7a5 b4b5 e7c5 f3d4 d8c8 d4b3 c5d6 c2c8 b7c8 b3d2 c8b7 d2c4 d6c5 e2f3 b7d5 f3d5 e6d5 c4e5 a5a4 e5d3 f6e4 d3c5 e4c5 b2d4 c5e4 d4b6 e4d6 g2g4 d6b5 b6c5 b5c7 g1g2 c7e6 c5d6 g7g6  We check at compile time that the TimePoint type is exactly 64 bits long for the compiler (TimePoint is our alias in Stockfish for std::chrono::milliseconds -- it is a signed integer type of at least 45 bits according to the C++ standard; but will most probably be implemented as a 64 bits signed integer on modern compilers); and we use this TimePoint type consistently across the code.  Bug report by user ""fischerandom"" on the TCEC chat (thanks); and the patch includes code and suggestions by user ""WOnder93"" and Ronald de Man.  Fixes issue:          https://github.com/official-stockfish/Stockfish/issues/1498 Closes pull request:  https://github.com/official-stockfish/Stockfish/pull/1510  No functional change.",True,1,2018-03-01
Unknown,snicolet,2018-03-26 07:28:37+00:00,Make kingRing always 8 squares  Make kingRing always eight squares; extending the bitboard to the F file if the king is on the H file; and to the C file if the king is on the A file. This may deal with cases where Stockfish (like many other engines) would shift the king around on the back rank like g1h1; not because there is some imminent threat; but because it makes king safety look a little better just because the king ring had a smaller area.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 34000 W: 7167 L: 6877 D: 19956 http://tests.stockfishchess.org/tests/view/5ab8216d0ebc5902932cbe64  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 22574 W: 3576 L: 3370 D: 15628 http://tests.stockfishchess.org/tests/view/5ab84e6a0ebc5902932cbe72  How to continue from there?  This patch probably makes it easier to tune the king safety evaluation; because the new regularity of the king ring size will make the king safety function more continuous.  Closes https://github.com/official-stockfish/Stockfish/pull/1512  Bench: 5934103,True,0,2018-03-01
Unknown,snicolet,2018-03-24 07:59:48+00:00,IID margin reduced to 128  Change the internal iterative deepening margin from +256 to +128.  Passed STC: LLR: 3.26 (-2.94;2.94) [0.00;5.00] Total: 22006 W: 4646 L: 4400 D: 12960 http://tests.stockfishchess.org/tests/view/5ab54a240ebc590295d8847d  Passed LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 46665 W: 7187 L: 6898 D: 32580 http://tests.stockfishchess.org/tests/view/5ab5ba690ebc590295d884b4  Possible work in this area after this change:  � Reduce even more the margin? � Try to do IID for smaller depths too?  Bench: 5851102,True,5,2018-03-01
vondele,snicolet,2018-03-21 00:48:47+00:00,Join refutation stages in the movepicker  Unifies a bit further the three refuation stages in the MovePicker class. Also treat the skipping of TT move now always via select_move(); as discussed in pull request #1454.  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 16608 W: 3461 L: 3331 D: 9816 http://tests.stockfishchess.org/tests/view/5ab0aaf00ebc59029fb6f6c3  Closes https://github.com/official-stockfish/Stockfish/pull/1502  No functional change.,True,2,2018-03-01
DU-jdto,snicolet,2018-03-21 00:35:05+00:00,Fix a few minor code style inconsistencies  No functional change.,True,2,2018-03-01
vondele,snicolet,2018-03-18 23:59:30+00:00,Join common code in the stages of next_move()  Rewrite the MovePicker class using lambda expressions for move filtering. Includes code style changes by @mcostalba.  Verified for speed; passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 43191 W: 9391 L: 9312 D: 24488 http://tests.stockfishchess.org/tests/view/5a99b9df0ebc590297cc8f04  This rewrite of MovePicker.cpp seems to trigger less random crashes on Ryzen machines than the version in previous master (reported by Bojun Guo).  Closes https://github.com/official-stockfish/Stockfish/pull/1454  No functional change.,True,6,2018-03-01
vondele,snicolet,2018-03-18 23:17:08+00:00,Simplify razoring logic  passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 36574 W: 7523 L: 7430 D: 21621 http://tests.stockfishchess.org/tests/view/5aae11450ebc590299abf52f  No functional change.,True,6,2018-03-01
Unknown,snicolet,2018-03-18 22:48:16+00:00,"Mark all compile-time constants as constexpr.  To more clearly distinguish them from ""const"" local variables; this patch defines compile-time local constants as constexpr. This is consistent with the definition of PvNode as constexpr in search() and qsearch(). It also makes the code more robust; since the compiler will now check that those constants are indeed compile-time constants.  We can go even one step further and define all the evaluation and search compile-time constants as constexpr.  In generate_castling() I replaced ""K"" with ""step""; since K was incorrectly capitalised (in the Chess960 case).  In timeman.cpp I had to make the non-local constants MaxRatio and StealRatio constepxr; since otherwise gcc would complain when calculating TMaxRatio and TStealRatio. (Strangely; I did not have to make Is64Bit constexpr even though it is used in ucioption.cpp in the calculation of constexpr MaxHashMB.)  I have renamed PieceCount to pieceCount in material.h; since the values of the array are not compile-time constants.  Some compile-time constants in tbprobe.cpp were overlooked. Sides and MaxFile are not compile-time constants; so were renamed to sides and maxFile.  Non-functional change.",True,6,2018-03-01
Unknown,snicolet,2018-03-16 21:37:03+00:00,Fix an MSVC 2017 error and warnings.  Improved version by @mcostalba.  No functional change.,True,4,2018-03-01
snicolet,snicolet,2018-03-15 09:44:26+00:00,Renaming some variables in code  Implements renaming suggestions by Marco Costalba; G�nther Demetz; Gontran Lemaire; Ronald de Man; St�phane Nicolet; Alain Savard; Joost VandeVondele; Jerry Donald Watson; Mike Whiteley; xoto10; and I hope that I haven't forgotten anybody.  Perpetual renaming thread for suggestions: https://github.com/official-stockfish/Stockfish/issues/1426  No functional change.,True,3,2018-03-01
vondele,snicolet,2018-03-15 08:25:59+00:00,Make using quiescence search implicit  If search depth is less than ONE_PLY call qsearch(); no need to check the depth condition at various call sites of search().  Passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 14568 W: 3011 L: 2877 D: 8680 http://tests.stockfishchess.org/tests/view/5aa846190ebc59029781015b  Also helps gcc to find some optimizations (smaller binary; some speedup). Thanks to Aram and Stefan for identifying an oversight in an early version.  Closes https://github.com/official-stockfish/Stockfish/pull/1487  No functional change.,True,3,2018-03-01
snicolet,snicolet,2018-03-14 21:01:58+00:00,"Check the clock every 1024 nodes  This patch checks the clock every 1024; instead of 4096 in current master.  This is a step towards a solution to alleviate the problem reported by Gian-Carlo Pascutto in pull request #1471; about a situation where SF would sometimes lose on time in endgames at time control 1min+1sec when using Syzygy EGTB on a spinning drive.  We made four tests called ""Estimate the Elo cost of calling now() every N nodes""; with N in {256;1024} and time control in {STC;LTC}. Each test was 40000 games with auto-purge off; against master branch.  http://tests.stockfishchess.org/tests/view/5aa4f37c0ebc59029780ff2d http://tests.stockfishchess.org/tests/view/5aa4f3080ebc59029780ff2b http://tests.stockfishchess.org/tests/view/5aa5cbb50ebc59029780ffce http://tests.stockfishchess.org/tests/view/5aa5cb730ebc59029780ffcc  Here is a summary of the results (speed-up and Elo gain against master):  |   Time   |       N=256       |      N=1024      | |:--------:|:-----------------:|:----------------:| | Speed-up |    0.1% slower    |   0.2% faster    | |   STC    |  -0.33 +-2.2 Elo  |  1.33 +-2.2 Elo  | |   LTC    |   1.08 +-2.3 Elo  |  2.34 +-2.2 Elo  |  Based on these results; we tested N=1024 as a non-regression against master at LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 80746 W: 12430 L: 12399 D: 55917 http://tests.stockfishchess.org/tests/view/5aa7ba660ebc590297810116  Closes https://github.com/official-stockfish/Stockfish/pull/1482  No functional change.",True,2,2018-03-01
lucasart,snicolet,2018-03-14 00:31:21+00:00,Use intrinsics only for LSB/MSB  The NO_BSF does not cover any real life use-case today. The only compilers that can compile SF today; with the current Makefile and no source code changes; are either GCC compatible (define __GNUC__) or MSVC compatible (define _MSC_VER). So they all support LSB/MSB intrinsics.  This patch simplifies away the software fall-backs of LSB/MSB that were still in Stockfish code; but unused in any of the officially supported compilers.  Note the (legacy) MSVC/WIN32 case; where we use a 32-bit BSF/BSR solution; as 64-bit intrinsics aren't available there.  Discussed in: https://github.com/official-stockfish/Stockfish/pull/1447 and:          https://github.com/official-stockfish/Stockfish/pull/1479  No functional change.,True,2,2018-03-01
Unknown,snicolet,2018-03-13 22:32:45+00:00,"Simplify condition for ProbCut move count pruning  We retire depth-dependence in ProbCut move count pruning; the move count limit condition is now : ""probCutCount < 3""  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 33895 W: 6995 L: 6897 D: 20003 http://tests.stockfishchess.org/tests/view/5aa6eaba0ebc59029781009d  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 28959 W: 4441 L: 4333 D: 20185 http://tests.stockfishchess.org/tests/view/5aa73dfa0ebc5902978100be  Ideas for future work:  � Is a flat move count limit in ProbCut ideal? Depth dependence; or   dependence on some other variable; could possibly be reintroduced.  � The move count limit 3 is untuned and a better value may exist.  Closes https://github.com/official-stockfish/Stockfish/pull/1486  Bench: 5741807",True,1,2018-03-01
Unknown,snicolet,2018-03-13 22:21:46+00:00,Tweak probcut margin with 'improving' flag  Adjust ProbCut rBeta by whether the score is improving; and also set improving to false when in check. More precisely; this patch has two parts:  1) the increased beta threshold for ProbCut is now adjusted based    on whether the score is improving 2) when in check; improving is always set to false.  Co-authored by Joost VandeVondele (@vondele) and Bill Henry (@VoyagerOne).  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 13480 W: 2840 L: 2648 D: 7992 http://tests.stockfishchess.org/tests/view/5aa693fe0ebc59029781004c  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 25895 W: 4099 L: 3880 D: 17916 http://tests.stockfishchess.org/tests/view/5aa6ac940ebc59029781006e  In terms of opportunities for future work opened up by this patch; the ProbCut rBeta formula could probably be tuned to gain more Elo.  Closes https://github.com/official-stockfish/Stockfish/pull/1485  Bench: 5328254,True,1,2018-03-01
VoyagerOne,snicolet,2018-03-13 07:21:11+00:00,Use quiescence search for Probcut  Perform qsearch for the preliminary search in Probcut  Passed STC with sprt[-3..1] bounds: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 31090 W: 6386 L: 6283 D: 18421 http://tests.stockfishchess.org/tests/view/5aa598ed0ebc59029780ff9f  Passed LTC with sprt[0..4] bounds: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 104056 W: 15990 L: 15531 D: 72535 http://tests.stockfishchess.org/tests/view/5aa5b0f30ebc59029780ffa9  Closes https://github.com/official-stockfish/Stockfish/pull/1483  Bench: 5404567,True,1,2018-03-01
vondele,snicolet,2018-03-13 07:13:26+00:00,qsearch(): remove inCheck as a template parameter  Simplifies a bit; and avoids bugs as in #1478  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 104862 W: 21302 L: 21337 D: 62223 http://tests.stockfishchess.org/tests/view/5aa6de1b0ebc590297810097  Closes https://github.com/official-stockfish/Stockfish/pull/1484  No functional change,True,1,2018-03-01
Unknown,snicolet,2018-03-12 21:57:21+00:00,Adjust initiative in pure pawn endgames  King and pawn endgames are typically decisive; and a small advantage is often sufficient to win. Therefore we now take this into account when computing the initiative adjustment.  This idea came from a series of patches by Gian-Carlo Pascutto.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 48770 W: 10203 L: 9845 D: 28722 http://tests.stockfishchess.org/tests/view/5aa58cce0ebc59029780ff8d  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 22252 W: 3572 L: 3366 D: 15314 http://tests.stockfishchess.org/tests/view/5aa5b27c0ebc59029780ffad  Ideas for future developement:  - There have been a number of changes to the initiative   calculation lately. Perhaps the coefficients could be   tuned again.  - It may be possible to add special knowledge for other   endgames in the initiative calculation.  Closes https://github.com/official-stockfish/Stockfish/pull/1481  Bench: 5750110,True,0,2018-03-01
Unknown,snicolet,2018-03-12 01:49:14+00:00,"MovePicker: combine countermove with killers.  Handle the countermove in the same way we use stages to progress through the killer moves; using a common array called ""refutations"". Removes some lines of code and simplifies a bit the jump table.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 71707 W: 14622 L: 14595 D: 42490 http://tests.stockfishchess.org/tests/view/5aa003cf0ebc590297cb6276  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 22320 W: 3470 L: 3352 D: 15498 http://tests.stockfishchess.org/tests/view/5aa051020ebc590297cb62ba  Closes https://github.com/official-stockfish/Stockfish/pull/1468  No functional change.",True,0,2018-03-01
Unknown,snicolet,2018-03-12 00:52:12+00:00,Connectivity Score S(3;1) is stronger than S(2;2)  I believe my tests were conclusive enough to demonstrate that a connectivity score of S(3;1) is stronger than S(2;2).  STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 16175 W: 3386 L: 3165 D: 9624 http://tests.stockfishchess.org/tests/view/5aa48b150ebc59029780fef6  LTC LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 98685 W: 15209 L: 14765 D: 68711 http://tests.stockfishchess.org/tests/view/5aa496f50ebc59029780fefa  Bench 5601228,True,0,2018-03-01
Unknown,snicolet,2018-03-10 11:04:03+00:00,"Implement an old Russian proverb  ""Loose pieces drop; in blitz keep everything protected""  Adding a small S(2;2) bonus for knights; bishops; rooks; and queens that are ""connected"" to each other (in the sense that they are under attack by our own pieces) apparently is a good thing. It probably helps the pieces work together a bit better.  STC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 12317 W: 2655 L: 2467 D: 7195 http://tests.stockfishchess.org/tests/view/5aa2d86b0ebc590297cb6474  LTC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 35725 W: 5516 L: 5263 D: 24946 http://tests.stockfishchess.org/tests/view/5aa2fc6f0ebc590297cb64a8  How to continue from there (by Stefan Geschwentner)?  � First we should identify all other eval terms which have an overlap   with new connectivity bonus (like the outpost bonus). A simple way   would be subtract the connectivity bonus from them and look if this   better; or use a SPSA session for these terms.  � Tuning Connectivity himself with SPSA seems not so promising because   of the small range which is useful. Here manual testing changes of   Connectivity like +-1 seems better.  � The eg value is more important because in endgame the position gets   more open and so attacks on pieces are easier. Another important point   is that when defending/fortress-like positions each defending piece   needs a protection; otherwise attacks on them can break defense.  Closes https://github.com/official-stockfish/Stockfish/pull/1474  Bench: 5318575",True,5,2018-03-01
vondele,snicolet,2018-03-10 10:06:53+00:00,"Assign improving only once  Avoid duplicated code after recent commit ""Use evaluation trend to adjust futility margin"". We initialize the improving variable to true in the check case; which allows to avoid redundant code in the general case.  Tested for speed by snicolet; patch seems about 0.4% faster.  No functional change.  Note: initializing the improving variable to false in the check case was tested as a functional change; ending yellow in both STC and LTC. This change is not included in the commit; but it is an interesting result that could become part of a future patch about improving or LMR. Reference of the LTC yellow test: http://tests.stockfishchess.org/tests/view/5aa131560ebc590297cb636e",True,5,2018-03-01
Rocky640,snicolet,2018-03-09 20:47:44+00:00,"Two steps slider threats on queen  Allow a potential slider threat from a square currently occupied by a harmless attacker; just as the recent ""knight on queen"" patch. Also from not completely safe squares; use the mobilityArea instead of excluding all pawns for both SlidersOnQueen and KnightOnQueen  We now compute the potential sliders threat on queen only if opponent has one queen.  Run as SPRT [0;4] since it is some kind of simplification but maybe not clearly one.  STC: http://tests.stockfishchess.org/tests/view/5aa1ddf10ebc590297cb63d8 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 22997 W: 4817 L: 4570 D: 13610  LTC: http://tests.stockfishchess.org/tests/view/5aa1fe6b0ebc590297cb63e5 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 11926 W: 1891 L: 1705 D: 8330  After this patch is committed; we may try to:  � re-introduce some ""threat by queen"" bonus to make Stockfish's queen   more aggressive (attacking aspect)  � introduce a concept of ""queen overload"" to force the opponent queen   into passivity and protecting duties (defensive aspect)  � more generally; re-tune the queen mobility array since patches in the   last three months have affected a lot the location/activity of queens.  Closes https://github.com/official-stockfish/Stockfish/pull/1473  bench: 5788691",True,4,2018-03-01
IIvec,snicolet,2018-03-07 21:51:31+00:00,Simplification: use Arctan for the optimism S-curve  This was an idea of Gontran Lemaire (gonlem); but the graphs he published did not seem accurate to me. I did my own graphs; got my own constants and here is the result:  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 42179 W: 8704 L: 8622 D: 24853 http://tests.stockfishchess.org/tests/view/5a9db6270ebc590297cb611b  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 17737 W: 2702 L: 2577 D: 12458 http://tests.stockfishchess.org/tests/view/5a9eb5b20ebc590297cb61b2  Note: we are now back to 70% draw rate in selfplay mode!  Bench: 5544908,True,2,2018-03-01
Unknown,snicolet,2018-03-07 21:34:49+00:00,Use evaluation trend to adjust futility margin  Adjust futility margin in the child node based on whether the static evaluation is improving.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 15271 W: 3157 L: 2958 D: 9156 http://tests.stockfishchess.org/tests/view/5a9f2f8c0ebc590297cb6216  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 6617 W: 1053 L: 908 D: 4656 http://tests.stockfishchess.org/tests/view/5a9f98390ebc590297cb6241  Ideas for future work:  - Tune the new margins. - Try to get this idea to work for futility pruning in parent   nodes as well.  Bench: 5779242,True,2,2018-03-01
snicolet,snicolet,2018-03-07 21:12:29+00:00,"Knight threats on Queen  We give a S(21;11) bonus for knight threats on the next moves against enemy queen. The threats are from squares which are ""not strongly protected"" and which may be empty; contain enemy pieces or even one of our piece at the moment (N;B;Q;R) -- hence be two-steps threats in the later case because we will have to move our piece and *then* attack the enemy queen with the knight.  STC: http://tests.stockfishchess.org/tests/view/5a9e442e0ebc590297cb6162 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 35129 W: 7346 L: 7052 D: 20731  LTC: http://tests.stockfishchess.org/tests/view/5a9e6e620ebc590297cb617f LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 42442 W: 6695 L: 6414 D: 29333  How to continue from there?  � Trying to refine the threat condition (""not strongly protected"") � Trying the two-steps idea for bishops or rooks threats against queen  Bench: 6051247",True,2,2018-03-01
torfranz,snicolet,2018-03-07 20:58:16+00:00,"Remove popcount trick from space evaluation  Similar removal of superposition code trick as in the ""Simplify tropism computation"" patch. This simplification of the space() function will allow us to specify space masks which can reach into enemy territory.  passed STC: LLR: 3.38 (-2.94;2.94) [-3.00;1.00] Total: 184630 W: 40581 L: 40758 D: 103291 http://tests.stockfishchess.org/tests/view/5a8433360ebc590297cc80c5  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 231799 W: 37647 L: 37858 D: 156294 http://tests.stockfishchess.org/tests/view/5a96a34a0ebc590297cc8cfd  No functional change.",True,2,2018-03-01
snicolet,snicolet,2018-03-06 21:11:45+00:00,Fix a warning in GCC for Windows  No functional change,True,1,2018-03-01
joergoster,snicolet,2018-03-06 00:54:36+00:00,Code style in Razoring and ProbCut  No functional change.,True,1,2018-03-01
ceebo,snicolet,2018-03-06 00:33:00+00:00,Introduce variadic make_bitboard()  Adds a helper function to make a bitboard from a list of squares.  No functional change,True,1,2018-03-01
Stefano80,snicolet,2018-03-04 15:55:58+00:00,Using a S-curve for the optimism measure  Add a logarithmic term in the optimism computation; increase the maximal optimism and lower the contempt offset.  This increases the dynamics of the optimism aspects; giving a boost for balanced positions without skewing too much on unbalanced positions (but this version will enter panic mode faster than previous master when behind; trying to draw faster when slightly behind). This helps; since optimism is in general a good thing; for instance at LTC; but too high optimism rapidly contaminates play.  passed STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 159343 W: 34489 L: 33588 D: 91266 http://tests.stockfishchess.org/tests/view/5a8db9340ebc590297cc85b6  passed LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 47491 W: 7825 L: 7517 D: 32149 http://tests.stockfishchess.org/tests/view/5a9456a80ebc590297cc8a89  It must be mentioned that a version of the PR with contempt 0 did not pass STC [0;5]. The version in the patch; which uses default contempt 12; was found to be as strong as current master on different matches against SF7 and SF8; both at STC and LTC.  One drawback maybe is that it raises the draw rate in self-play from 56% to 59%; giving a little bit less sensitivity for SF developpers to find evaluation improvements by selfplay tests in fishtest.  Possible further work:  � tune the values accurately; while keeping in mind the drawrate issue � check whether it is possible to remove linear and offset term � try to simplify the S-shape curve  Bench: 5934644,True,6,2018-03-01
vondele,snicolet,2018-03-03 11:41:35+00:00,No extra stage for QS recaptures.  remove the QRECAPTURES and QSEARCH_RECAPTURES stages as they can be incoorporated in QCAPTURES stage with a simple condition on depth.  passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 214964 W: 46188 L: 46443 D: 122333 http://tests.stockfishchess.org/tests/view/5a98544b0ebc590297cc8e35  passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 14552 W: 2404 L: 2274 D: 9874 http://tests.stockfishchess.org/tests/view/5a9947b20ebc590297cc8e93  Bench: 6361582,True,5,2018-03-01
VoyagerOne,snicolet,2018-03-03 11:04:25+00:00,Do move-count pruning in probcut  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 4928 W: 1163 L: 1007 D: 2758  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 20368 W: 3441 L: 3238 D: 13689 http://tests.stockfishchess.org/tests/view/5a98bea40ebc590297cc8e5d  Bench: 6361568,True,5,2018-03-01
mcostalba,snicolet,2018-03-03 10:35:33+00:00,Merge Stats tables  Use a recursive std::array with variadic template parameters to get rid of the last redundacy.  The first template T parameter is the base type of the array; the W parameter is the weight applied to the bonuses when we update values with the << operator; the D parameter limits the range of updates (range is [-W * D; W * D]); and the last parameters (Size and Sizes) encode the dimensions of the array.  This allows greater flexibility because we can now tweak the range [-W * D; W * D] for each table.  Patch removes more lines than what adds and streamlines the Stats soup in movepick.h  Closes PR#1422 and PR#1421  No functional change.,True,5,2018-03-01
snicolet,snicolet,2018-03-03 10:07:23+00:00,Better indentation in Makefile  No functional change,True,5,2018-03-01
tomtor,snicolet,2018-02-28 12:42:32+00:00,Reintroduce depth 2 razoring (with additional margin)  The first depth 2 margin triggers the verification quiescence search. This qsearch() result has to be better then the second lower margin; so we only skip the razoring when the qsearch gives a significant improvement.  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 32133 W: 7395 L: 7101 D: 17637 http://tests.stockfishchess.org/tests/view/5a93198b0ebc590297cc8942  Passed LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 17382 W: 3002 L: 2809 D: 11571 http://tests.stockfishchess.org/tests/view/5a93b18c0ebc590297cc89c2  This Elo-gaining version was further simplified following a suggestion of Marco Costalba:  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 15553 W: 3505 L: 3371 D: 8677 http://tests.stockfishchess.org/tests/view/5a964be90ebc590297cc8cc4  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 13253 W: 2270 L: 2137 D: 8846 http://tests.stockfishchess.org/tests/view/5a9658880ebc590297cc8cca  How to continue after this patch?  Reformating the razoring code (step 7 in search()) to unify the depth 1 and depth 2 treatements seems quite possible; this could possibly lead to more simplifications.  Bench: 5765806,True,2,2018-02-01
locutus2,snicolet,2018-02-28 12:03:35+00:00,Blocked pawn storm  In pawn structures like white pawns f6;h6 against black pawns f7;g6;h7 the attack on the king is blocked by the own pawns. So decrease the penalty for king safety.  See diagram and discussion in https://github.com/official-stockfish/Stockfish/pull/1434  A sample position that this patch wants to avoid is the following 1rr2bk1/3q1p1p/2n1bPpP/pp1pP3/2pP4/P1P1B3/1PBQN1P1/1K3R1R w - - 0 1  White pawn storm on the king side was a disaster; it locked the king side completely. Therefore; all the king tropism bonus that white have on the king side are useless; and kingadjacent attacks too. Master gives White a static +4.5 advantage; but White cannot win that game. The patch is lowering this evaluation artefact.  STC: LLR: 2.94 (-2.94;2.94) [0.00;5.00] Total: 16467 W: 3750 L: 3537 D: 9180 http://tests.stockfishchess.org/tests/view/5a92102d0ebc590297cc87d0  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 64242 W: 11130 L: 10745 D: 42367 http://tests.stockfishchess.org/tests/view/5a923dc80ebc590297cc8806  This version includes reformatting and speed optimization by Alain Savard.  Bench: 5643527,True,2,2018-02-01
Unknown,snicolet,2018-02-28 11:37:20+00:00,Tweak time management  Using a SPSA tuning session to optimize the time management parameters.  With SPSA tuning it is not always possible to say where improvements came from. Maybe some variables changed randomly or because result was not sensitive enough to them. So my explanation of changes will not be necessarily correct; but here it is.  � When decrease of thinking time was added by Joost a few months ago if best move has not changed for several plies; one more competing indicator  was introduced for the same purpose along with increase in score and absence of fail low at root. It seems that tuning put relatively more importance on that new indicator what allowed to save time. � Some of this saved time is distributed proportionally between all moves and some more time were given to moves when score dropped a lot or best move changed. � It looks also that SPSA redistributed more time from the beginning to later stages of game via other changes in variables - maybe because contempt made game to last longer or for whatever reason.  All of this is just small tweaks here and there (a few percentages changes).  STC (10+0.1): LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 18970 W: 4268 L: 4029 D: 10673 http://tests.stockfishchess.org/tests/view/5a9291a40ebc590297cc8881  LTC (60+0.6): LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 72027 W: 12263 L: 11878 D: 47886 http://tests.stockfishchess.org/tests/view/5a92d7510ebc590297cc88ef  Additional non-regression tests at other time controls  Sudden death 60s: LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 14444 W: 2715 L: 2608 D: 9121 http://tests.stockfishchess.org/tests/view/5a9445850ebc590297cc8a65  40 moves repeating at LTC: LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 10309 W: 1880 L: 1759 D: 6670 http://tests.stockfishchess.org/tests/view/5a9566ec0ebc590297cc8be1  This is a functional patch only for time management; but the bench does not reflect this because it uses fixed depth search; so the number of nodes does not change during bench.  No functional change.,True,2,2018-02-01
snicolet,snicolet,2018-02-27 18:10:40+00:00,"Simplify tropism computation  Simplification. Tests show that the ""shift-and-superpose"" trick is no longer necessary. The speed benefit of avoiding a popcount is no longer relevant on modern machines.  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41675 W: 9168 L: 9086 D: 23421 http://tests.stockfishchess.org/tests/view/5a840bcc0ebc590297cc80b5  Passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 117728 W: 19875 L: 19911 D: 77942 http://tests.stockfishchess.org/tests/view/5a8444800ebc590297cc80ca  No functional change.",True,1,2018-02-01
locutus2,snicolet,2018-02-27 17:42:59+00:00,Stat score initialization: grandchildren  This is the sequel of the previous patch; we now let the parent node initialize stat score to zero once for all grandchildren.  Initialize statScore to zero for the grandchildren of the current position. So statScore is shared between all grandchildren and only the first grandchild starts with statScore = 0. Later grandchildren start with the last calculated statScore of the previous grandchild. This influences the reduction rules in LMR which are based on the statScore of parent position.  Tests results against the previous patch:  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 23676 W: 5417 L: 5157 D: 13102 http://tests.stockfishchess.org/tests/view/5a9423a90ebc590297cc8a46  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 35485 W: 6168 L: 5898 D: 23419 http://tests.stockfishchess.org/tests/view/5a9435550ebc590297cc8a54  Bench: 5643520,True,1,2018-02-01
locutus2,snicolet,2018-02-27 17:18:56+00:00,Stat score initialization: children  Let the parent node initialize stat score to zero once for all siblings.  Initialize statScore to zero for the children of the current position. So statScore is shared between sibling positions and only the first sibling starts with statScore = 0. Later siblings start with the last calculated statScore of the previous sibling. This influences the reduction rules in in LMR which are based on the statScore of parent position.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 22683 W: 5202 L: 4946 D: 12535 http://tests.stockfishchess.org/tests/view/5a93315f0ebc590297cc894f  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 48548 W: 8346 L: 8035 D: 32167 http://tests.stockfishchess.org/tests/view/5a933ba90ebc590297cc8962  Bench: 5833683,True,1,2018-02-01
snicolet,snicolet,2018-02-27 07:06:46+00:00,No Tempo for draw scores given by heuristic functions  The current master applies Eval::Tempo even to leaves evaluated as draw by some of the static evaluation functions of endgame.cpp (for instance KNN vs K or stalemates in KP vs K). This results in some lines being reported as +0.07 or -0.07 when the terminal position has reached such endgames (0.07 being about the value of a tempo for Stockfish).  This patch does not apply Eval::tempo to these positions. This leads to more nodes being evaluated as VALUE_DRAW during search; giving more opportunities for cut-offs in alpha-beta.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 52602 W: 11776 L: 11403 D: 29423 http://tests.stockfishchess.org/tests/view/5a8cb8f60ebc590297cc8546  LTC: LLR: 2.97 (-2.94;2.94) [0.00;4.00] Total: 156613 W: 26820 L: 26158 D: 103635 http://tests.stockfishchess.org/tests/view/5a8f452d0ebc590297cc865a  Bench: 4924749,True,1,2018-02-01
mcostalba,snicolet,2018-02-27 00:19:06+00:00,Speedup and simplify pinners and blockers  To compute dicovered check or pinned pieces we use some bitwise operators that are not really needed because already accounted for at the caller site.  For instance in evaluation we compute:       pos.pinned_pieces(Us) & s  Where pinned_pieces() is:       st->blockersForKing[c] & pieces(c)  So in this case the & operator with pieces(c) is useless; given the outer '& s'.  There are many places where we can use the naked blockersForKing[] instead of the full pinned_pieces() or discovered_check_candidates().  This path is simpler than original and gives around 1% speed up for me. Also tested for speed by mstembera and snicolet (neutral in both cases).  No functional change.,True,1,2018-02-01
erbsenzaehler,snicolet,2018-02-26 23:30:47+00:00,Unify use of -mdynamic-no-pic  Apply -mdynamic-no-pic in a single place in the Makefile instead of 5 places.  Verified on three different Macs: - a MacBook from 2013 - a MacBook running MacOS 10.9.5 - an iMac running MacOS 10.13.3  No functional change.,True,0,2018-02-01
AndyGrant,snicolet,2018-02-26 02:01:46+00:00,"Shallow search to verify probcut  Perform a preliminary shallow search to verify a probcut before doing the normal ""depth - 4 plies"" search.  STC: LLR: 4.73 (-2.94;2.94) [0.00;5.00] Total: 36281 W: 8221 L: 7830 D: 20230 http://tests.stockfishchess.org/tests/view/5a921cb90ebc590297cc87f6  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 22907 W: 3954 L: 3738 D: 15215 http://tests.stockfishchess.org/tests/view/5a92672b0ebc590297cc8814  Happy to see something from Ethereal work for Stockfish :)  Bench: 5882274",True,0,2018-02-01
snicolet,snicolet,2018-02-26 00:06:45+00:00,Count passed pawns in asymmetry measure  The previous asymmetry measure of the pawn structure only used to consider the number of pawns on semi-opened files in the position. With this patch we also increase the measure by the number of passed pawns for both players.  Many thanks to the community for the nice feedback on the previous version; with special mentions to Alain Savard and Marco Costalba for clarity and speed suggestions.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 13146 W: 3038 L: 2840 D: 7268 http://tests.stockfishchess.org/tests/view/5a91dd0c0ebc590297cc877e  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 27776 W: 4771 L: 4536 D: 18469 http://tests.stockfishchess.org/tests/view/5a91fdd50ebc590297cc879b  How to continue after this patch?  Stockfish will now evaluate more positions with passed pawns; so tuning the passed pawns values may bring Elo. The patch has also consequences on the initiative term; where we might want to give different weights to passed pawns and semi-openfiles (idea by Stefano Cardanobile).  Bench: 5302866,True,0,2018-02-01
vondele,snicolet,2018-02-25 22:11:56+00:00,Combine killer moves  Move the first killer move out of the capture stage; combining treatment of first and second killer move.  passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 55777 W: 12367 L: 12313 D: 31097 http://tests.stockfishchess.org/tests/view/5a88617e0ebc590297cc8351  Similar to an earlier proposition of G�nther Demetz; see pull request #1075. I think it is more robust and readable than master; why hand-unroll the loop over the killer array; and duplicate code ?  This version includes review comments from Marco Costalba.  Bench: 5227124,True,6,2018-02-01
snicolet,snicolet,2018-02-25 14:12:19+00:00,"Revert ""Count passed pawns in asymmetry measure""",True,6,2018-02-01
snicolet,snicolet,2018-02-25 12:12:23+00:00,Count passed pawns in asymmetry measure  The previous asymmetry measure of the pawn structure only used to consider the number of pawns on semi-opened files in the postions. With this patch we also increase the measure by the number of passed pawns for both players.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 13146 W: 3038 L: 2840 D: 7268 http://tests.stockfishchess.org/tests/view/5a91dd0c0ebc590297cc877e  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 27776 W: 4771 L: 4536 D: 18469 http://tests.stockfishchess.org/tests/view/5a91fdd50ebc590297cc879b  How to continue from there: Stockfish will now evaluate more positions with passed pawns; so tuning the passed pawns values may bring Elo. The patch also has consequences on the initiative term.  Bench: 5302866,True,6,2018-02-01
vondele,snicolet,2018-02-25 11:49:51+00:00,Join all capture init stages in MovePicker  Passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 16789 W: 3685 L: 3554 D: 9550 http://tests.stockfishchess.org/tests/view/5a91a8bb0ebc590297cc875b  Passed LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21293 W: 3527 L: 3407 D: 14359 http://tests.stockfishchess.org/tests/view/5a920a730ebc590297cc87ba  No functional change,True,6,2018-02-01
DU-jdto,snicolet,2018-02-25 00:15:38+00:00,More robust interaction of singular search and iid  When iid (Internal iterative deepening) is invoked; the prior value of ttValue is not guaranteed to be VALUE_NONE. As such; it is currently possible to enter a state in which ttValue has a specific value which is inconsistent with tte->bound() and tte->depth(). Currently; ttValue is only used within the search in a context that prevents this situation from making a difference (and so this change is non-functional; but this is not guaranteed to remain the case in the future.  For instance; just changing the tt depth condition in singular extension node to be      tte->depth() >= depth - 4 * ONE_PLY  instead of      tte->depth() >= depth - 3 * ONE_PLY  interacts badly with the absence of ttMove in iid. For the ttMove to become a singular extension candidate; singularExtensionNode needs to be true. With the current master; this requires that tte->depth() >= depth - 3 * ONE_PLY. This is not currently possible if tte comes from IID; since the depth 'd' used for the IID search is always less than depth - 4 * ONE_PLY for depth >= 8 * ONE_PLY (below depth 8 singularExtensionNode can never be true anyway). However; with DU-jdto/Stockfish@251281a ; this condition can be met; and it is possible for singularExtensionNode to become true after IID. There are then two mechanisms by which this patch can affect the search:  � If ttValue was VALUE_NONE prior to IID; the fact that this patch sets ttValue allows   the 'ttValue != VALUE_NONE' condition of singularExtensionNode to be met.  � If ttValue wasn't VALUE_NONE prior to IID; the fact that this patch modifies ttValue's   value causes a different 'rBeta' to be calculated if the singular extension search is   performed.  Tested at STC for non-regression: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 76981 W: 17060 L: 17048 D: 42873 http://tests.stockfishchess.org/tests/view/5a7738b70ebc5902971a9868  No functional change,True,6,2018-02-01
DU-jdto,snicolet,2018-02-24 12:12:04+00:00,Simplification: do razoring only for depth 1  The razoring heuristic is quite a drastic pruning technique; using a depth 0 search at internal nodes of the search tree to estimate the true value of depth n nodes. This patch limits this razoring to the case of internal nodes of depth 1. Author: Jarrod Torriero (DU-jdto)  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 8043 W: 1865 L: 1716 D: 4462 http://tests.stockfishchess.org/tests/view/5a90a9290ebc590297cc86c1  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32890 W: 5577 L: 5476 D: 21837 http://tests.stockfishchess.org/tests/view/5a90c8510ebc590297cc86d5  Opportunities opened by this patch: it would be interesting to know if it brings Elo to re-introduce razoring or soft razoring at depth >= 2; maybe using a larger margin to compensate for the increased pruning effect.  Bench: 5227124,True,5,2018-02-01
tomtor,snicolet,2018-02-23 21:13:11+00:00,Lower razor depth to < 3 and adjust margin  Various margins were tested: 600; 560; 585; 580; 590 and 595.  Only 590 (this patch) passed both STC and LTC. Higher margins appear to be better for longer time controls.  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 24496 W: 5470 L: 5210 D: 13816 http://tests.stockfishchess.org/tests/view/5a8c6d040ebc590297cc8508  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 74540 W: 12888 L: 12491 D: 49161 http://tests.stockfishchess.org/tests/view/5a8d14c70ebc590297cc8566  Bench: 5475941,True,4,2018-02-01
mcostalba,snicolet,2018-02-23 21:02:44+00:00,Reformat SEE to better document the function  This is one of the most difficult to understand but also most important and speed critical functions of SF.  This patch rewrites some part of it to hopefully make it clearer and drop some redundant variables in the process.  Same speed than master (or even a bit more).  Thanks to Chris Cain for useful feedback.  No functional change.,True,4,2018-02-01
snicolet,snicolet,2018-02-21 21:31:38+00:00,Move pawn_attacks_bb() helper to bitboard.h  No functional change.,True,2,2018-02-01
Unknown,snicolet,2018-02-21 20:47:04+00:00,rename shift variables.  Where variable names are explicitly incorrect; I feel morally obligated to at least suggest an alternative. There are many; but these two are especially egregious.  No functional change.,True,2,2018-02-01
Rocky640,snicolet,2018-02-20 23:52:59+00:00,Avoid a compilation warning  Avoid a warning while compiling with gcc version 4.9.2  No functional change.,True,1,2018-02-01
mcostalba,snicolet,2018-02-20 16:11:18+00:00,Code style in evaluate.cpp  Passed STC LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 75666 W: 16482 L: 16616 D: 42568 http://tests.stockfishchess.org/tests/view/5a8953af0ebc590297cc83ab  No functional change.,True,1,2018-02-01
snicolet,snicolet,2018-02-18 00:51:35+00:00,Update list of authors after Stockfish 9  No functional change.,True,6,2018-02-01
Unknown,snicolet,2018-02-15 18:38:09+00:00,Simplify trapped rook  As far as can tell; semiopenFiles are set if there is a pawn anywhere on the file. The removed condition would be true even if the pawns were very advanced; which doesn't make sense if we're looking for a trapped rook. Seems the engine fairs better with this removed. My guess s that the condition that mobility is 3 or less does this well enough.  Begs the question whether this is a mobility issue alone... not sure. Should I do LTC test?  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 13377 W: 3009 L: 2871 D: 7497 http://tests.stockfishchess.org/tests/view/5a855be40ebc590297cc8166  Passed LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 16288 W: 2813 L: 2685 D: 10790 http://tests.stockfishchess.org/tests/view/5a8575a80ebc590297cc817e  Bench: 5006365,True,3,2018-02-01
Unknown,snicolet,2018-02-12 22:14:33+00:00,Fix gcc PGO build on Windows  This fixes the issue #1375 of the PGO builds failing under Windows: https://github.com/official-stockfish/Stockfish/issues/1375  Solution found during this discussion in the fishcooking forum: https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/RjIPgeFFLPQ  Closes #1408.  No functional change.,True,0,2018-02-01
mcostalba,snicolet,2018-02-12 21:58:25+00:00,Code style fixes in search.cpp  Some code style triviality.  No functional change.,True,0,2018-02-01
mcostalba,snicolet,2018-02-12 21:42:39+00:00,Update travis CI to g++7  Use newer g++ 7 instead of 6 in travis CI tests.  No functional change.,True,0,2018-02-01
Stefano80,snicolet,2018-02-09 18:07:19+00:00,"Introduce dynamic contempt  Make contempt dependent on the current score of the root position.  The idea is that we now use a linear formula like the following to decide on the contempt to use during a search :      contempt = x + y * eval  where x is the base contempt set by the user in the ""Contempt"" UCI option; and y * eval is the dynamic part which adapts itself to the estimation of the evaluation of the root position returned by the search. In this patch; we use x = 18 centipawns by default; and the y * eval correction can go from -20 centipawns if the root eval is less than -2.0 pawns; up to +20 centipawns when the root eval is more than 2.0 pawns.  To summarize; the new contempt goes from -0.02 to 0.38 pawns; depending if Stockfish is losing or winning; with an average value of 0.18 pawns by default.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 110052 W: 24614 L: 23938 D: 61500 http://tests.stockfishchess.org/tests/view/5a72e6020ebc590f2c86ea20  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 16470 W: 2896 L: 2705 D: 10869 http://tests.stockfishchess.org/tests/view/5a76c5b90ebc5902971a9830  A second match at LTC was organised against the current master:  ELO: 1.45 +-2.9 (95%) LOS: 84.0% Total: 19369 W: 3350 L: 3269 D: 12750 http://tests.stockfishchess.org/tests/view/5a7acf980ebc5902971a9a2e  Finally; we checked that there is no apparent problem with multithreading; despite the fact that some threads might have a slightly different contempt level that the main thread.  Match of this version against master; both using 5 threads; time control 30+0.3: ELO: 2.18 +-3.2 (95%) LOS: 90.8% Total: 14840 W: 2502 L: 2409 D: 9929 http://tests.stockfishchess.org/tests/view/5a7bf3e80ebc5902971a9aa2  Include suggestions from Marco Costalba; Aram Tumanian; Ronald de Man; etc.  Bench: 5207156",True,4,2018-02-01
Unknown,snicolet,2018-02-09 09:41:32+00:00,"Retire ""Extra thinking before accepting draw PVs""  This patch simplifies the time management code; removing the extra thinking time for moves with draw PV and increasing thinking time for all moves proportionally by around 4%.  Last time when the time management was carefully tuned was 1.5-2 years ago. As new patches were getting added; time management was drifting out of optimum. This happens because when search becomes more precise pv and score are becoming more stable; there are less fail lows; best move is picked earlier and there are less best move changes. All this factors are entering in time management; and average time per move is decreasing with more and more good patches. For individual patches such effect is small (except some) and may be up or down; but when there are many of them; effect is more substantial. The same way benchmark with more and more patches is slowly drifting down on average.  So my understanding that back in October adding more think time for draw PV showed positive Elo because time management was not well tuned; there was more time available; and think_hard patch applied this additional time to moves with draw PV; while just retuning back to optimum would recover Elo anyway. It is possible that absence of contempt also helped; as SF9 is showing less 0.0 scores than the October version.  Anyway; to me it seems that proper place to deal with draw PV is search; and contempt sounds as much better solution. In time management there is little additional elo; and if some code is not helping like removed here; it is better to discard it. It is simpler to find genuine improvement if code is clean.  � Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 20487 W: 4558 L: 4434 D: 11495 http://tests.stockfishchess.org/tests/view/5a7706ec0ebc5902971a9854  � Passed LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 41960 W: 7145 L: 7058 D: 27757 http://tests.stockfishchess.org/tests/view/5a778c830ebc5902971a9895  � Passed an additional non-regression [-5..0] test at the time control of 60sec for the game (sudden death) with disabled draw adjudication: LLR: 2.95 (-2.94;2.94) [-5.00;0.00] Total: 8438 W: 1675 L: 1586 D: 5177 http://tests.stockfishchess.org/tests/view/5a7c3d8d0ebc5902971a9ac0  � Passed an additional non-regression [-5..0] test at the time control of 1sec+1sec per move with disabled draw adjudication: LLR: 2.97 (-2.94;2.94) [-5.00;0.00] Total: 27664 W: 5575 L: 5574 D: 16515 http://tests.stockfishchess.org/tests/view/5a7c3e820ebc5902971a9ac3  This is a functional change for the time management code.  Bench: 4983414",True,4,2018-02-01
snicolet,snicolet,2018-02-09 00:12:08+00:00,Fix bug for 'eval' command in terminal  The 'eval' debugging command in Terminal did not initialize the Eval::Contempt variable; leading to random output during debugging sessions (normal search was unaffected by the bug).  Example of session where the two 'eval' commands should give the same output; but did not:  ./stockfish position startpos d eval go depth 20 d eval  The bug is fixed by initializing Eval::Contempt to SCORE_ZERO in Eval::trace  No functional change.,True,4,2018-02-01
FauziAkram,snicolet,2018-02-08 14:14:02+00:00,A combo of 3 successful tuning patches  Shelter Weakness by Fauzi Akram Dabat Threats by Alain Savard Passed Pawns by Alain Savard  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 51378 W: 11592 L: 11223 D: 28563 http://tests.stockfishchess.org/tests/view/5a79e2fe0ebc5902971a99d1  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 21631 W: 3888 L: 3661 D: 14082 http://tests.stockfishchess.org/tests/view/5a7aefe80ebc5902971a9a39  Bench: 4983414,True,3,2018-02-01
Unknown,snicolet,2018-02-08 09:46:27+00:00,Obey skipQuiets strictly in MovePicker  The current logic in master is to continue return quiet moves if their history score is above 0. It appears as though this check can be removed; which is also more logically consistent with the �skipQuiets� semantics used in search.cpp.  This patch may open new opportunitiesto get Elo by changing or tuning the definition of 'moveCountPruning' in line 830 of search.cpp; because obeying skipQuiets without checking the history scores makes the search more sensitive to 'moveCountPruning'.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 34780 W: 7680 L: 7584 D: 19516 http://tests.stockfishchess.org/tests/view/5a79f8d80ebc5902971a99db  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 38757 W: 6732 L: 6641 D: 25384 http://tests.stockfishchess.org/tests/view/5a7afebe0ebc5902971a9a46  Bench 4954595,True,3,2018-02-01
vondele,snicolet,2018-02-07 00:29:53+00:00,More robust bench extraction  Allow travis.yml to recognize a variety of bench formats in commit messages; for instance:  Bench: 5023593. (really). bench: 5023593 (it was 1234567) bench : 5023593 (blah blah) Bench:5023593 Bench: 5023593. 567 something (1234567) 563  No functional change.,True,2,2018-02-01
syzygy1,snicolet,2018-02-05 23:46:50+00:00,Enable LTO for clang  Enable link-time optimization in the Makefile when compiling with clang. Also update travis.yml to use clang++-5.0 and llvm-5.0-dev.  No functional change.,True,0,2018-02-01
Unknown,snicolet,2018-02-05 16:27:59+00:00,    Don�t score and sort all captures in RECAPTURES stage.      For these recaptures; we�re are only considering those captures     that recapture the recapture square (small portion of all the     captures). Therefore; scoring all of the captures and pick_besting     out of the whole group is not necessary.      STC     LLR: 2.96 (-2.94;2.94) [-3.00;1.00]     Total: 85583 W: 18978 L: 18983 D: 47622     http://tests.stockfishchess.org/tests/view/5a717faa0ebc590f2c86e9a7      LTC     LLR: 2.96 (-2.94;2.94) [-3.00;1.00]     Total: 20231 W: 3533 L: 3411 D: 13287     http://tests.stockfishchess.org/tests/view/5a73ad330ebc5902971a96ba      Bench: 5023593,True,0,2018-02-01
snicolet,snicolet,2018-02-04 20:42:56+00:00,"Revert ""Implement old 'multipv' search""  This revert the following commit: https://github.com/official-stockfish/Stockfish/commit/44a7db0f9ac02d2461aff39e25f1ac9107ffbfac  Bug report by Ronald de Man in issue: https://github.com/official-stockfish/Stockfish/issues/1392  Bench: 5023629",True,6,2018-02-01
Unknown,snicolet,2018-02-04 13:57:57+00:00,Simplify qsearch stages in MovePicker  The difference between QCAPTURES_1 and QCAPTURES_2 quiescence search stages boils down to a simple check of depth. The way it's being done now is unnecessarily complex.  This patch is simpler; clearer; and easier to understand.  Passed SPRT[-3..1] test at STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 99755 W: 22158 L: 22192 D: 55405 http://tests.stockfishchess.org/tests/view/5a71f41c0ebc590f2c86e9cb  No functional change.,True,6,2018-02-01
joergoster,snicolet,2018-02-04 12:35:44+00:00,Implement 'old' multipv search.  It seems to be a waste of time to loop through all remaining root moves after finishing each PV line. This patch skips this until we have reached the last PV line (this is the way it was done in Glaurung and very early versions of Stockfish).  No functional change in Single PV mode.  MultiPV=3 STC and LTC tests LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 3113 W: 1248 L: 1064 D: 801  LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 2260 W: 848 L: 679 D: 733  Bench: 5023629,True,6,2018-02-01
snicolet,snicolet,2018-02-04 01:08:09+00:00,Restore development version  No functional change.,True,6,2018-02-01
snicolet,snicolet,2018-02-03 23:13:56+00:00,Improved spelling; grammar and comment  Author: Ben Koshy  No functional change,True,5,2018-02-01
mstembera,mcostalba,2018-01-31 10:41:09+00:00,Stockfish 9  Official release version of Stockfish 9    Bench 5023629,True,2,2018-01-01
torfranz,mcostalba,2018-01-30 08:40:56+00:00,Retire lever (#1378)  Retire the lever bonus from pawns evaluation    STC: http://tests.stockfishchess.org/tests/view/5a6aef5c0ebc590d945d59c8  LLR: 2.94 (-2.94;2.94) [-3.00;1.00]  Total: 88290 W: 19549 L: 19560 D: 49181    LTC: http://tests.stockfishchess.org/tests/view/5a6b70140ebc590d945d59f7  LLR: 3.22 (-2.94;2.94) [-3.00;1.00]  Total: 104603 W: 18105 L: 18108 D: 68390    Bench 5023629,True,1,2018-01-01
Rocky640,mcostalba,2018-01-28 13:56:45+00:00,Limit the king distance factor when evaluating passed pawns (#1373)  Limit the king distance factor when evaluating passed pawns  Passed STC  http://tests.stockfishchess.org/tests/view/5a6bf7290ebc590d945d5a3a  LLR: 3.31 (-2.94;2.94) [0.00;5.00]  Total: 23987 W: 5550 L: 5281 D: 13156    and LTC  http://tests.stockfishchess.org/tests/view/5a6c57710ebc590297c36af2  LLR: 2.97 (-2.94;2.94) [0.00;5.00]  Total: 16926 W: 3014 L: 2820 D: 11092    Bench: 5059457,True,6,2018-01-01
syzygy1,mcostalba,2018-01-28 13:40:07+00:00,"This modifies the in-search TB probing to continue searching for a mate ""behind"" a TB win (or loss). (#1285)  It does the following:    - If a TB win or loss value allows an alpha or beta cutoff; the cutoff is taken.  - Otherwise; the search of the current subtree continues. In PV nodes; the final value returned is adjusted to reflect that the position is a TB win (or loss).    The patch also fixes a potential problem caused by root_probe() and root_probe_wdl() dirtying the root-move scores.    This patch removes the limitation of current master that a mate is never found if the root position is not yet in the TBs; but the path to mate at some point enters the TBs. The patch is intended to preserve the efficiency and effectiveness of the current TB probing approach.    No functional change (withouth TB)",True,6,2018-01-01
mibere,mcostalba,2018-01-24 15:54:04+00:00,Top CPU Contributors as of January 2018 (#1367)  No functional change.,True,2,2018-01-01
snicolet,mcostalba,2018-01-23 13:26:45+00:00,"Contempt 20  Set the default contempt value of Stockfish to 20 centipawns.  The contempt feature of Stockfish tries to prevent the engine from simplifying the position too quickly when it feels that it is very slightly behind; instead keeping the tension a little bit longer.  Various tests in November 2017 have proved that our current imple- mentation works well against SF7 (which is about 130 Elo weaker than current master) and than the Elo gain is an increasing function of contempt; going (against SF7) from +0 Elo when contempt is set at zero centipawns; to +30 Elo when contempt is 40 centipawns.  See pull request 1325 for details:  https://github.com/official-stockfish/Stockfish/pull/1325  This november discussion left open the decision of which ""default"" value for contempt we should use for Stockfish; taking into account the various uses ofStockfish (opening preparation for humans; computer online tournaments;analysis tool for web pages; human/computer play; etc).  This pull request proposes to set the default contempt value of SF to twenty centipawns; which turns out to be the highest value which is not a regression against current master; as this seemed to be a good compromise between risk and safety. A couple of SPRT[-3..1] tests were done to bisect this value:  Contempt 10: http://tests.stockfishchess.org/tests/view/5a5d42d20ebc5902977e2901 (PASSED) Contempt 15: http://tests.stockfishchess.org/tests/view/5a5d41740ebc5902977e28fa (PASSED) Contempt 20: http://tests.stockfishchess.org/tests/view/5a5d42060ebc5902977e28fc (PASSED) Contempt 25: http://tests.stockfishchess.org/tests/view/5a5d433f0ebc5902977e2904 (FAILED)  Surprisingly; a test at ""very long time control"" hinted that using contempt 20 is not only be non-regressive against contempt 0; but may actually exhibit some small Elo gain; giving a likehood of superio- rity of 88.7% after 8500 games:  VLTC: ELO: 2.28 +-3.7 (95%) LOS: 88.7% Total: 8521 W: 1096 L: 1040 D: 6385 http://tests.stockfishchess.org/tests/view/5a60b2820ebc590297b9b7e0  Finally; there was some concerns that a contempt value of 20 would be worse than a value of 7; but a test with 20000 games at STC was neutral:  STC: ELO: 0.45 +-3.1 (95%) LOS: 61.2% Total: 20000 W: 4222 L: 4196 D: 11582 http://tests.stockfishchess.org/tests/view/5a64d2fd0ebc590297903868  See the comments in pull request 1361 for the long; nice discussion (180 entries :-)) leading to the decision to propose contempt 20 as the default value:  https://github.com/official-stockfish/Stockfish/pull/1361  Whether Stockfish should strictly adhere to the Komodo and Houdini semantics and add the UCI commands to force the contempt to be White in the so-called ""analysis mode"" is still under discussion; and may be or may not be the object of a future commit.  Bench: 5783344",True,1,2018-01-01
tomtor,mcostalba,2018-01-23 13:15:05+00:00,Make razor margin depth independent  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 37171 W: 6680 L: 6587 D: 23904  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 11632 W: 1574 L: 1442 D: 8616  bench: 5098576,True,1,2018-01-01
ianfab,mcostalba,2018-01-23 13:05:48+00:00,Simplify away redundant SEE pruning condition (#1363)  SEE immediately returns true for promotions;  so excluding them before checking SEE is redundant.    STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 56758 W: 10166 L: 10106 D: 36486  http://tests.stockfishchess.org/tests/view/5a645eaf0ebc590297903833    No functional change.,True,1,2018-01-01
mcostalba,web-flow,2018-01-13 08:21:23+00:00,Fix bench number  Incorrect bench number in master. Fix it.    bench: 4971497,True,5,2018-01-01
pb00068,mcostalba,2018-01-13 08:01:23+00:00,Simplify verification search (#1362)  1. avoid recursive call of verification.     For the interested side to move recursion makes no sense.     For the other side it could make sense in case of mutual zugzwang;     but I was not able to figure out any concrete problematic position.     Allows the removal of 2 local variables.       2. avoid further reduction by removing R += ONE_PLY;    Benchmark with zugzwang-suite (see #1338); max 45 secs per position:  Patch  solves 33 out of 37  Master solves 31 out of 37    STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 76188 W: 13866 L: 13840 D: 48482  http://tests.stockfishchess.org/tests/view/5a5612ed0ebc590297da516c    LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 40479 W: 5247 L: 5152 D: 30080  http://tests.stockfishchess.org/tests/view/5a56f7d30ebc590299e4550e    bench: 5340015,True,5,2018-01-01
IIvec,mcostalba,2018-01-13 07:59:20+00:00,Revert to old time management (#1351)  As many users reported some problems with new time management;  and recent tests on longer time controls    http://tests.stockfishchess.org/tests/view/5a460e160ebc590ccbb8c35d  http://tests.stockfishchess.org/tests/view/5a462f4d0ebc590ccbb8c37a    are even little in favor of old time management; this revert seems as a logical step.    STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 14060 W: 2562 L: 2430 D: 9068    LTC:  LLR: 3.44 (-2.94;2.94) [-3.00;1.00]  Total: 31611 W: 3958 L: 3827 D: 23826    bench: 5365777 (same as master),True,5,2018-01-01
mbootsector,mcostalba,2018-01-13 07:56:42+00:00,Use mobility in kingsafety (#1360)  Use mobility in kingsafety    STC: http://tests.stockfishchess.org/tests/view/5a55134d0ebc590296938a28  LLR: 2.96 (-2.94;2.94) [0.00;5.00]  Total: 32651 W: 6057 L: 5792 D: 20802    LTC: http://tests.stockfishchess.org/tests/view/5a5618f40ebc590297da516f  LLR: 2.94 (-2.94;2.94) [0.00;5.00]  Total: 17875 W: 2421 L: 2245 D: 13209    bench: 5365777,True,5,2018-01-01
hxim,mcostalba,2018-01-04 21:31:30+00:00,Remove ThreatByHangingPawn bonus (#1356)  * no ThreatByHangingPawn    * bench: 4919682,True,3,2018-01-01
vondele,mcostalba,2018-01-01 12:18:10+00:00,New Year 2018  Adjust copyright headers.  No functional change.,True,0,2018-01-01
vondele,mcostalba,2018-01-01 12:17:51+00:00,Explicitly zero TT upon resize.  as discussed in issue #1349; the way pages are allocated with calloc might imply some overhead on first write. This overhead can be large and slow down the first search after a TT resize significantly; especially for large TT. Using an explicit clear of the TT on resize fixes this problem.  Not implemented; but possibly useful for large TT; is to do this zero-ing using all search threads. Not only would this be faster; it could also lead to a more favorable memory allocation on numa systems with a first touch policy.  No functional change.,True,0,2018-01-01
pb00068,mcostalba,2017-12-26 09:42:24+00:00,Include x-ray attacks through all queens independently of the color.  When calculating attacks from rooks/bishops current master includes x-rays through own queen. This patch includes also x-rays through opponent queen.  Credits go to Brian who inspired for this idea https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/Z3APRYpQeMU  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 41549 W: 7544 L: 7244 D: 26761 Elo	2.05 [-0.29;4.19] (95%) http://tests.stockfishchess.org/tests/view/5a3b5fe50ebc590ccbb8bf9a  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 110010 W: 14208 L: 13739 D: 82063 Elo	1.20 [-0.27;2.55] (95%) http://tests.stockfishchess.org/tests/view/5a3b8e7c0ebc590ccbb8bfad  bench: 5544445,True,1,2017-12-01
vondele,mcostalba,2017-12-26 09:40:42+00:00,Upon changing the number of threads; make sure all threads are bound  The heuristic to avoid thread binding if less than 8 threads are requested resulted in the first 7 threads not being bound.  The branch was verified to yield a roughly 13% speedup by @CoffeeOne on the appropriate hardware and OS; and an earlier version of this patch tested well on his machine:    http://tests.stockfishchess.org/tests/view/5a3693480ebc590ccbb8be5a  ELO: 9.24 +-4.6 (95%) LOS: 100.0%  Total: 5000 W: 634 L: 501 D: 3865    To make sure all threads (including mainThread) are bound as soon as the total number exceeds 7; recreate all threads on a change of thread number.  To do this; unify Threads::init; Threads::exit and Threads::set are unified in a single Threads::set function that goes through the needed steps.  The code includes several suggestions from @joergoster.    Fixes issue #1312     No functional change,True,1,2017-12-01
vondele,mcostalba,2017-12-18 15:32:21+00:00,Allow for general transposition table sizes. (#1341)  For efficiency reasons current master only allows for transposition table sizes that are N = 2^k in size; the index computation can be done efficiently as (hash % N) can be written instead as (hash & 2^k - 1). On a typical computer (with 4; 8... etc Gb of RAM); this implies roughly half the RAM is left unused in analysis.    This issue was mentioned on fishcooking by Mindbreaker:  http://tests.stockfishchess.org/tests/view/5a3587de0ebc590ccbb8be04    Recently a neat trick was proposed to map a hash into the range [0;N[ more efficiently than (hash % N) for general N; nearly as efficiently as (hash % 2^k):    https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/    namely computing (hash * N / 2^32) for 32 bit hashes. This patch implements this trick and now allows for general hash sizes. Note that for N = 2^k this just amounts to using a different subset of bits from the hash. Master will use the lower k bits; this trick will use the upper k bits (of the 32 bit hash).    There is no slowdown as measured with [-3; 1] test:    http://tests.stockfishchess.org/tests/view/5a3587de0ebc590ccbb8be04  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 128498 W: 23332 L: 23395 D: 81771    There are two (smaller) caveats:    1) the patch is implemented for a 32 bit hash (so that a 64 bit multiply can be used); this effectively limits the number of clusters that can be used to 2^32 or to 128Gb of transpostion table. That's a change in the maximum allowed TT size; which could bother those using 256Gb or more regularly.    2) Already in master; an excluded move is hashed into the position key in rather simple way; essentially only affecting the lower 16 bits of the key. This is OK in master; since bits 0-15 end up in the index; but not in the new scheme; which picks the higher bits. This is 'fixed' by shifting the excluded move a few bits up. Eventually a better hashing scheme seems wise.    Despite these two caveats; I think this is a nice improvement in usability.    Bench: 5346341,True,0,2017-12-01
pb00068,mcostalba,2017-12-18 15:30:27+00:00,Enhanced verify search (#1338)  by disabling null-move-pruning for the side to move for first part of  the remaining search tree. This helps to better recognize zugzwang.    STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 18220 W: 3379 L: 3253 D: 11588  http://tests.stockfishchess.org/tests/view/5a2fa6460ebc590ccbb8bc2f    LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 41899 W: 5359 L: 5265 D: 31275  http://tests.stockfishchess.org/tests/view/5a2fcf440ebc590ccbb8bc47    For further detail see commit notes and discussion at   https://github.com/pb00068/Stockfish/commit/6401a80ab91df5c54390ac357409fef2e51ff5bb    bench: 5776193,True,0,2017-12-01
gonlem,mcostalba,2017-12-17 08:20:17+00:00,Remove QueenMinorsImbalance array #1340  Remove QMI array and adjust bishop; knight and queen coefficients in QuadraticOurs and QuadraticTheirs arrays in compensation of this removal.  STC : http://tests.stockfishchess.org/tests/view/5a21d8350ebc590ccbb8b5fe LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 49659 W: 9029 L: 8957 D: 31673  LTC : http://tests.stockfishchess.org/tests/view/5a33c0dd0ebc590ccbb8bd7e LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 45905 W: 5834 L: 5745 D: 34326  Bench: 5176807,True,6,2017-12-01
vondele,mcostalba,2017-12-17 08:11:55+00:00,Make staticEval independent of the search path  Current master can yield different staticEvals depending on the path used to reach the position. The reason for this is that the evaluation after a null move is always computed subtracting 2 * Eval::Tempo; while this is not the case for lazy or specialized evals. This patch always adds tempo to evals; which doesn't affect playing strength:  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 59911 W: 7616 L: 7545 D: 44750  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 104947 W: 18897 L: 18919 D: 67131  Fixes issue #1335  Bench: 5208264,True,6,2017-12-01
Rocky640,mcostalba,2017-12-17 07:50:45+00:00,"Simplify other checks (#1337)  Replace an intricate definition with a more natural one.    Master was excluding squares occupied by a pawn which was blocked by a pawn.  This version excludes any squares occupied by a pawn which is blocked by ""something""    Passed STC  http://tests.stockfishchess.org/tests/view/5a2f557b0ebc590ccbb8bc0d  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 44211 W: 8009 L: 7928 D: 28274    and LTC  http://tests.stockfishchess.org/tests/view/5a301d440ebc590ccbb8bc80  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 31958 W: 4108 L: 4002 D: 23848    Bench 5000136",True,6,2017-12-01
Rocky640,mcostalba,2017-12-11 14:27:44+00:00,"Simplify other checks #1334  Simplify the other check penalty computation. Compared to current master;  a) it uses a 143 kingDanger penalty instead of S(10; 10) for the ""otherCheck"" (credits to ElbertoOne for finding a suitable kingDanger range to replace the score and to Guardian for showing this could also be a neutral change at LTC). This makes our king safety model more consistent and simpler.  b) it might also score more than one ""otherCheck"" penalty for a given piece type instead of just one  c) it might score many pinned penalties instead of just one.  d) It also remove 3 conditionals and uses simpler expressions. So it was tested as a SPRT[-3; 1]  Passed STC http://tests.stockfishchess.org/tests/view/5a2b560b0ebc590ccbb8ba6b LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 11705 W: 2217 L: 2080 D: 7408  And LTC http://tests.stockfishchess.org/tests/view/5a2bfd0d0ebc590ccbb8bab0 LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 26812 W: 3575 L: 3463 D: 19774  Trying to improve on b) another attempt was made to score also the ""otherchecks"" for piece types which had some safe checks; but this failed STC http://tests.stockfishchess.org/tests/view/5a2c79e60ebc590ccbb8badd  bench: 5149133",True,0,2017-12-01
benkoshy,mcostalba,2017-12-10 12:46:43+00:00,Add Resources to understand code base (#1332)  No functional change.,True,6,2017-12-01
pb00068,mcostalba,2017-12-06 13:23:41+00:00,Don't consider defending queen as check blocker (#1328)  STC:  LLR: 2.95 (-2.94;2.94) [0.00;5.00]  Total: 22636 W: 4212 L: 3990 D: 14434  http://tests.stockfishchess.org/tests/view/5a2506140ebc590ccbb8b75a    LTC:  LLR: 2.96 (-2.94;2.94) [0.00;5.00]  Total: 63448 W: 8287 L: 7965 D: 47196  http://tests.stockfishchess.org/tests/view/5a253a610ebc590ccbb8b776    bench: 5767699,True,2,2017-12-01
snicolet,mcostalba,2017-12-05 06:25:42+00:00,A better contempt implementation for Stockfish (#1325)  * A better contempt implementation for Stockfish    The round 2 of TCEC season 10 demonstrated the benefit of having a nice contempt implementation: it gives the strongest programs in the tournament the ability to slow down the game when they feel the position is slightly worse; prefering to stay in a complicated (even if slightly risky) middle game rather than simplifying by force into a drawn endgame.    The current contempt implementation of Stockfish is inadequate; and this patch is an attempt to provide a better one.    Passed STC non-regression test against master:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 83360 W: 15089 L: 15075 D: 53196  http://tests.stockfishchess.org/tests/view/5a1bf2de0ebc590ccbb8b370    This contempt implementation is showing promising results in certains situations. For instance; it obtained a nice +30 Elo gain when playing with contempt=40 against Stockfish 7; compared to current master:    � master against SF 7 (20000 games at LTC): +121.2 Elo  � this patch with contempt=40 (20000 games at LTC): +154.11 Elo    This was the result of real cooperative work from the Stockfish team; with key ideas coming from Stefan Geschwentner (locutus2) and Chris Cain (ceebo) while most of the community helped with feedback and computer time.    In this commit the bench is unchanged by default; but you can test at home with the new contempt in the UCI options. The style of play will change a lot when using contempt different of zero (I repeat: not done in this version by default; however)!    The Stockfish team is still deliberating over the best default contempt value in self-play and the best contempt modeling strategy; to help users choosing a contempt value when playing against much weaker programs. These informations will be given in future commits when available :-)    Bench: 5051254    * Remove the prefetch    No functional change.,True,1,2017-12-01
vondele,mcostalba,2017-12-04 16:57:36+00:00,Pawn endgames directly skip early pruning.  Instead of checking individual steps. Idea by @Stefano80.  passed STC http://tests.stockfishchess.org/tests/view/5a23e5d20ebc590ccbb8b6d5 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 37445 W: 6866 L: 6773 D: 23806  passed LTC http://tests.stockfishchess.org/tests/view/5a24260c0ebc590ccbb8b716 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 38780 W: 4946 L: 4848 D: 28986  Bench: 5466219,True,0,2017-12-01
snicolet,mcostalba,2017-12-04 16:53:42+00:00,"Avoid warnings by the Clang compiler  Clang gave a couple of warnings for unused parameters after the recnet commit ""Use constexpr when makes sense"".  No functional change.",True,0,2017-12-01
syzygy1,mcostalba,2017-12-04 16:52:31+00:00,Use a Direction enum for Square deltas  Currently the NORTH/WEST/SOUTH/EAST values are of type Square; but conceptually they are not squares but directions. This patch separates these values into a Direction enum and overloads addition and subtraction to allow adding a Square to a Direction (to get a new Square).    I have also slightly trimmed the possible overloadings to improve type safety. For example; it would normally not make sense to add a Color to a Color or a Piece to a Piece; or to multiply or divide them by an integer. It would also normally not make sense to add a Square to a Square.    This is a non-functional change.,True,0,2017-12-01
vondele,mcostalba,2017-12-03 17:29:55+00:00,Use bool(Bitboard b) instead of !!b (#1321)  The idiom !!b is confusing newcomers (e.g. Stefan needs explaining here https://groups.google.com/d/msg/fishcooking/vYqnsRI4brY/Gaf60QuACwAJ).    No functional change.,True,6,2017-12-01
gvreuls,mcostalba,2017-12-03 11:44:24+00:00,Use constexpr when makes sense  No functional change.,True,6,2017-12-01
snicolet,mcostalba,2017-12-03 11:30:09+00:00,Compile without exceptions  Add the -fno-exceptions flag to the Makefile to avoid the unecessary exceptions support in the executable (we do not use any exception in Stockfish at the moment).  This change gives a 9.2% reduction in size for the executable binary.  Before : executable size = 376956 bytes After: executable size = 347652 bytes  No functional change.,True,6,2017-12-01
syzygy1,mcostalba,2017-12-03 11:24:46+00:00,Minor cleanup of search.cpp  Four very minor edits. Note that tte->save() uses posKey and not pos.key() in other places.  Originally I also added a futility_move_counts() function to make things more consistent with the futility_margin() and reduction() functions. But then razor_margin[] should probably also be turned into a function; etc. Maybe a good idea; maybe not. So I did not include it.  Non functional change.,True,6,2017-12-01
locutus2,mcostalba,2017-12-03 09:41:48+00:00,Attack threats  Give bonus for safe attack threats from bishops and rooks on opponent queen    STC:  LLR: 2.97 (-2.94;2.94) [0.00;5.00]  Total: 8629 W: 1599 L: 1438 D: 5592  http://tests.stockfishchess.org/tests/view/5a1ad4490ebc590ccbb8b30d    LTC:  LLR: 2.96 (-2.94;2.94) [0.00;5.00]  Total: 7093 W: 987 L: 846 D: 5260  http://tests.stockfishchess.org/tests/view/5a1aec5d0ebc590ccbb8b317    Bench: 5051254,True,6,2017-12-01
Unknown,mcostalba,2017-11-18 15:45:33+00:00,OpenBSD friendly start.,True,5,2017-11-01
locutus2,mcostalba,2017-11-18 15:27:44+00:00,Simplify good/bad capture detection. bench 5336313,True,5,2017-11-01
Stefano80,mcostalba,2017-11-18 13:08:06+00:00,Fix comments. Bench: 5109559.,True,5,2017-11-01
snicolet,mcostalba,2017-11-18 10:24:23+00:00,Simplify away the PawnSet[] imbalance array (#1308)  Simplify away the PawnSet[] imbalance array    STC:  LLR: 2.94 (-2.94;2.94) [-3.00;1.00]  Total: 52977 W: 9550 L: 9484 D: 33943  http://tests.stockfishchess.org/tests/view/5a06b4780ebc590ccbb8a833    LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 83717 W: 10599 L: 10559 D: 62559  http://tests.stockfishchess.org/tests/view/5a0aa36a0ebc590ccbb8aa99    Bench: 5340212,True,5,2017-11-01
Rocky640,mcostalba,2017-11-11 12:37:29+00:00,"Simplify some kingring penalties expressions  The new ""weak"" expression helps simplify the safe check calculations for rooks or minors; (but the end result for all the safe checks is the exactly the same as in current master)    The only functional change is for the ""outer king ring"" (for example; squares f3 g3 h3 when white king is on g1). In current master; there was a 191 penalty if any of these was not defended at all.  With this pr; there is this 191 penalty if any of these is not defended at all or is only defended by a white queen.    Tested as a simplification  STC  http://tests.stockfishchess.org/tests/view/59fb03d80ebc590ccbb89fee  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 66167 W: 12015 L: 11971 D: 42181  (against master (Update Copyright year inMakefile))    LTC  http://tests.stockfishchess.org/tests/view/5a0106ae0ebc590ccbb8a55f  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 15790 W: 2095 L: 1968 D: 11727  (against master (Handle BxN trade as good capture when history scor))    same as #1296 but rebased on latest master  bench: 5109559",True,5,2017-11-01
ceebo,mcostalba,2017-11-10 11:14:53+00:00,Add comments to pos.see_ge()  In terms of technical changes this patch eliminates the return statements from the main loop of pos.see_ge() and replaces two conditional computations with a single bitwise negation.  No functional change,True,4,2017-11-01
VoyagerOne,mcostalba,2017-11-10 11:12:58+00:00,Capture Stat Simplification- Bench:  5363761,True,4,2017-11-01
gcp,mcostalba,2017-11-08 12:45:14+00:00,"Always do MaxCardinality checks.  Stockfish currently relies on the ""filter_root_moves"" function also having the side effect of clamping Cardinality against MaxCardinality (the actual piece count in the tablebases). So if we skip this function; we will end up probing in the search even without tablebases installed.  We cannot bail out of this function before this check is done; so move the MultiPV hack a few lines below.",True,2,2017-11-01
vondele,mcostalba,2017-11-08 12:44:24+00:00,Simplify Null Move Search condition  Removes depth condition; adjust parameters.    passed STC:  http://tests.stockfishchess.org/tests/view/5a008cbc0ebc590ccbb8a512  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 29282 W: 5317 L: 5210 D: 18755    passed LTC:  http://tests.stockfishchess.org/tests/view/5a00d8530ebc590ccbb8a541  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 26893 W: 3458 L: 3345 D: 20090    Bench: 5015773,True,2,2017-11-01
pb00067,mcostalba,2017-11-05 21:05:51+00:00,Handle BxN trade as good capture when history score is good  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 19374 W: 3499 L: 3294 D: 12581 http://tests.stockfishchess.org/tests/view/59fc23f50ebc590ccbb8a0bf  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 91030 W: 11680 L: 11274 D: 68076 http://tests.stockfishchess.org/tests/view/59fc43ad0ebc590ccbb8a0d0  Bench: 5482249,True,6,2017-11-01
locutus2,mcostalba,2017-11-03 12:57:18+00:00,Introduce capture history table for capture move sorting  Introduce capture move history table indexed by moved piece; target square and captured piece type for sorting capture moves.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 11374 W: 2096 L: 1924 D: 7354 http://tests.stockfishchess.org/tests/view/59fac8dc0ebc590ccbb89fc5  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 24791 W: 3196 L: 3001 D: 18594 http://tests.stockfishchess.org/tests/view/59fae4d20ebc590ccbb89fd9  Bench: 5536775,True,4,2017-11-01
vondele,mcostalba,2017-11-03 12:51:53+00:00,Replace easyMove with simple scheme  Reduces time for a stable bestMove; giving some of the won time for the next move.    the version before the pvDraw passed both STC and LTC    passed STC:  http://tests.stockfishchess.org/tests/view/59e98d5a0ebc590ccbb896ec  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 78561 W: 13945 L: 13921 D: 50695  elo =    0.106 +-    1.445 LOS:   55.716%    passed LTC:  http://tests.stockfishchess.org/tests/view/59eb9df90ebc590ccbb897ae  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 29056 W: 3640 L: 3530 D: 21886  elo =    1.315 +-    1.982 LOS:   90.314%    This version; rebased on pvDrawPR with the obvious change; was verified again on STC:    http://tests.stockfishchess.org/tests/view/59ee104e0ebc590ccbb89899  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 19890 W: 3648 L: 3525 D: 12717  elo =    2.149 +-    2.895 LOS:   92.692%    and LTC:  http://tests.stockfishchess.org/tests/view/59f9673a0ebc590ccbb89ea0  Total             :    17966  Win               :     2273 (  12.652%)  Loss              :     2149 (  11.961%)  Draw              :    13544 (  75.387%)  Score             :   50.345%  Sensitivity       :    0.014%  2*(W-L)/(W+L)     :    5.608%    LLR  [-3.0;  1.0] :     2.95    BayesElo range    : [  -1.161;   4.876;  10.830] (DrawElo:  341.132)  LogisticElo range : [  -0.501;   2.105;   4.677]  LOS               :   94.369 %    LTC again:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 17966 W: 2273 L: 2149 D: 13544  LogisticElo range : [ -0.501; 2.105; 4.677]  LOS : 94.369 %    unchanged bench: 5234652,True,4,2017-11-01
Cooffe,mcostalba,2017-10-28 10:35:44+00:00,Update Copyright year inMakefile  No functional change.,True,5,2017-10-01
vondele,mcostalba,2017-10-28 10:33:48+00:00,Extra thinking before accepting draw PVs.  If the PV leads to a draw (3-fold / 50-moves) position and we're ahead of time; think a little longer; possibly finding a better way.  As this is most likely effective at higher draw rates; tried speculative LTC after a yellow STC:  STC: http://tests.stockfishchess.org/tests/view/59eb173a0ebc590ccbb8975d LLR: -2.95 (-2.94;2.94) [0.00;5.00] Total: 56095 W: 10013 L: 9902 D: 36180 elo =    0.688 +-    1.711 LOS:   78.425%  LTC: http://tests.stockfishchess.org/tests/view/59eba1670ebc590ccbb897b4 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 59579 W: 7577 L: 7273 D: 44729 elo =    1.773 +-    1.391 LOS:   99.381%  bench: 5234652,True,5,2017-10-01
IIvec,mcostalba,2017-10-22 05:43:37+00:00,Fix premature using of all available time in x/y TC  In x/y time controls there was a theoretical possibility to use all available time few moves before the clock will be updated with new time. This patch fixes that issue.  Tested at 60/15 time control:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 113963 W: 20008 L: 20042 D: 73913  The test was done without adjudication rules!  Bench 5234652,True,6,2017-10-01
gcp,mcostalba,2017-10-22 05:18:48+00:00,Don't filter root moves if MultiPV mode is enabled  A band-aid patch to workaround current TB code limitations with multi PV.  Hopefully this will be removed after committing the big update of TB impementation; now under discussion.  No functional change.,True,6,2017-10-01
ceebo,mcostalba,2017-10-22 05:00:46+00:00,Add initiative to trace  No functional change,True,6,2017-10-01
vondele,mcostalba,2017-10-11 09:47:50+00:00,Fix issue #1268  If the search is quit before skill.pick_best is called; skill.best_move might be MOVE_NONE.  Ensure skill.best is always assigned anyhow.  Also retire the tricky best_move() and let the underlying semantic to be clear and explicit.  No functional change.,True,2,2017-10-01
Rocky640,mcostalba,2017-10-11 09:13:44+00:00,Simplify bonus for bishop on long diagonal  Removing 2 conditions; and increase the ThreatbyPawn to compensate.  Passed STC http://tests.stockfishchess.org/tests/view/59dbde900ebc5916ff64be6d LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 14236 W: 2615 L: 2483 D: 9138  Passed LTC http://tests.stockfishchess.org/tests/view/59dc26470ebc5916ff64be92 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 16552 W: 2136 L: 2010 D: 12406  Bench: 5234652,True,2,2017-10-01
niklasf,niklasf,2017-10-05 09:00:01+00:00,WLDEntryPiece -> WDLEntryPiece for consistency  No functional change.,True,3,2017-10-01
snicolet,mcostalba,2017-10-02 05:53:28+00:00,Good bishops on the main diagonals  Bonus in midgame for bishops on long diagonals when the central squares are not occupied by pawns.  Author: ElbertoOne  Passed STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 10801 W: 1955 L: 1786 D: 7060 http://tests.stockfishchess.org/tests/view/59cf5c1d0ebc5916ff64b9da  and LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 83978 W: 10685 L: 10303 D: 62990 http://tests.stockfishchess.org/tests/view/59cf6f6c0ebc5916ff64b9e4  Bench: 5620312,True,0,2017-10-01
VoyagerOne,mcostalba,2017-09-30 18:56:27+00:00,Decrease reduction for exact PV nodes  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 59004 W: 10621 L: 10249 D: 38134  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 25801 W: 3306 L: 3108 D: 19387  Bench: 5742466,True,5,2017-09-01
vondele,vondele,2017-09-29 14:39:12+00:00,Measure nodes after search finished.  Only affects nmpsec in the multithreaded case.  No functional change.,True,4,2017-09-01
GuardianRM,mcostalba,2017-09-22 14:48:08+00:00,Tweak statScore condition  The first change (ss->statScore >= 0) does nothing.  The second change ((ss-1)->statScore >= 0 ) has a massive change. (ss-1)->statScore is not set until (ss-1) begins to apply LMR to moves. So we now increase the reduction for bad quiets when our opponent is running through the first captures and the hash move.  STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 57762 W: 10533 L: 10181 D: 37048  LTC LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 19973 W: 2662 L: 2480 D: 14831  Bench: 5037819,True,4,2017-09-01
syzygy1,mcostalba,2017-09-17 08:44:10+00:00,"Let ss->ply denote the number of plies from the root to the current node  This patch lets ss->ply be equal to 0 at the root of the search.  Currently; the root has ss->ply == 1; which is less intuitive:  - Setting the rootNode bool has to check (ss-1)->ply == 0.  - All mate values are off by one: the code seems to assume that mated-in-0   is -VALUE_MATE; mate-1-in-ply is VALUE_MATE-1; mated-in-2-ply is VALUE_MATE+2; etc.   But the mate_in() and mated_in() functions are called with ss->ply; which is 1 in   at the root.  - The is_draw() function currently needs to explain why it has ""ply - 1 > i"" instead   of simply ""ply > i"".  - The ss->ply >= MAX_PLY tests in search() and qsearch() already assume that   ss->ply == 0 at the root. If we start at ss->ply == 1; it would make more sense to   go up to and including ss->ply == MAX_PLY; so stop at ss->ply > MAX_PLY. See also   the asserts testing for 0 <= ss->ply && ss->ply < MAX_PLY.  The reason for ss->ply == 1 at the root is the line ""ss->ply = (ss-1)->ply + 1"" at the start for search() and qsearch(). By replacing this with ""(ss+1)->ply = ss->ply + 1"" we keep ss->ply == 0 at the root. Note that search() already clears killers in (ss+2); so there is no danger in accessing ss+1.  I have NOT changed pv[MAX_PLY + 1] to pv[MAX_PLY + 2] in search() and qsearch(). It seems to me that MAX_PLY + 1 is exactly right:  - MAX_PLY entries for ss->ply running from 0 to MAX_PLY-1; and 1 entry for the   final MOVE_NONE.  I have verified that mate scores are reported correctly. (They were already reported correctly due to the extra ply being rounded down when converting to moves.)  The value of seldepth output to the user should probably not change; so I add 1 to it. (Humans count from 1; computers from 0.)  A small optimisation I did not include: instead of setting ss->ply in every invocation of search() and qsearch(); it could be set once for all plies at the start of Thread::search(). This saves a couple of instructions per node.  No functional change (unless the search searches a branch MAX_PLY deep); so bench does not change.",True,6,2017-09-01
snicolet,mcostalba,2017-09-17 07:52:27+00:00,Score unopposed weak pawns only if majors  Do not use the opposed flag for scoring backward and isolated pawns in pawns.cpp; instead give a S(5;25) bonus for each opponent unopposed weak pawns when we have a rook or a queen on the board.  STC run stopped after 113188 games: LLR: 1.63 (-2.94;2.94) [0.00;5.00] Total: 113188 W: 20804 L: 20251 D: 72133 http://tests.stockfishchess.org/tests/view/59b58e4d0ebc5916ff64b12e  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 66673 W: 8672 L: 8341 D: 49660 http://tests.stockfishchess.org/tests/view/59b902580ebc5916ff64b231  This is Alain Savard's idea; just with a different bonus. Original patch there:  green STC; http://tests.stockfishchess.org/tests/view/597dcd2b0ebc5916ff64a09b yellow LTC; http://tests.stockfishchess.org/tests/view/597ea69e0ebc5916ff64a0e6  Bench: 6259498,True,6,2017-09-01
IIvec,mcostalba,2017-09-12 10:31:53+00:00,Higher Move Overhead  This shoudl reduce time losses experienced by users after new time management code.  Verified for no regression in very short TC (4sec + 0.1) LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 35262 W: 7426 L: 7331 D: 20505  Bench 5322108,True,1,2017-09-01
ianfab,mcostalba,2017-09-09 10:23:34+00:00,Extend ShelterWeakness array by dimension isKingFile  Use different penalties for weaknesses in the pawn shelter depending on whether it is on the king's file or not.  STC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 71617 W: 13471 L: 13034 D: 45112  LTC LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 48708 W: 6463 L: 6187 D: 36058  Bench: 5322108,True,5,2017-09-01
VoyagerOne,mcostalba,2017-09-05 09:03:50+00:00,Streamlline reduction based on movecount  Use MoveCount History only at quiet moves and simply reduce reduction by one depth instead of increasing moveCount in formula.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 27511 W: 5171 L: 4919 D: 17421  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 92337 W: 12135 L: 11748 D: 68454  Bench: 6351176,True,1,2017-09-01
syzygy1,mcostalba,2017-09-05 08:57:10+00:00,Small simplication of see_ge()  Two simplifications:  - Remove the initialisation to 0 of occupied; which is now unnecessary. - Remove the initial check for nextVictim == KING  If nextVictim == KING; then PieceValue[MG][nextVictim] will be 0; so that balance >= threshold is true. So see_ge() returns true anyway.  No functional change.,True,1,2017-09-01
mcostalba,mcostalba,2017-09-05 08:40:34+00:00,Travis CI: Make all warnings into errors  Compile with -Werror flag. To make debugging easier also show compile ourput.  This flag is enabled only in Travis CI; not in the shipped Makefile becuase we can't test on every possible platform.,True,1,2017-09-01
vondele,vondele,2017-09-02 14:58:23+00:00,Remove unneeded compile options.  In light of issue #1232; a test was performed about the value of '-fno-exceptions' and a second one of the combination '-fno-exceptions -fno-rtti'. It turns out these options are can be removed without introducing slowdown.  STC for removing '-fno-exceptions' LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 13678 W: 2572 L: 2439 D: 8667  STC for removing '-fno-exceptions -fno-rtti' (current patch) LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 32557 W: 6074 L: 5973 D: 20510  No functional change.,True,5,2017-09-01
syzygy1,mcostalba,2017-09-02 07:59:04+00:00,Prevent Stockfish from exiting if DTZ table is not present  During TB initialisation; Stockfish checks for the presence of WDL tables but not for the presence of DTZ tables. When attempting to probe a DTZ table; it is therefore possible that the table is not present. In that case; Stockfish should neither exit nor report an error.  To verify the bug: $ ./stockfish setoption name SyzygyTable value <path_to_WDL_dir> position fen 8/8/4r3/4k3/8/1K2P3/3P4/6R1 w - - go infinite Could not mmap() /opt/tb/regular/KRPPvKR.rtbz $  (On my system; the WDL tables are in one directory and the DTZ tables in another. If they are in the same directory; it will be difficult to trigger the bug.)  The fix is trivial: check the file descriptor/handle after opening the file.  No functional change.,True,5,2017-09-01
mcostalba,mcostalba,2017-09-01 18:23:31+00:00,Fix a warning with MSVC  warning C4244: '*=': conversion from 'double' to 'int'; possible loss of data  No functional change.,True,4,2017-09-01
vondele,mcostalba,2017-09-01 18:19:43+00:00,Multi-threaded search testing with valgrind  Also check with valgrind the multi-threaded search.  On top of the fix for issue #1227 (PR #1235).  No functional change.,True,4,2017-09-01
vondele,mcostalba,2017-09-01 18:16:56+00:00,Fix uninitialized memory usage  After increasing the number of threads; the histories were not cleared; resulting in uninitialized memory usage.  This patch fixes this by clearing threads histories in Thread c'tor as is the idomatic way.  This fixes issue 1227  No functional change.,True,4,2017-09-01
VoyagerOne,mcostalba,2017-08-31 06:53:37+00:00,Adjust moveCount history only at LMR  STC: LLR: 3.32 (-2.94;2.94) [-3.00;1.00] Total: 17584 W: 3277 L: 3131 D: 11176  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 26412 W: 3447 L: 3334 D: 19631  Bench: 5417521,True,3,2017-08-01
vondele,mcostalba,2017-08-30 13:02:40+00:00,Simplify away non-normal moves in SEE  credit goes to @mstembera for suggesting this approach. SEE now deals with castling; promotion and en passant in a similar way.  passed STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32902 W: 6079 L: 5979 D: 20844  passed LTC LLR: 3.92 (-2.94;2.94) [-3.00;1.00] Total: 110698 W: 14198 L: 14145 D: 82355  Bench: 5713905,True,2,2017-08-01
mcostalba,mcostalba,2017-08-26 09:50:27+00:00,Appveyor: do a Debug and Release build  And set x86 and x64 platforms for real.  Currently this is broken and the same binary is compiled for all platforms.  This is becuase we use a custom build step. OTH the default build step seems not compatible with cmake generated *sln file.  No functional change.,True,5,2017-08-01
vondele,mcostalba,2017-08-26 07:53:34+00:00,Improve multi-threaded mate finding  If any thread found a 'mate in x' stop the search. Previously only mainThread would do so. Requires the bestThread selection to be adjusted to always prefer mate scores; even if the search depth is less.  I've tried to collect some data for this patch. On 30 cores; mate finding seems 5-30% faster on average. It is not so easy to get numbers for this; as the time to find a mate fluctuates significantly with multi-threaded runs; so it is an average over 100 searches for the same position. Furthermore; hash size and position make a difference as well.  Bench: 5965302,True,5,2017-08-01
snicolet,mcostalba,2017-08-26 07:34:27+00:00,Count all weak squares in the king ring with a single popcount  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 26966 W: 4993 L: 4745 D: 17228 http://tests.stockfishchess.org/tests/view/599e798a0ebc5916ff64aa8c  and LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 39570 W: 5104 L: 4857 D: 29609 http://tests.stockfishchess.org/tests/view/599ee5230ebc5916ff64aabe  Bench: 5965302,True,5,2017-08-01
vondele,mcostalba,2017-08-26 07:30:42+00:00,Use moveCount history for reduction  Use less reduction for moves with larger moveCount if your opponent did an unexpected (== high moveCount) move in the previous ply... unexpected moves might need unexpected answers.  passed STC: http://tests.stockfishchess.org/tests/view/599f08cc0ebc5916ff64aace LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 9638 W: 1889 L: 1720 D: 6029  passed LTC: http://tests.stockfishchess.org/tests/view/599f1e5c0ebc5916ff64aadc LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 28308 W: 3742 L: 3533 D: 21033  Bench: 5747429,True,5,2017-08-01
snicolet,mcostalba,2017-08-22 08:16:19+00:00,Avoid constructing an empty tuple in qsearch  Avoid constructing; passing as a parameter and binding a useless empty tuple of pointers in the qsearch move picker constructor.  Also reformat the scoring function in movepicker.cpp and do some cleaning in evaluate.cpp while there.  No functional change.,True,1,2017-08-01
mcostalba,mcostalba,2017-08-20 17:22:11+00:00,Improve appeyor build  Check bench number and do not hard-code *.cpp file names.  No functional change.,True,6,2017-08-01
lucasart,lucasart,2017-08-20 12:00:31+00:00,"Restore safety margin of 60ms  What this patch does is: * increase safety margin from 40ms to 60ms. It's worth noting that the previous   code not only used 60ms incompressible safety margin; but also an additional   buffer of 30ms for each ""move to go"". * remove a whart; integrating the extra 10ms in Move Overhead value instead.   Additionally; this ensures that optimumtime doesn't become bigger than maximum   time after maximum time has been artificially discounted by 10ms. So it keeps   the code more logical.  Tested at 3 different time controls:  Standard 10+0.1 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 58008 W: 10674 L: 10617 D: 36717  Sudden death 16+0 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 59664 W: 10945 L: 10891 D: 37828  Tournament 40/10 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 16371 W: 3092 L: 2963 D: 10316  bench: 5479946",True,6,2017-08-01
mcostalba,mcostalba,2017-08-19 12:32:31+00:00,Fix some Clang warnings  Found by Clang in extra verbose mode :-)  No functional change.,True,5,2017-08-01
mcostalba,mcostalba,2017-08-19 11:58:12+00:00,Wide bench coverage  Add tests for:  - Positions with move list - Chess960 positions  Now bench covers almost all cases; only few endgames are still out of reach (verified with lcov)  It is a non functionality patch; but bench changed because we added new test positions.  bench: 5479946,True,5,2017-08-01
mcostalba,mcostalba,2017-08-18 16:04:38+00:00,Restore perft  Rewrite perft to be placed naturally inside new bench code. In particular we don't have special custom code to run perft anymore but perft is just a new parameter of 'go' command.  So user API is now changed; old style command:  $perft 5  becomes  $go perft 4  No functional change.,True,4,2017-08-01
mcostalba,mcostalba,2017-08-18 16:04:38+00:00,Rewrite benchmark  First step in improving bench to handle arbitrary UCI commands so to test many more code paths.  This first patch just set the new code structure.  No functional change.,True,4,2017-08-01
mcostalba,mcostalba,2017-08-18 15:54:38+00:00,Reformat time manager code  In particular clarify that 'sd' parameter is used only in !movesToGo case.  Verified with Ivan's check tool it is equivalent to original code.  No functional change.,True,4,2017-08-01
vondele,mcostalba,2017-08-18 15:38:40+00:00,Collect more corrections to optimum/maximum  The only call site of Time.maximum() corrected by 10. Do this directly in remaining().  Ponder increased Time.optimum by 25% in init(). Idem. Delete unused includes.  No functional change.,True,4,2017-08-01
mcostalba,mcostalba,2017-08-18 10:07:41+00:00,Speed up Trevis CI  Avoid a couple of redundant rebuilds and compile with 2 threads since travis gives 2vCPUs.  Also enable -O1 optimization for valgrind and sanitizers; it should be safe withouth false positives and it gives a very sensible speed up; especially with valgrind.  The spee dup allow us to increase testing to depth 10; useful for thread sanitizer.  No functional change.,True,4,2017-08-01
mcostalba,mcostalba,2017-08-18 09:02:35+00:00,Clarify stats range  Current update formula ensures that the possible value range is [-32 * D; 32 * D].  So we never overflow if abs(32 * D) < INT16_MAX  Thanks to Joost and mstembera to clarify this.  No functional change.,True,4,2017-08-01
IIvec,mcostalba,2017-08-17 21:42:22+00:00,Time management simplification  STC (http://tests.stockfishchess.org/tests/view/598188a40ebc5916ff64a21b): LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 25363 W: 4658 L: 4545 D: 16160  LTC (http://tests.stockfishchess.org/tests/view/5981d59a0ebc5916ff64a229): LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 75356 W: 9690 L: 9640 D: 56026  40/10 TC (http://tests.stockfishchess.org/tests/view/5980c5780ebc5916ff64a1ed): LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 19377 W: 3650 L: 3526 D: 12201  15+0 TC (http://tests.stockfishchess.org/tests/view/5982cb730ebc5916ff64a25d): LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 5913 W: 1217 L: 1069 D: 3627  This time management handles base time and movestogo cases separatelly. One can test one case without affecting the other. Also; increment usage can be tested separately without (necessarily) affecting sudden death or x moves in y seconds performance.  On stable machines there are no time losses on 0.1+0.001 time control (tested on i7 + Windows 10 platform).  Bench 5608839,True,3,2017-08-01
mcostalba,mcostalba,2017-08-17 09:04:00+00:00,Fix involuntary conversions of ExtMove to Move  The trick is to create an ambiguity for the compiler in case an unwanted conversion to Move is attempted like in:      ExtMove m1{Move(17);4}; m2{Move(4);17};      std::cout << (m1 < m2) << std::endl; // 1     std::cout << (m1 > m2) << std::endl; // 1(!)  This fixes issue #1204  No functional change.,True,3,2017-08-01
mcostalba,mcostalba,2017-08-17 08:52:26+00:00,Unify stats update()  Now that is a bit bigger makes sense to unify some duplicated code.  No functional change.,True,3,2017-08-01
lucasart,mcostalba,2017-08-17 07:32:44+00:00,Use int16_t in History values  Reduces memory footprint by ~1.2MB (per thread).  Strong pressure: small but mesurable gain LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 258430 W: 46977 L: 45943 D: 165510  Low pressure: no regression LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 73542 W: 13058 L: 13026 D: 47458  Strong pressure + LTC: elo gain confirmed LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 31489 W: 4532 L: 4295 D: 22662  Tested for crashing on overflow and after 70K games at STC we have only 4 time losses; possible candidate for an overflow.  No functional change.,True,3,2017-08-01
mcostalba,mcostalba,2017-08-15 06:01:58+00:00,Fix incorrect StateInfo  We use Position::set() to set root position across threads. But there are some StateInfo fields (previous; pliesFromNull; capturedPiece) that cannot be deduced from a fen string; so set() clears them and to not lose the info we need to backup and later restore setupStates->back(). Note that setupStates is shared by threads but is accessed in read-only mode.  This fixes regression introduced by df6cb446eaf21  Tested with 3 threads at STC: LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 14436 W: 2304 L: 2196 D: 9936  Bench: 5608839,True,1,2017-08-01
mcostalba,mcostalba,2017-08-13 12:46:21+00:00,Run clang-tidy 'modernize'  Some warnings after a run of:  $ clang-tidy-3.8 -checks='modernize-*' *.cpp syzygy/*.cpp -header-filter=.* -- -std=c++11  I have not fixed all suggestions; for instance I still prefer to declare the type instead of a spread use of 'auto'. I also perfer good old 'typedef' to the new 'using' form.  I have not fixed some warnings in the last functions of syzygy code because those are still the original functions and need to be completely rewritten anyhow.  Thanks to erbsenzaehler for the original idea.  No functional change.,True,6,2017-08-01
mcostalba,mcostalba,2017-08-13 11:41:59+00:00,Thread code reformat  Simplify out low level sync stuff (mutex and friends) and avoid to use them directly in many functions.  Also some renaming and better comment while there.  No functional change.,True,6,2017-08-01
mcostalba,mcostalba,2017-08-13 06:54:48+00:00,Retire States global variable  And other small touches in uci.cpp  No functional change.,True,6,2017-08-01
tthsqe12,mcostalba,2017-08-12 09:47:11+00:00,Fix the handling of opposite bishops in KXK endgame evaluation  The case of three or more bishops against a long king must look at all of the bishops and not just the first two in the piece lists. This patch makes sure that the position is treated as a win when there are bishops on opposite colors. This functional change is very small because bench remains the same.  LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 24249 W: 4349 L: 4275 D: 15625 http://tests.stockfishchess.org/tests/view/598186530ebc5916ff64a218  Bench: 5608839,True,5,2017-08-01
vondele,mcostalba,2017-08-11 05:42:52+00:00,Simplify finished search in ponder/infinite mode.  In this rare case (e.g. go infinite on a stalemate); just spin till ponderhit/stop comes.  The Thread::wait() is a renmant of the old YBWC code; today with lazy SMP; threads don't need to wait when outside of their idle loop.  No functional change.,True,4,2017-08-01
mcostalba,mcostalba,2017-08-10 19:47:31+00:00,Re-apply the fix for Limits::ponder race  But this time correctly set Threads.ponder  We avoid using 'limits' for passing pondering flag because we don't want to have 2 ponder variables in search scope: Search::Limits.ponder and Threads.ponder. This would be confusing also because limits.ponder is set at the beginning of the search and never changes; instead Threads.ponder can change value asynchronously during search.  No functional change.,True,3,2017-08-01
mcostalba,mcostalba,2017-08-10 17:59:38+00:00,"Revert ""Fix a race on Limits::ponder""  This reverts commit 5410424e3d036b43715c7989aa99e449cdcde18e.  After the commit pondering is broken; so revert for now. I will resubmit with a proper fix.  The issue is mine; Joost original code is correct.  No functional change.",True,3,2017-08-01
vondele,mcostalba,2017-08-10 17:46:46+00:00,"Fix a race on Limits::ponder  Limits::ponder was used as a signal between uci and search threads; but is not an atomic variable; leading to the following race as flagged by a sanitized binary.  Expect input: ```  spawn  ./stockfish  send ""uci\n""  expect ""uciok""  send ""setoption name Ponder value true\n""  send ""go wtime 4000 btime 4000\n""  expect ""bestmove""  send ""position startpos e2e4 d7d5\n""  send ""go wtime 4000 btime 4000 ponder\n""  sleep 0.01  send ""ponderhit\n""  expect ""bestmove""  send ""quit\n""  expect eof ```  Race: ``` WARNING: ThreadSanitizer: data race (pid=7191)   Read of size 4 at 0x0000005c2260 by thread T1:    Previous write of size 4 at 0x0000005c2260 by main thread:    Location is global 'Search::Limits' of size 88 at 0x0000005c2220 (stockfish+0x0000005c2260) ```  The reason of teh race is that ponder is not just set in UCI go() assignment but also is signaled by an async ponderhit in uci.cpp:        else if (token == ""ponderhit"")           Search::Limits.ponder = 0; // Switch to normal search  The fix is to add an atomic bool to the threads structure to signal the ponder status; letting Search::Limits to reflect just what was passed to 'go'.  No functional change.",True,3,2017-08-01
mcostalba,mcostalba,2017-08-10 17:19:56+00:00,Fix some races and clarify the code  Better split code that should be run at startup from code run at ucinewgame. Also fix several races when 'bench'; 'perft' and 'ucinewgame' are sent just after 'bestomve' from the engine threads are still running.  Also use a specific UI thread instead of main thread when setting up the Position object used by UI uci loop. This fixes a race when sending 'eval' command while searching.  We accept a race on 'setoption' to allow the GUI to change an option while engine is searching withouth stalling the pipe. Note that changing an option while searchingg is anyhow not mandated by UCI protocol.  No functional change.,True,3,2017-08-01
AndyGrant,mcostalba,2017-08-10 17:04:30+00:00,Make variable naming consistent  moved_piece is the only variable in search not using camel case,True,3,2017-08-01
vondele,mcostalba,2017-08-10 09:06:21+00:00,Unify scoring functions in MovePicker  No functional change.,True,3,2017-08-01
vondele,mcostalba,2017-08-06 08:45:54+00:00,Remove Stack/thread dependence in movepick  as a lower level routine; movepicker should not depend on the search stack or the thread class; removing a circular dependency. Instead of copying the search stack into the movepicker object; as well as accessing the thread class for one of the histories; pass the required fields explicitly to the constructor (removing the need for thread.h and implicitly search.h in movepick.cpp). The signature is thus longer; but more explicit:  Also some renaming of histories structures while there.  passed STC [-3;1]; suggesting a small elo impact:  LLR: 3.13 (-2.94;2.94) [-3.00;1.00] Total: 381053 W: 68071 L: 68551 D: 244431 elo =   -0.438 +-    0.660 LOS:    9.7%  No functional change.,True,6,2017-08-01
snicolet,zamar,2017-08-02 01:41:29+00:00,Tweak connected pawns seed[] array values  Raise a little bit the values in the connected pawns seed[] array.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 99033 W: 17939 L: 17448 D: 63646 http://tests.stockfishchess.org/tests/view/597355630ebc5916ff649e3e  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 48044 W: 6371 L: 6099 D: 35574 http://tests.stockfishchess.org/tests/view/597596610ebc5916ff649eba  Bench: 5608839  Closes #1182,True,2,2017-08-01
Rocky640,zamar,2017-08-02 01:37:54+00:00,"Rework the ""unsupported"" penalty into a ""supported"" bonus  A pawn (according to all the searched positions of a bench run) is not supported 85% of the time; (in current master it is either isolated; backward or ""unsupported"").  So it made sense to try moving the S(17; 8) ""unsupported"" penalty value into the base pawn value hoping for a more representative pawn value; and accordingly a) adjust backward and isolated so that they stay more or less the same as master b) increase the mg connected bonus in the supported case by S(17; 0) and let the Connected formula find a suitable eg value according to rank.  Tested as a simplification SPRT(-3; 1)  Passed STC http://tests.stockfishchess.org/tests/view/5970dbd30ebc5916ff649dd6 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 19613 W: 3663 L: 3540 D: 12410  Passed LTC http://tests.stockfishchess.org/tests/view/597137780ebc5916ff649de3 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 24721 W: 3306 L: 3191 D: 18224  Bench: 5581946  Closes #1179",True,2,2017-08-01
VoyagerOne,zamar,2017-07-27 09:14:18+00:00,Remove redundant if-statements  No functional change  Closes #1173,True,3,2017-07-01
Unknown,zamar,2017-07-24 00:35:44+00:00,Tuned PSQT using a custom tuner.  bench: 5878420  Closes #1177,True,0,2017-07-01
VoyagerOne,zamar,2017-07-24 00:25:23+00:00,Simplify aspiration window  Don't modify alpha window on fail-high  Bench: 5875983  Closes #1172,True,0,2017-07-01
vondele,zamar,2017-07-24 00:23:14+00:00,Faster travis checks  in the last month a couple of timeouts have been seen in travis valgrind testing; leading to undesired false positives. The precise cause of this is unclear: a normal valgrind instrumented run is about 6min; the timeout is 10min. Either there are rare hangs (not reproduced locally); or maybe the actual runtime fluctuates on the travis infrastructure (which uses VMs on AWS as far as I know). This patch leads to roughly a 2x speedup of the instrumented testing by reducing the depth from 10 to 9. If timeouts persist; it needs further analysis.  No functional change.  Closes #1171,True,0,2017-07-01
mcostalba,mcostalba,2017-07-15 05:28:38+00:00,Move game_phase() to material.cpp  For some reason; although game phase is used only in material; it is computed in Position.  Move computation to material; where it belongs; and remove the useless call chain.  No functional change.,True,5,2017-07-01
zamar,zamar,2017-07-13 23:36:27+00:00,"Revert ""Remove questionable gcc flags from profile-build""  This reverts commit 0371a8f8c4a043cb3e7d08b5b8e7d08d49f28324.",True,3,2017-07-01
joergoster,zamar,2017-07-13 23:30:03+00:00,Provide selective search depth info for each pv move  No functional change  Closes #1166,True,3,2017-07-01
vondele,zamar,2017-07-13 23:08:37+00:00,Move stop signal to Threads  Instead of having Signals in the search namespace; make the stop variables part of the Threads structure. This moves more of the shared (atomic) variables towards the thread-related structures; making their role more clear.  No functional change  Closes #1149,True,3,2017-07-01
zamar,zamar,2017-07-08 21:20:46+00:00,Remove questionable gcc flags from profile-build  Optimization options for official stockfish should be consistent; easy; future proof and simple.  We don't want to optimize for any specific version of gcc  No functional change  Closes #1165,True,5,2017-07-01
GuardianRM,zamar,2017-07-08 21:14:14+00:00,Queen vs. Minors imbalance  Addition of correction values in case of Imbalance of queens; depending on the number of light pieces on the side without a queen.  Passed patch:  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 29036 W: 5379 L: 5130 D: 18527  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 13680 W: 1836 L: 1674 D: 10170  Bench: 6258930  Closes #1155,True,5,2017-07-01
mcostalba,zamar,2017-07-03 05:06:47+00:00,Don't uselessy share rootDepth  It is not needed becuase the only case is a real special one (bench on depth with many threads) and can be easily rewritten to avoid sharing rootDepth.  Verified with ThreadSanitizer.  No functional change.  Closes #1159,True,0,2017-07-01
mcostalba,zamar,2017-07-03 05:02:11+00:00,Fix some warnings with clang static analyzer  Only one remains (also in tbprobe.cpp); but is bougus.  As a side note; tbprobe.cpp is almost clean; only the last 3 functions probe_wdl(); root_probe() and root_probe_wdl() are still the original ones and are quite hacky.  Somewhere in the future we will reformat also the last 3 ones. The reason why has not been done before it is because these functions are really wrong by design and should be rewritten entirely; not only reformatted.  No functional change.  Closes #1160,True,0,2017-07-01
mcostalba,zamar,2017-07-03 05:00:29+00:00,Indentation fix in index()  No functional change.  Closes #1158,True,0,2017-07-01
Rocky640,zamar,2017-07-03 04:53:45+00:00,Tidy up  No functional change  Closes #1148,True,0,2017-07-01
Unknown,zamar,2017-06-29 00:11:17+00:00,Magic::index()  Make magic_index() a member of Magic since it uses all it's members and keep us from having to pass the function pointer around to init_magics().  No functional change  Closes #1146,True,3,2017-06-01
vondele,zamar,2017-06-29 00:06:52+00:00,Remove race suppression.  Pull #1134 fixed another race; so that can be removed from the thread sanitizer suppressions.  No functional change.  Closes #1150,True,3,2017-06-01
mcostalba,zamar,2017-06-29 00:03:35+00:00,Only main thread checks time  The main change of the patch is that now time check is done only by main thread. In the past; before lazy SMP; we needed all the threds to check for available time because main thread could have been blocked on a split point; now this is no more the case and main thread can do the job alone; greatly simplifying the logic.  Verified for regression testing on STC with 7 threads: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 11895 W: 1741 L: 1608 D: 8546  No functional change.  Closes #1152,True,3,2017-06-01
mcostalba,zamar,2017-06-28 23:54:59+00:00,Simplify pos_is_ok()  Now we don't need anymore the tricky pointer to show the failed test. Added some few tests too.  Also small rename in see_ge() while there.  No functional change  Closes #1151,True,2,2017-06-01
VoyagerOne,zamar,2017-06-21 21:06:05+00:00,Increase reduction if tt-move is a capture  The idea is that chances are the tt-move is best and will be difficult to raise alpha when playing a quiet move.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 7582 W: 1415 L: 1259 D: 4908  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 59553 W: 7885 L: 7573 D: 44095  Bench: 5725676  Closes #1147,True,2,2017-06-01
snicolet,zamar,2017-06-21 21:01:59+00:00,"Improve readability of evaluation functions  This patch puts the evaluation helper functions inside EvalInfo struct; which simplifies a bit their signature and (most importantly; IMHO) makes their C++ code much cleaner and simpler to read (by removing the ""ei."" qualifiers all around in evaluate.cpp).  Also rename the EvalInfo struct into Evaluation class to get a natural invocation v = Evaluation(p).value() to evaluation position p.  The downside is an increase of 20 lines in evaluate.cpp (for the prototypes of the helper functions). The upsides are better readability and a speed-up of 0.6% (by generating all the helpers for the NO_TRACE case together; which helps the instruction cache).  No functional change  Closes #1135",True,2,2017-06-01
VoyagerOne,zamar,2017-06-21 20:47:10+00:00,Update Top CPU - Bench:  6599721  Closes #1145,True,2,2017-06-01
zamar,zamar,2017-06-21 20:45:03+00:00,"Revert ""Prefetch earlier in qsearch()""  This reverts commit b73016bb41d4c2fad3126b2e0018d71a36e78331.  No functional change  Closes #1144",True,2,2017-06-01
vondele,zamar,2017-06-21 20:37:58+00:00,Fix four data races.  the nodes; tbHits; rootDepth and lastInfoTime variables are read by multiple threads; but not declared atomic; leading to data races as found by -fsanitize=thread. This patch fixes this issue. It is based on top of the CI-threading branch (PR #1129); and should fix the corresponding CI error messages.  The patch passed an STC check for no regression:  http://tests.stockfishchess.org/tests/view/5925d5590ebc59035df34b9f LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 169597 W: 29938 L: 30066 D: 109593  Whereas rootDepth and lastInfoTime are not performance critical; nodes and tbHits are. Indeed; an earlier version using relaxed atomic updates on the latter two variables failed STC testing (http://tests.stockfishchess.org/tests/view/592001700ebc59035df34924); which can be shown to be due to x86-32 (http://tests.stockfishchess.org/tests/view/592330ac0ebc59035df34a89). Indeed; the latter have no instruction to atomically update a 64bit variable. The proposed solution thus uses a variable in Position that is accessed only by one thread; which is copied every few thousand nodes to the shared variable in Thread.  No functional change.  Closes #1130 Closes #1129,True,2,2017-06-01
Rocky640,zamar,2017-06-17 02:55:30+00:00,Misc coding style fixes  a few comment and blank fixes.  No functional change  Closes #1141,True,5,2017-06-01
snicolet,zamar,2017-06-17 02:52:38+00:00,Prefetch earlier in qsearch()  Closes #1139,True,5,2017-06-01
mcostalba,zamar,2017-06-17 02:33:44+00:00,Better naming in endgame code  And small clean-up of magic bitboards code.  No functional change.  Closes #1138,True,5,2017-06-01
SapphireBrand,zamar,2017-06-17 02:30:19+00:00,Move depth calculation in probCut  The change passed an STC regression:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 59350 W: 10793 L: 10738 D: 37819  I verified that there was no change in performance on my machine; but of course YMMV:  Results for 40 tests for each version:                  Base      Test      Diff         Mean    2014338   2016121   -1783         StDev   62655     63441     3860  p-value: 0.678 speedup: 0.001  No functional change.  Closes #1137,True,5,2017-06-01
vondele,zamar,2017-06-17 02:20:01+00:00,Call TT.new_search() earlier.  TT.new_search() was being called by mainThread in Thread::search(). However; mainThread is the last to start searching; and helper threads could reach a measured rootDepth 10 (on 64 cores) before mainThread increments the TT generation. Fixed by moving the call to MaintThread::search() before helper threads start searching.  No functional change.  Closes #1134,True,5,2017-06-01
Unknown,zamar,2017-06-06 17:22:12+00:00,Reordering magic data  Gather all magic relevant data into a struct.  This changes memory layout putting everything necessary for processing a single square in the same memory location thus speeding up access.  Original patch by @snicolet  No functional change.  Closes #1127 Closes #1128,True,1,2017-06-01
Unknown,zamar,2017-06-06 17:15:13+00:00,Don't score as an immediate draw 2-fold repetitions of the root position  In the current version a search stops when the current position is the same as any position earlier in the search stack; including the root position but excluding positions before the root. The new version makes an exception for repeating the root position.  This gives correct scores for moves in the MultiPV > 1 mode.  Fixes #948 (see it for the detailed description of the bug).  LTC: http://tests.stockfishchess.org/tests/view/587910bc0ebc5915193f754b ELO: 0.38 +-1.7 (95%) LOS: 66.8% Total: 40000 W: 5166 L: 5122 D: 29712  STC: http://tests.stockfishchess.org/tests/view/5922e6230ebc59035df34a50 LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 94622 W: 17059 L: 17064 D: 60499   LTC: http://tests.stockfishchess.org/tests/view/59273a000ebc59035df34c03 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 61259 W: 7965 L: 7897 D: 45397  Bench: 6599721  Closes #1126,True,1,2017-06-01
vondele,zamar,2017-06-06 16:56:13+00:00,use auto& for histories  No functional change.  Closes #1113,True,1,2017-06-01
mcostalba,web-flow,2017-05-26 06:42:50+00:00,History code rewrite (#1122)  Rearrange and rename all history heuristic code. Naming  is now based on chessprogramming.wikispaces.com conventions  and the relations among the various heuristics are now more  clear and consistent.    No functional change.,True,4,2017-05-01
nmrugg,zamar,2017-05-24 03:27:30+00:00,"Changed spelling back to ""Bishops"" in eval output  No functional change.  Closes #1124",True,2,2017-05-01
VoyagerOne,zamar,2017-05-22 01:27:57+00:00,Evasion Pruning Tweak  Use moveCount to decide when to prune for evasion pruning  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 24476 W: 4518 L: 4289 D: 15669  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 18362 W: 2476 L: 2298 D: 13588  Bench: 6469989  Closes #1120,True,0,2017-05-01
snicolet,zamar,2017-05-18 01:24:43+00:00,Do check analysis later in the game  The previous patch has added a fraction of the king danger score to the endgame score of the tapered eval; so it seems natural to perform the king danger computation later in the endgame.  With this patch we extend the limit of such check analysis down to the material of Rook+Knight; when we have at least two pieces attacking the opponent king zone.  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 7446 W: 1409 L: 1253 D: 4784 http://tests.stockfishchess.org/tests/view/591c097c0ebc59035df3477c  and LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 14234 W: 1946 L: 1781 D: 10507 http://tests.stockfishchess.org/tests/view/591c24f10ebc59035df3478c  Bench: 5975183  Closes #1121,True,3,2017-05-01
snicolet,zamar,2017-05-18 01:19:47+00:00,Use a fraction of king danger in endgame score  When SF has an attack on the opponent king in one flank; the huge midgame -> endgame gradient of the tapered eval prevents us to properly evaluate neutral exchanges on the other flank as the current king danger score is a pure midgame term. This may affect SF's ability to switch to defense in some positions. We add a small contribution of the king danger to the endgame score to limit this effect.  Again suggested in the following forum thread: https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/xrUCQ7b0ObE  Passed STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 12719 W: 2371 L: 2192 D: 8156 http://tests.stockfishchess.org/tests/view/5919761a0ebc59035df3468f  And LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 31293 W: 4194 L: 3974 D: 23125 http://tests.stockfishchess.org/tests/view/591980450ebc59035df34695  Bench: 5961548  Closes #1118,True,3,2017-05-01
vondele,zamar,2017-05-18 01:15:01+00:00,Fix memory access in Search::clear()  Fixes a bug in Search::clear; where the filling of CounterMoveStats&; overwrote (currently presumably unused) memory because sizeof(cm) returns the size in bytes; whereas elements was needed.  No functional change  Closes #1119,True,3,2017-05-01
snicolet,zamar,2017-05-16 02:28:37+00:00,Limit king ring to eight squares  In current master the size of the king ring varies abruptly from eight squares when the king is in g8; to 12 squares when it is in g7. Because the king ring is used for estimating attack strength; this may lead to an overestimation of king danger in some positions. This patch limits the king ring to eight squares in all cases.   Inspired by the following forum thread: https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/xrUCQ7b0ObE  Passed STC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 9244 W: 1777 L: 1611 D: 5856  and LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 87121 W: 11765 L: 11358 D: 63998  Bench: 6121121  Closes #1115,True,1,2017-05-01
vondele,zamar,2017-05-16 01:54:13+00:00,Execute an implied ucinewgame at startup  execute an implied ucinewgame upon entering the UCI::loop; to make sure that searches starting with and without an (optional) ucinewgame command yield the same search.  This is needed now that seach::clear() initializes tables to non-zero default values.  No functional change  Closes #1101 Closes #1104,True,1,2017-05-01
mcostalba,mcostalba,2017-05-10 16:20:45+00:00,Default argument for see_ge()  No functional change.  Closes #1111,True,2,2017-05-01
vondele,zamar,2017-05-10 01:36:32+00:00,Remove int to int conversion; unused include.  No functional change.  Closes #1112,True,2,2017-05-01
FauziAkram,zamar,2017-05-08 04:11:51+00:00,Linear Protector bonus by distance  Replacing the old Protector table with a simple linear formula which takes into account a different slope for each different piece type.  The idea of this simplification of Protector is originated by Alain (Rocky)  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 70382 W: 12859 L: 12823 D: 44700  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 61554 W: 8098 L: 8031 D: 45425  Bench: 6107863  Closes #1099,True,0,2017-05-01
IIvec,zamar,2017-05-08 03:57:29+00:00,King safety and rook mobility parameters tweak  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 19280 W: 3595 L: 3373 D: 12312  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 221405 W: 28940 L: 28220 D: 164245  Bench: 6506664  Closes #1105,True,0,2017-05-01
locutus2,zamar,2017-05-08 03:51:52+00:00,Bonus for pawn scrifice which create passed pawn  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 16752 W: 3141 L: 2944 D: 10667  LTC: LLR: 3.34 (-2.94;2.94) [0.00;5.00] Total: 33928 W: 4544 L: 4300 D: 25084  Bench: 5639223  Closes #1092,True,0,2017-05-01
mcostalba,zamar,2017-05-08 03:20:02+00:00,Move Pieces[] out of global visibility  It is an helper array used only in position.cpp  Also small code tidy up while there.  No functional change.  Closes #1106,True,0,2017-05-01
Unknown,zamar,2017-05-08 03:15:56+00:00,Avoid *begin always being included in the sorted list regardless of its value.  This was a minor criticism by @zamar in the original pull request https://github.com/official-stockfish/Stockfish/pull/1065 necessitating a comment explanation.  No functional change.  Closes #1091,True,0,2017-05-01
joergoster,zamar,2017-05-04 02:46:40+00:00,Fix multiPV issue #502  In general; this patch handles the cases where we don't have a valid score for each PV line in a multiPV search. This can happen if the search has been stopped in an unfortunate moment while still in the aspiration loop. The patch consists of two parts.  Part 1: The new PVIdx was already part of the k-best pv's in the last iteration; and we therefore have a valid pv and score to output from the last iteration. This is taken care of with:        bool updated = (i <= PVIdx && rootMoves[i].score != -VALUE_INFINITE);  Case 2: The new PVIdx was NOT part of the k-best pv's in the last iteration; and we have no valid pv and score to output. Not from the current nor from the previous iteration. To avoid this; we are now also considering the previous score when sorting; so that the PV lines with no actual but with a valid previous score are pushed up again; and the previous score can be displayed.    bool operator<(const RootMove& m) const {     return m.score != score ? m.score < score : m.previousScore < previousScore; } // Descending sort  I also added an assertion in UCI::value() to possibly catch similar issues earlier.  No functional change.  Closes #502 Closes #1074,True,3,2017-05-01
vondele,zamar,2017-04-30 15:43:43+00:00,gcc 7 port  Testing the release candidate revealed only one minor issue; namely a new warning -Wimplicit-fallthrough (part of -Wextra) triggers in the movepicker. This can be silenced by adding a comment; and once we move to c++17 by adding a standard annotation [[fallthrough]];.  No functional change.  Closes #1090,True,6,2017-04-01
VoyagerOne,zamar,2017-04-29 03:40:45+00:00,Don't do InCheck Pruning at the root of QS  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 34603 W: 6441 L: 6167 D: 21995  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 24474 W: 3274 L: 3076 D: 18124  Bench: 5934421  Closes #1089,True,5,2017-04-01
Rocky640,zamar,2017-04-29 03:38:03+00:00,Remove cap in kingDanger initialization  Passed STC http://tests.stockfishchess.org/tests/view/58fd53be0ebc59035df33eb5 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 52048 W: 9397 L: 9329 D: 33322  Passed LTC http://tests.stockfishchess.org/tests/view/58ff9e0a0ebc59035df33f5c LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 35382 W: 4650 L: 4549 D: 26183  Bench: 5872717  Closes #1087,True,5,2017-04-01
mcostalba,zamar,2017-04-29 03:33:30+00:00,Retire the misdesigned StepAttacks[] array.  StepAttacks[] is misdesigned; the color dependance is specific to pawns; and trying to generalise to king and knights; proves neither useful nor convinient in practice.  So this patch reformats the code with the following changes:  - Use PieceType instead of Piece in attacks_() functions  - Use PseudoAttacks for KING and KNIGHT  - Rename StepAttacks[] into PawnAttacks[]  Original patch and idea from Alain Savard.  No functional change.  Closes #1086,True,5,2017-04-01
vondele,zamar,2017-04-29 03:29:04+00:00,Copy killers in the movepicker  ss->killers can change while the movepicker is active. The reason ss->killers changes is related to the singular extension search in the moves loop that calls search<> recursively with ss instead of ss+1; effectively using the same stack entry for caller and callee. By making a copy of the killers; the movepicker does the right thing nevertheless.  Tested as a bug fix  STC: http://tests.stockfishchess.org/tests/view/58ff130f0ebc59035df33f37 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 70845 W: 12752 L: 12716 D: 45377  LTC: http://tests.stockfishchess.org/tests/view/58ff48000ebc59035df33f3d LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 28368 W: 3730 L: 3619 D: 21019  Bench: 6465887  Closes #1085,True,5,2017-04-01
snicolet,zamar,2017-04-26 00:57:49+00:00,Avoid misuse of StepAttacksBB for pawns  Make it explicit that first index of StepAttacksBB is a piece; not a piece type.  No functional change  Closes #1083,True,2,2017-04-01
vondele,zamar,2017-04-26 00:21:36+00:00,Zero unused constant  No functional change  Closes #1081,True,2,2017-04-01
mcostalba,mcostalba,2017-04-24 07:49:44+00:00,Assorted code style issues  I have removed the check for   pieceCount[PAWN] > FILE_NB  because totally useless.  No functional change.,True,0,2017-04-01
vondele,zamar,2017-04-23 15:37:55+00:00,Sort moves partially: linear depth dependence  STC: http://tests.stockfishchess.org/tests/view/58f98d260ebc59035df33d5e LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 58958 W: 10862 L: 10485 D: 37611  LTC: http://tests.stockfishchess.org/tests/view/58fa45d40ebc59035df33d86 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 18607 W: 2427 L: 2251 D: 13929  Bench: 6065528  Closes #1079,True,6,2017-04-01
IIvec,zamar,2017-04-23 15:04:03+00:00,King safety parameters improved  STC: LLR: 2.97 (-2.94;2.94) [0.00;4.00] Total: 58648 W: 10883 L: 10524 D: 37241  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 52546 W: 7131 L: 6844 D: 38571  Bench 6121479  Closes #1078,True,6,2017-04-01
vondele,zamar,2017-04-23 14:59:28+00:00,Use int instead of Value for history related stats.  history related scores are not related to evaluation based scores. For example; can easily exceed the range -VALUE_INFINITE;VALUE_INFINITE. As such the current type is confusing; and a plain int is a better match.  tested for no regression:  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 43693 W: 7909 L: 7827 D: 27957  No functional change.  Closes #1070,True,6,2017-04-01
vondele,zamar,2017-04-20 18:28:11+00:00,simplify logic for history based pruning  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 34255 W: 6292 L: 6194 D: 21769  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 89914 W: 11769 L: 11739 D: 66406  Bench: 6581936  Closes #1066,True,3,2017-04-01
vondele,zamar,2017-04-20 18:19:01+00:00,Partial insertion sort  the order of elements returned by std::partition is implementation defined (since not stable) and could depend on the version of libstdc++ linked. As std::stable_partition was tested to be too slow (http://tests.stockfishchess.org/tests/view/585cdfd00ebc5903140c6082). Instead combine partition with our custom implementation of insert_sort; which fixes this issue. Implementation based on a patch by mstembera (http://tests.stockfishchess.org/tests/view/58d4d3460ebc59035df3315c); which suggests some benefit by itself. Higher depth moves are all sorted (INT_MIN version); as in current master.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 33116 W: 6161 L: 6061 D: 20894  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 88703 W: 11572 L: 11540 D: 65591  Bench: 6256522  Closes #1058 Closes #1065,True,3,2017-04-01
Stefano80,zamar,2017-04-17 17:38:37+00:00,Update Readme.md  Update number of threads.  Closes #1072,True,0,2017-04-01
vondele,zamar,2017-04-17 16:25:27+00:00,Prefer std::find over a hand-coded loop  tested for no regression.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 37378 W: 6649 L: 6556 D: 24173  No functional change.  Closes #1071,True,0,2017-04-01
VoyagerOne,zamar,2017-04-17 16:22:10+00:00,Move-Count Formula Tweak  STC: LLR: 3.18 (-2.94;2.94) [0.00;4.00] Total: 55004 W: 10289 L: 9930 D: 34785  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 48184 W: 6401 L: 6128 D: 35655  Bench: 5960754,True,0,2017-04-01
Stefano80,zamar,2017-04-17 16:19:36+00:00,Remove cap from space score contribution and increase bonus  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 58462 W: 10615 L: 10558 D: 37289  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 65061 W: 8539 L: 8477 D: 48045  It is worth noting that an attempt to only increase the bonus passed STC but failed LTC; and an attempt to remove the cap without increasing the bonus is still running at STC; but will probably fail after more than 100k.  Bench: 6188591  Closes #1063,True,0,2017-04-01
snicolet,zamar,2017-04-16 13:22:48+00:00,Doubled and supported pawns  Do not give the doubled pawn penalty when the frontmost pawn is supported; for instance f2-g2-g3  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 55927 W: 10418 L: 10052 D: 35457 http://tests.stockfishchess.org/tests/view/58eb9fc20ebc59035df33858  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 32078 W: 4257 L: 4035 D: 23786 http://tests.stockfishchess.org/tests/view/58ec48420ebc59035df3388b  Bench: 5995472  Closes #1062,True,6,2017-04-01
Stefano80,zamar,2017-04-09 14:48:58+00:00,Remove minimum to contribution from king danger to score.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 24858 W: 4559 L: 4445 D: 15854  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 40789 W: 5338 L: 5244 D: 30207  Bench: 7027489  Closes #1059,True,6,2017-04-01
joergoster,zamar,2017-04-08 00:15:00+00:00,Fix zugzwang pruning issues  By adding pos.non_pawn_material(pos.side_to_move()) as a precondition in step 13; which is already in use in Futility Pruning (child node) and Null Move Pruning for similar reasons.  Pawn endgames; especially those with only 1 or 2 pawns; are simply heavily influenced by zugzwang situations.  Since we are using a bitbase for KPK endgames; I see no reason to accept buggy evals as shown in #760  Patch looks neutral at STC LLR: 2.32 (-2.94;2.94) [-3.00;1.00] Total: 79580 W: 10789 L: 10780 D: 58011  and LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 27071 W: 3502 L: 3390 D: 20179  Bench: 6259071  Closes #1051 Closes #760,True,5,2017-04-01
VoyagerOne,zamar,2017-04-08 00:02:31+00:00,Standardize stat penalty  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 90631 W: 16325 L: 16323 D: 57983  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 97679 W: 12779 L: 12759 D: 72141  Bench: 6340591  Closes #1053,True,5,2017-04-01
VoyagerOne,zamar,2017-04-03 03:32:54+00:00,Don't update TT at excluded move ply  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 38906 W: 7125 L: 6835 D: 24946  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 28600 W: 3752 L: 3543 D: 21305  Bench:  6861050  Closes #1048,True,0,2017-04-01
ddugovic,zamar,2017-03-27 22:55:48+00:00,Add assertion for the maximum number of pawns  No functionl change  Closes #1039,True,0,2017-03-01
vondele,zamar,2017-03-26 00:57:07+00:00,Introduce assert for stats update  Make sure updates to the stats are done in a stable way.  No functional change  Closes #1038 Closes #1037,True,6,2017-03-01
vondele,zamar,2017-03-25 17:35:17+00:00,Increase maximum number of threads  a single Xeon Phi can present itself as a single numa node with up to 288 threads (4 threads per hardware core). Tested to work as expected with a Xeon Phi CPU 7230 up to 256 threads.  No functional change  Closes #1045,True,5,2017-03-01
joergoster,zamar,2017-03-25 17:22:20+00:00,Simplify ThreatBySafePawn scoring  Bench: 6197938  Closes #1047,True,5,2017-03-01
VoyagerOne,zamar,2017-03-25 17:13:25+00:00,Singular extension and check extension tweak  If singular extension fails to trigger extension then don't consider check extension.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 69428 W: 12663 L: 12271 D: 44494  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 44023 W: 5875 L: 5612 D: 32536  Bench: 6170444  Closes #1043,True,5,2017-03-01
VoyagerOne,zamar,2017-03-18 22:44:49+00:00,Skip quiet moves based on moveCount pruning threshold and history stats  If we can moveCountPrune and next quiet move has negative stats; then go directly to the next move stage (Bad_Captures).  Reduction formula is tweaked to compensate for the decrease in move count that is used in LMR.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 6847 W: 1276 L: 1123 D: 4448  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 48687 W: 6503 L: 6226 D: 35958  Bench: 5919519  Closes #1036,True,5,2017-03-01
vondele,zamar,2017-03-17 21:46:47+00:00,History stat bonus: Move condition to bonus calculation  about 0.5% speedup.  No functional change  Closes #1034,True,4,2017-03-01
joergoster,zamar,2017-03-17 21:41:08+00:00,Pawns count imbalance table  Instead of having a continuous increasing bonus for our number of pawns when calculating imbalance; use a separate lookup array with tuned values. Idea by GuardianRM.  STC LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 16155 W: 2980 L: 2787 D: 10388  LTC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 100478 W: 13055 L: 12615 D: 74808  Bench: 6128779  Closes #1030,True,4,2017-03-01
mcostalba,zamar,2017-03-15 04:02:21+00:00,Assorted code style fixes  No functional change  Closes #1029,True,2,2017-03-01
Unknown,zamar,2017-03-15 03:56:26+00:00,Fix pawn entry prefetch  No functional change  Closes #1026,True,2,2017-03-01
snicolet,zamar,2017-03-09 02:45:38+00:00,Helper functions to count material for both sides  Syntactic sugar: helper functions to count material or pieces for both sides.  No functional change  Closes #1025,True,3,2017-03-01
vondele,zamar,2017-03-09 02:35:23+00:00,Always have counterMoves associated  Simplifies away all associated checks; leading to a ~0.5% speedup. The code now explicitly checks if moves are OK; rather than using nullptr checks.  Verified for no regression:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 32218 W: 5762 L: 5660 D: 20796  No functional change  Closes #1021,True,3,2017-03-01
pb00068,zamar,2017-03-09 02:03:01+00:00,Further simplify skipping of plies with threads  No functional change  Closes #1020,True,3,2017-03-01
VoyagerOne,zamar,2017-03-06 02:58:06+00:00,Allow pruning advance pawn pushes if not near endgame  STC: LLR: -2.95 (-2.94;2.94) [0.00;5.00] Total: 101088 W: 18016 L: 17717 D: 65355  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 61194 W: 8108 L: 7791 D: 45295  Bench: 5803228  Closes #1023,True,0,2017-03-01
snicolet,zamar,2017-03-06 02:20:27+00:00,Speed-up some arrays reading  This patch removes the empty rows at the beginning and at the end of MobilityBonus[] and Protector[] arrays:  � reducing the size of MobilityBonus from 768 bytes to 512 bytes � reducing the size of Protector from 1024 to 512 bytes  Also adds some comments and cleaner code for the arrays in pawns.cpp  No speed penalty (measured speed-up of 0.4%).  No functional change.  Closes #1018,True,0,2017-03-01
vondele,zamar,2017-02-27 00:41:58+00:00,Simplify skipping of plies with helper threads  Replaces the HalfDensity array with an equivalent; compact implementation. Includes suggestions by mcostalba & snicolet.  No functional change  Closes #1004,True,0,2017-02-01
snicolet,zamar,2017-02-26 01:43:54+00:00,"Change definition of ""weak"" in threats calculation  By defining ""strongly protected"" as ""protected by a pawn; or protected by two pieces and not attacked by two enemy pieces"".  Passed STC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 17050 W: 3128 L: 2931 D: 10991  Passed LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 120995 W: 15852 L: 15343 D: 89800  Bench : 6269229  Closes #1016",True,6,2017-02-01
Unknown,zamar,2017-02-24 05:33:03+00:00,Reorder members of Material::Entry  This eliminates alignment padding and reduces size from 48 to 40 bytes. This makes the material HashTable smaller and more cache friendly.  No functional change  Closes #1013,True,4,2017-02-01
GuardianRM,zamar,2017-02-24 05:26:59+00:00,Pieces protecting king  Initial protective idea by Snicolet for knight; for other pieces too Patch add penalties and bonuses for pieces; depending on the distance from the own king  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 21192 W: 3919 L: 3704 D: 13569  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 26177 W: 3642 L: 3435 D: 19100  Bench : 6687377  Closes #1012,True,4,2017-02-01
snicolet,zamar,2017-02-19 22:27:03+00:00,Keep pawns on both flanks  Positions with pawns on only one flank tend to be more drawish. We add a term to the initiative bonus to help the attacking player keep pawns on both flanks.  STC: yellowish run stopped after 257137 games LLR: -0.92 (-2.94;2.94) [0.00;5.00] Total: 257137 W: 46560 L: 45511 D: 165066  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 15602 W: 2125 L: 1956 D: 11521  Bench : 6976310  Closes #1009,True,6,2017-02-01
FauziAkram,zamar,2017-02-19 22:00:44+00:00,Variable tuning  A tuning patch which cover the following changes:  increase the importance of queen and rook mobility in endgame and decrease it in mg; since if we use the heavy pieces too early in the game we will just make opponent develop their pieces by threatening ours.  King Psqt: 1)King will be encouraged more to stay in the first ranks in the MG 2)and will be encouraged more to go to the middle of the board/last ranks in the EG  Bishop scale better in EG Logical changes on various psqt tables 1/6 of the changes of the last tuning session on mobility tables  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 227879 W: 41240 L: 40313 D: 146326 LTC : LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 167047 W: 21871 L: 21291 D: 123885  Bench: 5695960  Closes #1008,True,6,2017-02-01
VoyagerOne,zamar,2017-02-19 06:50:37+00:00,Razor Simplification  Remove code that restrict using tt-moves for razoring.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 67442 W: 12039 L: 11997 D: 43406  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 38541 W: 5044 L: 4947 D: 28550  Bench: 5667216  Closes #1002,True,6,2017-02-01
tfranzer,zamar,2017-02-15 05:26:08+00:00,Retire loose enemies bonus  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 44727 W: 7943 L: 7862 D: 28922  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 148343 W: 19044 L: 19088 D: 110211  Bench: 5669076  Closes #1005,True,2,2017-02-01
VoyagerOne,zamar,2017-02-15 05:22:58+00:00,search(): Move nullValue variable into local scope  No functional change  Closes #1003,True,2,2017-02-01
vondele,zamar,2017-02-15 05:11:44+00:00,Fix makefile: 32 bit builds without optimization.  Fixes failing build for  make ARCH=x86-32 clean && make ARCH=x86-32 optimize=no build  by passing -m32 also to the link step.  Extend travis testing accordingly.  No functional change.  Closes #999,True,2,2017-02-01
tfranzer,zamar,2017-02-11 00:52:34+00:00,Retire small bonus in passed pawn evaluation  STC: http://tests.stockfishchess.org/tests/view/5899824d0ebc59099759f3ee LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 33370 W: 6061 L: 5961 D: 21348  LTC: http://tests.stockfishchess.org/tests/view/5899e3820ebc59099759f415 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 36206 W: 4664 L: 4563 D: 26979  Bench: 6072262  Closes #998,True,5,2017-02-01
zamar,zamar,2017-02-11 00:44:13+00:00,A small tweak in doEasyMove()  Time.elapsed() > Time.optimum() * 5 / 44 instaed of: Time.elapsed() > Time.optimum() * 5 / 42  This was yellow on STC: LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 156856 W: 28317 L: 27942 D: 100597  Passed on LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 36909 W: 4926 L: 4682 D: 27301  Note: Patch was originally submitted by user GuardianRM. However his repo was deleted before merge.  No functional change  Closes #995,True,5,2017-02-01
Stefano80,zamar,2017-02-06 00:06:37+00:00,Simplify scale factor computation  Minor non-functional simplifications in computing the scale factor.  In my opinion; the code is now slightly more readable:  - remove one condition which can never be satisfied. - immediately return instead of assigning the sf variable.  Tested for non-regression:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 62162 W: 11166 L: 11115 D: 39881  No functional change  Closes #992,True,0,2017-02-01
VoyagerOne,zamar,2017-02-05 23:40:30+00:00,Simplify Queen Mobility  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 85997 W: 15550 L: 15540 D: 54907  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 25333 W: 3370 L: 3256 D: 18707  Bench: 6459194  Closes #991,True,6,2017-02-01
snicolet,mcostalba,2017-01-31 08:54:38+00:00,Simplify away QueenContactChecks  Changing the definition of safe checks to include squares protected only by the king; but twice attacked by the opponent.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 8691 W: 1683 L: 1541 D: 5467 http://tests.stockfishchess.org/tests/view/588f53b50ebc5915193f7dc7  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 31266 W: 4150 L: 4043 D: 23073 http://tests.stockfishchess.org/tests/view/588f68ab0ebc5915193f7dda  Bench : 5885815,True,1,2017-01-01
VoyagerOne,mcostalba,2017-01-29 07:54:58+00:00,Simplify TT penalty stat (#980)  STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 20251 W: 3692 L: 3570 D: 12989    LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 16432 W: 2155 L: 2029 D: 12248    Bench: 5941174,True,6,2017-01-01
VoyagerOne,mcostalba,2017-01-28 08:32:07+00:00,Penalty for a quiet ttMove that fails low  Also the penalty/bonus function is misleading; we should simply change it to stat_bonus(depth) for bonus and -stat_bonus(depth+ ONE_PLY) for extra penalty.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 11656 W: 2183 L: 2008 D: 7465  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 11152 W: 1531 L: 1377 D: 8244  Bench: 6101931,True,5,2017-01-01
locutus2,mcostalba,2017-01-28 08:04:24+00:00,Candidate passed pawns  Detect safe candidate passers.  STC: http://tests.stockfishchess.org/tests/view/5882395c0ebc5915193f78b3 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 53569 W: 9925 L: 9570 D: 34074  LTC: http://tests.stockfishchess.org/tests/view/5882b4fb0ebc5915193f78e2 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 77576 W: 10387 L: 10014 D: 57175  Bench: 5325829,True,5,2017-01-01
pb00068,mcostalba,2017-01-28 07:43:54+00:00,Simplify away pinnedPieces bitboard in EvalInfo (#975)  Results for 20 tests for each version (pgo-builds):                Base      Test      Diff            Mean    2110519   2118116   -7597           StDev   8727      4906      10112         p-value: 0;774  speedup: 0;004    Further verified for no regression:  http://tests.stockfishchess.org/tests/view/5885abd10ebc5915193f79e6  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 21786 W: 3959 L: 3840 D: 13987    No functional change,True,5,2017-01-01
Rocky640,mcostalba,2017-01-21 09:47:54+00:00,Simplification of lazy threshold  Passed STC http://tests.stockfishchess.org/tests/view/587846c10ebc5915193f74ec LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 217236 W: 39041 L: 39254 D: 138941  Passed LTC http://tests.stockfishchess.org/tests/view/587e157a0ebc5915193f76e7 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 52396 W: 6883 L: 6804 D: 38709  This submitted version (using if (abs(mg + eg) > 1500) ) seems more logical than the following other green simplification (using if (abs(mg)>1500)) since it can happen than mg_value is > eg_value (about 20% of the time) and the submitted version seems stronger at LTC  STC http://tests.stockfishchess.org/tests/view/5879702d0ebc5915193f7585 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 39958 W: 7315 L: 7227 D: 25416  LTC http://tests.stockfishchess.org/tests/view/5879af3e0ebc5915193f7592 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 204322 W: 26529 L: 26648 D: 151145  bench: 6406285,True,5,2017-01-01
Rocky640,mcostalba,2017-01-21 09:36:46+00:00,Outpost array simplification  The ReachableOutpost values were almost exactly half the Outpost values.  Passed STC http://tests.stockfishchess.org/tests/view/588020510ebc5915193f781e LLR: 3.86 (-2.94;2.94) [-3.00;1.00] Total: 119238 W: 21462 L: 21460 D: 76316  Passed LTC http://tests.stockfishchess.org/tests/view/5880ae090ebc5915193f7843 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 23540 W: 3097 L: 2980 D: 17463  Curiously; using a division by 2; with slightly different values; did not passed http://tests.stockfishchess.org/tests/view/587fece00ebc5915193f780a  bench: 5828283,True,5,2017-01-01
Rocky640,mcostalba,2017-01-21 09:13:49+00:00,"Reformat eval_init()  Move more code into eval_init; removing some clutter in the main routine.  Write eval_init only from ""our"" point of view (do not init the attackedBy[Them] bitboards).  Add mobilityArea to the evalinfo  A few edits while being there  tested for non-regression at STC http://tests.stockfishchess.org/tests/view/587fab230ebc5915193f77d9 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 39585 W: 7183 L: 7094 D: 25308  Non functional change.",True,5,2017-01-01
snicolet,mcostalba,2017-01-17 13:50:03+00:00,Update some comments (#973)  Use somewhat more precise comments in a couple of places.    No functional change.,True,1,2017-01-01
Stefano80,mcostalba,2017-01-13 08:17:48+00:00,Introduce lazy evaluation  After we have taken into account all cheap evaluation terms; we check whether the score exceeds a given threshold. If this is the case; we return a scaled down evaluation.  STC: LLR: 3.35 (-2.94;2.94) [0.00;5.00] Total: 12575 W: 2316 L: 2122 D: 8137  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 67480 W: 9016 L: 8677 D: 49787  Current version is the one rewritten by ceebo further edited by me.  Bench: 5367704,True,4,2017-01-01
loco-loco,mcostalba,2017-01-12 07:46:46+00:00,Removing CM parameter from the Stats struct. (#970)  After the history simplifications; we are only using Value Stats for CounterMoveHistory table. Therefore the parameter CM is not necessary.    No functional change.,True,3,2017-01-01
snicolet,mcostalba,2017-01-11 17:11:17+00:00,Check for overflow in Score * int multiplication (#969)  Add asserts to check for overflow in Score * int multiplication.    There is no overflow in current master; but it would be easy to  create one as the scale of the current eval does not leave many  spare bits. For instance; adding the following unused variables  in master at the end of evaluate() (line 882 of evaluate.cpp)  overflows:    Score s1 = score * 4;  // no overflow  Score s2 = score * 5;  // overflow    Assertion failed: (eg_value(result) == (i * eg_value(s)));  function operator*; file ./types.h; line 336.    Same md5 checksum as current master for non debug compiles.    No functional change.,True,2,2017-01-01
Rocky640,mcostalba,2017-01-11 07:56:38+00:00,StormDanger CleanUp (#964)  Order the enum and the array the same way they appear around line 250.  Makes it much easier to follow.    Add comments in the array definition and critical rows.  Use same terminology as elsewhere in pawns.cpp    No functional change.,True,2,2017-01-01
vondele,mcostalba,2017-01-11 07:46:29+00:00,Adjust copyright headers to 2017 (#965)  No functional change.,True,2,2017-01-01
mcostalba,web-flow,2017-01-11 07:44:06+00:00,Travis: fix bench fetch in case of PR (#968)  When Travis tests a PR; a commit merge is created  but master branch is not updated; although HEAD is.    No functional change.,True,2,2017-01-01
lucasart,mcostalba,2017-01-10 07:47:56+00:00,Rename FromTo -> History (#963)  Previously; we had duplicated History:    - one with (piece;to) called History  - one with (from;to) called FromTo    Now that we have only one; rename it to History; which is the generally accepted  name in the chess programming litterature for this technique.    Also correct some comments that had not been updated since the introduction of CMH.    No functional change.,True,1,2017-01-01
lucasart,mcostalba,2017-01-09 14:50:12+00:00,Remove HistoryStats  STC: LLR: 3.44 (-2.94;2.94) [-3.00;1.00] Total: 120831 W: 21572 L: 21594 D: 77665  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 26565 W: 3519 L: 3406 D: 19640  bench 5920493,True,0,2017-01-01
mcostalba,web-flow,2017-01-09 14:37:09+00:00,Fix previous patch for OS X (#961)  Use posix version of sed that is available on all  platforms.    No functional change.,True,0,2017-01-01
mcostalba,mcostalba,2017-01-09 11:51:28+00:00,Trevis CI: use commit bench number as a reference  No functional change.,True,0,2017-01-01
vondele,mcostalba,2017-01-09 09:30:57+00:00,New shell scripts for testing; used for travis CI (#957)  Perform more complex verification and validation.    - signature.sh : extract and optionally compare Bench/Signature/Node count.  - perft.sh : verify perft counts for a number of positions.  - instrumented.sh : run a few commands or uci sequences through valgrind/sanitizer instrumented binaries.  - reprosearch.sh : verify reproducibility of search.    These script can be used from directly from the command line in the src directory.    Update travis script to use these shell scripts.    No functional change.,True,0,2017-01-01
ElbertoOne,mcostalba,2017-01-09 09:26:50+00:00,Simplified select best thread (#958)  Only select best thread if score is better and depth equal or larger.    STC (7 threads): http://tests.stockfishchess.org/tests/view/586a4d090ebc5903140c64b2  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 120297 W: 18652 L: 18682 D: 82963    LTC (7 threads): http://tests.stockfishchess.org/tests/view/586e31b30ebc5903140c663d  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 57187 W: 7035 L: 6959 D: 43193    bench: 4940355,True,0,2017-01-01
mcostalba,mcostalba,2017-01-07 09:14:39+00:00,Drop Stats c'tors  Now taht we correctly value-initialize Thread objects; we don't need c'tors anymore because tables will be zero-initialized by the compier when Thread object is instanced.  Verified that we have no errors with Valgrind.  No functional change.,True,5,2017-01-01
vondele,mcostalba,2017-01-07 09:02:43+00:00,Correctly zero-initialize MainThread  It can be used uninitialized in time management. Fixes all valgrind errors on './stockfish go wtime 8000 btime 8000 winc 500 binc 500'  This is one (of the many) quirks of C++. There is a subtle difference between:  new Foo new Foo()  The first statement calls the default constructor (that in case of a POD leaves data members uninitialized); the second one performs a value-initialization (that in case of POD is equivalent to a zero-initialization)  See: http://stackoverflow.com/questions/620137/do-the-parentheses-after-the-type-name-make-a-difference-with-new http://stackoverflow.com/questions/5116541/difference-between-creating-object-with-or-without  No functional change.,True,5,2017-01-01
vondele,mcostalba,2017-01-06 09:43:18+00:00,Zero init fromToStats in constructor. (#953)  Extend commit fe99de to fromToStats; which fixes the last valgrind errors on   a simple 'go depth 12' at startup.    No functional change.,True,4,2017-01-01
pb00068,mcostalba,2017-01-05 08:00:41+00:00,Rejoin lines that belong to HalfDensity map (#952)  No functional change.,True,3,2017-01-01
mcostalba,mcostalba,2017-01-05 07:50:17+00:00,Correct zero-init of Thread data members  If not explicitly initialized in a class constructor; then all data members are default-initialized when the corresponing struct/class is instanced.  For array and built-in types (int; char; etc..) default-initialization is a no-op and we need to explicitly zero them.  No functional change.,True,3,2017-01-01
vondele,mcostalba,2017-01-02 08:36:43+00:00,Use consistent variable names for counterMoveStats (#949)  Unify naming in movepick and search; by adopting the latter convention (cmh;fmh;fmh2).    No functional change.,True,0,2017-01-01
snicolet,mcostalba,2017-01-02 08:33:40+00:00,Simplify unstoppable again (#950)  Assign a small bonus for our passed pawns when the opponent has no  pieces left.    STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 51124 W: 9036 L: 8966 D: 33122    LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 114560 W: 14604 L: 14604 D: 85352    Bench: 4940355,True,0,2017-01-01
jcalovski,mcostalba,2017-01-01 10:28:50+00:00,Tweak best thread selection logic  STC 7 threads: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 26881 W: 4161 L: 3941 D: 18779 http://tests.stockfishchess.org/tests/view/58667a830ebc5903140c632f  LTC 7 threads: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 22988 W: 2767 L: 2583 D: 17638 http://tests.stockfishchess.org/tests/view/586722690ebc5903140c636d  bench: 5468995,True,6,2017-01-01
lucasart,mcostalba,2017-01-01 10:11:52+00:00,WDL: rename WDLCursedLoss into WDLBlessedLoss  Tested using syzygy bench method:    - 2016 random positions ranging between 3 and 10 pieces  - each searched using bench at depth=10    Same node count (and no speed regression).    No functional change.,True,6,2017-01-01
atumanian,mcostalba,2017-01-01 10:04:24+00:00,Don't clear EasyMove in search()  EasyMove is cleared after every iteration of the search if the 3rd move in the PV of the main thread changes from the previous iteration. Therefore; clearing EasyMove during a search iteration may be excessive. The tests show that this is indeed unnecessary. In the new version the EasyMove variable is used only in the Thread::search function.  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 47719 W: 8438 L: 8362 D: 30919  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 122841 W: 15448 L: 15457 D: 91936  bench: 5468995,True,6,2017-01-01
saproj,mcostalba,2017-01-01 09:56:46+00:00,"Threefold repetition detection  Implement a threefold repetition detection. Below are the examples of problems fixed by this change.      Loosing move in a drawn position.     position fen 8/k7/3p4/p2P1p2/P2P1P2/8/8/K7 w - - 0 1 moves a1a2 a7a8 a2a1     The old code suggested a loosing move ""bestmove a8a7""; the new code suggests ""bestmove a8b7"" leading to a draw.      Incorrect evaluation (happened in a real game in TCEC Season 9).     position fen 4rbkr/1q3pp1/b3pn2/7p/1pN5/1P1BBP1P/P1R2QP1/3R2K1 w - - 5 31 moves e3d4 h8h6 d4e3     The old code evaluated it as ""cp 0""; the new code evaluation is around ""cp -50"" which is adequate.  Brings 0.5-1 ELO gain. Passes [-3.00;1.00].  STC: http://tests.stockfishchess.org/tests/view/584ece040ebc5903140c5aea LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 47744 W: 8537 L: 8461 D: 30746  LTC: http://tests.stockfishchess.org/tests/view/584f134d0ebc5903140c5b37 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 36775 W: 4739 L: 4639 D: 27397  Patch has been rewritten into current form for simplification and logic slightly changed so that return a draw score if the position repeats once earlier but after or at the root; or repeats twice strictly before the root. In its original form; repetition at root was not returned as an immediate draw.  After retestimng testing both version with SPRT[-3; 1]; both passed succesfully; but this version was chosen becuase more natural. There is an argument about MultiPV in which an extended draw at root may be sensible. See discussion here:     https://github.com/official-stockfish/Stockfish/pull/925  For documentation; current version passed both at STC and LTC:  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 51562 W: 9314 L: 9245 D: 33003  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 115663 W: 14904 L: 14906 D: 85853  bench: 5468995",True,6,2017-01-01
Rocky640,mcostalba,2016-12-31 13:15:57+00:00,Small eval cleanup and renaming  Non-functional changes  a) splitting the threat array to avoid using an enum b) reorder the scores according to functions where they are used. c) declarations in evaluate_pieces after the const(s) like elsewhere d) more compact definitions of KingFlank; now that we need it also for the PanwLessFlank penalty. e) reuse CenterFiles in evaluate_space f) move one line inside next popcount  No functional change.,True,5,2016-12-01
lucasart,mcostalba,2016-12-31 12:52:42+00:00,Remove SafeCheck (#946)  It was a bit of a hack; without intrinsic value; but rather compensating for the  fact that checks were mistuned.    STC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 88308 W: 15553 L: 15545 D: 57210    LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 53115 W: 6741 L: 6662 D: 39712    bench 5468995,True,5,2016-12-01
joergoster,mcostalba,2016-12-25 09:44:56+00:00,Further simplify unstoppable (#938)  By finally moving it into passed pawns eval.    Tested for no regression:  STC  LLR: 3.25 (-2.94;2.94) [-3.00;1.00]  Total: 57109 W: 10023 L: 9947 D: 37139    LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 21511 W: 2800 L: 2680 D: 16031    Bench: 5255881,True,6,2016-12-01
hxim,mcostalba,2016-12-25 09:40:17+00:00,Fix psqt format and use smaller numbers in king psqt (#940)  Fix minus sign in pawn psqt and use smaller numbers in king psqt.    No functional change.,True,6,2016-12-01
vondele,mcostalba,2016-12-25 09:34:48+00:00,Explicitly use alpha+1 for beta in NonPV search (#939)  Fixes the only exception; in razoring.    The code already does assert(PvNode || (alpha == beta - 1)); and it can be verified by studying the program flow that this is indeed the case; also for the modified line.    No functional change.,True,6,2016-12-01
vondele,mcostalba,2016-12-22 15:02:32+00:00,Simplify threshold handling for probcut. (#936)  Just use greater equal as this is what see_ge does now.    passed STC  LLR: 2.94 (-2.94;2.94) [-3.00;1.00]  Total: 226506 W: 39755 L: 39978 D: 146773    passed LTC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 138483 W: 17450 L: 17479 D: 103554    Bench: 5212921,True,3,2016-12-01
Stefano80,mcostalba,2016-12-20 10:18:19+00:00,piecesCount (#932)  All counts in search.cpp are of the form xxxCount. Conform piecesCnt to this unwritten rule.    No functional change.,True,1,2016-12-01
vondele,mcostalba,2016-12-20 10:17:38+00:00,Use DEPTH_ZERO initializer for depth in qsearch (#931)  Simplifies the main search function.    No functional change.,True,1,2016-12-01
VoyagerOne,mcostalba,2016-12-17 07:37:58+00:00,Another simplification for SEE pruning  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 29310 W: 5225 L: 5118 D: 18967  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 128454 W: 16424 L: 16442 D: 95588  Bench: 4556848,True,5,2016-12-01
locutus2,mcostalba,2016-12-12 11:01:16+00:00,Simplify pruning  STC: http://tests.stockfishchess.org/tests/view/5842be140ebc5903140c5619  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 16014 W: 2839 L: 2710 D: 10465    LTC: http://tests.stockfishchess.org/tests/view/584316a50ebc5903140c5638  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 182360 W: 22830 L: 22914 D: 136616    Retested at LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 45502 W: 5821 L: 5732 D: 33949    Bench: 4684146,True,0,2016-12-01
vondele,mcostalba,2016-12-11 19:05:25+00:00,Clean-up skipEarlyPruning (#921)  make skipEarlyPruning a search argument instead of managing this by hand.    Verified for no regression at STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 96754 W: 17089 L: 17095 D: 62570    No functional change.,True,6,2016-12-01
jcalovski,mcostalba,2016-12-11 18:57:02+00:00,Simplify unstoppable condition  STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 86389 W: 15165 L: 15153 D: 56071    LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00]  Total: 98143 W: 12311 L: 12288 D: 73544    Bench: 5437987,True,6,2016-12-01
vondele,mcostalba,2016-12-05 17:58:12+00:00,Refactor bonus and penalty calculation (#917)  * Refactor bonus and penalty calculation    Compute common terms in a helper function.    No functional change.    * Further refactoring    Remove some parenthesis that are now useless.  Define prevSq once; use repeatedly.    No functional change.    bench: 5884767 (bench of previous patch is wrong),True,0,2016-12-01
snicolet,mcostalba,2016-12-05 17:49:07+00:00,Pawn flank attacks  This patch tweaks some pawn values to favor flank attacks.    The first part of the patch increases the midgame psqt values of external pawns to launch more attacks (credits to user GuardianRM for this idea); while the second part increases the endgame connection values for pawns on upper ranks.    Passed STC:  LLR: 2.95 (-2.94;2.94) [0.00;4.00]  Total: 34997 W: 6328 L: 6055 D: 22614    and LTC:  LLR: 2.96 (-2.94;2.94) [0.00;4.00]  Total: 13844 W: 1832 L: 1650 D: 10362    Bench: 5884767,True,0,2016-12-01
ElbertoOne,mcostalba,2016-12-04 08:28:55+00:00,Remove piece condition in decrease lmr reduction check  STC: http://tests.stockfishchess.org/tests/view/584154780ebc5903140c55cf  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 40866 W: 7251 L: 7164 D: 26451    LTC: http://tests.stockfishchess.org/tests/view/5841e6e50ebc5903140c5605  LLR: 2.95 (-2.94;2.94) [-3.00;1.00]  Total: 62413 W: 7948 L: 7881 D: 46584    Bench: 5807913,True,6,2016-12-01
nepal,mcostalba,2016-12-03 08:37:07+00:00,"Help GCC to optimize msb() to single instruction  GCC compiles builtin_clzll to �63 ^ BSR�. BSR is processor instruction ""Bit Scan Reverse"".  So old msb() function is basically 63 - 63 ^ BSR.  Unfortunately; GCC fails to simplify this expression.    Old function compiles to        bsrq    %rdi; %rdi      movl    $63; %eax      xorq    $63; %rdi      subl    %edi; %eax      ret    New function compiles to        bsrq    %rdi; %rax      ret    BTW; Clang compiles both function to the same (optimal) code.    No functional change.",True,5,2016-12-01
goodkov,mcostalba,2016-12-02 08:04:45+00:00,Simplify pruning rule  STC: http://tests.stockfishchess.org/tests/view/583df86d0ebc5903140c5481 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 43283 W: 7761 L: 7678 D: 27844  LTC: http://tests.stockfishchess.org/tests/view/583f42670ebc5903140c5525 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 56587 W: 7232 L: 7157 D: 42198  bench: 5084980,True,4,2016-12-01
vondele,mcostalba,2016-12-01 13:55:00+00:00,WeakQueen Parameter tweak  New tuned values.    passed STC  http://tests.stockfishchess.org/tests/view/5834573c0ebc5903140c507b  LLR: 3.16 (-2.94;2.94) [0.00;4.00]  Total: 157415 W: 27917 L: 27227 D: 102271    passed LTC  http://tests.stockfishchess.org/tests/view/58388d2b0ebc5903140c523b  LLR: 2.95 (-2.94;2.94) [0.00;4.00]  Total: 95405 W: 12350 L: 11959 D: 71096    Bench: 4912054,True,3,2016-12-01
ElbertoOne,mcostalba,2016-11-27 16:42:20+00:00,TrappedRook simplification  Just remove rank checks for rook and king for TrappedRook evaluation.  STC: http://tests.stockfishchess.org/tests/view/5833fdfc0ebc5903140c5050 LLR: 3.03 (-2.94;2.94) [-3.00;1.00] Total: 34474 W: 6088 L: 5986 D: 22400  LTC: http://tests.stockfishchess.org/tests/view/58392f3f0ebc5903140c5276 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 48358 W: 6221 L: 6136 D: 36001  bench: 5536128,True,6,2016-11-01
theo77186,mcostalba,2016-11-27 13:43:52+00:00,Fix PGO build with GCC (#904),True,6,2016-11-01
MichaelB7,mcostalba,2016-11-27 09:03:52+00:00,Fix PGO Build for clang  This fixes https://github.com/official-stockfish/Stockfish/issues/167.  Additional improvments by Joost VandeVondele.,True,6,2016-11-01
joergoster,mcostalba,2016-11-27 08:28:32+00:00,Fix trace in case of space evaluation  We only compute space eval during the opening/early midgame. Apply the same logic for DoTrace.  No functional change.,True,6,2016-11-01
mcostalba,mcostalba,2016-11-27 08:11:56+00:00,Fix regression: print const position  Fix a regression introduced with new TB code.  No functional change.,True,6,2016-11-01
mbootsector,mcostalba,2016-11-27 08:05:57+00:00,Rank based threats  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 19404 W: 3581 L: 3374 D: 12449  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 16204 W: 2194 L: 2023 D: 11987  Bench: 5757843,True,6,2016-11-01
vondele,mcostalba,2016-11-26 15:49:59+00:00,Fix undefined behavior  This fixes #892. Undefined behavior as seen with clang -fsanitize=undefined.  No functional change.,True,5,2016-11-01
mcostalba,mcostalba,2016-11-26 06:04:17+00:00,Fix compile under Windows XP  The needed Windows API for processor groups could be missed from old Windows versions; so instead of calling them directly (forcing the linker to resolve the calls at compile time); try to load them at runtime. To do this we need first to define the corresponding function pointers.  Also don't interfere with running fishtest on numa hardware with Windows. Avoid all stockfish one-threaded processes will run on the same node  No functional change.,True,5,2016-11-01
atumanian,mcostalba,2016-11-25 07:48:35+00:00,Fix the pawn hash failure when the pawn key is 0  This patch fixed bugs #859 and #882. At initialization we generate a new random key (Zobrist::noPawns). It's added to the pawn key of all positions; so that the pawn key of a pawnless position is no longer 0.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 21307 W: 3738 L: 3618 D: 13951  LTC: LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 45270 W: 5737 L: 5648 D: 33885  No functional change.,True,4,2016-11-01
erbsenzaehler,mcostalba,2016-11-25 07:46:20+00:00,Cleanup Makfile for MacOs  1) Explicitly setting the default lib to the system-default is not    needed on a Mac. See:    http://libcxx.llvm.org/docs/UsingLibcxx.html  2) We do no longer need to exclude bmi2-builds from LTO. See:    https://llvm.org/bugs/show_bug.cgi?id=19416  Changes tested and discussed on FishCooking:    https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/acUQtKtEzMM  No functional change.,True,4,2016-11-01
mcostalba,mcostalba,2016-11-22 06:56:04+00:00,Handle Windows Processors Groups  Under Windows it is not possible for a process to run on more than one logical processor group. This usually means to be limited to use max 64 cores. To overcome this; some special platform specific API should be called to set group affinity for each thread. Original code from Texel by Peter �sterlund.  Tested by Jean-Paul Vael on a Xeon E7-8890 v4 with 88 threads and confimed speed up between 44 and 88 threads is about 30%; as expected.  No functional change.,True,1,2016-11-01
vondele,mcostalba,2016-11-20 09:51:42+00:00,Avoid touching source files in profile-build  This refines the profile-build target to avoid 'touch'ing the sources; keeping meaningful modification dates and avoiding editor warnings like vi's:  WARNING: The file has been changed since reading it!!! Do you really want to write to it (y/n)?  Instead of touching sources; the (instrumented) object files are removed; which has the same effect of rebuilding them in the next step.  As a side effect; this simplifies the Makefile a bit.  No functional change.,True,6,2016-11-01
madnight,mcostalba,2016-11-19 20:31:24+00:00,Reduce variable scope in swap_byte  Added a specialization to remove the 'if' condition  No functional change.,True,5,2016-11-01
atumanian,mcostalba,2016-11-19 09:20:28+00:00,Start searching for a repetition from the 4th ply behind  A position can never repeat the one on the previous move. Thus we can start searching for a repetition from the 4th ply behind. In the case:   std::min(st->rule50; st->pliesFromNull) < 4  We don't need to do any more calculations. This case happens very often - in more than a half of all calls of the function.  No functional change.,True,5,2016-11-01
Rocky640,mcostalba,2016-11-19 08:42:11+00:00,Pawn shelter and pawn storm tuned  Based on SPSA tuned values  Passed STC http://tests.stockfishchess.org/tests/view/582363b30ebc5910626b9ca8 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 40628 W: 7380 L: 7087 D: 26161  and passed LTC http://tests.stockfishchess.org/tests/view/5823b73b0ebc5910626b9cb5 LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 273312 W: 35991 L: 35131 D: 202190  bench: 5773672,True,5,2016-11-01
mcostalba,mcostalba,2016-11-19 08:35:57+00:00,Fix compile error from previous patch  Due to different types on some platforms.  No functional change.,True,5,2016-11-01
snicolet,mcostalba,2016-11-19 08:22:49+00:00,Do not use GCC extension for anonymous unions  Anonymous struct inside anonymous unions are a GCC extension. This patch uses named structs to stick to the C+11 standard.  Avoids a string of warnings on the Clang compiler.  Non functional change (same bench and same MD5 signature; so compiled code is exactly the same as in current master),True,5,2016-11-01
vondele,mcostalba,2016-11-19 07:47:41+00:00,More accurate 'go nodes' searches at low count  Makes the actual number of nodes searched match closely the number of nodes requested; by increasing the frequency of checking the number of nodes searched at low node count. All other searches retain the default checking frequency of once per 4096 nodes; and are thus unaffected.  Passed STC as non-regression LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 26643 W: 4766 L: 4655 D: 17222  No functional change.,True,5,2016-11-01
locutus2,mcostalba,2016-11-19 07:37:52+00:00,Non-quiet pruning tweak  Count in the difference of static evaluation and alpha for pruning threshold.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 16885 W: 3061 L: 2866 D: 10958  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 33566 W: 4428 L: 4202 D: 24936  Bench: 5513149,True,5,2016-11-01
atumanian,mcostalba,2016-11-12 08:55:12+00:00,Make a version of Position::do_move() without the givesCheck parameter  In 10 of 12 calls total to Position::do_move()the givesCheck argument is simply gives_check(m). So it's reasonable to make an overload without this parameter; which wraps the existing version.  No functional change.,True,5,2016-11-01
joergoster,mcostalba,2016-11-10 10:45:51+00:00,FEN parsing: add a second check for correctly setting e.p. square  Currently; we only check if there is a pawn in place to make the en-passant capture. Now also check that there is a pawn that could just have advanced two squares. Also update the corresponding comment.  This makes the parsing of FENs a bit more robust; and now correctly handles positions like the one reported by Dann Corbit.  position fen rnbqkb1r/ppp3pp/3p1n2/3P4/8/2P5/PP3PPP/RNBQKB1R w KQkq e6 d   +---+---+---+---+---+---+---+---+  | r | n | b | q | k | b |   | r |  +---+---+---+---+---+---+---+---+  | p | p | p |   |   |   | p | p |  +---+---+---+---+---+---+---+---+  |   |   |   | p |   | n |   |   |  +---+---+---+---+---+---+---+---+  |   |   |   | P |   |   |   |   |  +---+---+---+---+---+---+---+---+  |   |   |   |   |   |   |   |   |  +---+---+---+---+---+---+---+---+  |   |   | P |   |   |   |   |   |  +---+---+---+---+---+---+---+---+  | P | P |   |   |   | P | P | P |  +---+---+---+---+---+---+---+---+  | R | N | B | Q | K | B |   | R |  +---+---+---+---+---+---+---+---+  Fen: rnbqkb1r/ppp3pp/3p1n2/3P4/8/2P5/PP3PPP/RNBQKB1R w KQkq - 0 1  No functional change.,True,3,2016-11-01
Hexik,mcostalba,2016-11-10 10:43:21+00:00,Stack offset changed from -5 to -4  Non functional change; tests under sanitizers OK.  Rationales for change  - Offset in code is in range -4 ... 2 - There was an error by (pathological) corner case MAX_PLY=0  No functional change.,True,3,2016-11-01
Unknown,mcostalba,2016-11-10 10:40:31+00:00,Update comments related after new see_ge()  Update comments according to changes from my patch: #822  No functional change.,True,3,2016-11-01
vondele,vondele,2016-11-07 12:35:28+00:00,    Allow benches with more than 2G nodes.      ./stockfish bench 128 1 4000000000 default nodes      crashes before; works after.      No functional change.,True,0,2016-11-01
vondele,mcostalba,2016-11-06 10:48:07+00:00,Fix undefined behaviour with unaligned loads in syzygy code  Casting a pointer to a different type with stricter alignment requirements yields to implementation dependent behaviour. Practicaly everything is fine for common platforms because the CPU/OS/compiler will generate correct code; but anyhow it is better to be safe than sorry.  Testing with dbg_hit_on() shows that the unalignment accesses are very rare (below 0.1%) so it makes sense to split the code in a fast path for the common case and a slower path as a fallback.  No functional change (verified with TB enabled).,True,6,2016-11-01
ppigazzini,mcostalba,2016-11-06 09:28:17+00:00,Update AUTHORS for SF8  And format top contriutor (space instead of tabs; proper Unix line endings).,True,6,2016-11-01
mcostalba,mcostalba,2016-11-06 08:45:25+00:00,Fix a warning with debug=no  Warning in TB code due to unused variable.  Verified same bench with TB code enabled.  No functional change.,True,6,2016-11-01
vondele,mcostalba,2016-11-05 21:25:55+00:00,Reproducible searches after ucinewgame  Fixes issue #859.  thisThread->callsCnt in search<>() was different (by 1) for the first and second game played.  No functional change.,True,5,2016-11-01
mcostalba,mcostalba,2016-11-05 08:32:39+00:00,Restore development version  No functional change.,True,5,2016-11-01
mcostalba,mcostalba,2016-11-05 08:29:22+00:00,Add explicit braces and fix a warning  Warning under both gcc and clang.  No functional change.,True,5,2016-11-01
VoyagerOne,mcostalba,2016-11-05 07:17:42+00:00,Reduction Simplification  Simplify reduction formula by removing a parameter.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 35798 W: 6368 L: 6272 D: 23158  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 125375 W: 15827 L: 15839 D: 93709  Bench: 4735038,True,5,2016-11-01
vondele,mcostalba,2016-11-05 07:15:56+00:00,Makefile fix for sanitize  Small fixes for compilation with sanitize=yes optimize=no; by always adding -fsanitize=undefined to the LDFLAGS as required. Updates config-sanity to check&report the status of the flag.  No functional change.,True,5,2016-11-01
VoyagerOne,mcostalba,2016-11-05 07:12:22+00:00,Top CPU Contributors  Give some well needed credit...  No functional change.,True,5,2016-11-01
Unknown,mcostalba,2016-11-05 07:08:25+00:00,Simplify code; delete else after return,True,5,2016-11-01
Unknown,mcostalba,2016-11-05 07:05:22+00:00,Sync variable names in decl vs def,True,5,2016-11-01
vondele,mcostalba,2016-11-05 07:03:34+00:00,Travis-ci: integrate perft checking  makes verifying perft numbers for a few positions part of travis-ci. Adds <5s testing time.  No functional change.,True,5,2016-11-01
mcostalba,mcostalba,2016-11-05 06:55:08+00:00,Rewrite syzygy in C++  Rewrite the code in SF style; simplify and document it.  Code is now much clear and bug free (no mem-leaks and other small issues) and is also smaller (more than 600 lines of code removed).  All the code has been rewritten but root_probe() and root_probe_wdl() that are completely misplaced and should be retired altogheter. For now just leave them in the original version.  Code is fully and deeply tested for equivalency both in functionality and in speed with hundreds of games and test positions and is guaranteed to be 100% equivalent to the original.  Tested with tb_dbg branch for functional equivalency on more than 12M positions.  stockfish.exe bench 128 1 16 syzygy.epd  Position: 2016/2016 Total 12121156 Hits 0 hit rate (%) 0 Total time (ms) : 4417851 Nodes searched : 1100151204 Nodes/second : 249024  Tested with 5;000 games match against master; 1 Thread; 128 MB Hash each; tc 40+0.4; which is almost equivalent to LTC in Fishtest on this machine. 3-; 4- and 5-men syzygy bases on SSD; 12-moves opening book to emphasize mid- and endgame.  Score of SF-SyzygyC++ vs SF-Master: 633 - 617 - 3750  [0.502] 5000 ELO difference: 1  No functional change.,True,5,2016-11-01
mcostalba,mcostalba,2016-11-01 09:19:17+00:00,Stockfish 8  Bench: 5926706  No functional change,True,1,2016-11-01
locutus2,mcostalba,2016-10-30 12:48:03+00:00,Bonus for attacked passed pawn promotion path  Bonus for each attacked square on the promotion path of an enemy passed pawn.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 141511 W: 25295 L: 24579 D: 91637  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 23161 W: 3022 L: 2831 D: 17308  Bench: 5926706,True,6,2016-10-01
vondele,mcostalba,2016-10-27 04:44:41+00:00,Fix a series of undefined behaviours  Avoid shifting negative signed integers and use typed enum to avoids decrementing a variable beyond its defined range; like:        for (Rank r = RANK_8; r >= RANK_1; --r)  Changes were tested individually and passed SPRT[-3; 1].  With this patch gcc --sanitize builds cleanly.  No functional change.,True,3,2016-10-01
Unknown,mcostalba,2016-10-27 04:29:24+00:00,travis-ci: Enable undefined behavior checking,True,3,2016-10-01
syzygy1,mcostalba,2016-10-27 04:26:22+00:00,"Output PV if last iteration does not complete  Instead of outputting ""info nodes ... time ..."" when the last iteration is interrupted; simply call UCI::pv() to output the PV.  I thought about calling UCI:pv() with bounds -VALUE_INFINITE; VALUE_INFINITE to avoid ""lowerbound"" or ""upperbound"" appearing in it; but I'm not sure that would be any better.  This patch fixes rare inconsistencies between the first move of the last PV output and the bestmove played. It also makes sure that all the latest statistics are sent to the GUI (not only nodes and time but also nps; tbhits; hashfull).  No functional change.",True,3,2016-10-01
snicolet,mcostalba,2016-10-25 04:57:29+00:00,"Endgame malus for having a king in a pawnless flank  Original idea by ""ElbertoOne""; while ""FauziAkram"" suggested to put a small midgame penalty too.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 71808 W: 13038 L: 12610 D: 46160  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 150874 W: 19828 L: 19221 D: 111825  Bench: 6077005",True,1,2016-10-01
VoyagerOne,mcostalba,2016-10-25 04:44:19+00:00,History Stat Comparison  Adjust LMR by comparing history stats with opponent (prior ply).  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 27754 W: 5066 L: 4824 D: 17864  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 216596 W: 28157 L: 27343 D: 161096  Bench: 5437729,True,1,2016-10-01
mcostalba,mcostalba,2016-10-22 06:22:13+00:00,Correcty resey TB hit counter  Restore original behaviour to reset the counter before a new move search.  Also fixed some warnings and added const qualifier to a couple of functions; as suggested by m_stembera.  Thanks to Werner Bergmans for reporting the regression.  No functional change.,True,5,2016-10-01
syzygy1,mcostalba,2016-10-21 04:15:45+00:00,Per-thread TB hit counters  Use a per-thread counter to reduce contention with many cores and endgame positions.  Measured around 1% speed-up on a 12 core and 8% on 28 cores with 6-men; searching on:  7R/1p3k2/2p2P2/3nR1P1/8/3b1P2/7K/r7 b - - 3 38  Also retire the unused set_nodes_searched() and fix a couple of return types and naming conventions.  No functional change.,True,4,2016-10-01
vondele,mcostalba,2016-10-20 15:17:14+00:00,Simplify next_move by always scoring evasions  For a default bench; this fixes the last valgrind error (jump on uninitialised value).  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 187869 W: 33303 L: 33463 D: 121103  No functional change.,True,3,2016-10-01
vondele,vondele,2016-10-19 19:29:00+00:00,Make valgrind testing part of travis ci.,True,2,2016-10-01
ajithcj,mcostalba,2016-10-18 07:00:52+00:00,Remove useless assignments to currentMove  We reference (ss-1)->currentMove; i.e. we peek current move of the parent node; so currentMove should be valid in the main move loop; when we search() the subtree; but outside of main loop it is useless.  No functional change.,True,1,2016-10-01
VoyagerOne,mcostalba,2016-10-18 06:53:51+00:00,Use explicit logic for pruning  Also a speedup since we don't need to recalculate SEE for extensions...as it already determined to be positive.  Results for 12 tests for each version:          Base      Test      Diff Mean    2132395   2191002   -58607 StDev   128058    85917     134239 p-value: 0.669 speedup: 0.027  Non functional change.,True,1,2016-10-01
Unknown,mcostalba,2016-10-14 06:58:07+00:00,Fixes for ARM compilation: take 2  The target:  Odroid U3 (http://www.hardkernel.com/main/products/prdt_info.php?g_code=g138745696275) Debian Jessie As listed in #550 and #638 three modifications are needed for compilation to work:  float-abi flag for GCC If an FPU is present and supported by the installed os then passed value need to be hard. I didn't find any better solution than using readelf to check for the availibilty of Tag_ABI_VFP_args which sould indicate support for the FPU. The check is only done if the arch is arm and if readelf is not present on the system; there will be an error (/bin/sh: 1: readelf: not found) but it will not break and will continue with the default softfp value. Outputing the error is not really acceptable but I wanted some feedback on the check itself.  -lpthread is needed on armv7 outside of Android I replaced UNAME with KERNEL and OS to allow to differentiate Android.  m32 flag My understanding is that outside of Android the flag is generating errors on armv7.  These modifications should introduce change only for non Android armv7 build.  No functional change.,True,4,2016-10-01
mcostalba,mcostalba,2016-10-13 06:36:30+00:00,"Revert ""Fixes for ARM compilation""  This reverts commit a3fe80c36ac8ee7677d1f6b7df9b2497e3f755c5.  Break compilation on mingw for me.",True,3,2016-10-01
Unknown,mcostalba,2016-10-13 06:34:04+00:00,Fixes for ARM compilation  The target:  Odroid U3 (http://www.hardkernel.com/main/products/prdt_info.php?g_code=g138745696275) Debian Jessie As listed in #550 and #638 three modifications are needed for compilation to work:  float-abi flag for GCC If an FPU is present and supported by the installed os then passed value need to be hard. I didn't find any better solution than using readelf to check for the availibilty of Tag_ABI_VFP_args which sould indicate support for the FPU. The check is only done if the arch is arm and if readelf is not present on the system; there will be an error (/bin/sh: 1: readelf: not found) but it will not break and will continue with the default softfp value. Outputing the error is not really acceptable but I wanted some feedback on the check itself.  -lpthread is needed on armv7 outside of Android I replaced UNAME with KERNEL and OS to allow to differentiate Android.  m32 flag My understanding is that outside of Android the flag is generating errors on armv7.  These modifications should introduce change only for non Android armv7 build.  No functional change.,True,3,2016-10-01
mcostalba,mcostalba,2016-10-10 19:00:59+00:00,AppVeyor: run bench after build  And show resulting bench signature.  The run is very slow becuase optimizations are all disabled by default /Od /RTC1  No functional change.,True,0,2016-10-01
mcostalba,mcostalba,2016-10-10 14:29:29+00:00,Add AppVeyor integration  It is like Trevis CI but for Windows platform.  Currently just compile builds; wthouth benching the resulting executable.  No functional change.,True,0,2016-10-01
ajithcj,mcostalba,2016-10-09 07:54:43+00:00,Simplify futility pruning return value  Return eval as it is while doing futility pruning.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 167687 W: 29778 L: 29904 D: 108005  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 26905 W: 3503 L: 3390 D: 20012  Bench: 5936728,True,6,2016-10-01
Unknown,mcostalba,2016-10-08 04:38:36+00:00,Optimisation of Position::see and Position::see_sign  Stephane's patch removes the only usage of Position::see; where the returned value isn't immediately compared with a value. So I replaced this function by its optimised and more specific version see_ge. This function also supersedes the function Position::see_sign.  bool Position::see_ge(Move m; Value v) const;  This function tests if the SEE of a move is greater or equal than a given value. We use forward iteration on captures instread of backward one; therefore we don't need the swapList array. Also we stop as soon as we have enough information to obtain the result; avoiding unnecessary calls to the min_attacker function.  Speed tests (Windows 7); 20 runs for each engine: Test engine: mean 866648; st. dev. 5964 Base engine: mean 846751; st. dev. 22846 Speedup: 1.023  Speed test by Stephane Nicolet  Fishtest STC test: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 26040 W: 4675 L: 4442 D: 16923 http://tests.stockfishchess.org/tests/view/57f648990ebc59038170fa03  No functional change.,True,5,2016-10-01
snicolet,snicolet,2016-10-05 22:00:27+00:00,Do not use SEE in evasion scoring  Idea by Aram Tumanian (atumanian)  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 43889 W: 7849 L: 7767 D: 28273  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 29333 W: 3809 L: 3700 D: 21824  Bench: 6421663,True,2,2016-10-01
Stefano80,mcostalba,2016-10-05 07:32:08+00:00,Retire implicit malus for stonewalls  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 75864 W: 13466 L: 13437 D: 48961  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 99050 W: 12472 L: 12451 D: 74127  bench: 6098474,True,2,2016-10-01
VoyagerOne,mcostalba,2016-10-03 14:18:53+00:00,Allow inCheck pruning  This is a bit tricky because we don't want to prune the only legal evasions; even if with negative SEE. So add an assert to avoid this subtle bug to slip in later.  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 14140 W: 2625 L: 2421 D: 9094  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 11558 W: 1555 L: 1379 D: 8624  bench: 5256717,True,0,2016-10-01
mcostalba,mcostalba,2016-09-29 13:24:36+00:00,Remove useless razoring condition  Condition is always true! For any value of the array index! Even an out of bound array; like razor_margin[120]!!!!  No functional change.,True,3,2016-09-01
HiraokaTakuya,mcostalba,2016-09-29 13:20:07+00:00,Make razor_margin[4] ONE_PLY value independent  No functional change.,True,3,2016-09-01
snicolet,mcostalba,2016-09-25 08:45:10+00:00,Rename shift_bb() to shift()  Rename shift_bb() to shift(); and DELTA_S to SOUTH; etc. to improve code readability; especially in evaluate.cpp when they are used together:      old b = shift_bb<DELTA_S>(pos.pieces(PAWN))     new b = shift<SOUTH>(pos.pieces(PAWN))  While there fix some small code style issues.  No functional change.,True,6,2016-09-01
joergoster,mcostalba,2016-09-24 17:56:02+00:00,Allowing singular extension in mate positions  Drop useless condition  abs(ttValue) < VALUE_KNOWN_WIN  And extend singular extension search to cases when ttValue stores a mate score. This improves mate finding and does not introduce any regression.  Yery tested this patch against current master on the 6500+ Chest mate suite with 200K fixed nodes:      shortest mates found: master: 1206 patch:1205     any mate found: master: 1903 patch: 2003  with 1 sec time:      shortest mates found: master: 2667 patch: 2628     any mate found: master: 3585 patch: 3646  Verified for no regression:  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 25655 W: 4578 L: 4465 D: 16612  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 66247 W: 8618 L: 8557 D: 49072  bench: 6335042,True,5,2016-09-01
mcostalba,mcostalba,2016-09-24 05:37:52+00:00,Fix crash when passing a mate/stalemate position  Both Tablebases::filter_root_moves() and extract_ponder_from_tt(9 were unable to handle a mate/stalemate position.  Spotted and reported by Dann Corbit.  Added some mate/stalemate positions to bench so to early catch this regression in the future.  No functional change.,True,5,2016-09-01
snicolet,mcostalba,2016-09-22 06:31:23+00:00,"Simplify pinners conditions in SEE()  Use the following transformations:  - to check that A is included in B; testing ""(A & ~B) == 0"" is faster than ""(A & B) == A""  - to remove the intersection of A and B from A; doing ""A &= ~B;"" is as fast as ""if (A & B) A &= ~B;"" but is simpler.  Overall; the simpler patch version is 0.3% than current master.  No functional change.",True,3,2016-09-01
pb00068,mcostalba,2016-09-21 06:42:25+00:00,Fix pin-aware SEE  Correct pinners calculation and fix bug with pinned pieces giving check. With this patch 'pinners' only returns sliders with exactly one defensive piece between the slider and the attacked square (in other words; pinners returns exact pinners).  This was a co-operation between Marco Costalba; St�phane Nicolet and me.  Special thanks to Ronald de Man for reporting the bug with pinned pieces giving check; discussed here: https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/S_4E_Xs5HaE  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 132118 W: 23578 L: 23645 D: 84895  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 36424 W: 4770 L: 4670 D: 26984  bench: 6272231,True,2,2016-09-01
vondele,mcostalba,2016-09-18 06:13:34+00:00,Use fixed depth bench to make PGO builds more reproducible  Discussed on fishcooking  proposal and objdump verification: https://groups.google.com/d/msg/fishcooking/4_ausUwMXP0/EGPsMYqOFAAJ  verified no significant speed difference between depth and time: https://groups.google.com/d/msg/fishcooking/4_ausUwMXP0/KazW5QZmFgAJ  stockfish_time - stats: mean = 2207232.56        std = 7079.51        std/mean = 0.003207  stockfish_depth - stats: mean = 2201783.57        std = 6356.69        std/mean = 0.002887  No functional change,True,6,2016-09-01
mcostalba,mcostalba,2016-09-17 08:14:28+00:00,Fix a warning with MSVC  warning C4706: assignment within conditional expression  No functional change.,True,5,2016-09-01
snicolet,mcostalba,2016-09-17 07:56:36+00:00,Swap mg and eg in internal representation of Score  Instrumentation shows that in make_score(mg; eg) calls; the mg value is zero in 25;9% of the calls while the eg value is zero in 36;8% of the calls.  Swapping the internal fields of mg and eg in the internal representation of Score allows the compiler to optimize away the shift in (eg << 16) + mg in more cases; thus resulting in a 0.3% speed-up overall.  No functional change,True,5,2016-09-01
mcostalba,mcostalba,2016-09-17 07:51:20+00:00,Fix indentation in struct FromToStats  And other little trivial stuff.  No functional change.,True,5,2016-09-01
snicolet,mcostalba,2016-09-16 06:30:06+00:00,"Retire KingDanger array  Rescales the king danger variables in evaluate_king() to suppress the KingDanger[] array. This avoids the cost of the memory accesses to the array and simplifies the non-linear transformation used.  Full credits to ""hxim"" for the seminal idea and implementation; see pull request #786. https://github.com/official-stockfish/Stockfish/pull/786  Passed STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 9649 W: 1829 L: 1689 D: 6131  Passed LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 53494 W: 7254 L: 7178 D: 39062  Bench: 6116200",True,4,2016-09-01
mcostalba,mcostalba,2016-09-16 06:15:07+00:00,Use per-thread counterMoveHistory  Drops a scalability bottleneck due to memory contention of a single shared table across threads. The effect starts to be sensible with a high number of threads. Specifically we have a small regression with 7 threads both at 60 and 180 seconds TC:  10000 @ 60+0.6 th 7 ELO: -2.46 +-3.2 (95%) LOS: 6.5% Total: 9896 W: 1037 L: 1107 D: 7752  5000 @ 180+0.6 th 7 ELO: -1.95 +-4.1 (95%) LOS: 17.7% Total: 5000 W: 444 L: 472 D: 4084  We have a regression because counterMoveHistory table is quite big and it takes time for a single thread to fill it. Sharing the table yields to a higher fill rate and better quality of moves and up to 7 threads the benefits of sharing more then compensate the loss in speed due to contention. Interestingly even with a 3X longer TC; so with more time for the single thread to catch up; the improvment is quite limited and below noise level. It seems we really need much longer TC to saturate the table.  When we move to high threads number it's another story:  5000 @ 60+0.6 th 22 ELO: 3.49 +-4.3 (95%) LOS: 94.6% Total: 4880 W: 490 L: 441 D: 3949  2000 @ 60+0.6 th 32 ELO: 8.34 +-6.9 (95%) LOS: 99.1% Total: 2000 W: 229 L: 181 D: 1590  As expected the speed-up more than compensates the filling rate; and we expect that with tournament TC; where single thread is able to saturate the table; the difference will be even stronger. For instance for TCEC 9 super-final time control will be 180 minutes + 15 seconds and this scalability improvement seems definitely the way to go.  So; summarizing:  GOOD:  Measured big improvement in high core scenario  Suitable for TCEC 9 superfinal (big hardware; very long TC)  Consistent and natural patch that extends to counterMoveHistory what we already do for remaining history tables; that are all per-thread  Non functional change for the common case of a single core  Very simple (just 6 lines modified; no added ones)  BAD:  Small regression (within 2-3 ELO) with few threads and short TC  bench: 5341477,True,4,2016-09-01
mcostalba,mcostalba,2016-09-15 07:07:49+00:00,Renaming in MovePicker  Rename stages and simplify a bit the code.  No functional change.,True,3,2016-09-01
mcostalba,mcostalba,2016-09-14 13:43:56+00:00,Retire MovePicker::see_sign()  No more used after last patch.  No functional change.,True,2,2016-09-01
VoyagerOne,mcostalba,2016-09-14 13:38:38+00:00,Tweak SEE margin in pruning conditions  Use 35 * depth^2 to calculate see_margin.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 22636 W: 4212 L: 3990 D: 14434  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 47241 W: 6314 L: 6041 D: 34886  The Movepick SEE is now dead code; retire it.  Bench: 5341477,True,2,2016-09-01
syzygy1,mcostalba,2016-09-13 05:14:09+00:00,Integrate next_stage() logic into next_move()  Measured bench speed up goes from 0;7% to 2%; given the unreliable measure a reverse simmplification test was done on fishtest:  master vs patch LLR: -2.94 (-2.94;2.94) [-3.00;1.00] Total: 15499 W: 2685 L: 2867 D: 9947  Test result is positive; master is weaker.  No functional change.,True,1,2016-09-01
pb00068,mcostalba,2016-09-12 13:45:00+00:00,Simplify code for pinaware SEE  This is the most compact and neatest version is was able to produce.  On normal builds I have a small slowdown: normal builds base vs. simplification (gcc 4.8.1 Win7-64 i7-3770 @ 3.4GHz x86-64-modern) Results for 20 tests for each version:          Base      Test      Diff Mean    1974744   1969333   5411 StDev   11825     10281     5874 p-value: 0;178 speedup: -0;003  On pgo-builds however I measure a nice 1.1% speedup  pgo-builds base vs. simplification Results for 20 tests for each version:          Base      Test      Diff Mean    1974119   1995444   -21325 StDev   8703      5717      4623 p-value: 1 speedup: 0;011  No functional change.,True,0,2016-09-01
pb00068,mcostalba,2016-09-12 07:31:09+00:00,Pinned aware SEE  Don't allow pinned pieces to attack the exchange-square as long all pinners (this includes also potential ones) are on their original square. As soon a pinner moves to the exchange-square or get captured on it; we fall back to standard SEE behaviour.  This correctly handles the majority of cases with absolute pins.  bench: 6883133,True,0,2016-09-01
Stefano80,mcostalba,2016-09-11 05:42:12+00:00,Reorder evaluation start  In evaluate; we start by initializing the pos.psq_score and adding the material imbalance. After that; we check whether a specialized eval exists and if yes we return that value and discard whatever we have computed until now.  It sounds more logical to first probe material entry and return if we have a specialized eval; and only if it is not the case initialize eval with some values. There is no measurable speed-difference on my computer.  Non functional change.,True,6,2016-09-01
mcostalba,mcostalba,2016-09-09 15:11:54+00:00,Use Movepick SEE value in search  This halves the calls to the costly pos.see_sign(); speed up is about 1-1.3%  Non functional change.,True,4,2016-09-01
mcostalba,mcostalba,2016-09-08 04:02:42+00:00,Refactor previous patch  No functional change.,True,3,2016-09-01
ajithcj,mcostalba,2016-09-08 03:55:10+00:00,Prune dangerous moves at low depth  At very low depths prune captures; promotions and checks if see is negative.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 6772 W: 1328 L: 1173 D: 4271  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 8917 W: 1270 L: 1122 D: 6525  bench: 6024713,True,3,2016-09-01
mcostalba,mcostalba,2016-09-04 13:33:17+00:00,Syntactic sugar to loop across pieces  Also add some comments to the new operator~(Piece).  No functional change.,True,6,2016-09-01
syzygy1,mcostalba,2016-09-04 07:22:09+00:00,Change from [Color][PieceType] to [Piece]  Speed up of almost 1% in both normal and pgo builds.  No functional change.,True,6,2016-09-01
mcostalba,mcostalba,2016-09-03 06:21:05+00:00,Fix syzygy with partial TB  In case we have installed a not complete set of 6-men tables and there is 6 piece position on board; but no corresponding tablebase engine is not using any syzygy at all.  Reported by Jouni Uski; fix by Peter �sterlund; confirmed as a bug by Ronald de Man.  bench: 7591630,True,5,2016-09-01
snicolet,snicolet,2016-09-02 22:04:20+00:00,Unknown message,True,4,2016-09-01
lucasart,mcostalba,2016-09-02 06:37:01+00:00,Change exclusion key setup  Should depend on which move is excluded. This allow us to remove the dedicated Position::exclusion_key().  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 59814 W: 11136 L: 11083 D: 37595  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 31023 W: 4187 L: 4080 D: 22756  bench 7553379,True,4,2016-09-01
Stefano80,mcostalba,2016-09-02 06:25:17+00:00,Retire linear imbalance  Retire linear imbalance and compensate in piece values enumeration.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 43596 W: 8105 L: 8023 D: 27468  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 24482 W: 3352 L: 3237 D: 17893  Bench: 7777707,True,4,2016-09-01
ajithcj,mcostalba,2016-08-31 11:47:45+00:00,Optimize order of a few conditions in search  Also fix size of KingDanger array to reduce memory footprint.  Small speed up of around 0.5%  No functional change.,True,2,2016-08-01
VoyagerOne,mcostalba,2016-08-30 07:09:55+00:00,Remove condition on killers in history pruning  Now allows main killer to be history prune.  STC: LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 15852 W: 2910 L: 2781 D: 10161  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 56428 W: 7610 L: 7537 D: 41281  Bench: 8032058,True,1,2016-08-01
locutus2,mcostalba,2016-08-29 20:15:03+00:00,Tweak probcut threshold  Use better threshold for capture move generation.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 23265 W: 4415 L: 4188 D: 14662  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 36618 W: 5083 L: 4836 D: 26699  bench: 7030088,True,0,2016-08-01
Unknown,mcostalba,2016-08-28 07:47:30+00:00,Removed an extra space  No functional change.,True,6,2016-08-01
Rocky640,mcostalba,2016-08-28 06:49:40+00:00,Move king tropism to evaluate_king  No functional change.,True,6,2016-08-01
mcostalba,mcostalba,2016-08-28 06:08:13+00:00,Retire CheckInfo  Move its content directly under StateInfo.  Verified for no speed regression.  No functional change.,True,6,2016-08-01
mcostalba,mcostalba,2016-08-27 10:16:13+00:00,Silence some warnings with MSVC 2013  No functional change.,True,5,2016-08-01
snicolet,mcostalba,2016-08-27 07:53:26+00:00,Move CheckInfo under StateInfo  This greately simplifies usage because hides to the search the implementation specific CheckInfo.  This is based on the work done by Marco in pull request #716; implementing on top of it the ideas in the discussion: caching the calls to slider_blockers() in the CheckInfo structure; and simplifying the slider_blockers() function by removing its first parameter.  Compared to master; bench is identical but the number of calls to slider_blockers() during bench goes down from 22461515 to 18853422; hopefully being a little bit faster overall.  archlinux; gcc-6 make profile-build ARCH=x86-64-bmi2 50 runs each  bench: base = 2356320 +/- 981 test = 2403811 +/- 981 diff = 47490 +/- 1828  speedup = 0.0202 P(speedup > 0) = 1.0000  perft 6: base = 175498484 +/- 429925 test = 183997959 +/- 429925 diff = 8499474 +/- 469401  speedup = 0.0484 P(speedup > 0) = 1.0000  perft 7 (but only 10 runs): base = 185403228 +/- 468705 test = 188777591 +/- 468705 diff = 3374363 +/- 476687  speedup = 0.0182 P(speedup > 0) = 1.0000  $ ./pyshbench ../Stockfish/master ../Stockfish/test 20 run base     test     diff ...  base = 2501728 +/- 182034 test = 2532997 +/- 182034 diff = 31268 +/- 5116  speedup = 0.0125 P(speedup > 0) = 1.0000  No functional change.,True,5,2016-08-01
mcostalba,mcostalba,2016-08-27 07:12:25+00:00,Make engine ONE_PLY value independent  This non-functional change patch is a deep work to allow SF to be independent from the actual value of ONE_PLY (currently set to 1). I have verified SF is now independent for ONE_PLY values 1; 2; 4; 8; 16; 32 and 256.  This patch gives consistency to search code and enables future work; opening the door to safely tweaking the ONE_PLY value for any reason.  Verified for no speed regression at STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 95643 W: 17728 L: 17737 D: 60178  No functional change.,True,5,2016-08-01
gamander,mcostalba,2016-08-27 06:48:07+00:00,Fixed wrong definition of WhiteCamp and BlackCamp  No functional change.,True,5,2016-08-01
hxim,mcostalba,2016-08-27 06:39:32+00:00,Simplify stats update  Simplify code by moving countermove and follow-up move history update into procedure.  No functional change.,True,5,2016-08-01
mcostalba,mcostalba,2016-08-25 07:51:50+00:00,Reformat stats update  Rewritten in a way to have explicit in the search the bonus/penalty we apply: hopefully this will lead to further simplification/fix of current rather messy stats update code.  No functional change.,True,3,2016-08-01
VoyagerOne,mcostalba,2016-08-24 06:26:32+00:00,Refutation penalty on captures  Apply refutation penalty for prior PV quiet move on captures  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 8208 W: 1153 L: 1008 D: 6047 http://tests.stockfishchess.org/tests/view/57bc5a9f0ebc59030fbe47b5  Only LTC because a very similar patch already passed STC + LTC  bench: 7038730,True,2,2016-08-01
VoyagerOne,mcostalba,2016-08-19 06:59:18+00:00,Simplify IID  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 30468 W: 5687 L: 5582 D: 19199 http://tests.stockfishchess.org/tests/view/57b1ddd80ebc591c761f63e2  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 87406 W: 11756 L: 11725 D: 63925 http://tests.stockfishchess.org/tests/view/57b212590ebc591c761f63f9  bench: 6554900,True,4,2016-08-01
VoyagerOne,mcostalba,2016-08-19 06:50:14+00:00,Do LMR on captures  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 5361 W: 1086 L: 936 D: 3339 http://tests.stockfishchess.org/tests/view/57b31b0f0ebc591c761f643d  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 54694 W: 7591 L: 7287 D: 39816 http://tests.stockfishchess.org/tests/view/57b3442b0ebc591c761f6450  bench: 6881120,True,4,2016-08-01
mcostalba,mcostalba,2016-08-18 08:40:56+00:00,Remove a stale assignment  No more used after previous patch.  Spotted by Jekaa .  No functional change.,True,3,2016-08-01
Stefano80,mcostalba,2016-08-18 08:16:56+00:00,Retire pawn span  Retire pawn span and replace with pawn count in evaluate_scale_factor.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 26482 W: 4929 L: 4818 D: 16735  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 61938 W: 8400 L: 8335 D: 45203  Bench: 7662861,True,3,2016-08-01
VoyagerOne,mcostalba,2016-08-15 12:45:40+00:00,Use predicted depth for history pruning  STC: (Yellow) LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 69115 W: 12880 L: 12797 D: 43438  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 124163 W: 16923 L: 16442 D: 90798  Note: Note based off past experiments / patches... history pruning is quite TC sensitive. I believe the reason for this TC dependency is that the CMH/FMH is a very large table that takes time to fill up with. In addition having more time for will increase the accuracy of the stats' value.  Bench: 7351698,True,0,2016-08-01
Unknown,mcostalba,2016-08-13 08:12:09+00:00,Cap space evaluation bonus  When computing space evaluation; limit the bonus square count to 16.  STC @ 10+0.1 th 1: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 30793 W: 5910 L: 5648 D: 19235  LTC @ 60+0.6 th 1: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 31361 W: 4410 L: 4184 D: 22767  Bench: 7165385,True,5,2016-08-01
Rocky640,mcostalba,2016-08-10 10:49:24+00:00,Simplify space formula  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 16868 W: 3260 L: 3132 D: 10476  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 16910 W: 2381 L: 2255 D: 12274  bench: 6663531,True,2,2016-08-01
VoyagerOne,mcostalba,2016-08-02 07:17:14+00:00,Use Color-From-To history stats to help sort moves  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 33502 W: 6498 L: 6223 D: 20781 http://tests.stockfishchess.org/tests/view/578abb940ebc5972faa169e2  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 50782 W: 7124 L: 6832 D: 36826 http://tests.stockfishchess.org/tests/view/578b8e5d0ebc5972faa169fd  LTC: (Sanity test against latest master) LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 32759 W: 4600 L: 4370 D: 23789 http://tests.stockfishchess.org/tests/view/5798b7d30ebc591c761f5b72  bench: 6985912  P.S. Thanks @mstembera for rewriting my code to make it smp compatible. A BIG thank you!,True,1,2016-08-01
VoyagerOne,mcostalba,2016-08-01 19:47:42+00:00,Futility tweak  Use a different margin for pruning child nodes.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 16692 W: 3251 L: 3051 D: 10390 http://tests.stockfishchess.org/tests/view/579b95d10ebc591c761f5c03  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 24140 W: 3501 L: 3297 D: 17342 http://tests.stockfishchess.org/tests/view/579bb15d0ebc591c761f5c0b  Bench: 7927017,True,0,2016-08-01
ajithcj,mcostalba,2016-07-24 07:54:07+00:00,Allow null pruning at depth 1  This removes a check that prevents null pruning at depth 1 PLY.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 23445 W: 4638 L: 4521 D: 14286  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 61416 W: 8627 L: 8563 D: 44226  bench: 8145304,True,6,2016-07-01
Stefano80,mcostalba,2016-07-24 06:55:58+00:00,See prune at higher depth  Allow SEE pruning at higher depths in shallow depth pruning using a threshold increasing with depth.  STC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 35366 W: 7011 L: 6724 D: 21631  LTC LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 15578 W: 2243 L: 2070 D: 11265  Bench: 8417887,True,6,2016-07-01
ajithcj,mcostalba,2016-07-16 05:35:31+00:00,Gradually relax the NMP staticEval check  Gradually relax the NMP staticEval check as we go to higher depths.  Use tuned values.  STC LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 16745 W: 3371 L: 3168 D: 10206  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 5906 W: 875 L: 736 D: 4295  bench: 8548212,True,5,2016-07-01
lantonov,mcostalba,2016-07-16 05:06:13+00:00,Workaround gcc stack alignment bug  GCC uses SSE instructions to move data but in 32-bit gcc version used by abrok the stack is not 16-byte aligned due to a bug.  This patch workaround teh bug by not using the stack to store KingFlank[]  Fixes issue #721.  No functional change.,True,5,2016-07-01
joergoster,mcostalba,2016-07-12 06:47:21+00:00,Fix extract_ponder_from_tt()  Checking for legality of a possible ponder move must be done before we undo the first pv move; of course. (spotted by mohammed li.)  This obviously only has any effect when playing in ponder mode.  No functional change.,True,1,2016-07-01
snicolet,mcostalba,2016-07-08 07:35:22+00:00,King tropism  Bonus for each square that we attack in the flank where the opponent king is. Squares that we attack twice and are not protected by an enemy pawn count double.  Passed STC: http://tests.stockfishchess.org/tests/view/577dfca60ebc5972faa166b8 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 48373 W: 9832 L: 9481 D: 29060  And LTC: http://tests.stockfishchess.org/tests/view/577e77870ebc5972faa166df LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 8881 W: 1408 L: 1255 D: 6218  Bench: 7577046,True,4,2016-07-01
Rocky640,mcostalba,2016-07-07 06:39:58+00:00,"More safe checks  Consider a check given by a rook or a minor to be a ""safe check"" also in the case where supported by another piece; and given on a square only defended by a queen  Was yellow STC http://tests.stockfishchess.org/tests/view/576fcbc80ebc5972faa163e8 LLR: -2.96 (-2.94;2.94) [0.00;5.00] Total: 55453 W: 10431 L: 10315 D: 34707  Passed LTC http://tests.stockfishchess.org/tests/view/57733a0b0ebc5972faa164b7 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 54550 W: 7671 L: 7365 D: 39514  bench: 7398346",True,3,2016-07-01
ajithcj,mcostalba,2016-07-02 14:43:49+00:00,Use staticEval in null prune condition  Don't null prune at depth < 12 if staticEval < beta  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 62858 W: 12035 L: 11632 D: 39191  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 49784 W: 7009 L: 6720 D: 36055  bench: 8054611,True,5,2016-07-01
loco-loco,mcostalba,2016-06-26 08:25:05+00:00,Removing inCheck condition for counter move bonus  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20206 W: 3946 L: 3823 D:  LTC: LLR: 3.10 (-2.94;2.94) [-3.00;1.00] Total: 25004 W: 3512 L: 3390 D: 18102  Bench: 8172428,True,6,2016-06-01
mcostalba,mcostalba,2016-06-25 09:46:17+00:00,Restore standard passed pawn definition  Use the usual and accepted passed pawn semantic instead of a non-standard one and remove a FIXME.  STC (http://tests.stockfishchess.org/tests/view/576401350ebc5972faa1608d): LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 29646 W: 5663 L: 5557 D: 18426  LTC (http://tests.stockfishchess.org/tests/view/5764e4e90ebc5972faa160c3): LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 40224 W: 5578 L: 5484 D: 29162  bench: 7543902,True,5,2016-06-01
ElbertoOne,mcostalba,2016-06-24 06:46:36+00:00,Remove redundant PvNode condition  After commit 6d58bf777caa323 we always call PvNodes with cutNode set to false.  No functional change.,True,4,2016-06-01
VoyagerOne,mcostalba,2016-06-24 06:26:39+00:00,Comment out a redundant condition  Take advantage that VALUE_NONE = 32002 to remove the condition.  Commented out and not removed becuase it is tricky to rely on the hidden value of VALUE_NONE and code can break in case we change VALUE_NONE in the future.  No functional change.,True,4,2016-06-01
jcalovski,mcostalba,2016-06-21 07:01:39+00:00,Remove scalefactor dependency  STC http://tests.stockfishchess.org/tests/view/5764539e0ebc5972faa160a4 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 43878 W: 8289 L: 8208 D: 27381  LTC http://tests.stockfishchess.org/tests/view/5764f0130ebc5972faa160c9 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 39338 W: 5408 L: 5313 D: 28617  bench: 7977279,True,1,2016-06-01
ElbertoOne,mcostalba,2016-06-19 16:04:22+00:00,On IID do not always search with cutNode = true  On IID now search with cutNode value instead of fixed value true.  STC (http://tests.stockfishchess.org/tests/view/575fa3860ebc5972faa15f67): LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 163974 W: 30744 L: 30874 D: 102356  LTC (http://tests.stockfishchess.org/tests/view/5763b0640ebc5972faa16075): LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 48363 W: 6611 L: 6528 D: 35224  Bench: 7806393,True,6,2016-06-01
VoyagerOne,mcostalba,2016-06-18 06:32:25+00:00,Simplify Check Extension  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 32704 W: 6146 L: 6045 D: 20513  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 146622 W: 19967 L: 20017 D: 106638  Bench: 8245662,True,5,2016-06-01
ajithcj,mcostalba,2016-06-15 06:55:40+00:00,Don't insert pv back into tt  This code was added before the accurate pv patch; when we retrieved PV directly from TT.  It's not required for correct (and long) PVs any more and should be safe to remove it.  Also; allowing helper threads to repeatedly over-write TT doesn't seem to make sense(that was probably an un-intended side-effect of lazy smp). Before Lazy SMP only Main Thread used to run ID loop and insert PV into TT.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 74346 W: 13946 L: 13918 D: 46482  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 47265 W: 6531 L: 6447 D: 34287  bench: 8819179,True,2,2016-06-01
lucasart,mcostalba,2016-06-15 06:47:08+00:00,Do not hardcode Debug Log File  Allow to specifiy the log file name; this comes handy in case of self-matches so that each SF instance writes into a different log file.  No functional change.,True,2,2016-06-01
mcostalba,mcostalba,2016-06-11 07:24:40+00:00,Filter root moves filter before copy to threads  Currently root moves are copied to all teh threads but are DTZ filtered only in main thread at the beginning of teh search.  This patch moves the TB filtering before the copy of root moves fixing issue #679  https://github.com/official-stockfish/Stockfish/issues/679  No bench change.,True,5,2016-06-01
VoyagerOne,mcostalba,2016-06-10 05:27:47+00:00,Stat Formula Tweak  bonus = d * d + 2 * d - 2  STC: LLR: 2.94 (-2.94;2.94) [0.00;4.00] Total: 99444 W: 18274 L: 17778 D: 63392  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 89757 W: 12285 L: 11896 D: 65576  bench: 8276130,True,4,2016-06-01
VoyagerOne,mcostalba,2016-06-10 05:15:56+00:00,Tweak check extension condition  There are two concepts with this patch:  Limit check extensions by using move count. The idea is to limit search explosion.  Always extend check if the first move gives check. The idea is to save expensive SEE calls; since the vast majority of first move will have SEE value >= 0; also first move may still be strong even if the SEE is negative.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 16503 W: 3068 L: 2873 D: 10562  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 37202 W: 5261 L: 5014 D: 26927  bench: 8543366,True,4,2016-06-01
Rocky640,mcostalba,2016-06-10 04:53:07+00:00,Small Queen simplification  Moving a few lines from evaluate_threats to evaluate_pieces allows to a) Remove a condition pos.count<QUEEN>(Them) == 1 b) use precalculated s instead of pos.square(Them) c) do not check the condition at all in queenless endings  Passed STC http://tests.stockfishchess.org/tests/view/5752e0410ebc59029919b1f4 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 67175 W: 12194 L: 12152 D: 42829  and LTC http://tests.stockfishchess.org/tests/view/57587b140ebc59029919b2f4 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 20276 W: 2774 L: 2653 D: 14849  bench: 7907962,True,4,2016-06-01
Unknown,mcostalba,2016-06-10 04:43:37+00:00,Avoid some redundant scaling function calls  Posted by Mohammed Li here: https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/N-PHfN0O79o  No functional change.,True,4,2016-06-01
ElbertoOne,mcostalba,2016-06-07 13:15:49+00:00,LMR reduction parameter tweak  More reduction for cut nodes; less for moves that escape a capture:  STC (http://tests.stockfishchess.org/tests/view/57548c1e0ebc59029919b247): LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 60165 W: 11519 L: 11149 D: 37497  LTC (http://tests.stockfishchess.org/tests/view/57555b570ebc59029919b260): LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 10353 W: 1493 L: 1317 D: 7543  Bench: 8902859,True,1,2016-06-01
mcostalba,mcostalba,2016-06-07 13:06:26+00:00,Fix syzygy DTZ bug  In this position: 3K4/8/3k4/8/4p3/4B3/5P2/8 w - - 0 5  Current DTZ probe returns 1 instead of 15  What happens is that the double push f4 is erroneously detected as a win move.  After the push we have:  [D]3K4/8/3k4/8/4pP2/4B3/8/8 b - f3 0 5  And here the code misses the possible ep capture exf3.  The bug is in probe_dtz_no_ep() where is used probe_ab() that is blind to ep captures so it returns v == 2 (win) for position  3K4/8/3k4/8/4pP2/4B3/8/8 b - f3 0 5  Note that at the caller site the original position did not have any possible ep capture; so probe_dtz() returns immediately after calling probe_dtz_no_ep().  The fix is to call the ep-aware probe_wdl() instead of probe_ab()  I have verified that DTZ is correct now and also there are no more mistmatches compared to the new 'syzygy' branch. Tested on a set of more than 600 endgame positions; included some tricky ones.  For people interested to redo the test or doing additional tests please pull branch tb_dbg from https://github.com/mcostalba/Stockfish repo.  bench: 8450534 (bench unaffected because syzygy is not exercized during bench),True,1,2016-06-01
VoyagerOne,mcostalba,2016-06-03 17:58:42+00:00,Simplify Futility Pruning  Don't update bestValue when futility pruning.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 21933 W: 4031 L: 3912 D: 13990  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 46225 W: 6115 L: 6028 D: 34082  Bench: 8450534,True,4,2016-06-01
ElbertoOne,mcostalba,2016-06-03 17:53:04+00:00,LMR Simplification  LMR simplification that also gives a slight ELO gain; especially at LTC:  STC (http://tests.stockfishchess.org/tests/view/574ec8e20ebc59029919b147): LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32402 W: 5967 L: 5866 D: 20569  LTC (http://tests.stockfishchess.org/tests/view/574fbebf0ebc59029919b16d): LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 15103 W: 2103 L: 1975 D: 11025  Bench: 8248133,True,4,2016-06-01
joergoster,mcostalba,2016-06-03 05:39:27+00:00,Tuned values for piece check and attack unit factors  A middle ground patch of two successful tuning patches; one at STC; the other at LTC; which now passed both.  LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 67893 W: 12777 L: 12384 D: 42732  LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 30165 W: 4189 L: 3960 D: 22016  bench: 9209507,True,4,2016-06-01
snicolet,mcostalba,2016-05-28 12:57:58+00:00,Pins or discovered attacks on the opponent's queen  Bonus for pins or discovered attacks on the opponent's queen  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 32020 W: 5914 L: 5652 D: 20454  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 10946 W: 1530 L: 1375 D: 8041  Bench: 7031649,True,5,2016-05-01
snicolet,mcostalba,2016-05-28 12:52:21+00:00,Teach check_blockers to check also non-king pieces  This is a prerequisite for next patch  No functional change.,True,5,2016-05-01
snicolet,mcostalba,2016-05-26 10:33:44+00:00,Simplify doubled pawn  Only use doubled pawn malus when the doubled pawns are on consecutive squares.  Passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 7678 W: 1469 L: 1325 D: 4884  And LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 26739 W: 3562 L: 3449 D: 19728  Bench: 8211685,True,3,2016-05-01
Unknown,mcostalba,2016-05-20 17:44:50+00:00,More detailed dependence of time allocation on the magnitude of score change  10+0.1: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 5657 W: 1130 L: 979 D: 3548  60+0.6: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 36884 W: 5002 L: 4762 D: 27120  bench: 8428997,True,4,2016-05-01
loco-loco,mcostalba,2016-05-20 17:34:49+00:00,Assorted pruning tweaks  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 38257 W: 5206 L: 4961 D: 28090  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 16550 W: 3110 L: 2914 D: 10526  Bench: 8428997,True,4,2016-05-01
Unknown,mcostalba,2016-05-14 19:34:55+00:00,Fix a multiPV bug in lazy SMP  Where the helper threads were not doing multiPV at all.  Regression tested sprt @ 5+0.05 th 7  LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 73918 W: 11891 L: 11853 D: 50174  bench: 8716243,True,5,2016-05-01
snicolet,mcostalba,2016-05-13 11:01:59+00:00,Double pawn simplification  Try doubled pawn simplification; with psq table compensation.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 36094 W: 6558 L: 6463 D: 23073  LTC: LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 102352 W: 13417 L: 13404 D: 75531  Bench: 8716243,True,4,2016-05-01
loco-loco,mcostalba,2016-05-10 16:15:16+00:00,Merge good and bad quiets  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 58613 W: 10779 L: 10723 D: 37111  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 33608 W: 4539 L: 4436 D: 24633  Bench: 9441294,True,1,2016-05-01
Rocky640,mcostalba,2016-05-06 18:04:57+00:00,Unsafe checks  Introducing a new multi-purpose penalty related to King safety; which includes all kind of potential checks (from unsafe or unavailable squares currently occupied by some other piece)  This will indirectly detect and reward some pins; discovered checks; and motifs such as square vacation; or rook behind its pawn and aligned with King (example Black Rg8; g7 against Kg1); and penalize some pawn blockers (if they move; it allows a discovered check by the pawn).  And since it looks also at protected squares; it detects some potential defense overloading.  Finally; the rook contact checks had been removed some time ago. This test will give a small bonus for them; as well as for bishop contact checks.  Passed STC http://tests.stockfishchess.org/tests/view/5729ec740ebc59301a354b36 LLR: 2.94 (-2.94;2.94) [0.00;5.00] Total: 13306 W: 2477 L: 2296 D: 8533  and LTC http://tests.stockfishchess.org/tests/view/572a5be00ebc59301a354b65 LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 20369 W: 2750 L: 2565 D: 15054  bench: 9298175,True,4,2016-05-01
mcostalba,mcostalba,2016-05-05 07:09:07+00:00,Retire __popcnt64 intrinsic  Just use _mm_popcnt_u64() that is available both for MSVC abd Intel compiler.  Verified on MSVC that the produced assembly has the hardware 'popcnt' instruction.  No functional change.,True,3,2016-05-01
VoyagerOne,mcostalba,2016-05-05 06:53:50+00:00,Simplify History LMR Formula  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41713 W: 7589 L: 7504 D: 26620  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41353 W: 5484 L: 5391 D: 30478  Bench: 8946983,True,3,2016-05-01
mcostalba,mcostalba,2016-05-01 13:10:33+00:00,"Fix a warning with MSVC  Introduced by 2dd24dc4e618dc7b (""Use popcount intrinsic with Intel"")  No functional change.",True,6,2016-05-01
joergoster,mcostalba,2016-05-01 12:30:50+00:00,Fix LazySMP when searching to a fixed depth.  Currently; helper threads will only search up to the specified depth limit. Now let them search until the main thread has finished the specified depth.  On the other hand; we don't want to pick a thread with a higher search depth.  This may be considered cheating. ;-)  No functional change.,True,6,2016-05-01
erbsenzaehler,mcostalba,2016-05-01 12:18:16+00:00,Use popcount intrinsic with Interl compiler  It seems that icc used our fallback version of popcount. Now use intrinsics.  icc version 16.0.2 (gcc version 5.3.0 compatibility) bmi2 compile uname -r 4.5.1-1-ARCH  20xbench gives a nice speedup ./stockfish-icc-master 2161515 +- 34462 ./stockfish-icc-sse42 2260857 +- 50349,True,6,2016-05-01
Krgp,mcostalba,2016-05-01 12:11:28+00:00,"Remove useless -mbmi flag in Makefile  I could not find anything documented that is necessary that prepending -mbmi to -mbmi2 gives some benefit. Instead at https://gcc.gnu.org/onlinedocs/gcc/x86-Built-in-Functions.html#x86-Built-in-Functions  The following built-in functions are available when -mbmi is used. All of them generate the machine instruction that is part of the name. unsigned int __builtin_ia32_bextr_u32(unsigned int; unsigned int); unsigned long long __builtin_ia32_bextr_u64 (unsigned long long; unsigned long long);  The following built-in functions are available when -mbmi2 is used. All of them generate the machine instruction that is part of the name. unsigned int _bzhi_u32 (unsigned int; unsigned int) unsigned int _pdep_u32 (unsigned int; unsigned int) unsigned int _pext_u32 (unsigned int; unsigned int) unsigned long long _bzhi_u64 (unsigned long long; unsigned long long) unsigned long long _pdep_u64 (unsigned long long; unsigned long long) unsigned long long _pext_u64 (unsigned long long; unsigned long long)  and at https://gcc.gnu.org/ml/gcc/2014-02/msg00204.html  ( ""... The real optimization comes from being able to use pext (parallel bit extract); which can implement several bextr expressions in parallel."")  Apart from that we don't use all -msse -msse2 -msse3 -msse4.2 etc. but just -msse3 (or -msse4.2) only.  As regards to the speedup within noise level - this pull request is actually reversal of mcostalba#198 wherein prepending -mbmi to -mbmi2 was claimed to be 0.3% faster and here (removing -mbmi) gives 0.4% speed gain.",True,6,2016-05-01
snicolet,zamar,2016-04-30 21:23:22+00:00,Isolated pawn simplification  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 117822 W: 21697 L: 21744 D: 74381  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 92307 W: 12330 L: 12305 D: 67672  Bench: 8813983  Resolves #659,True,5,2016-04-01
VoyagerOne,zamar,2016-04-24 00:00:58+00:00,Use FMHs to assist with LMR formula.  STC: LLR: 2.99 (-2.94;2.94) [0.00;5.00] Total: 52232 W: 9654 L: 9304 D: 33274  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 115988 W: 15550 L: 15049 D: 85389  Bench: 7890808  Resolves #651,True,6,2016-04-01
erbsenzaehler,zamar,2016-04-23 23:55:56+00:00,Use -O3 for all compilers (including ICC)  There seems to be no benefit from using -fast over -O3 with icc. So use -O3 everywhere.  No functional change  Resolves #652,True,5,2016-04-01
DU-jdto,zamar,2016-04-23 01:04:28+00:00,Remove some pointless micro-optimizations  Seems to give around 1% speed-up for CPUs with popcnt support. Seems to give a very minor speed-up for CPUs without popcnt.  No functional change  Resolves #646,True,5,2016-04-01
mcostalba,mcostalba,2016-04-17 22:13:16+00:00,Fix incorrect draw detection  In this position we should have draw for repetition:  position fen rnbqkbnr/2pppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 moves g1f3 g8f6 f3g1 go infinite  But latest patch broke it.  Actually we had two(!) very subtle bugs; the first is that Position::set() clears the passed state and in particular 'previous' member; so that on passing setupStates; 'previous' pointer was reset.  Second bug is even more subtle: SetupStates was based on std::vector as container; but when vector grows; std::vector copies all its contents to a new location invalidating all references to its entries. Because all StateInfo records are linked by 'previous' pointer; this made pointers go stale upon adding more element to setupStates. So revert to use a std::deque that ensures references are preserved when pushing back new elements.  No functional change.,True,6,2016-04-01
loco-loco,zamar,2016-04-17 14:19:20+00:00,Add a second level of follow-up moves  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 6438 W: 1229 L: 1077 D: 4132  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 4000 W: 605 L: 473 D: 2922  bench: 7378965  Resolves #636,True,6,2016-04-01
mcostalba,mcostalba,2016-04-17 06:29:33+00:00,StateInfo is usually allocated on the stack by search()  And passed in do_move(); this ensures maximum efficiency and speed and at the same time unlimited move numbers.  The draw back is that to handle Position init we need to reserve a StateInfo inside Position itself and use at init time and when copying from another Position.  After lazy SMP we don't need anymore this gimmick and we can get rid of this special case and always pass an external StateInfo to Position object.  Also rewritten and simplified Position constructors.  Verified it does not regress with a 3 threads SMP test: ELO: -0.00 +-12.7 (95%) LOS: 50.0% Total: 1000 W: 173 L: 173 D: 654  No functional change.,True,6,2016-04-01
niklasf,zamar,2016-04-16 09:22:36+00:00,Fix last search info carried over to mate position  When starting search in a mate or stalemate position; Stockfish does not even care to reinitialize and start worker threads. However after search all threads are checked for the best move.  This can lead to bestmove and info beeing carried over from the last search.  Example session:      setoption name threads value 7     go movetime 4000     position startpos moves f2f3 e7e5 g2g4 d8h4     go movetime 4000  Actual output is like (almost always):      [...]     bestmove e2e4     info depth 0 score mate 0     info depth 20 seldepth 29 multipv 1 score cp 28 [...] pv e2e4     bestmove e2e4  Expected output / output after fix:      [...]     bestmove e2e4 ponder e7e6     info depth 0 score mate 0     bestmove (none)  Resolves #623,True,5,2016-04-01
mcostalba,mcostalba,2016-04-09 08:42:04+00:00,Hide global visibility when not needed  Also move PieceValue definition in psqt.cpp; where it is initialized.  Fix a warning in popcount16() with Intel compiler  No functional change.,True,5,2016-04-01
mcostalba,mcostalba,2016-04-09 07:35:19+00:00,"Fix Travis Cl  Broken after ""32-bit/64-bit Makefile fix"" commit.  Ubuntu ""Precise"" 12.04.5 supports multilib only until g++ 4.6 that is not enough to compile Stockfish.  So move to Ubuntu 14.04.4 LTS (Trusty Tahr)  No functional change.",True,5,2016-04-01
DU-jdto,zamar,2016-04-08 18:48:03+00:00,Small passed pawn simplification  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 21993 W: 4197 L: 4078 D: 13718  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 67213 W: 9135 L: 9077 D: 49001  Bench: 7482426  Resolves #622,True,4,2016-04-01
Rocky640,zamar,2016-04-08 18:22:33+00:00,Undefended King Ring  There was already a penalty for squares only defended by King (undefended)  This test records a penalty for completely undefended squares in the so called extended king-ring (so if we exclude squares defended by a Kg8 for example; we only look at h6 g6 and f6)  We also exclude squares occupied by opponent pieces in this computation; based on the following results  Was yellow at STC LLR: -2.97 (-2.94;2.94) [0.00;5.00] Total: 112499 W: 20649 L: 20293 D: 71557  and passed LTC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 36805 W: 5100 L: 4857 D: 26848  Bench: 8430233  Resolves: #619,True,4,2016-04-01
Rocky640,zamar,2016-04-08 18:12:55+00:00,Backward simplication  On top of the usual conditions a) some opponent in front (but no lever) b) some neighbours (in front) (but no neighbour behind or same rank) c) < rank_5  to find out if a pawn is backward we look at the squares in front of this pawn to reach the same rank as the next neighbour.  In current master; a pawn is backward if any of those squares is controlled by an enemy pawn on an adjacent file  In this version; a pawn is ALSO backward if any of those squares is occupied by an enemy pawn.  STC: http://tests.stockfishchess.org/tests/view/56fe7efd0ebc59301a3541f1 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 19051 W: 3557 L: 3433 D: 12061  LTC: http://tests.stockfishchess.org/tests/view/56febc2d0ebc59301a354209 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 40810 W: 5619 L: 5526 D: 29665  Bench: 7525245  Resolves #614,True,4,2016-04-01
Unknown,zamar,2016-04-08 17:52:15+00:00,Simplify popcnt  Also a speedup(about 1%) on 64-bit w/o hardware popcnt  Retire Max15 and Full template parameters (Contributed by Marco Costalba)  Now that we have just SW and HW versions; use template default parameter to get rid of explicit template parameters.  Retire bitcount.h and move the only defined function to bitboard.h  No functional change  Resolves #620,True,4,2016-04-01
lucasart,zamar,2016-04-08 17:47:31+00:00,32-bit/64-bit Makefile fix  Counter intuitively; make build ARCH=x86-32 does NOT produce a 32-bit compile when running a 64-bit OS. Nor would ARCH=x86-64 produce a 64-bit compile when running a 32-bit OS (assuming it compiled w/o errors).  No functional change  Resolves #621,True,4,2016-04-01
NicklasPersson,zamar,2016-03-31 12:26:00+00:00,A combo patch of two tuning patches  STC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 14223 W: 2700 L: 2494 D: 9029  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 66294 W: 9065 L: 8739 D: 48490  Bench: 7607385  Resolves #612,True,3,2016-03-01
lucasart,zamar,2016-03-31 12:22:37+00:00,Guard against UB in lsb/msb  lsb(b) and msb(b) are undefined when b == 0. This can lead to subtle bugs; where the resulting code behaves differently on different configurations: - It can be the home grown software LSB/MSB - It can be the compiler generated software LSB/MSB (when using compiler   intrinsics without the right compiler flags to allow compiler to use hardware   LSB/MSB). Which of course depends on the compiler. - It can be hardware LSB/MSB generated by the compiler. - Not to mention that hardware LSB/MSB can return different value on different   hardware when b == 0.  No functional change  Resolves #610,True,3,2016-03-01
mcostalba,zamar,2016-03-28 14:46:55+00:00,Rewrite bsfq management  Use compiler intrinsics when possible to avoid writing platform specific asm code.  Tested on Windows 7 with MSVC 2013 and mingw 4.8.3 (32 and 64 bit) and on Linux Mint with g++ 4.8.4 and clang 3.4 (32 and 64 bit).  No functional change  Resolves #609,True,0,2016-03-01
snicolet,zamar,2016-03-27 19:56:54+00:00,Bonus for loose enemies  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 30504 W: 5743 L: 5485 D: 19276  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 11936 W: 1651 L: 1493 D: 8792  Bench: 8880041  Resolves #606,True,6,2016-03-01
mbootsector,zamar,2016-03-27 19:22:48+00:00,Raise endgame passed pawn and material values  STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 136149 W: 25213 L: 24588 D: 86348  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 54637 W: 7533 L: 7238 D: 39866  Bench: 8546808  Resolves #608,True,6,2016-03-01
fbv-sf,zamar,2016-03-27 19:08:56+00:00,Simplify pawns King Safety calculation  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 130209 W: 23516 L: 23581 D: 83112  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 33541 W: 4563 L: 4460 D: 24518  Bench: 8644370  Resolves #604,True,6,2016-03-01
VoyagerOne,zamar,2016-03-15 03:54:49+00:00,A small simplification in movepick.h  No functional change  Resolves #597,True,1,2016-03-01
Unknown,zamar,2016-03-15 03:51:16+00:00,Simplify Safe Checks  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 11796 W: 2211 L: 2074 D: 7511  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 14324 W: 1935 L: 1806 D: 10583  Bench: 8075202  Resolves #600,True,1,2016-03-01
mcostalba,zamar,2016-03-15 03:42:44+00:00,Assorted cleanup of latest commits  No functional change.  Resolves #601,True,1,2016-03-01
locutus2,zamar,2016-03-10 22:26:06+00:00,Add followup moves history for move ordering  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 7955 W: 1538 L: 1378 D: 5039  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 5323 W: 778 L: 642 D: 3903  Bench: 8261839  Resolves #599,True,3,2016-03-01
mbootsector,zamar,2016-03-02 19:10:56+00:00,Passed pawn bonus simplification  STC: (yellow)  LLR: -2.96 (-2.94;2.94) [0.00;4.00] Total: 86114 W: 16063 L: 15921 D: 54130  LTC:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 14347 W: 2025 L: 1896 D: 10426  Bench: 8576437  Resolves #595,True,2,2016-03-01
snicolet,zamar,2016-03-02 00:02:03+00:00,Tweak initiative formula  Give more weight to the pawns number and the vertical king distance in evaluate_initiative()  Passed STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 26729 W: 5067 L: 4825 D: 16837  and LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 60480 W: 8338 L: 8016 D: 44126  Bench: 8295162  Resolves #594,True,2,2016-03-01
ElbertoOne,zamar,2016-02-28 13:40:47+00:00,Clean up depth reduction calculation  Might also be a slight speed up  No functional change  Resolves #593,True,6,2016-02-01
joergoster,zamar,2016-02-28 13:35:34+00:00,Pass endgame value to evaluate_scale_factor()  No functional change  Resolves #592,True,6,2016-02-01
VoyagerOne,zamar,2016-02-28 13:31:25+00:00,Simplify Reduction Formula  Formula now only contains one coefficient. Making it much easier to tune.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 187443 W: 34858 L: 35028 D: 117557  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 88329 W: 11982 L: 11953 D: 64394  Bench: 7521394  Resolves #591,True,6,2016-02-01
Unknown,zamar,2016-02-28 13:25:05+00:00,"Revert ""Remove slowMover""  This reverts commit 77fa960f8923ca83ba0391835d50f4230ac6a345.  Resolves #590",True,6,2016-02-01
IIvec,zamar,2016-02-21 20:16:28+00:00,Remove slowMover  Removes a slowMover and one paramater from move_importance function.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 77023 W: 14456 L: 14433 D: 48134  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 37175 W: 5190 L: 5092 D: 26893  Resolves #589,True,6,2016-02-01
VoyagerOne,zamar,2016-02-21 20:12:33+00:00,History Stat Formula Simplification  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 67476 W: 12561 L: 12521 D: 42394  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 111923 W: 15147 L: 15149 D: 81627  Bench: 8430465  Resolves #588,True,6,2016-02-01
VoyagerOne,zamar,2016-02-14 19:48:46+00:00,Fix futility pruning bug  PredictedDepth can be negative; causing the futility_margin to be negative. It will be very difficult to tweak moveCount pruning and reduction formula; as they are tuned to prevent this behavior.  No functional change  Resolves #587,True,6,2016-02-01
hxim,zamar,2016-02-07 21:00:24+00:00,Remove Weights  Removed remaining redundant weights for pawn structure; passed pawns; space and king safety by redistributing them into individual evaluation terms.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 15173 W: 2790 L: 2659 D: 9724  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 43433 W: 5936 L: 5846 D: 31651  Bench: 7156237  Resolves #586,True,6,2016-02-01
mcostalba,zamar,2016-02-07 20:54:25+00:00,Document HalfDensityMap  No functional change.  Resolves #584,True,6,2016-02-01
Unknown,zamar,2016-01-29 00:47:07+00:00,Time management simplification  10+0.1: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 41963 W: 7967 L: 7883 D: 26113  60+0.6: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 132314 W: 17939 L: 17969 D: 96406  Resolves #580,True,4,2016-01-01
pb00068,zamar,2016-01-24 14:08:01+00:00,rotating symmetric patterns with increasing skipsize  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] sprt @ 5+0.1 th 21 Total: 7068 W: 1121 L: 975 D: 4972  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] sprt @ 12+0.12 th 21 Total: 26691 W: 3594 L: 3481 D: 19616  No functional change with a single thread  Resolves #574,True,6,2016-01-01
Unknown,zamar,2016-01-20 15:24:21+00:00,Do not probe syzygy bases when castling is possible  Almost no functional change. Bench is unchanged.  Resolves #230 Resolves #573,True,2,2016-01-01
lucasart,zamar,2016-01-18 22:21:42+00:00,Retire RootNode template  There is no reason to compile 3 different copies of search(). PV nodes are on the cold path; and PvNode is a template parameter; so there is no cost in computing:  const bool RootNode = PvNode && (ss-1)->ply == 0;  And this simplifies code a tiny bit as well.  Speed impact is negligible on my machine (i7-3770k; linux 4.2; gcc 5.2):              nps   +/- test    2378605  3118 master  2383128  2793 diff      -4523  2746  Bench: 7751425  No functional change.  Resolves #568,True,0,2016-01-01
pb00068,zamar,2016-01-18 22:04:38+00:00,Depth margin parameter-tweak in TT-save  Verified that is improvement with multiple threads:  LLR: 2.95 (-2.94;2.94) [0.00;4.00] sprt @ 30+0.3 th 3 Total: 14817 W: 2103 L: 1915 D: 10799  LLR: 2.96 (-2.94;2.94) [0.00;4.00] sprt @ 15+0.15 th 7 Total: 10264 W: 1498 L: 1321 D: 7445  Verified that is not a significant regression with a single thread:  LLR: 2.96 (-2.94;2.94) [-4.00;0.00] sprt @ 60+0.6 th 1 Total: 23975 W: 3294 L: 3210 D: 17471  Resolves #575,True,0,2016-01-01
zamar,zamar,2016-01-18 21:54:40+00:00,Remove redundant -std=c++0x flag  This flag is functionally identical to '-std=c++11' flag which is part of standard flags.  No functional change  Resolves #571,True,0,2016-01-01
zamar,zamar,2016-01-18 21:47:52+00:00,Makefile: Allow specifying compiler executable  No functional change  Resolves #570,True,0,2016-01-01
mcostalba,mcostalba,2016-01-18 16:12:18+00:00,Rewrite time formula  Time management is really too complex; our aim is to simplify it; but for time being at least rewrite in an understandable way.  No functional change.,True,0,2016-01-01
lantonov,zamar,2016-01-16 21:34:29+00:00,Assorted English grammar changes  No functional change  Resolves #567,True,5,2016-01-01
Stefano80,zamar,2016-01-13 16:18:35+00:00,Adjust reductions based on history and cmh tables  STC: LLR: 4.06 (-2.94;2.94) [0.00;5.00] Total: 149395 W: 28029 L: 27208 D: 94158  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 9628 W: 1368 L: 1217 D: 7043  bench: 8076724  Resolves #565,True,2,2016-01-01
Stefano80,zamar,2016-01-13 16:03:53+00:00,Update comments in LMR step  No functional change  Resolves #564,True,2,2016-01-01
Unknown,zamar,2016-01-09 09:21:52+00:00,Tune time management for LTC  60+0.6: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 102533 W: 14270 L: 13842 D: 74421  Resolves #558,True,5,2016-01-01
lucasart,zamar,2016-01-03 17:33:36+00:00,Retire CenterBind  And compensate in the PSQT.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 27714 W: 5161 L: 5052 D: 17501  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 36354 W: 5008 L: 4909 D: 26437  Bench: 8603285  Resolves #556,True,6,2016-01-01
Rocky640,zamar,2016-01-03 14:15:29+00:00,Fine tuning of unsupported pawn penalty  Adjust the unsupported pawn penalty when the pawn is supporting 2 pawns (for example g7 in f6-g7-h6)  Passed STC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 23833 W: 4384 L: 4158 D: 15291  Passed LTC LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 42711 W: 5918 L: 5655 D: 31138  Bench: 8390233  Resolves #549,True,6,2016-01-01
Unknown,zamar,2016-01-03 14:01:15+00:00,Adjust time used for move based on previous score  Use less time if evaluation is not worse than for previous move and even less time if in addition no fail low encountered for current iteration.  STC: 10+0.1 ELO: 5.37 +-2.9 (95%) LOS: 100.0% Total: 20000 W: 3832 L: 3523 D: 12645  STC: 10+0.1 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 17527 W: 3334 L: 3132 D: 11061  LTC: 60+0.6 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 28233 W: 3939 L: 3725 D: 20569  LTC: 60+0.6 ELO: 2.43 +-1.4 (95%) LOS: 100.0% Total: 60000 W: 8266 L: 7847 D: 43887  LTC: 60+0.06 LLR: 2.95 (-2.94;2.94) [-1.00;3.00] Total: 38932 W: 5408 L: 5207 D: 28317  Resolves #547,True,6,2016-01-01
zamar,zamar,2016-01-03 13:52:01+00:00,Restore development version,True,6,2016-01-01
zamar,zamar,2016-01-02 20:26:02+00:00,Stockfish 7  Bench: 8355485  No functional change,True,5,2016-01-01
ppigazzini,zamar,2016-01-02 09:43:51+00:00,Update AUTHORS and copyright notice  No functional change  Resolves #555,True,5,2016-01-01
mcostalba,zamar,2016-01-01 10:17:36+00:00,Update Copyright year  No functional change.  Resolves #554,True,4,2016-01-01
zamar,zamar,2015-12-30 11:32:45+00:00,Stockfish 7 Beta 2  Bench: 8355485  No functional change,True,2,2015-12-01
Rocky640,zamar,2015-12-30 11:30:28+00:00,Correct Pawn Trace Score + Code Clean up  No functional change  Resolves #542,True,2,2015-12-01
mcostalba,zamar,2015-12-30 11:16:48+00:00,Fix assert with very high score position  In case of a very high material score; we can overflow VALUE_INFINITE.  This patch fixes an assert with:  position fen 7k/QQQQR3/2B5/4KN1Q/3QQ3/8/8/4R3 b - - 0 1 go depth 1  No functional change.  Resolves #546,True,2,2015-12-01
zamar,zamar,2015-12-27 19:36:56+00:00,Stockfish 7 Beta 1  Bench: 8355485  No functional change,True,6,2015-12-01
mcostalba,zamar,2015-12-27 19:29:16+00:00,Move some globals into main thread scope  Make it explicit that those variables are not globals; but are used only by main thread. I think it is a sensible clarification because easy move is already tricky enough and current patch makes the involved actors explicit.  No functional change.  Resolves #537,True,6,2015-12-01
mcostalba,mcostalba,2015-12-23 08:41:56+00:00,"Revert ""Fix compiling of 32 bit binary on 64-bit Windows""  This reverts commit 1e8836d921b3  Broken compile on mingw under Windows:  Config: debug: 'yes' optimize: 'yes' arch: 'i386' bits: '32' prefetch: 'yes' bsfq: 'no' popcnt: 'no' sse: 'yes' pext: 'no'  Flags: CXX: i686-w64-mingw32-c++ CXXFLAGS: -Wall -Wcast-qual -fno-exceptions -fno-rtti -std=c++11  -Wextra -Wshadow -g -O3 -msse LDFLAGS:  -static  Testing config sanity. If this fails; try 'make help' ...  mingw32-make[1]: Leaving directory 'C:/stockfish/src' c:/MinGw/bin/mingw32-make ARCH=x86-32 COMP=mingw all mingw32-make[1]: Entering directory 'C:/stockfish/src' sh: C:\Program: No such file or directory i686-w64-mingw32-c++ -Wall -Wcast-qual -fno-exceptions -fno-rtti -std=c++11  -Wextra -Wshadow -g -O3 -msse   -c -o benchmark.o benchmark.cpp <builtin>: recipe for target 'benchmark.o' failed process_begin: CreateProcess(NULL; i686-w64-mingw32-c++ -Wall -Wcast-qual -fno-exceptions -fno-rtti -std=c++11 -Wextra -Wshadow -g -O3 -msse -c -o benchmark.o benchmark.cpp; ...) failed. make (e=2): Impossibile trovare il file specificato.  mingw32-make[1]: *** [benchmark.o] Error 2 mingw32-make[1]: Leaving directory 'C:/stockfish/src' makefile:401: recipe for target 'build' failed mingw32-make: *** [build] Error 2  No functional change.",True,2,2015-12-01
braich,zamar,2015-12-22 19:07:10+00:00,Fix compiling of 32 bit binary on 64-bit Windows  Two versions of mingw-w64 (targeting Win64 and Win32) can be installed on Windows too.  No functional change  Resolves #532,True,1,2015-12-01
DU-jdto,zamar,2015-12-22 17:16:15+00:00,Remove another unnecessary Search::Stack field  No functional change  Resolves #535,True,1,2015-12-01
Rocky640,zamar,2015-12-22 10:02:37+00:00,New mobility bonus  Tuned the global mobility factor for each piece; as well as some +- delta;  The master mobility factor was {266;334} and tuning gave {267; 362} +S(-2;-2) for the Knight {249; 328} +S( 0;-2) for the Bishop {298; 353} +S(1;1) for the Rook {265; 358} +S(2;-1) for the Queen  Passed STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 49402 W: 9367 L: 9037 D: 30998  and LTC LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 26831 W: 3871 L: 3658 D: 19302  Bench: 8355485  Resolves #536,True,1,2015-12-01
VoyagerOne,zamar,2015-12-20 20:41:17+00:00,Remove killer move conditions from LMR  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 8459 W: 1619 L: 1477 D: 5363  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32239 W: 4404 L: 4299 D: 23536  Bench: 7597031  Resolves #534,True,6,2015-12-01
loco-loco,zamar,2015-12-20 20:37:18+00:00,Remove unused field SearchStack::ttMove  No functional change  Resolves #533,True,6,2015-12-01
pb00068,zamar,2015-12-18 21:59:09+00:00,Distinct iteration paths for Lazy SMP threads  STC 5+0.1; threads 7 LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 6026 W: 1047 L: 901 D: 4078  LTC: 20+0.2; threads 7 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 19739 W: 2910 L: 2721 D: 14108  STC 5+0.1; threads 20 LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 2493 W: 462 L: 331 D: 1700  LTC 30+0.3; threads 20 ELO: 8.86 +-3.7 (95%) LOS: 100.0% Total: 8000 W: 1076 L: 872 D: 6052  Bench: 8012530  Resolves #525,True,4,2015-12-01
Unknown,zamar,2015-12-14 18:47:12+00:00,Fix easy move bug in SMP mode  Fix a bug where we could stop the search after only 10% of time used due to a matching easy move but later switch to a different move that was never pre-screened as easy due to SMP thread select.  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 27227 W: 4910 L: 4800 D: 17517  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 40368 W: 5826 L: 5733 D: 28809  Resolves #521,True,0,2015-12-01
Rocky640,zamar,2015-12-14 18:11:13+00:00,Threats retuned  STC:  LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 45239 W: 8913 L: 8591 D: 27735  LTC:  LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 21046 W: 3200 L: 2989 D: 14857  Bench: 8012530  Resolves #526,True,0,2015-12-01
Unknown,zamar,2015-12-14 18:00:52+00:00,Simplify time management and fix 'ponder on' bug  Simplify time management code by removing hard stops for unchanging first root moves. Search is now stopped earlier at the end iteration if it did not have fail-lows at root.  This simplification also fixes pondering bug. Ponder flag was true by default and cutechess-cli doesn't change it to false even though no pondering is possible. Fix the issue by setting the default value of 'Ponder' flag to false.  10+0.1: ELO: 3.51 +-3.0 (95%) LOS: 99.0% Total: 20000 W: 3898 L: 3696 D: 12406  40+0.4: ELO: 1.39 +-2.7 (95%) LOS: 84.7% Total: 20000 W: 3104 L: 3024 D: 13872  60+0.06: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 37231 W: 5333 L: 5236 D: 26662  Stopped run at 100+1: LLR: 1.09 (-2.94;2.94) [-3.00;1.00] Total: 37253 W: 4862 L: 4856 D: 27535  Resolves #523 Fixes #510,True,0,2015-12-01
Unknown,zamar,2015-12-12 10:32:28+00:00,Fix MultiPv and Skill in SMP.  7 threads; 5+0.1: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 55460 W: 9665 L: 9601 D: 36194  No functional change in normal playing mode,True,5,2015-12-01
absimaldata,zamar,2015-12-05 10:31:00+00:00,New Tuned Weights  More accurate evaluation weights  Performed better at STC  LLR: 1.32 (-2.94;2.94) [0.00;4.00] Total: 190043 W: 37433 L: 36675 D: 115935  Passed LTC  LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 30157 W: 4540 L: 4303 D: 21314  Bench: 9264977  Resolves #515,True,5,2015-12-01
mcostalba,mcostalba,2015-12-05 10:16:19+00:00,Simplify outpost code  Also inline defintions of SpaceMask and CenterBindMask.  Verified from assembly that compiler computes the values at compile time; so it is also theoretical faster.  While there factor out scale factor evaluation.  No functional change.,True,5,2015-12-01
Unknown,zamar,2015-12-03 14:01:38+00:00,Proper Makefile for cross compiling 64 or 32 bit PGO + LTO + static Windows binaries under Linux.  No functional change  Resolves #511,True,3,2015-12-01
snicolet,zamar,2015-12-02 11:18:26+00:00,Introduce new Threats weights = {350; 256}  Raise the midgame threats weight by 37%.  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 8165 W: 1675 L: 1487 D: 5003  and LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 28181 W: 4141 L: 3912 D: 20128  Bench: 7824961  Resolves #512,True,2,2015-12-01
zamar,zamar,2015-11-25 01:24:45+00:00,"Revert ""Allow cross compilation of Windows binaries on a Linux system""  This reverts commit 388630ae285b3f9f0c8ee4f30e754bde6688c57c.  Confuses fishtest build system",True,2,2015-11-01
Unknown,zamar,2015-11-24 01:06:14+00:00,Allow cross compilation of Windows binaries on a Linux system  that are PGO; LTO; and statically linked. Credit: pasquale....@gmail.com  No functional change  Resolves #505,True,1,2015-11-01
Unknown,zamar,2015-11-21 07:30:07+00:00,Clean up RootMove less operator  This is used by std::stable_sort() to sort moves from highest score to lowest score.  1) The comment is incorrect since highest to lowest means descending. 2) It's more natural to implement a less operator using another less operator rather than a greater operator.  No functional change.  Resolves #504,True,5,2015-11-01
lucasart,zamar,2015-11-21 07:23:53+00:00,"Fix TT comment and static_assert()  Comment is based on a misunderstanding of what unaligned memory access is. Here is an article that explains it very clearly: https://www.kernel.org/doc/Documentation/unaligned-memory-access.txt  No matter how we define TTEntry or TTCluster; there will never be any unaligned memory access. This is because the complier knows the alignment rules; and does the necessary adjustments to make sure unaligned memory access does not occur.  The issue being adressed here has nothing to do with unaligned memory access. It is about cache performance. In order to achieve best cache performance: - we prefetch the cacheline as soon as possible. - we ensure that TT clusters do not spread across two cachelines. If they did;   we would need to prefetch 2 cachelines; which could hurt cache performance.  Therefore the true conditions to achieve this are: 1/ start adress of TT is cache line aligned. void TranspositionTable::resize() enforces this. 2/ TT cluster size should *divide* the cache line size. Currently; we pack 2 clusters per cache lines. It used to be 1 before ""TT sardines"". Does not matter what the ratio is; all we want is to fit an integer number of clusters per cache line.  No functional change.  Resolves #506",True,5,2015-11-01
mcostalba,mcostalba,2015-11-21 06:48:50+00:00,Rewrite how threads are spawned  Instead of creating a running std::thread and returning; wait in Thread c'tor that the native thread of execution goes to sleep in idle_loop().  In this way we can simplify how search is started; because when main thread is idle we are sure also all other threads will be idle; in any case; even at thread creation and startup.  After lazy smp went in; we can simpify and rewrite a lot of logic that is now no more needed. This is hopefully the final big cleanup.  Tested for no regression at 5+0.1 with 3 threads: LLR: 2.95 (-2.94;2.94) [-5.00;0.00] Total: 17411 W: 3248 L: 3198 D: 10965  No functional change.,True,5,2015-11-01
VoyagerOne,zamar,2015-11-16 04:40:09+00:00,History Pruning: Don't prune the main killer move.  Also increased pruned depth to 4.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 23380 W: 4581 L: 4350 D: 14449  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 28934 W: 4329 L: 4105 D: 20500  Bench: 8369743  Resolves #498,True,0,2015-11-01
kenta2,zamar,2015-11-16 04:34:37+00:00,Do not conceal the invocation of the benchmark program  It is better to be able to see what arguments it is being called with.  No functional change  Resolves #497,True,0,2015-11-01
locutus2,zamar,2015-11-14 14:31:45+00:00,Bonus for reachable outpost  Give a bonus for outpost squares which in reach of a bishop or knight.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 22725 W: 4570 L: 4339 D: 13816  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 15019 W: 2333 L: 2157 D: 10529  Bench: 8503181  Resolves #495,True,5,2015-11-01
mcostalba,mcostalba,2015-11-13 07:22:44+00:00,Retire ThreadBase  Now that we don't have anymore TimerThread; there is no need of this long class hierarchy.  Also assorted reformatting while there.  To verify no regression; passed at STC with 7 threads: LLR: 2.97 (-2.94;2.94) [-5.00;0.00] Total: 30990 W: 4945 L: 4942 D: 21103  No functional change.,True,4,2015-11-01
mcostalba,mcostalba,2015-11-13 07:13:59+00:00,"Fix broken UCI 'wait for stop'  When we reach the maximum depth; we can finish the search without a raise of Signals.stop. However; if we are pondering or in an infinite search; the UCI protocol states that we shouldn't print the best move before the GUI sends a ""stop"" or ""ponderhit"" command.  It was broken by lazy smp. Fix it by moving the stopping of the threads after waiting for GUI.  No functional change.",True,4,2015-11-01
lucasart,zamar,2015-11-10 21:46:02+00:00,Avoid friend  operator<<(os; pos) does not need to access any private members of pos.  No functional change.  Resolves #492,True,1,2015-11-01
lucasart,zamar,2015-11-10 21:41:42+00:00,Ensure that rootDepth < DEPTH_MAX  Indeed; if we use a depth >= DEPTH_MAX; we start having negative depth in the TT (due to int8_t cast).  No functional change in single thread mode  Resolves #490,True,1,2015-11-01
mcostalba,mcostalba,2015-11-03 10:27:00+00:00,"Get rid of timer thread  Unfortunately std::condition_variable::wait_for() is not accurate in general case and the timer thread can wake up also after tens or even hundreds of millisecs after time has elapsded. CPU load; process priorities; number of concurrent threads; even from other processes; will have effect upon it.  Even official documentation says: ""This function may block for longer than timeout_duration due to scheduling or resource contention delays.""  So retire timer and use a polling scheme based on a local thread counter that counts search() calls and a small trick to keep polling frequency constant; independently from the number of threads.  Tested for no regression at very fast TC 2+0.05 th 7: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 32969 W: 6720 L: 6620 D: 19629  TC 2+0.05 th 1: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 7765 W: 1917 L: 1765 D: 4083  And at STC TC; both single thread LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 15587 W: 3036 L: 2905 D: 9646  And with 7 threads LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 8149 W: 1367 L: 1227 D: 5555  bench: 8639247",True,1,2015-11-01
mbootsector,zamar,2015-11-02 10:05:43+00:00,Pick bestmove from the deepest thread.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 26930 W: 4441 L: 4214 D: 18275  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 7783 W: 1017 L: 876 D: 5890  No functional change in single thread mode  Resolves #485,True,0,2015-11-01
mcostalba,mcostalba,2015-10-31 18:26:35+00:00,Assorted trivia in search.cpp  The only interesting change is the moving of stack[MAX_PLY+4] back to its original position in id_loop (now renamed Thread::search).  No functional change.,True,5,2015-10-01
VoyagerOne,zamar,2015-10-31 18:17:00+00:00,New History Bonus Formula  bonus = d^2 + d - 1  Bench: 8639247  Resolves #484,True,5,2015-10-01
ajithcj,glinscott,2015-10-30 00:06:13+00:00,Reduce variation in rootDepth between different threads  Reduce the variation in Root Depth between different threads. This prevents threads from searching at a depth much higher than Main Thread.  Performed well at STC 24 Threads: ELO: 3.44 +-3.8 (95%) LOS: 96.1% Total: 10000 W: 1627 L: 1528 D: 6845  And LTC 24 Threads LLR: 1.43 (-2.94;2.94) [0.00;4.00] Total: 3804 W: 500 L: 420 D: 2884 ELO : +7.31 p-value: 73.16%  Passed no regression at STC 3 Threads: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 40457 W: 7148 L: 7060 D: 26249  And LTC 3 Threads: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 17704 W: 2489 L: 2364 D: 12851  Raising a pull request early as 24 Thread tests are very expensive and this is clearly a positive gain at high thread counts and high time controls. The change is a small parameter tweak with no additional logic.  No functional change for single thread mode.  Resolves #481,True,4,2015-10-01
snicolet,zamar,2015-10-29 15:28:59+00:00,Some code and comment cleanup  - Remove all references to split points - Some grammar and spelling fixes  No Functional change  Resolves #478,True,3,2015-10-01
lucasart,zamar,2015-10-25 09:15:45+00:00,Use atomics instead of volatile  Rely on well defined behaviour for message passing; instead of volatile. Three versions have been tested; to make sure this wouldn't cause a slowdown on any platform.  v1: Sequentially consistent atomics  No mesurable regression; despite the extra memory barriers on x86. Even with 15 threads and extreme time pressure; both acting as a magnifying glass:  threads=15; tc=2+0.02 ELO: 2.59 +-3.4 (95%) LOS: 93.3% Total: 18132 W: 4113 L: 3978 D: 10041  threads=7; tc=2+0.02 ELO: -1.64 +-3.6 (95%) LOS: 18.8% Total: 16914 W: 4053 L: 4133 D: 8728  v2: Acquire/Release semantics  This version generates no extra barriers for x86 (on the hot path). As expected; no regression either; under the same conditions:  threads=15; tc=2+0.02 ELO: 2.85 +-3.3 (95%) LOS: 95.4% Total: 19661 W: 4640 L: 4479 D: 10542  threads=7; tc=2+0.02 ELO: 0.23 +-3.5 (95%) LOS: 55.1% Total: 18108 W: 4326 L: 4314 D: 9468  As suggested by Joona; another test at LTC:  threads=15; tc=20+0.05 ELO: 0.64 +-2.6 (95%) LOS: 68.3% Total: 20000 W: 3053 L: 3016 D: 13931  v3: Final version: SeqCst/Relaxed  threads=15; tc=10+0.1 ELO: 0.87 +-3.9 (95%) LOS: 67.1% Total: 9541 W: 1478 L: 1454 D: 6609  Resolves #474,True,6,2015-10-01
Stefano80,zamar,2015-10-24 22:17:08+00:00,KRPPKRP endgame: Simplify ugly switch statement  No functional change  Resolves #470,True,5,2015-10-01
mcostalba,mcostalba,2015-10-24 15:29:12+00:00,Cleanup history stats  And other assorted trivia.  No functional change.,True,5,2015-10-01
Rocky640,mcostalba,2015-10-24 08:08:26+00:00,Simplify threats  Using less parameters and code to compute Threats Includes also a few spacing edits.  Run as a simplification.  Passed STC 10+0.1 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 18879 W: 3725 L: 3600 D: 11554  Passed LTC 60+0.4 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 74116 W: 11001 L: 10958 D: 52157  bench: 8004751,True,5,2015-10-01
VoyagerOne,mcostalba,2015-10-24 07:30:31+00:00,History pruning  Prune moves with negative History and CMH scores at low depth.  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 24182 W: 4672 L: 4439 D: 15071  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 12579 W: 1959 L: 1792 D: 8828  bench: 8907701,True,5,2015-10-01
mcostalba,mcostalba,2015-10-22 05:03:03+00:00,Update authors  Fishtest is a key factor of SF success.  Thanks to Fishtest we have not only greately improved ELO but; even more important; we have enabled a kind of joint development and testing that it is the herat of on open source project like SF.  Open sourcing is not just about open code; it is about commuity development. In case of a chess engine this has never been possible before due to missing a strong and strict testing environment that allows many people to contribute in a safe and coordinate way.  Fishtest is a new way of developing chess engines; something that has never exsisted before.  No functional change.,True,3,2015-10-01
Stefano80,glinscott,2015-10-21 02:49:01+00:00,Almost passed tuning attempts  Collect and give a second try to some almost passed tuning attempts and one-line tweaks from the last month.  Passed STC  LLR: 3.07 (-2.94;2.94) [0.00;4.00] Total: 15124 W: 2974 L: 2756 D: 9394  And LTC  LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 21577 W: 3507 L: 3289 D: 14781  Bench: 8855226  Resolves #464,True,2,2015-10-01
mbootsector,mcostalba,2015-10-20 04:58:08+00:00,Lazy SMP  Start all threads searching on root position and use only the shared TT table as synching scheme.  It seems this scheme scales better than YBWC for high number of threads.  Verified for nor regression at STC 3 threads LLR: -2.95 (-2.94;2.94) [-3.00;1.00] Total: 40232 W: 6908 L: 7130 D: 26194  Verified for nor regression at LTC 3 threads LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 28186 W: 3908 L: 3798 D: 20480  Verified for nor regression at STC 7 threads LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 3607 W: 674 L: 526 D: 2407  Verified for nor regression at LTC 7 threads LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 4235 W: 671 L: 528 D: 3036  Tested with fixed games at LTC with 20 threads ELO: 44.75 +-7.6 (95%) LOS: 100.0% Total: 2069 W: 407 L: 142 D: 1520  Tested with fixed games at XLTC (120secs) with 20 threads ELO: 28.01 +-6.7 (95%) LOS: 100.0% Total: 2275 W: 349 L: 166 D: 1760  Original patch of mbootsector; with additional work from Ivan Ivec (log formula); Joerg Oster (id loop simplification) and Marco Costalba (assorted formatting and rework).  Bench: 8116244,True,1,2015-10-01
snicolet,glinscott,2015-10-16 04:27:52+00:00,"Asymmetry bonus for the attacking side  Use asymmetry in the position (king separation; pawn structure) to compute an ""initiative bonus"" for the attacking side.  Passed STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 14563 W: 2826 L: 2636 D: 9101  And LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 14363 W: 2317 L: 2141 D: 9905  Bench: 8116244  Resolves #462",True,4,2015-10-01
VoyagerOne,glinscott,2015-10-12 21:00:54+00:00,"Combination of two ideas:  Apply bonus for the prior CMH that caused a fail low.  Balance Stats: CMH and History bonuses are updated differently. This eliminates the ""fudge"" factor weight when scoring moves. Also eliminated discontinuity in the gravity history stat formula. (i.e. stat scores will no longer inverse when depth exceeds 22)  STC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 21802 W: 4107 L: 3887 D: 13808  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 46036 W: 7046 L: 6756 D: 32234  Bench: 7677367",True,0,2015-10-01
jcalovski,zamar,2015-10-07 18:43:20+00:00,Retire rook contact checks  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 34114 W: 6363 L: 6265 D: 21486  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 61776 W: 9349 L: 9289 D: 43138  LTC (after rebasing): LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 15261 W: 2343 L: 2214 D: 10704  Bench: 7523382  Resolves #442,True,2,2015-10-01
mcostalba,mcostalba,2015-10-07 18:33:37+00:00,Travis CI: add gcc 4.8 for osx  This setup was still missing.  Suggested by St�phane Nicolet.  No functional change.,True,2,2015-10-01
mcostalba,mcostalba,2015-10-06 10:35:42+00:00,Travis CI: add clang and osx  Extend builds to clang and osx platforms.  And check bench numbers.  No functional change.,True,1,2015-10-01
Stefano80,glinscott,2015-10-06 02:49:52+00:00,Tuning of assorted values  Passed STC  LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 45401 W: 8590 L: 8274 D: 28537  Passed LTC  LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 36089 W: 5589 L: 5331 D: 25169  Bench: 8397672  Resolves #445,True,1,2015-10-01
Rocky640,zamar,2015-10-06 02:35:17+00:00,Remove queen threat evaluation  Threats by queen seem to be worthless.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 13627 W: 2607 L: 2473 D: 8547  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 19146 W: 2950 L: 2827 D: 13369  Bench: 8222484  Resolves #439,True,1,2015-10-01
mcostalba,mcostalba,2015-10-05 10:39:34+00:00,Add Trevis CI support  Add Travis CI support to GitHub repo.  After every push to master; Travis will build the sources directly from GitHub repo according to .travis.yml and verify everything is ok.  No functional change.,True,0,2015-10-01
mcostalba,mcostalba,2015-10-05 07:16:16+00:00,Fix a comment in TTEntry::save  Comment was slightly incorrect.  No functional change.,True,0,2015-10-01
mcostalba,mcostalba,2015-10-05 07:13:33+00:00,Run PVS-STUDIO analyzer  Fix issues after a run of PVS-STUDIO analyzer. Mainly false positives but warnings are anyhow useful to point out not very readable code.  Noteworthy is the memset() one; where PVS prefers ss-2 instead of stack. This is because memeset() could be optimized away by the compiler when using 'stack'; due to stack being a local variable no more used after memset. This should normally not happen; but when it happens it leads to very sublte and difficult to find bug; so better to be safe than sorry.  No functional change.,True,0,2015-10-01
locutus2,zamar,2015-10-03 10:50:06+00:00,File based passed pawn bonus  Add file based bonus for passed pawns. Values tuned by SPSA.  STC: LLR: 3.33 (-2.94;2.94) [0.00;5.00] Total: 36889 W: 6805 L: 6507 D: 23577  LTC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 32301 W: 5101 L: 4858 D: 22342  Bench: 8073614  Resolves #436,True,5,2015-10-01
jcalovski,zamar,2015-10-03 10:39:21+00:00,Bonus for checking moves  STC: LLR: 2.97 (-2.94;2.94) [0.00;5.00] Total: 14531 W: 2765 L: 2576 D: 9190  LTC: LLR: 3.20 (-2.94;2.94) [0.00;5.00] Total: 52518 W: 8107 L: 7782 D: 36629  Bench: 7556477  Resolves #435,True,5,2015-10-01
mcostalba,mcostalba,2015-09-30 08:47:20+00:00,Rework lock protecting  When changing 'search' and 'splitPointsSize' we have to use thread locks; not split point ones; because can_join() is called under the formers.  Verified succesfully with 24 hours toruture tests with 20 cores machine by Louis Zulli: it does not hangs.  Verifyed for no regressions with STC; 7 threads: LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 52804 W: 8159 L: 8087 D: 36558  No functional change.,True,2,2015-09-01
jcalovski,zamar,2015-09-19 16:14:35+00:00,Refine ranks and increase resulting bonus.  STC: LLR: 2.94 (-2.94;2.94) [0.00;4.00] Total: 272379 W: 51773 L: 50658 D: 169948  LTC: LLR: 3.06 (-2.94;2.94) [0.00;4.00] Total: 41504 W: 6555 L: 6273 D: 28676  bench: 7658406  Resolves #430,True,5,2015-09-01
Unknown,zamar,2015-09-18 00:33:40+00:00,Reduce writes in TT::probe().  Only refresh TT entry when it's really necessary. This should give a small speed boost for some machines. And it's a risk-free change.  No functional change.  Resolves #429,True,4,2015-09-01
Unknown,zamar,2015-09-18 00:13:45+00:00,Remove unnecessary generation check in TT save  Checking for generation is unnecessary because if the key matches then the entry was probed and refreshed earlier.  STC 2MB LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 57391 W: 10671 L: 10613 D: 36107 http://tests.stockfishchess.org/tests/view/55ef59fa0ebc5976a2d6da5d  LTC 8MB LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 60732 W: 9260 L: 9199 D: 42273 http://tests.stockfishchess.org/tests/view/55ef8fe60ebc5976a2d6da6b  STC 16MB LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 23443 W: 4369 L: 4293 D: 14781 http://tests.stockfishchess.org/tests/view/55ef8fe60ebc5976a2d6da6b  No functional change  Resolves #427,True,4,2015-09-01
locutus2,zamar,2015-09-15 12:55:09+00:00,Scales the endgame score by the number of pawns.  Credits goes also to Stephane Nicolet for his great idea of scaling by pawns.  STC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 9994 W: 1929 L: 1760 D: 6305  LTC: LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 11240 W: 1789 L: 1626 D: 7825  bench 7298564  Resolves #423,True,1,2015-09-01
zamar,zamar,2015-09-10 18:15:43+00:00,"Careful SMP locking - Fix very occasional hangs  Louis Zulli reported that Stockfish suffers from very occasional hangs with his 20 cores machine.  Careful SMP debugging revealed that this was caused by ""a ghost split point slave""; where thread was marked as a split point slave; but wasn't actually working on it.  The only logical explanation for this was double booking; where due to SMP race; the same thread is booked for two different split points simultaneously.  Due to very intermittent nature of the problem; we can't say exactly how this happens.  The current handling of Thread specific variables is risky though. Volatile variables are in some cases changed without spinlock being hold. In this case standard doesn't give us any kind of guarantees about how the updated values are propagated to other threads.  We resolve the situation by enforcing very strict locking rules: - Values for key thread variables (splitPointsSize; activeSplitPoint; searching) can only be changed when the thread specific spinlock is held. - Structural changes for splitPoints[] are only allowed when the thread specific spinlock is held. - Thread booking decisions (per split point) can only be done when the thread specific spinlock is held.  With these changes hangs didn't occur anymore during 2 days torture testing on Zulli's machine.  We probably have a slight performance penalty in SMP mode due to more locking.  STC (7 threads): ELO: -1.00 +-2.2 (95%) LOS: 18.4% Total: 30000 W: 4538 L: 4624 D: 20838  However stability is worth more than 1-2 ELO points in this case.  No functional change  Resolves #422",True,3,2015-09-01
Unknown,zamar,2015-09-07 19:17:39+00:00,Minor clean up of some function parameters  No function change  Resolves #416,True,0,2015-09-01
Unknown,zamar,2015-09-06 21:19:33+00:00,"Fix syzygy en passant issue  v = value without ep capture being considered v1 = value of the ep capture  The correct logic is: if without e.p. capture we are losing; and the value of e.p is either draw; or win or ""loss; but 50 move rule saves us""; then we should use the value of ep capture.  Credit and thanks to syzygy1 and lantonov !  No functional change (except with syzygy bases)  Resolves #415 Resolves #394",True,6,2015-09-01
Unknown,zamar,2015-08-30 18:58:32+00:00,A small code simplification  No functional change  Resolves #411,True,6,2015-08-01
zamar,zamar,2015-08-29 14:09:00+00:00,History gravity  Instead of using hard coded Min and Max values for history; always adjust the old value slightly downwards before adding a new value.  The adjustment acts like gravity that prevents the value escaping too far from zero.  Bench: 8020484  Resolves #407,True,5,2015-08-01
mcostalba,mcostalba,2015-08-29 06:28:01+00:00,Reformat trace code  Apart from usual renaiming; take advantage of C++11 function template default parmeter to get rid of Eval trampoline functions.  Some triviality fixes while there.  No functional change.,True,5,2015-08-01
lucasart,zamar,2015-08-28 19:33:12+00:00,Prune castling moves  Align the behaviour with reductions. Initially castling moves had to be treated differently; because the SEE did not handle them correctly. But now it does.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 83750 W: 15722 L: 15711 D: 52317  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 97183 W: 15120 L: 15115 D: 66948  bench 7759837  Resolves #403,True,4,2015-08-01
Unknown,zamar,2015-08-20 19:27:06+00:00,Better document entry age calculation used in TT replace.  No functional change.  Resolves #401 Resolves #400,True,3,2015-08-01
lucasart,zamar,2015-08-20 19:18:23+00:00,Retire dangerous flag  Replace by its value where it is used. Code is more clear that way.  No functional change.  Resolves #402,True,3,2015-08-01
Rocky640,zamar,2015-08-17 18:32:43+00:00,"Retire PawnSafePush bonus  PawnSafePush; with the value S(5;5) proved not ""necessary"" possibly due to recent changes to MobilityArea and other changes to Connected bonus.  STC: LLR: 3.22 (-2.94;2.94) [-3.00;1.00] Total: 98528 W: 18757 L: 18759 D: 61012  LTC: LLR: 5.30 (-2.94;2.94) [-3.00;1.00] Total: 204194 W: 31698 L: 31734 D: 140762  Bench: 7620871  Resolves #396",True,0,2015-08-01
mcostalba,mcostalba,2015-08-15 14:04:16+00:00,Reformat PassedPawnsBonus  Align to SF coding standards.  No functional change.,True,5,2015-08-01
Unknown,zamar,2015-08-15 11:24:48+00:00,TT entry value based on depth and relative age  Calculate TT replace value as depth minus eight times relative age.  STC 2MB LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 45258 W: 8595 L: 8279 D: 28384  LTC 8MB LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 56401 W: 8809 L: 8489 D: 39103  STC 16MB LLR: 2.96 (-2.94;2.94) [-4.00;0.00] Total: 34764 W: 6565 L: 6529 D: 21670  Bench: 9069474  Resolves #395,True,5,2015-08-01
DiscanX,glinscott,2015-08-09 17:26:59+00:00,Tuned values for mid and end game passed pawns.  STC : LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 22691 W: 4468 L: 4228 D: 13995  LTC : LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 13620 W: 2216 L: 2023 D: 9381  Bench: 8384669  Resolves #391,True,6,2015-08-01
Unknown,zamar,2015-08-08 16:49:53+00:00,Revert TT replacement strategy changes (#380)  It could cause problems with high depths and long time controls  Bench: 8626315  Resolves #390,True,5,2015-08-01
mcostalba,mcostalba,2015-08-04 07:51:06+00:00,Rename Position::list  Use Position::square and Position::squares instead.  This allow us to remove king_square(); simplify endgames and to have more naming uniformity.  Moreover; this is a prerequisite step in case in the future we decide to retire piece lists altoghter and use pop_lsb() to loop across pieces and serialize the moves. In this way we just need to change definition of Position::square to something like:  template<PieceType Pt> inline Square Position::square(Color c) const {   return lsb(byColorBB[c]); }  No functional change.,True,1,2015-08-01
mcostalba,mcostalba,2015-07-30 07:54:25+00:00,Simplify IID depth formula  Restore original formula messed up during half-ply removal.  STC LLR: 4.11 (-2.94;2.94) [-3.00;1.00] Total: 21349 W: 4091 L: 3909 D: 13349  LTC LLR: 5.42 (-2.94;2.94) [-3.00;1.00] Total: 52819 W: 8321 L: 8122 D: 36376  bench: 8040572,True,3,2015-07-01
VoyagerOne,glinscott,2015-07-29 16:51:49+00:00,PV refutation penalty  Extra penalty for PV move in previous ply when it gets refuted.  STC: LLR: 4.49 (-2.94;2.94) [-1.50;4.50] Total: 41094 W: 7889 L: 7620 D: 25585  LTC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 12304 W: 1967 L: 1811 D: 8526  Bench: 8373608  Resolves #386,True,2,2015-07-01
Rocky640,glinscott,2015-07-29 16:47:51+00:00,"MobilityArea (simplified)  Based off of Pull request #383:  Include squares occupied by some pawns in the MobilityArea a) not blocked b) on rank 4 and above c) or captures  Passed STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 8157 W: 1644 L: 1516 D: 4997  And LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 26086 W: 4274 L: 4051 D: 17761  -----------  Then; a simplification test failed; trying to remove b and c) LLR: -2.95 (-2.94;2.94) [-3.00;1.00] Total: 6048 W: 1117 L: 1288 D: 3643  Another simplification test; was run to remove just (c) Passed STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 28073 W: 5364 L: 5255 D: 17454  And LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 34652 W: 5448 L: 5348 D: 23856  A parameter tweak test showed that changing b) for ""on rank 3 and above"" does not work LLR: -2.95 (-2.94;2.94) [0.00;4.00] Total: 5233 W: 937 L: 1077 D: 3219  Finally; a small rewrite; and we have this version  Include squares occupied by some pawns in the MobilityArea which are a) not blocked b) on rank 4 and above  Bench: 8977899  Resolves #385",True,2,2015-07-01
Unknown,glinscott,2015-07-24 16:33:53+00:00,Tuned version of TT replacement policy  If the used multiplier of 8 was any number larger than DEPTH_MAX this would be a non functional patch.  STC 2MB LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 16353 W: 3216 L: 3066 D: 10071 http://tests.stockfishchess.org/tests/view/55a6d0630ebc590abbe1babd  LTC 8MB LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 134618 W: 21276 L: 20716 D: 92626 http://tests.stockfishchess.org/tests/view/55a74d760ebc590abbe1bad6  STC 16MB LLR: 2.96 (-2.94;2.94) [-4.00;0.00] Total: 22549 W: 4257 L: 4178 D: 14114 http://tests.stockfishchess.org/tests/view/55a9a2f90ebc590abbe1bb16  Bench: 7372460  Resolves #380,True,4,2015-07-01
mcostalba,mcostalba,2015-07-19 10:38:33+00:00,Tidy up in movepick.cpp  Some formattng after recent changes.  No functional change.,True,6,2015-07-01
mcostalba,mcostalba,2015-07-16 06:17:40+00:00,Fix formatting of previous patch  No functional change.,True,3,2015-07-01
VoyagerOne,zamar,2015-07-15 19:21:14+00:00,LMR Simplification: Remove countermove condition  Removed countermove condition for decreasing reduction.  LTC: LLR: 3.01 (-2.94;2.94) [-3.00;1.00] Total: 32410 W: 5092 L: 4986 D: 22332  STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 24450 W: 4632 L: 4517 D: 15301  Bench: 6943812  Resolves #378,True,2,2015-07-01
Unknown,zamar,2015-07-15 19:17:16+00:00,Consistent TT replace policy  This fixes an inconsistency bug where TT entries were valued differently depending on which pointer they were accessed through.  STC 2MB LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 11301 W: 2176 L: 2038 D: 7087  LTC 8MB LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17732 W: 2870 L: 2745 D: 12117  STC 16MB LLR: 2.96 (-2.94;2.94) [-4.00;0.00] Total: 17401 W: 3324 L: 3227 D: 10850  Bench: 8248164  Resolves #377,True,2,2015-07-01
joergoster,zamar,2015-07-12 19:48:50+00:00,Use distance<file>() function in endgame.cpp  This one occurance of distance function was most likely overlooked.  No functional change.  Resolves #376,True,6,2015-07-01
mcostalba,mcostalba,2015-07-09 06:13:30+00:00,Remove useless razoring condition  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20626 W: 3977 L: 3855 D: 12794  LTC: LLR: 3.10 (-2.94;2.94) [-3.00;1.00] Total: 87334 W: 13675 L: 13648 D: 60011  Retire also the now unused pawn_on_7th() helper.  bench: 8248166,True,3,2015-07-01
VoyagerOne,zamar,2015-07-04 13:22:41+00:00,CMH Fix: Exclude captures for TT move refutation penalty  This will make sure we store only quiet moves for TT Penalty.  STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 34748 W: 6617 L: 6420 D: 21711  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 19975 W: 3259 L: 3137 D: 13579  Bench: 8063826  Resolves #373,True,5,2015-07-01
mcostalba,mcostalba,2015-06-28 08:56:42+00:00,Correctly check for no-makefile compile  Under Windows with MSVC we use the IDE to compile; in this case we infer some compiler flags usually set by Makefile.  The condition to check this was wrong; namely when compiling with mingw under Windows 64 bit we always set IS_64BIT and USE_BSFQ even if compiled with ARCH=x86-32 (this is how I found it).  Small code style touches while there.  No functional change.,True,6,2015-06-01
VoyagerOne,zamar,2015-06-27 08:45:59+00:00,LMR Tweak: Decrease reduction if cmh>0 && history>0.  STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 9627 W: 1879 L: 1748 D: 6000  LTC: LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 21543 W: 3433 L: 3234 D: 14876  Bench: 8646407  Resolves #370 #371,True,5,2015-06-01
mcostalba,mcostalba,2015-06-25 03:29:56+00:00,"Fix compile on icc  Error is:    a value of type ""int"" cannot be assigned to an entity of type ""Value""  Also retire the now unused squares_of_color() function.  No functional change.",True,3,2015-06-01
joergoster,zamar,2015-06-17 14:02:57+00:00,Small coding style fix for Outpost array  No functional change  Resolves #367,True,2,2015-06-01
lucasart,zamar,2015-06-13 15:59:50+00:00,Retire -Wno-long-long  long long is part of the C++11 standard.  No functional change.  Resolves #364,True,5,2015-06-01
lucasart,zamar,2015-06-07 08:49:01+00:00,Simplify outpost evaluation  STC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 114149 W: 21986 L: 22032 D: 70131  LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 52232 W: 8468 L: 8396 D: 35368  Bench: 6716940  No functional change  Resolves #363,True,6,2015-06-01
cuddlestmonkey,zamar,2015-06-05 20:03:10+00:00,Remove intermediate re-search in LMR  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20149 W: 3830 L: 3707 D: 12612  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 45384 W: 7089 L: 7006 D: 31289  Bench: 8110365  Resolves #361,True,4,2015-06-01
mcostalba,mcostalba,2015-06-04 13:51:45+00:00,Rename stages  Hopefully more clear.  No functional change.,True,3,2015-06-01
lucasart,glinscott,2015-06-02 19:09:19+00:00,Tune pawn shelter/storm  STC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 31679 W: 6183 L: 5912 D: 19584  LTC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 43550 W: 6885 L: 6602 D: 30063  Bench: 9219343  Resolves #360,True,1,2015-06-01
snicolet,glinscott,2015-06-02 19:07:02+00:00,Tweak backward pawns definition  Advanced pawns cannot be backward. Also lower the backward penalty in endgame.  Passed STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 18534 W: 3588 L: 3433 D: 11513  and LTC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 21319 W: 3415 L: 3217 D: 14687  Bench: 7271152  Resolves #359,True,1,2015-06-01
mcostalba,mcostalba,2015-05-29 03:38:40+00:00,Checking for rook color when setting castling  In Chess960 we can have legal positions with opponent rook in A or H file and with castling available; for instance:  4k3/pppppppp/8/8/8/8/PPPPPPPP/rR2K3 w Q - 0 1  In those cases we pick up the wrong rook when setting castling.  Fix it by checking the color of the rook.  Bug reported by Matthew Lai.  No functional change.,True,4,2015-05-01
lucasart,zamar,2015-05-27 19:05:20+00:00,Simplify backward pawn scoring  STC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 52322 W: 10011 L: 9945 D: 32366  LTC  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 14143 W: 2334 L: 2203 D: 9606  Bench: 7976423  Resolves #354,True,2,2015-05-01
zamar,zamar,2015-05-24 12:07:15+00:00,Resolve build failure for Mac  Remove '-Wl' switch from gcc arguments when compiling for Mac  No functional change  Resolves #353,True,6,2015-05-01
lucasart,zamar,2015-05-21 18:56:01+00:00,Fix merge error for Tuned PSQT  Fall-out from 411e704f  Bench: 7907776  Resolves #352,True,3,2015-05-01
locutus2,glinscott,2015-05-18 20:59:30+00:00,Remove Gain Stats  Additionally in futility pruning the margin is raised for compensation.  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 48481 W: 9229 L: 9156 D: 30096  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32058 W: 5134 L: 5031 D: 21893  Bench: 8098149  Resolves #350,True,0,2015-05-01
lucasart,glinscott,2015-05-18 20:54:45+00:00,Tuned PSQT  STC: LLR: 3.11 (-2.94;2.94) [-0.50;4.50] Total: 58764 W: 11530 L: 11185 D: 36049  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.50] Total: 282710 W: 46339 L: 45209 D: 191162  Bench: 8512947  Resolves #349,True,0,2015-05-01
mcostalba,mcostalba,2015-05-10 07:42:26+00:00,Cleanup work in misc.cpp  Also some code style tidy up of latest patches.  Also renamed checkSq -> checkSquares because it is a bitboard and not a square.  No functional change.,True,6,2015-05-01
Unknown,zamar,2015-05-09 16:43:57+00:00,Smart TT save  Don't overwrite more valuable data with less valuable data  STC 2MB LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 21132 W: 4108 L: 3946 D: 13078 http://tests.stockfishchess.org/tests/view/5547d59f0ebc5940ca5d6883  LTC 8MB LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 13381 W: 2149 L: 1987 D: 9245 http://tests.stockfishchess.org/tests/view/5549b5a80ebc5940ca5d68b9  STC 16MB regression w/ zero effective hash pressure LLR: 2.96 (-2.94;2.94) [-5.00;0.00] Total: 18944 W: 3607 L: 3564 D: 11773 http://tests.stockfishchess.org/tests/view/554b0fda0ebc5940ca5d68ea  Bench: 8787152  Resolves #347,True,5,2015-05-01
lucasart,zamar,2015-05-09 13:06:19+00:00,Edge distance  Instead of crafting a clever formula to calculate the array offset; simply use a 3 dimensional array. Remove the comment while at it; because now the code is self-documenting.  No functional change.  Resolves #344,True,5,2015-05-01
lucasart,glinscott,2015-05-07 21:20:32+00:00,Restore deterministic search state  Introduce helper function Search::reset() which clears all kind of search memory; in order to restore a deterministic search state.  Generalize TT.clear() into Search::reset() for the following use cases: - bench: needed to guarantee deterministic bench (ie. if you call bench from interactive command line twice in a row you get the same value). - Clear Hash: restore clean search state; which is the purpose of this button. - ucinewgame: ditto.  No functional change.  Resolves #346,True,3,2015-05-01
lucasart,lucasart,2015-05-06 11:17:33+00:00,Never clear stats  Based on an idea and patch by VoyagerOne.  Small simplification; but was tedted for an ELO gain anyway.  STC: LLR: 2.95 (-2.94;2.94) [-1.00;4.00] Total: 5375 W: 1119 L: 977 D: 3279  LTC: LLR: 2.95 (-2.94;2.94) [0.00;5.00] Total: 17893 W: 2984 L: 2792 D: 12117  bench 8322847,True,2,2015-05-01
mcostalba,mcostalba,2015-05-03 18:07:52+00:00,Halve PSQT row data  Use symmetry along vertical middle axis of the board to reduce the number of parameters.  For instance psqt value of SQ_A5 == SQ_A4 and value of SQ_F8 == SQ_F1.  This is always true; at least until now nobody came in with an asymmetric psqt table that worked.  Original patch by Lucas.  No functional change.,True,6,2015-05-01
mcostalba,mcostalba,2015-05-03 18:07:15+00:00,Split PSQT init from Position init  Easier for tuning psq tables:  TUNE(myParameters; PSQT::init);  Also move PSQT code in a new *.cpp file; and retire the old and hacky psqtab.h that required to be included only once to work correctly; this is not idiomatic for a header file.  Give wide visibility to psq tables (previously visible only in position.cpp); this will easy the use of psq tables outside Position; for instance in move ordering.  Finally trivial code style fixes of the latest patches.  Original patch of Lucas Braesch.  No functional change.,True,6,2015-05-01
Stefano80,glinscott,2015-05-03 17:19:34+00:00,Improve ordering of good captures using rank term  Rank based term improved approximation of pos.see() for scoring good captures.  STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 4632 W: 945 L: 827 D: 2860  LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 25770 W: 4184 L: 3964 D: 17622  Bench: 7593704  Resolves #342,True,6,2015-05-01
Stefano80,zamar,2015-04-28 21:07:48+00:00,Replace MVV/LVA by MVV for good captures  Passed STC  LLR: 3.71 (-2.94;2.94) [-3.00;1.00] Total: 64363 W: 12299 L: 12214 D: 39850  and LTC  LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 69976 W: 11056 L: 11011 D: 47909  Bench: 8012532  Resolves #340,True,1,2015-04-01
VoyagerOne,zamar,2015-04-26 19:12:25+00:00,Change extra ply LMR condition to: cmh <= 0 && hist < 0  Extra ply LMR condition is now cmh <= 0 && h < 0 Instead of cmh + h < 0  STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 55210 W: 10812 L: 10557 D: 33841  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 13212 W: 2239 L: 2045 D: 8928  Bench: 8420865  Resolves #339,True,6,2015-04-01
Rocky640,zamar,2015-04-18 21:17:46+00:00,Exclude queen from Rook Contact Check computation  In ei.attackedBy; Queen does not x-ray through Rook; but the Rook does X-ray through the Queen.  So most of the rook contact checks supported by queen are; in fact; Queen Contact Checks and they are already scored separately.  Bench: 7762189  Resolves #338,True,5,2015-04-01
lucasart,zamar,2015-04-15 20:21:45+00:00,Retire FORCE_INLINE  No speed regression on my machine (i7-3770k; gcc 4.9.1; linux 3.16):          stat        test     master   diff         mean   2;482;415  2;474;987  7;906         stdev      4;603      5;644  2;497          speedup        0.32%         P(speedup>0)  100.0%  Fishtest 9+0.03:  ELO: 0.26 +-1.8 (95%) LOS: 61.2% Total: 60000 W: 12437 L: 12392 D: 35171  No functional change.  Resolves #334,True,2,2015-04-01
VoyagerOne,zamar,2015-04-12 19:05:59+00:00,Removed extra condition (history < 0) in LMR to help sync up with move ordering.  LMR condition is now cmh+history<0 Instead of history<0 OR cmh+history<0  STC: LLR: 2.96 (-2.94;2.94) [-3.00; 1.00] Total: 26446 W: 5092 L: 4980 D: 16374  LTC: LLR: 2.96 (-2.94;2.94) [-3.00; 1.00] Total: 14129 W: 2340 L: 2209 D: 9580  Bench: 7815183  Resolves #331,True,6,2015-04-01
mcostalba,mcostalba,2015-04-11 21:24:43+00:00,Assorted cleanup of last patches  No functional change.,True,5,2015-04-01
mcostalba,zamar,2015-04-10 19:39:15+00:00,Allow Position::init() to be called more than once  Currently Zobrist::castling[] are not properly zeroed and rely on the compiler to do this at startup; but this makes Position::init() to set different values every time it is called!  This is a bit odd; and although not impacting normal usage; can yield to subtle misbehaviour; very difficult to track down; in case we happen to call it more than once for some reason. I found this while developing tuning support and it took me a while to track it down.  So properly init Zobrist::castling[]  No functional change.  Resolves #329,True,4,2015-04-01
locutus2,zamar,2015-04-10 19:34:55+00:00,Update stats at pv nodes  If a quiet best move is found at a pv node then always update stats.  STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 41485 W: 8047 L: 7830 D: 25608  LTC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 14351 W: 2420 L: 2250 D: 9681  Bench: 6985247  Resolves #330,True,4,2015-04-01
Unknown,zamar,2015-04-10 19:14:11+00:00,New formula for quiet move scoring: 3 * cmh + 1 * hist  STC  LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 45363 W: 8759 L: 8532 D: 28072  LTC  LLR: 3.51 (-2.94;2.94) [0.00;4.00] Total: 125092 W: 20032 L: 19468 D: 85592  Bench: 7058819  Resolves #328,True,4,2015-04-01
locutus2,zamar,2015-04-09 19:41:08+00:00,update stats also in check  Update stats also if in check (drop condition).  STC: LLR: 3.22 (-2.94;2.94) [-3.00;1.00] Total: 87472 W: 16929 L: 16913 D: 53630  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 39971 W: 6436 L: 6345 D: 27190  Bench: 7086031  Resolves #327,True,3,2015-04-01
lucasart,zamar,2015-04-09 19:34:06+00:00,Prune evasions when we can castle  A minor simplification.  STC:  LLR: 2.95 (-2.94;2.94) [-3.50;0.50] Total: 67877 W: 12882 L: 12904 D: 42091  STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20677 W: 4023 L: 3901 D: 12753  LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 12221 W: 2022 L: 1888 D: 8311  Bench: 7911336  Resolves #326,True,3,2015-04-01
snicolet,zamar,2015-04-09 19:32:36+00:00,Use minimumSplitDepth = 5  Using minimumSplitDepth = 5 seems to be the best compromise in the current SMP implementation  STC; 11 threads:  ELO: 14.87 +-4.1 (95%) LOS: 100.0% Total: 8509 W: 1497 L: 1133 D: 5879  STC; 4 threads:  ELO: 0.30 +-2.8 (95%) LOS: 58.2% Total: 20000 W: 3365 L: 3348 D: 13287  STC; 2 threads:  ELO: -1.02 +-2.0 (95%) LOS: 16.4% Total: 40000 W: 7087 L: 7204 D: 25709  Resolves #324,True,3,2015-04-01
mcostalba,mcostalba,2015-04-03 17:29:29+00:00,Fix MSVC warning from previous patch  No functional change.,True,4,2015-04-01
mcostalba,mcostalba,2015-04-03 02:53:53+00:00,Fix elapsed()  Messed up during merge.  No functional change.,True,4,2015-04-01
mcostalba,mcostalba,2015-04-03 02:40:55+00:00,Add support for playing in 'nodes as time' mode  When running more games in parallel; or simply when running a game with a background process; due to how OS scheduling works; there is no guarantee that the CPU resources allocated evenly between the two players. This introduces noise in the result that leads to unreliable result and in the worst cases can even invalidate the result. For instance in SF test framework we avoid running from clouds virtual machines because are a known source of very unstable CPU speed.  To overcome this issue; without requiring changes to the GUI; the idea is to use searched nodes instead of time; and to convert time to available nodes upfront; at the beginning of the game.  When nodestime UCI option is set at a given nodes per milliseconds (npmsec); at the beginning of the game (and only once); the engine reads the available time to think; sent by the GUI with 'go wtime x' UCI command. Then it translates time in available nodes (nodes = npmsec * x); then feeds available nodes instead of time to the time management logic and starts the search. During the search the engine checks the searched nodes against the available ones in such a way that all the time management logic still fully applies; and the game mimics a real one played on real time. When the search finishes; before returning best move; the total available nodes are updated; subtracting the real searched nodes. After the first move; the time information sent by the GUI is ignored; and the engine fully relies on the updated total available nodes to feed time management.  To avoid time losses; the speed of the engine (npms) must be set to a value lower than real speed so that if the real TC is for instance 30 secs; and npms is half of the real speed; the game will last on average 15 secs; so much less than the TC limit; providing for a safety 'time buffer'.  There are 2 main limitations with this mode.  1. Engine speed should be the same for both players; and this limits the approach to mainly parameter tuning patches.  2. Because npms is fixed while; in real engines; the speed increases toward endgame; this introduces an artifact that is equivalent to an altered time management. Namely it is like the time management gives less available time than what should be in standard case.  May be the second limitation could be mitigated in a future with a smarter 'dynamic npms' approach.  Tests shows that the standard deviation of the results with 'nodestime' is lower than in standard TC; as is expected because now all the introduced noise due the random speed variability of the engines during the game is fully removed.  Original NIT idea by Michael Hoffman that shows how to play in NIT mode without requiring changes to the GUI. This implementation goes a bit further; the key difference is that we read TC from GUI only once upfront instead of re-reading after every move as in Michael's implementation.  No functional change.,True,4,2015-04-01
mcostalba,mcostalba,2015-04-03 02:19:29+00:00,Rename of TimeMgr and friends  More natural naming IMO.  No functional change.,True,4,2015-04-01
mcostalba,mcostalba,2015-04-03 02:19:26+00:00,Introduce elapsed_time()  And reformat a bit time manager code.  Note that now we set starting search time in think() and no more in ThreadPool::start_thinking(); the added delay is less than 1 msec; so below timer resolution (5msec) and should not affect time lossses ratio.  No functional change.,True,4,2015-04-01
Unknown,glinscott,2015-04-02 17:16:15+00:00,Simplification to use only one counter move.  STC http://tests.stockfishchess.org/tests/view/5518dca30ebc5902160ec5d0 LLR: 2.95 (-2.94;2.94) [-3.50;0.50] Total: 18868 W: 3638 L: 3530 D: 11700  LTC http://tests.stockfishchess.org/tests/view/5518f7ed0ebc5902160ec5d4 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 69767 W: 11019 L: 10973 D: 47775  Extracted from http://tests.stockfishchess.org/tests/view/5511028a0ebc5902160ec40b  Original patch by hxim.  All credit goes to him.  Bench: 7664249  Resolves #320,True,3,2015-04-01
mcostalba,mcostalba,2015-03-29 08:16:10+00:00,Assorted code style of latest commits  No functional chnage.,True,6,2015-03-01
zamar,zamar,2015-03-29 07:54:25+00:00,Fix indentations for hanging pawns code  No functional change,True,6,2015-03-01
lucasart,zamar,2015-03-29 07:40:24+00:00,Remove some difficult to understand C++11 constructs  Code like this is more a case of showing off one's C++ knowledge; rather than using it adequately; IMHO.  **First loop (std::generate)**  Iterators are inadequate here; because they lose the key information which is idx. As a result; we need to carry a redundant idx variable; and increment it along the way. Very clumsy. Usage of std::generate and a lambda function only obfuscate the code; which is merely a simple and stupid loop over the elements of a vector.  **Second loop (std::accumulate)**  This code is thoroughlly incomprehensible. Restore the original; which was much simpler to understand.  **Third loop (range based loop)**  Again; a range based loop is inadequate; because we lose idx! To resolve this artificially created problem; the data model was made redundant (idx is a data member of db[] elements!?); which is ugly and unjustified. A simple and stupid for loop with idx does the job much better.  No functional change.  Resolves #313,True,6,2015-03-01
Rocky640,glinscott,2015-03-28 23:30:46+00:00,PSV3_1  Small speed-up in pawn.cpp Results for 10 tests for each version:  Base      Test      Diff Mean    1435636   1445238   -9602 StDev   22576     23189     1848  p-value: 1 speedup: 0.007  No functional change  Resolves #295,True,5,2015-03-01
ajithcj,glinscott,2015-03-28 23:28:47+00:00,Give a reduced bonus for threats by hanging pawns  Passed STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 105539 W: 20389 L: 20001 D: 65149  and LTC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 9629 W: 1577 L: 1432 D: 6620  Bench: 7658627  Resolves #317,True,5,2015-03-01
mbootsector,zamar,2015-03-28 22:12:06+00:00,Retire follow-up move heuristic  STC: http://tests.stockfishchess.org/tests/view/5501d0f30ebc5902160ec0fd LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 34891 W: 6904 L: 6808 D: 21179  LTC: http://tests.stockfishchess.org/tests/view/550328540ebc5902160ec133 LLR: 3.10 (-2.94;2.94) [-3.00;1.00] Total: 182653 W: 29866 L: 29993 D: 122794  Bench: 8396161  Resolves #310,True,5,2015-03-01
VoyagerOne,zamar,2015-03-28 21:15:49+00:00,Use CounterMoveHistory when calculating LMR for cut nodes  If the sum of CounterMoveHistory heuristic and History heuristic is below zero; then reduce an extra ply in cut nodes  LTC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 6479 W: 1099 L: 967 D: 4413  Bench: 7773299  Resolves #315,True,5,2015-03-01
mcostalba,mcostalba,2015-03-25 06:05:27+00:00,Clean up previous patch  No functional change.,True,2,2015-03-01
joergoster,glinscott,2015-03-24 23:39:44+00:00,Tuned values for the pawn piece square table  Quick measure at very fast tc: ELO: 4.77 +-2.2 (95%) LOS: 100.0% Total: 40124 W: 8711 L: 8160 D: 23253  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 52284 W: 8880 L: 8559 D: 34845  Bench: 8865736  Resolves #311,True,1,2015-03-01
VoyagerOne,zamar,2015-03-24 23:04:08+00:00,Introduce a new counter move history penalty  Extra penalty for TT move in previous ply when it gets refuted  STC:  LLR: 2.94 (-2.94;2.94) [-1.50;4.50] Total: 31303 W: 6216 L: 6025 D: 19062  LTC:  LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 6950 W: 1189 L: 1054 D: 4707  Bench: 8191926  Resolves #309,True,1,2015-03-01
zamar,zamar,2015-03-24 21:34:19+00:00,Fully yielding locks; no spinning  7 threads:  ELO: 2.00 +-2.7 (95%) LOS: 92.4% Total: 20000 W: 3276 L: 3161 D: 13563  There is no functional change in single thread mode  Resolves #304,True,1,2015-03-01
mcostalba,mcostalba,2015-03-23 16:14:31+00:00,Allow Bitbases::init() to be called more than once  Currently if we call it more than once; we crash.  This is not a real problem; because this function is indeed called just once. Nevertheless with this small fix; that gets rid of a hidden 'static' variable; we cleanly resolve the issue.  While there; fix also ThreadPool::exit to return in a consistent state. Now all the init() functions but UCI::init() are reentrant and can be called multiple times.  No functional change.,True,0,2015-03-01
mcostalba,mcostalba,2015-03-23 16:10:38+00:00,Double magics generation speed  Profiling shows that resetting attacks table after a failed candidate magic attempt is the biggest time consumer; so rewrite the logic avoiding the memset()  Magics init for rook+bishop goes from 200msecs to under 100msec.  No functional change.,True,0,2015-03-01
mcostalba,mcostalba,2015-03-23 08:02:52+00:00,Get rid of nativeThread  No functional change.,True,0,2015-03-01
mcostalba,mcostalba,2015-03-21 06:55:33+00:00,Use only one ConditionVariable to sync UI  To sync UI with main thread it is enough a single condition variable because here we have a single producer / single consumer design pattern.  Two condition variables are strictly needed just for many producers / many consumers case.  Note that this is possible because now we don't send to sleep idle threads anymore while searching; so that now only UI can wake up the main thread and we can use the same ConditionVariable for both threads.  The natural consequence is to retire wait_for_think_finished() and move all the logic under MainThread class; yielding the rename of teh function to join()  No functional change.,True,5,2015-03-01
lucasart,zamar,2015-03-20 22:40:03+00:00,Fix comment  We always probe; but we do not prune at PV nodes.  No functional change.  Resolves #300,True,4,2015-03-01
mcostalba,mcostalba,2015-03-20 02:05:25+00:00,Retire ConditionVariable  Now that we use spinlocks everywhere and don't put threads to sleep while idle; we can use the slower (but no more in hot path) std::condition_variable_any instead of our homwgrown ConditionVariable struct.  Verified fo rno regression at STC with 7 threads: ELO: -0.66 +-2.7 (95%) LOS: 31.8% Total: 20000 W: 3210 L: 3248 D: 13542  No functional change,True,4,2015-03-01
joergoster,glinscott,2015-03-20 00:08:21+00:00,"Tuned mobility with another SPSA run  Further improved mobility values after another SPSA session; 50k iterations.  Elo measure at very fast 9+0.05"": ELO: 3.40 +-2.2 (95%) LOS: 99.9% Total: 40000 W: 8434 L: 8042 D: 23524  and LTC SPRT[0; 4]: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 11052 W: 1874 L: 1687 D: 7491  Bench: 8226843  Resolves #301",True,4,2015-03-01
joergoster,zamar,2015-03-18 20:30:50+00:00,Fix the comment for Position::is_draw()  We no longer check for insufficient material.  No functional change  Resolves #299,True,2,2015-03-01
lucasart,zamar,2015-03-18 20:21:41+00:00,connected should be bool; not Bitboard  There's no reason to define it as a Bitboard; so for consistency; use bool.  This is even a speedup on my machine: i7-3770k; using gcc 4.9.1 (linux):      stat        test     master    diff     mean   2;341;338  2;327;998  13;134     stdev     15;765     14;717   5;405      speedup       0.56%     P(speedup>0) 100.0%  No functional change.  Resolves #298,True,2,2015-03-01
mcostalba,mcostalba,2015-03-18 07:12:59+00:00,Reformat FastMove  Align to SF coding style.  Verified no regression:  LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 55938 W: 10893 L: 10835 D: 34210  No functional change.,True,2,2015-03-01
mcostalba,mcostalba,2015-03-18 07:01:50+00:00,Simplify nosleep logic  Avoid redundant 'while' conditions. It is enough to check them in the outer loop.  Quick tested for no regression 10K games at 4 threads ELO: -1.32 +-3.9 (95%) LOS: 25.6% Total: 10000 W: 1653 L: 1691 D: 6656  No functional change.,True,2,2015-03-01
mcostalba,zamar,2015-03-17 08:19:29+00:00,Fix a bogus use of mutex  Spinlock must be used instead.  Tested for no regression at 15+0.05 th 4:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 25928 W: 4303 L: 4190 D: 17435  No functional change.  Resolves #297,True,1,2015-03-01
mcostalba,mcostalba,2015-03-16 14:14:09+00:00,Re-arrange history update code  Unify the quites moves loop for both cases; the compiler optimizes away the   if (is_ok((ss-1)->currentMove))  inside loop; so that the result is same speed as original.  No functional change.,True,0,2015-03-01
mcostalba,mcostalba,2015-03-16 07:14:08+00:00,Use acquire() and release() for spinlocks  It is more idiomatick than lock() and unlock()  No functional change.,True,0,2015-03-01
cuddlestmonkey,zamar,2015-03-15 20:31:43+00:00,Fix dependency generation for MacOSX  No functional change  Resolves #290,True,6,2015-03-01
zamar,zamar,2015-03-15 20:26:08+00:00,Fix dependency generation for C++11  No functional change  Resolves #291,True,6,2015-03-01
zamar,zamar,2015-03-15 19:45:30+00:00,Do not sleep; but yield  During the search; do not block on condition variable; but instead use std::this_thread::yield().  Clear gain with 16 threads. Again results vary highly depending on hardware; but on average it's a clear gain.  ELO: 12.17 +-4.3 (95%) LOS: 100.0% Total: 7998 W: 1407 L: 1127 D: 5464  There is no functional change in single thread mode  Resolves #294,True,6,2015-03-01
joergoster,zamar,2015-03-14 21:35:52+00:00,New values for Mobility and Outposts.  Both are the result of a SPSA tuning session with a custom book; 50k iterations each.  After an additional tuning session of the mobility values; tuning the delta values; with following result.  40k games at 9+0.05: ELO: 4.13 +-2.2 (95%) LOS: 100.0% Total: 40000 W: 8581 L: 8106 D: 23313  and LTC LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 36518 W: 6049 L: 5782 D: 24687  Bench: 8567402  Resolves #284,True,5,2015-03-01
mcostalba,zamar,2015-03-14 19:23:54+00:00,Link with -static in mingw  Fixes reported startup error about missing libwinpthread-1.dll when the dll is not in the path.  The current -static-xxxx flags; introduced with:  https://github.com/official-stockfish/Stockfish/commit/373503f4a9a990054b5  Only take in account standard libraries; but not thread library.  No functional change.  Resolves #289,True,5,2015-03-01
zamar,zamar,2015-03-14 19:14:52+00:00,Introduce yielding spin locks  Idea and original implementation by Stephane Nicolet  7 threads 15+0.05 ELO: 3.54 +-2.9 (95%) LOS: 99.2% Total: 17971 W: 2976 L: 2793 D: 12202  There is no functional change in single thread mode,True,5,2015-03-01
zamar,zamar,2015-03-13 20:29:28+00:00,Remove check for gcc version from Makefile.  This check is obsolete. very old gcc versions can't compile c++11 code.  No functional change  Resolves #285,True,4,2015-03-01
Unknown,zamar,2015-03-12 19:49:30+00:00,New easy move implementation  Spend much less time in positions where one move is much better than all other alternatives. We carry forward pv stability information from the previous search to identify such positions. It's based on my old InstaMove idea but with two significant improvements.  1) Much better instability detection inside the search itself. 2) When it's time to make a FastMove we no longer make it instantly but still spend at least 10% of normal time verifying it.  Credit to Gull for the inspiration. BIG thanks to Gary because this would not work without accurate PV!  20K ELO: 8.22 +-3.0 (95%) LOS: 100.0% Total: 20000 W: 4203 L: 3730 D: 12067  STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 23266 W: 4662 L: 4492 D: 14112  LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 12470 W: 2091 L: 1931 D: 8448  Resolves #283,True,3,2015-03-01
locutus2,zamar,2015-03-12 07:29:57+00:00,Introduce Counter Move History tables  Introduce a counter move history table which additionally is indexed by the last move's piece and target square. For quiet move ordering use now the sum of standard and counter move history table.  STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 4747 W: 1005 L: 885 D: 2857  LTC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 5726 W: 1001 L: 872 D: 3853  Because of reported low NPS on multi core test STC (7 threads): ELO: 7.26 +-3.3 (95%) LOS: 100.0% Total: 14937 W: 2710 L: 2398 D: 9829  Bench: 7725341  Resolves #282,True,3,2015-03-01
Unknown,zamar,2015-03-11 21:59:34+00:00,Use thread specific mutexes instead of a global one.  This is necessary to improve the scalability with high number of cores.  There is no functional change in a single thread mode.  Resolves #281,True,2,2015-03-01
mcostalba,mcostalba,2015-03-11 20:20:47+00:00,Retire spinlocks  Use Mutex instead.  This is in preparaation for merging with master branch; where we stilll don't have spinlocks.  Eventually spinlocks will be readded in some future patch; once c++11 has been merged.  No functional change.,True,2,2015-03-01
mcostalba,mcostalba,2015-03-10 16:13:52+00:00,Cleanup thread_win.h  No functional change.,True,1,2015-03-01
mcostalba,mcostalba,2015-03-10 11:47:49+00:00,Disable spinlocks  To allow testing on fishtest.  No functional change.,True,1,2015-03-01
mcostalba,mcostalba,2015-03-10 11:42:40+00:00,Add thread_win32.h header  Workaround slow std::thread implementation in mingw and gcc for Windows with our own old low level thread functions.  No functional change.,True,1,2015-03-01
mcostalba,mcostalba,2015-03-07 09:56:01+00:00,Sync with master  bench: 8285241,True,5,2015-03-01
mcostalba,mcostalba,2015-03-07 09:45:58+00:00,Sync with master  No functional change.,True,5,2015-03-01
hxim,zamar,2015-03-07 09:03:19+00:00,"Transform minKingPawnDistance into a local variable  minKingPawnDistance is used only as local variable in one place so we don't need it to be part of ""Pawns::Entry"" structure.  No functional change.  Resolves #277",True,5,2015-03-01
snicolet,mcostalba,2015-03-07 07:39:21+00:00,Update Makefile for Mac OS X compilation  This change in the Makefile restores the possibility to compile Stockfish on Mac OS X 10.9 and 10.10 after the C++11 has been merged.  To use the default (fastest) settings; compile with:  make build ARCH=x86-64-modern  To test the clang settings; compile with  make build ARCH=x86-64-modern COMP=clang  Beware that the clang settings may provide a slightly slower (6%) executable.  Backported from master.  No functional change  Resolves #275,True,5,2015-03-01
mcostalba,mcostalba,2015-03-07 07:38:26+00:00,Re-enable spinlocks  For branch C++11; that doe snot run on fishtest; there is no need of this kludge; let only master have it.  No functional change.,True,5,2015-03-01
zamar,zamar,2015-03-07 07:38:22+00:00,Revert C++11 merge  Restore the state of repo back to commit 'Simplify pawn code a bit' (1e6d21dbb6)  No functional change,True,5,2015-03-01
snicolet,zamar,2015-03-05 04:18:59+00:00,Update Makefile for Mac OS X compilation  This change in the Makefile restores the possibility to compile Stockfish on Mac OS X 10.9 and 10.10 after the C++11 has been merged.  To use the default (fastest) settings; compile with:  make build ARCH=x86-64-modern  To test the clang settings; compile with  make build ARCH=x86-64-modern COMP=clang  Beware that the clang settings may provide a slightly slower (6%) executable.  No functional change  Resolves #275,True,3,2015-03-01
mcostalba,mcostalba,2015-03-02 07:11:39+00:00,Disable spinlocks  Now that c++11 branch has been merged in master; disable unconditionally the spinlocks and use mutex instead. This will allow to run fishtest even on HT machines withouth changes.  In the future we will reintorduce spinlocks; once we will have took care of fishtest.  No functional change.,True,0,2015-03-01
mcostalba,mcostalba,2015-03-01 16:16:05+00:00,Allow to disable spinlocks  And use mutex instead. You may never want to do this. It is a workaround to run c++11 on fishtest where many machiens have HTenabled and this can be a problem when number of cores set is higher than number of physical cores.  To disable spinlocks; just compile with -DNO_SPINLOCK flag  No functional change.,True,6,2015-03-01
mcostalba,mcostalba,2015-03-01 11:33:05+00:00,Rename available_to()  Change this API to be more natural and simple.  Inspired by a patch by Joona.  No functional change.,True,6,2015-03-01
mcostalba,mcostalba,2015-02-28 19:22:28+00:00,Sync with master  bench: 8285241,True,5,2015-02-01
snicolet,glinscott,2015-02-28 17:01:37+00:00,Simplify pawn code a bit  Simplify a bit the number of bitwise operators used to calculate the pawn evaluation in pawns.cpp  No functional change.  Resolves #269,True,5,2015-02-01
snicolet,glinscott,2015-02-28 16:58:32+00:00,Raise penalty for knight attacked by pawn  Raise a bit the penalty for knight attacked by pawn.  STC: LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 27744 W: 5563 L: 5380 D: 16801  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 87571 W: 14747 L: 14314 D: 58510  Bench: 8285241  Resolves #270,True,5,2015-02-01
mcostalba,mcostalba,2015-02-27 09:38:12+00:00,Retire apply_weight()  Use the more natural operator*() instead.  No functional change.,True,4,2015-02-01
mcostalba,mcostalba,2015-02-26 19:50:39+00:00,Sync with master  bench: 8069601,True,3,2015-02-01
mcostalba,glinscott,2015-02-26 17:56:16+00:00,Normalize twice supported pawns  Align codying style to current conventions and move formula for twice supported pawns to Pawns::init() where it should be.  No functional change.,True,3,2015-02-01
Rocky640,glinscott,2015-02-26 17:52:23+00:00,Apex Pawns  Pawns which are supported already have a bonus. Apex are pawns which are supported twice. This patch gives an additional 50% bonus for them.  STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 6549 W: 1333 L: 1209 D: 4007  LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 18002 W: 3037 L: 2850 D: 12115  Bench: 8069601  Resolves #267,True,3,2015-02-01
mcostalba,mcostalba,2015-02-24 13:08:14+00:00,Don't assume the type of Time::point  But instead use the proper definition. Also rewrite chrono functions while there.  No functional change.,True,1,2015-02-01
mcostalba,mcostalba,2015-02-24 10:45:29+00:00,Small tweaks in pawns.cpp  No functional change.,True,1,2015-02-01
mcostalba,mcostalba,2015-02-23 18:48:46+00:00,Improve spinlock implementation  Calling lock.test_and_set() in a tight loop creates expensive memory synchronizations among processors and penalize other running threads. So syncronize only only once at the beginning with fetch_sub() and then loop on a simple load() that puts much less pressure on the system.  Reported about 2-3% speed up on various systems.  Patch by Ronald de Man.  No functional change.,True,0,2015-02-01
mcostalba,mcostalba,2015-02-23 12:47:07+00:00,Use spinlock instead of mutex for Threads and SplitPoint  It is reported to be defenitly faster with increasing number of threads; we go from a +3.5% with 4 threads to a +15% with 16 threads.  The only drawback is that now when testing with more threads than physical available cores; the speed slows down to a crawl. This is expected and was similar at what we had setting the old sleepingThreads to false.  No functional change.,True,0,2015-02-01
mcostalba,mcostalba,2015-02-23 12:37:46+00:00,Introduce Spinlock class  Initialization is more complex than what I'd like due to MSVC compatibility that for some reason does not like:  std::atomic_flag lock = ATOMIC_FLAG_INIT;  No functional change.,True,0,2015-02-01
mcostalba,mcostalba,2015-02-23 12:36:15+00:00,Sync with master  bench: 8253813,True,0,2015-02-01
mcostalba,mcostalba,2015-02-22 15:33:24+00:00,Fix build under OS X  Reported by Vince Negri  No functional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-02-22 13:20:23+00:00,Sync with master  bench: 8253813,True,6,2015-02-01
mcostalba,mcostalba,2015-02-22 11:59:34+00:00,Use only 'level' as late join metric  It seems other metric are useless; this allow us to simplify the code and to prune useless stuff.  STC 20K games 4 threads ELO: -0.76 +-2.8 (95%) LOS: 29.9% Total: 20000 W: 3477 L: 3521 D: 13002  STC 10K games 16 threads ELO: 1.36 +-3.9 (95%) LOS: 75.0% Total: 10000 W: 1690 L: 1651 D: 6659  bench: 8253813,True,6,2015-02-01
mcostalba,mcostalba,2015-02-21 10:33:03+00:00,Further refine SMP code  Backported from C++11 branch:  https://github.com/official-stockfish/Stockfish/commit/7ff965eebfbc17d2b https://github.com/official-stockfish/Stockfish/commit/e74c2df907d5336d3d2b  Fully verified it is equivalent to master (see log msg of individual commits for details).  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-21 09:40:59+00:00,Use sp->master instead of bestThread  Verified with:  dbg_hit_on(th != sp->master);  It is 100% equivalent on more than 200K hits.  No functional change.,True,5,2015-02-01
snicolet,zamar,2015-02-20 19:59:26+00:00,Fix comment for kingAdjacentZoneAttacksCount  The comment for kingAdjacentZoneAttacksCount[] was bogus; using reversed semantics for color.  No functional change  Resolves #262,True,4,2015-02-01
snicolet,zamar,2015-02-20 19:56:57+00:00,Mobile phalanxes  Try to create mobile phalanxes  STC: LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 52393 W: 10912 L: 10656 D: 30825  LTC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 30398 W: 5315 L: 5063 D: 20020  Bench: 8253813  Resolves #261,True,4,2015-02-01
mcostalba,mcostalba,2015-02-20 11:38:54+00:00,Improve comments in SMP code  No functional change.,True,4,2015-02-01
mcostalba,mcostalba,2015-02-20 09:50:47+00:00,Use range-based-for in late join  No functional change.,True,4,2015-02-01
mcostalba,mcostalba,2015-02-20 09:37:29+00:00,Sync with master  bench: 7911944,True,4,2015-02-01
mcostalba,mcostalba,2015-02-19 22:12:59+00:00,Clarify we don't late join with only 2 threads  Thanks to Gary for pointing this out.  No functional change.,True,3,2015-02-01
mcostalba,mcostalba,2015-02-19 09:43:28+00:00,Use size_t consistently across thread code  No functional change.,True,3,2015-02-01
mcostalba,mcostalba,2015-02-19 09:36:15+00:00,Retire redundant sp->slavesCount field  It should be used slavesMask.count() instead.  Verified 100% equivalent when sp->allSlavesSearching:  dbg_hit_on(sp->allSlavesSearching; sp->slavesCount != sp->slavesMask.count());  No functional change.,True,3,2015-02-01
mcostalba,mcostalba,2015-02-19 09:18:24+00:00,Fix a warning under MSVC  Assignment of size_t to int.  No functional change.,True,3,2015-02-01
mcostalba,mcostalba,2015-02-19 09:08:29+00:00,Add a couple of asserts to late join  Document and clarify that we cannot rejoin on ourselves and that we never late join if we are master and all slaves have finished; inded in this case we exit idle_loop.  No functional change.,True,3,2015-02-01
mcostalba,mcostalba,2015-02-19 08:53:39+00:00,Remove useless condition in late join  In case of Threads.size() == 2 we have that sp->allSlavesSearching is always false (because we have finished our search); bestSp is always NULL and we never late join; so there is no need to special case here.  Tested with dbg_hit_on(sp && sp->allSlavesSearching) and verified it never fires.  No functional change.,True,3,2015-02-01
mcostalba,mcostalba,2015-02-18 20:50:35+00:00,Compute SplitPoint::spLevel on the fly  And retire a redundant field. This is important also from a concept point of view becuase we want to keep SMP structures as simple as possible with the only strictly necessary data.  Verified with  dbg_hit_on(sp->spLevel != level)  that the values are 100% the same out of more 50K samples.  No functional change.,True,2,2015-02-01
mcostalba,mcostalba,2015-02-17 07:23:35+00:00,Simplify attackUnits formula  Use '/ 8' instead of '* 31 / 256'  Passed STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 55077 W: 10999 L: 10940 D: 33138  And LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 14751 W: 2530 L: 2400 D: 9821  bench: 7911944,True,1,2015-02-01
zamar,zamar,2015-02-16 20:36:13+00:00,Improve smp performance for high number of threads  Balance threads between split points.  There are huge differences between different machines and autopurging makes it very difficult to measure the improvement in fishtest; but the following was recorded for 16 threads at 15+0.05:      For Bravone (1000 games): 0 ELO     For Glinscott (1000 games): +20 ELO     For bKingUs (1000 games): +50 ELO     For fastGM (1500 games): +50 ELO  The change was regression for no one; and a big improvement for some; so it should be fine to commit it. Also for 8 threads at 15+0.05 we measured a statistically significant improvement: ELO: 6.19 +-3.9 (95%) LOS: 99.9% Total: 10325 W: 1824 L: 1640 D: 6861  Finally it was verified that there was no (significant) regression for  4 threads: ELO: 0.09 +-2.8 (95%) LOS: 52.4% Total: 19908 W: 3422 L: 3417 D: 13069  2 threads: ELO: 0.38 +-3.0 (95%) LOS: 60.0% Total: 19044 W: 3480 L: 3459 D: 12105  1 thread: ELO: -1.27 +-2.1 (95%) LOS: 12.3% Total: 40000 W: 7829 L: 7975 D: 24196  Resolves #258,True,0,2015-02-01
lucasart,glinscott,2015-02-16 01:34:26+00:00,Compute checkers from scratch  This micro-optimization only complicates the code and provides no benefit. Removing it is even a speedup on my machine (i7-3770k; linux; gcc 4.9.1):  stat        test     master    diff mean   2;403;118  2;390;904  12;214 stdev     12;043     10;620   3;677  speedup       0.51% P(speedup>0) 100.0%  No functional change.,True,0,2015-02-01
mcostalba,mcostalba,2015-02-15 11:23:03+00:00,Retire one do_move() overload  After Lucas patch it is almost useless.  No functional change.,True,6,2015-02-01
lucasart,mcostalba,2015-02-15 11:11:05+00:00,Compute checkers from scratch  This micro-optimization only complicates the code and provides no benefit. Removing it is even a speedup on my machine (i7-3770k; linux; gcc 4.9.1):  stat        test     master    diff mean   2;403;118  2;390;904  12;214 stdev     12;043     10;620   3;677  speedup       0.51% P(speedup>0) 100.0%  No functional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-02-15 10:32:53+00:00,"Revert ""Delayed killers checking""  It seems a slowdown when run with fishbench.  No functional change.",True,6,2015-02-01
mcostalba,mcostalba,2015-02-14 14:56:54+00:00,Further simplify KingDanger init  And remove a tale whitespace while there.  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-14 14:55:11+00:00,Further simplify KingDanger init  And remove a tale whitespace while there.  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-14 14:30:16+00:00,Sync with master  Bench: 7369224,True,5,2015-02-01
snicolet,zamar,2015-02-13 21:33:00+00:00,Small bonus for all safe pawn pushes  Pawn flexibility: add a small bonus for all safe pawn pushes  STC: LLR: 2.70 (-2.94;2.94) [-1.50;4.50] Total: 18233 W: 3705 L: 3557 D: 10971  LTC: LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 17684 W: 3042 L: 2854 D: 11788  Bench: 7369224  Resolves #253,True,4,2015-02-01
mcostalba,mcostalba,2015-02-13 10:54:46+00:00,Reformat tracing functions  No functional change.,True,4,2015-02-01
hxim,zamar,2015-02-09 22:02:35+00:00,Fix KingDanger[] array initialization  Use integer arithmetic instead of floating point arithmetic. Floating point arithmetic was causing different results for some 32-bit compiles  No functional change  Resolves #249 Resolves #250,True,0,2015-02-01
mcostalba,mcostalba,2015-02-08 20:32:14+00:00,Sync with master  bench: 7699138,True,6,2015-02-01
Unknown,zamar,2015-02-08 19:28:01+00:00,Pawn Center Bind Bonus  Bonus for two pawns controlling the same central square  STC:  LLR: 3.14 (-2.94;2.94) [-1.50;4.50] Total: 15974 W: 3291 L: 3133 D: 9550  LTC:  LLR: 3.24 (-2.94;2.94) [0.00;6.00] Total: 10449 W: 1837 L: 1674 D: 6938  Idea from Lyudmil Tsvetkov.  Bench: 7699138  Resolves #248,True,6,2015-02-01
mcostalba,mcostalba,2015-02-08 17:17:08+00:00,Shuffle put_piece() and friends signatures  It is more consistent with the others member functions.  No functional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-02-08 12:09:29+00:00,Small tweaks in do_move and friends  Also remove useless StateCopySize64 optimization: compiler uses SSE movups instruction anyhow and does not need this trick (verified with fishbench).  No functional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-02-07 18:13:41+00:00,Avoid casting to char* in prefetch()  Funny enough; gcc __builtin_prefetch() expects already a void*; instead Windows's _mm_prefetch() requires a char*.  The patch allows to remove ugly casts from caller sites.  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-07 14:02:28+00:00,Rewrite pos_is_ok()  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-07 11:21:39+00:00,Micro-optimize SEE  Results for 10 tests for each version (gcc 4.8.3 on mingw):              Base      Test      Diff     Mean    1502447   1507917   -5470     StDev   3119      1364      4153  p-value: 0;906 speedup: 0;004  Results for 10 tests for each version (MSVC 2013):              Base      Test      Diff     Mean    1400899   1403713   -2814     StDev   1273      2804      2700  p-value: 0;851 speedup: 0;002  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-07 10:18:06+00:00,Rename dbg_hit_on_c() to dbg_hit_on()  Use an overload instead of a new named function.  I have found this handier and easier when adding some quick debug code.  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-07 10:15:38+00:00,Rename dbg_hit_on_c() to dbg_hit_on()  Use an overload instead of a new named function.  I have found this handier and easier when adding some quick debug code.  No functional change.,True,5,2015-02-01
mcostalba,mcostalba,2015-02-07 09:32:28+00:00,Sync with master  bench: 7696257,True,5,2015-02-01
lucasart,zamar,2015-02-07 09:12:04+00:00,Removes useless templates; some of which lead to code duplication: is_K*() functions.  No functional change  Resolves #245,True,5,2015-02-01
locutus2,glinscott,2015-02-03 03:19:33+00:00,Add bonus for pawn attack threats  Latent pawn attacks: Add a bonus to safe pawn pushes which attacks an enemy piece.  Based on an idea of Lyudmil Tsvetkov.  STC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 7925 W: 1666 L: 1537 D: 4722  LTC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 40109 W: 6841 L: 6546 D: 26722  Bench: 7696257  Resolves #240,True,1,2015-02-01
Unknown,glinscott,2015-02-03 03:09:37+00:00,"Profile build options  I went through all the individual compile options that differ between -fprofile-generate/-fprofile-use  and  -fprofile-arcs/-fbranch-probabilities and distilled the speed difference down to only turning off -fno-peel-loops and -fno-tracer.  Using this we still get the full speedup (maybe a bit more because other optimizations stay on) and it's also much cleaner because we can get rid of the ""@rm -f ucioption.gc*"" hack for all versions of gcc.  No functional change.  Resolves #237",True,1,2015-02-01
NicklasPersson,glinscott,2015-02-02 20:00:52+00:00,Improved King Safety values  From an SPSA-session on king safety.  STC: ELO: 3.21 +-2.1 (95%) LOS: 99.8% Total: 40000 W: 8181 L: 7812 D: 24007  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 47765 W: 8091 L: 7785 D: 31889  Bench: 8589262  Resolves #241,True,0,2015-02-01
mcostalba,mcostalba,2015-02-01 15:42:31+00:00,Use move assignment in movegen.h  No functional change and same speed (tested with perft),True,6,2015-02-01
mcostalba,mcostalba,2015-02-01 12:31:49+00:00,Allow to assign a Move to an ExtMove  After defining ExtMove::operator Move(); this is a natural extension.  No fnctional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-02-01 12:17:42+00:00,Delay checking for duplicated killer moves  Follow the usual approach to delay computation as far as possible; in case an earlier killer cut-offs we avoid to do useless work.  This also greatly simplifies the code.  No functional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-02-01 11:01:35+00:00,Small tweaks in movepick.cpp  No functional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-02-01 09:40:22+00:00,Silence a warning under MSVC  warning C4100: 'ci' : unreferenced formal parameter  It is a silly and wrong one; but just silent it.  No functional change.,True,6,2015-02-01
mcostalba,mcostalba,2015-01-31 19:13:38+00:00,More readable score<CAPTURES>()  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 19:02:08+00:00,Use C++11 loops in MovePicker  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 18:22:07+00:00,Implicit conversion from ExtMove to Move  Verified with perft there is no speed regression; and code is simpler. It is also conceptually correct becuase an extended move is just a move that happens to have also a score.  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 17:24:39+00:00,Another small tweak to skills  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 12:05:51+00:00,Sync with master  bench: 7374604,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 11:57:52+00:00,Use C++ loops in insert_pv_in_tt  Also small tweak to extract_ponder_from_tt  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 11:18:24+00:00,Move uci_pv under UCI namespace  That's the correct place.  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 10:44:35+00:00,Convert Reductions[] from int8_t to Depth  This is the type anyhow. Assorted cleanup while there.  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-31 09:19:00+00:00,Fix a MSVC warning  warning C4805: '|' : unsafe mix of type 'Bitboard' and type 'bool' in operation  No functional change.,True,5,2015-01-01
Unknown,mcostalba,2015-01-30 17:07:20+00:00,Ressurrect hashfull patch  This is an old patch from Jean-Francois Romang to send UCI hashfull info to the GUI: https://github.com/mcostalba/Stockfish/pull/60/files  It was wrongly judged as a slowdown; but it takes much less than 1 ms to run; indeed on my core i5 2.6Ghz it takes about 2 microsecs to run!  Regression test is good:  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 7352 W: 1548 L: 1401 D: 4403  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 61432 W: 10307 L: 10251 D: 40874  I have set the name of the author to the original one.  No functional change.,True,4,2015-01-01
mcostalba,mcostalba,2015-01-30 16:58:18+00:00,Sync with master  bench: 7374604,True,4,2015-01-01
mcostalba,mcostalba,2015-01-29 21:35:24+00:00,Simplify skill level and reduce ELO  This patch has two positive effects:  - Retire a hackish formula and leave   just a natural; simple and plain one.  - Reduce strenght at very low level; but   don't impact medium/high levels.  Actually even at level 0; SF is still too strong for many beginners (this was reported many times for instance on Droidfish user comments on Google Play).  Test on fishtest shows that ELO drop is around 170 ELO at level 0 (good!); 130 ELO at level 1 and smoothly reduces (as expected) until level 10 where the drop is just of 8 ELO.  No functional change.,True,3,2015-01-01
Rocky640,zamar,2015-01-28 21:29:04+00:00,Simplify backward pawn definition  Make use of 'lever' attribute  No functional change  Resolves #234,True,2,2015-01-01
NicklasPersson,zamar,2015-01-28 21:05:21+00:00,King safety tuning with values obtained by SPSA.  Part I:  LTC:  LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 11529 W: 2075 L: 1882 D: 7572  Part II:  LTC:  ELO: 2.07 +-2.1 (95%) LOS: 97.3% Total: 34859 W: 5967 L: 5759 D: 23133  Bench: 7374604  Resolves #228,True,2,2015-01-01
zamar,zamar,2015-01-28 20:53:50+00:00,Restore development version  No functional change,True,2,2015-01-01
zamar,zamar,2015-01-27 20:27:38+00:00,Stockfish 6  Stockfish bench signature is: 8918745,True,1,2015-01-01
zamar,zamar,2015-01-25 22:03:57+00:00,"Stockfish 6 Release Candidate 3  - Fix a skill level problem: Don't allow move pruning at root node - Revert ""Fix profile build for gcc on Mac OSX"". Results for a faster binary in x86-64. - Fix a MSVC warning  Bench: 8918745",True,6,2015-01-01
locutus2,zamar,2015-01-25 21:57:13+00:00,Fix a skill level problem: Don't allow move pruning at root node  Bench: 8918745  Resolves #231,True,6,2015-01-01
zamar,zamar,2015-01-25 21:51:09+00:00,"Revert ""Fix profile build for gcc on Mac OSX""  Seems to be a performance regression for standard build.  For SF6 people compiling on Mac OSX using profile-build option just need to make necessary adjustments manually...  No functional change  Resolves #223",True,6,2015-01-01
mcostalba,mcostalba,2015-01-25 10:16:54+00:00,Re-arrange Skill struct  Instead of swapping sub-optimal move in Skill d'tor; make it explicitly at the end of the search.  Also streamline and clarify relation with multiPV and pass it directly instead of relying on the hacky 'candidates' member.  No functional change.,True,6,2015-01-01
mcostalba,mcostalba,2015-01-25 08:36:05+00:00,Fix a MSVC warning at W4  Warning is C4512 (assignment operator could not be generated)  Now; apart the foreign syzygy code; everything compiles without warnings at warning level 4.  Backported from C++11 branch.  No functional change.,True,6,2015-01-01
zamar,zamar,2015-01-24 19:42:49+00:00,Stockfish 6 Release Candidate 2  - Fix a compilation issue related to BMI2 PEXT instruction - Retrieve a ponder move from TT if PV is only one move long  Bench: 8080602  No functional change,True,5,2015-01-01
mcostalba,zamar,2015-01-24 19:38:06+00:00,Don't use _pext_u64() directly  This intrinsic to call BMI2 PEXT instruction is defined in immintrin.h. This header should be included only when USE_PEXT is defined; otherwise we define _pext_u64 as 0 forcing a nop.  But under some mingw platforms; even if we don't include the header; immintrin.h gets included anyhow through an include chain that starts with STL <algorithm> header. So we end up both defining _pext_u64 function and at the same time defining _pext_u64 as 0 leading to a compile error.  The correct solution is of not using _pext_u64 directly.  This patch fixes a compile error with some mingw64 package when compiling with x86-64.  No functional change.  Resolves #222,True,5,2015-01-01
mcostalba,zamar,2015-01-24 19:35:31+00:00,Try hard to retrieve a ponder move  In case we stop the search during a fail-high it is possible we return to GUI without a ponder move. This patch try harder to find a ponder move retrieving it from TT. This is important in games played with 'ponder on'.  bench: 8080602  Resolves #221,True,5,2015-01-01
mcostalba,mcostalba,2015-01-24 08:29:35+00:00,Additional work in bitbases  Verified the generated bitbases are unchanged.  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-22 10:05:31+00:00,Rearrange bitbases C++11 way  No functional change.,True,3,2015-01-01
mcostalba,mcostalba,2015-01-21 18:54:15+00:00,Document how to enable PEXT with MSVC  When not using Makefile; e.g. with MSVC; if hardware supports BMI2 instructions; then USE_PEXT should be added in project configuration to enable pext support.  No functional change.,True,2,2015-01-01
mcostalba,mcostalba,2015-01-21 16:35:53+00:00,Rearrange Endgames  Remove references to EndgameBase and use instead Value and ScaleFactor as template parameters of the endgames maps.  No functional change.,True,2,2015-01-01
mcostalba,mcostalba,2015-01-21 12:18:19+00:00,Explicitly defaulted and deleted members  Better than a bit obscure implicit ones.  No functional change.,True,2,2015-01-01
mcostalba,mcostalba,2015-01-21 10:33:53+00:00,Fun with lambdas  Use lambda functions instead of has_positive_value() and toggle_case()  No functional change.,True,2,2015-01-01
mcostalba,mcostalba,2015-01-20 21:17:22+00:00,Don't use _pext_u64() directly  This intrinsic to call BMI2 PEXT instruction is defined in immintrin.h. This header should be included only when USE_PEXT is defined; otherwise we define _pext_u64 as 0 forcing a nop.  But under some mingw platforms; even if we don't include the header; immintrin.h gets included anyhow through an include chain that starts with STL <algorithm> header. So we end up both defining _pext_u64 function and at the same time defining _pext_u64 as 0 leading to a compile error.  The correct solution is of not using _pext_u64 directly.  This patch fixes a compile error with some mingw64 package when compiling with x86-64.  No functional change.,True,1,2015-01-01
mcostalba,mcostalba,2015-01-19 07:11:43+00:00,Fix a MSVC warning at W4  Warning is C4512 (assignment operator could not be generated)  Now; apart the foreign syzygy code; everything compiles without warnings at warning level 4.  No functional change.,True,0,2015-01-01
zamar,zamar,2015-01-18 14:53:11+00:00,Stockfish 6 Release Candidate 1  Bench: 8080602  No functional change  Resolves #218,True,6,2015-01-01
zamar,zamar,2015-01-18 14:42:30+00:00,Fix profile build for gcc on Mac OSX  Switch back to using -fprofile-generate and -fprofile-use flags  No functional change  Resolves #219 Resolves #210,True,6,2015-01-01
zamar,zamar,2015-01-18 14:38:46+00:00,Don't print fail-high or fail-lows in MultiPV mode  Supposed to give a better user experience when using MultiPV mode  No functional change  Resolves #217,True,6,2015-01-01
mcostalba,mcostalba,2015-01-18 14:14:05+00:00,Fix compile error with MSVC 2013  Without this std::min chokes with windows 'min' macro.  No functional change.,True,6,2015-01-01
mcostalba,mcostalba,2015-01-18 10:04:51+00:00,Fun with initializer lists in UCI::square  No functional change.,True,6,2015-01-01
mcostalba,mcostalba,2015-01-18 09:41:56+00:00,Fix a coverity scan warning  Coverity scan warns about uninitialized 'sf' argument when calling probe(). Actually it is a false positive because argument is passed by reference and assigned inside probe(). Nevertheless it is a hint that fucntion signature is a bit tricky; so rewrite it in a more conventional way; assigning 'sf' from probe() return value.  No functional change.,True,6,2015-01-01
mcostalba,mcostalba,2015-01-18 07:27:46+00:00,Add syzygy support  bench: 8080602,True,6,2015-01-01
mcostalba,mcostalba,2015-01-18 07:00:50+00:00,Import C++11 branch  Import C++11 branch from:  https://github.com/mcostalba/Stockfish/tree/c++11  The version imported is teh last one as of today: https://github.com/mcostalba/Stockfish/commit/6670e93e50a7a4e739ac2ac8b6026ffa3a12150a  Branch is fully equivalent with master but syzygy tablebases that are missing (but will be added with next commit).  bench: 8080602,True,6,2015-01-01
mcostalba,mcostalba,2015-01-18 06:29:51+00:00,Fix syzygy warnings with Intel compiler  Quick hack; a better job would require to first move all syzygy code up to SF standard.  No functional change.,True,6,2015-01-01
mcostalba,mcostalba,2015-01-17 21:15:15+00:00,Fix some missing rename from previous patch  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-17 20:42:47+00:00,Fix a possible overflow in TT resize  On platforms where size_t is 32 bit; we can have an overflow in this expression:  (mbSize * 1024 * 1024)  Fix it setting max hash size of 2GB on platforms where size_t is 32 bit.  A small rename while there: now struct Cluster is definied inside class TranspositionTable so we should drop the redundant TT prefix.  No functional change.,True,5,2015-01-01
Unknown,zamar,2015-01-16 19:03:49+00:00,Simplify and optimize value extractors  Speed up results by Joona:  gcc-4.7 (1.5%) gcc-4.8 (0.5%) gcc-4.9 (1.0%)  Speed up results by mstembera:  gcc 474 p-value: 0.719  gcc 482 p-value: 1  gcc 492 p-value: 0.859  No functional change  Resolves #211,True,4,2015-01-01
lucasart,zamar,2015-01-14 20:21:54+00:00,Enable futility pruning for PV nodes in qsearch  STC:  LLR: 4.20 (-2.94;2.94) [-3.00;1.00] Total: 85573 W: 17195 L: 17125 D: 51253  LTC:  LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 43385 W: 7298 L: 7214 D: 28873  Bench: 8080602  Resolves #206,True,2,2015-01-01
locutus2,zamar,2015-01-14 20:13:48+00:00,Enable Futility pruning in PV nodes  STC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21553 W: 4342 L: 4221 D: 12990  LTC:  LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 7675 W: 1351 L: 1209 D: 5115  Bench: 8668014  Resolves #205,True,2,2015-01-01
hxim,zamar,2015-01-13 21:07:18+00:00,Use VALUE_ZERO instead of 0 when comparing with Value  This is the correct practice.  No functional change  Resolves #208,True,1,2015-01-01
mcostalba,mcostalba,2015-01-11 21:56:35+00:00,Assorted headers cleanup  Mostly comments fixing and other small things.  No functional change.,True,6,2015-01-01
mcostalba,zamar,2015-01-11 20:10:31+00:00,Fix a crash of syzygy on Android  On Android-ARM current TB code crashes at random times even in single thread mode.  Reported; debugged; fixed and verified by Peter Osterlund.  No functional change.  Resolves #201,True,6,2015-01-01
Stefano80,zamar,2015-01-11 20:07:11+00:00,Higher movetime resolution for benchmarks  Use a millisecond movetime precision for benchmarks  No functional change  Resolves #198,True,6,2015-01-01
mcostalba,mcostalba,2015-01-11 09:52:42+00:00,Fix compile for Android 5  Android 5 can only run position independent executables.  Note that this breaks Android 4.0 and earlier.  See here for more info: http://stackoverflow.com/questions/24818902/running-a-native-library-on-android-l-error-only-position-independent-executab  Thanks to Peter Osterlund for the support.  No functional change,True,6,2015-01-01
mcostalba,mcostalba,2015-01-10 10:46:28+00:00,Update copyright year  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-07 08:09:41+00:00,Assorted formatting and comment tweaks in position.h  No functional change.,True,2,2015-01-01
lucasart,zamar,2015-01-05 22:09:12+00:00,Tune null search reduction  STC  LLR: 2.96 (-2.94;2.94) [-0.50;4.50] Total: 107289 W: 21851 L: 21325 D: 64113  LTC  LLR: 2.96 (-2.94;2.94) [0.00;5.00] Total: 83837 W: 14378 L: 13916 D: 55543  Bench: 7604776  Resolves #194,True,0,2015-01-01
mcostalba,mcostalba,2015-01-03 21:16:30+00:00,Retire one implementation of pop_lsb()  We have two implementations that are equivalent; so retire one.  Plus usual tidy up of comments and code reshuffle.  No functional change.,True,5,2015-01-01
lucasart,zamar,2015-01-03 20:40:57+00:00,Remove a useless optimization  This optimization is aimed at old hardware only (withouth popcount); and even on non popcount compile (ARCH=x86-64); it provides no mesurable speedup:  stat        test     master     diff mean   2;341;779  2;354;699  -12;920 stdev     12;910     14;770   18;150  speedup      -0.55% P(speedup>0)  23.8%  No functional change.  Resolves #187,True,5,2015-01-01
Unknown,zamar,2015-01-03 20:34:20+00:00,Smoother king safety  STC:  LLR: 4.03 (-2.94;2.94) [-1.50;4.50] Total: 35707 W: 7352 L: 7106 D: 21249  LTC:  LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 24563 W: 4330 L: 4095 D: 16138  Bench: 8411409  Resolves #190,True,5,2015-01-01
mcostalba,mcostalba,2015-01-03 17:46:59+00:00,Assorted work in uci.cpp  - Change UCI::value() signature  This function should only return the value; lowerbound and upperbound info is up to the caller because it requires external knowledge; out of the scope of this little helper.  - Retire 'key' command  It is not an UCI command and is absolutely useless: never used.  - Comments fixing and other trivia  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-03 09:17:04+00:00,"Fix a silly warning with Intel compiler  Intel compiler cries for an explicit cast  warning #2259: non-pointer conversion from ""double"" to ""int"" may lose significant bits  No functional change.",True,5,2015-01-01
mcostalba,mcostalba,2015-01-03 08:34:58+00:00,Fix comments in thread.cpp  And reshuffle a bit the functions to place them in a consistent order.  To be on the safe side; patch has been validated for no regression/crashes with a small 8K games test with 3 threads:  ELO: 3.98 +-4.4 (95%) LOS: 96.3% Total: 8388 W: 1500 L: 1404 D: 5484  No functional change.,True,5,2015-01-01
mcostalba,mcostalba,2015-01-02 20:31:02+00:00,Let material probing to access per-thread table  It is up to material (and pawn) table look up code to know where the per-thread tables are; so change API to reflect this.  Also some comment fixing while there  No functional change.,True,4,2015-01-01
matthewlai,zamar,2015-01-02 20:19:11+00:00,Disable the default copy constructor for Position class  No functional change  Resolved #183,True,4,2015-01-01
locutus2,glinscott,2015-01-02 19:33:02+00:00,Big King Safety tuning  All king safety related terms (shelterweakness; stormdanger; attackunits; ..) was tuned together. Additionally for attack units a finer granularity (factor 4) is used.  STC ELO: 9.22 +-3.1 (95%) LOS: 100.0% Total: 19514 W: 4340 L: 3822 D: 11352  LTC LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 6399 W: 1192 L: 1056 D: 4151  Bench: 8224782  Resolves #184,True,4,2015-01-01
mcostalba,mcostalba,2015-01-02 09:02:28+00:00,Retire Material::space_weight()  Move all in evaluation.  Simplify the code and concentrate in a single place all the logic behind space evaluation; making it much more clear.  Verified also at STC it does not regress due to a possible slow down:  LLR: 3.91 (-2.94;2.94) [-3.00;1.00] Total: 65744 W: 13285 L: 13194 D: 39265  No functional change.,True,4,2015-01-01
mcostalba,mcostalba,2014-12-30 08:49:54+00:00,Additional tidy up in timeman.cpp  Fixed some comments and moved/renamed some variables.  No functional change.,True,1,2014-12-01
mcostalba,mcostalba,2014-12-28 18:06:56+00:00,Use score and value consistently  And other assorted small fixing; code style tweaks and reshuffles in evaluate.cpp  No functional change.,True,6,2014-12-01
Unknown,mcostalba,2014-12-28 10:58:29+00:00,Remove some comments in timeman.cpp  Commenst are obsolete now; an updated description would be quite obscure; so better let the code to talk and remove them all together.  No functional change.,True,6,2014-12-01
mcostalba,mcostalba,2014-12-25 10:09:07+00:00,Reformat promotion generation  Use the same template of other pawns moves generation; make the code more uniform; simplify generate_promotions that has now been renamed.  No functional change (verified also with perft).,True,3,2014-12-01
mcostalba,mcostalba,2014-12-22 07:33:07+00:00,Prefer names to numbers in storm code  Also replaces some tabs with spaces and change StormDanger order to reflect ShelterWeakness one.  No functional change.,True,0,2014-12-01
zamar,zamar,2014-12-20 17:55:18+00:00,"Use ""rm -f"" instead of ""rm"" for gcc profiling hack in Makefile  In some UNIX systems ""rm"" prompts user for confirmation. However ""rm -f"" is always a guaranteed forced deletion.  Also move gcc profiling hack under the correct target  No Functional change  Resolves #168",True,5,2014-12-01
locutus2,glinscott,2014-12-20 17:53:44+00:00,Big King Safety tuning  ShelterWeakness and Stormdanger array are now indexed additionally by file pair (a/h;b/g;c/f;d/e). The special case of king blocking a pawn is incorporated in the StormDanger array.  Finally the 93 parameters are tuned by SPSA on LTC.  STC ELO: 3.46 +-2.2 (95%) LOS: 99.9% Total: 40000 W: 8275 L: 7877 D: 23848  LTC LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 10311 W: 1876 L: 1721 D: 6714  Bench: 9498821  Resolves #163,True,5,2014-12-01
mcostalba,mcostalba,2014-12-19 10:06:40+00:00,Don't account for Tempo in specialized endgames  The evaluation is already done by the specialized function; don't need to add something elese later.  With this patch following positions are evaluated correctly as draws:  8/6p1/1Pkp1p1p/2nNn2P/2P1K1P1/8/8/3B4 w - - 7 8/1k4p1/1P1p1p1p/3NnK1P/2P3P1/1n6/4B3/8 w - -  Verified it not regress with an STC test: LLR: 3.15 (-2.94;2.94) [-3.00;1.00] Total: 49812 W: 10095 L: 10016 D: 29701  Reported by Arjun Temurnikar.  bench: 8289983,True,4,2014-12-01
Unknown,glinscott,2014-12-18 19:57:04+00:00,"Change profile-build options to produce 1% to 2% faster executables.  The ""@rm ucioption.gc*"" line is necessary to avoid a gcc 4.7.x bug. Confirmed for gcc 4.7.4; 4.8.1; and 4.9.1 Suggested by Kiran Panditrao on fishcooking forum. https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/AY8gN53nG18  No functional change.  Resolves #160",True,3,2014-12-01
mcostalba,zamar,2014-12-14 23:50:33+00:00,Improve comments in UCI  And simplify naming while there.  No functional change.  Resolves #159,True,6,2014-12-01
mcostalba,zamar,2014-12-14 23:49:00+00:00,Coding style in TT code  In particular seems more natural to return bool and TTEntry on the same line; actually we should pass and return them as a pair; but due to limitations of C++ and not wanting to use std::pair this can be an acceptable compromise.  No functional change.  Resolves #157,True,6,2014-12-01
glinscott,glinscott,2014-12-14 19:45:43+00:00,Fix compile for some versions of mingw  The bswap intrinsics are specific to the compiler; not the host platform.  No functional change.  Resolves #155,True,6,2014-12-01
Unknown,zamar,2014-12-13 07:22:37+00:00,Avoid searching TT twice for the same key/position during probe() and store().  Just keep the pointer and remove code from tt.cpp  STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 13620 W: 2810 L: 2665 D: 8145  LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 13021 W: 2238 L: 2073 D: 8710STC http://tests.stockfishchess.org/tests/view/548436860ebc59331739b90c  STC 4MB ELO: 2.41 +-2.2 (95%) LOS: 98.6% Total: 40000 W: 8175 L: 7897 D: 23928  LTC 16MB ELO: 1.78 +-2.0 (95%) LOS: 96.1% Total: 39683 W: 6763 L: 6560 D: 26360  Resolves #151  Bench: 8116521,True,5,2014-12-01
glinscott,glinscott,2014-12-11 19:56:24+00:00,Only use _ReadWriteBarrier on MSVC  It was causing compile errors when cross-compiling using mingw.  No functional change.,True,3,2014-12-01
joergoster,glinscott,2014-12-11 18:08:29+00:00,Halve StormDanger bonus for blocked pawn on A/H file  STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 3410 W: 758 L: 641 D: 2011  LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 33225 W: 5708 L: 5445 D: 22072  Bench: 8465811  Resolves #153,True,3,2014-12-01
glinscott,glinscott,2014-12-11 18:03:44+00:00,MSVC compiling fixes  No functional change.  Resolves #150,True,3,2014-12-01
zamar,zamar,2014-12-10 17:59:41+00:00,Fix profile build for syzygy  Touch source files under syzygy directory to force recompilation after collecting profile data.  No functional change  Resolves #149,True,2,2014-12-01
zamar,zamar,2014-12-10 17:57:55+00:00,Retire 'os' flag from Makefile  Appears to be unused  No functional change  Resolves #147,True,2,2014-12-01
mcostalba,mcostalba,2014-12-10 11:38:13+00:00,Assorted nitpicking code-style  No functional change.,True,2,2014-12-01
mcostalba,mcostalba,2014-12-10 11:35:21+00:00,Clarify when forcing the moves loop  In some cases we want to go direcly to the moves loop without checking for early return. The patch make this logic more clear and consistent.  Tested for no regression; passed STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 25282 W: 5136 L: 5022 D: 15124  and LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 72007 W: 12133 L: 12095 D: 47779  bench: 9316798,True,2,2014-12-01
Unknown,glinscott,2014-12-08 00:18:26+00:00,Simpler PRNG and faster magics search  This patch replaces RKISS by a simpler and faster PRNG; xorshift64* proposed by S. Vigna (2014). It is extremely simple; has a large enough period for Stockfish's needs (2^64); requires no warming-up (allowing such code to be removed); and offers slightly better randomness than MT19937.  Paper: http://xorshift.di.unimi.it/ Reference source code (public domain): http://xorshift.di.unimi.it/xorshift64star.c  The patch also simplifies how init_magics() searches for magics:  - Old logic: seed the PRNG always with the same seed;   then use optimized bit rotations to tailor the RNG sequence per rank.  - New logic: seed the PRNG with an optimized seed per rank.  This has two advantages: 1. Less code and less computation to perform during magics search (not ROTL). 2. More choices for random sequence tuning. The old logic only let us choose from 4096 bit rotation pairs. With the new one; we can look for the best seeds among 2^64 values. Indeed; the set of seeds[][] provided in the patch reduces the effort needed to find the magics:  64-bit SF: Old logic -> 5;783;789 rand64() calls needed to find the magics New logic -> 4;420;086 calls  32-bit SF: Old logic -> 2;175;518 calls New logic -> 1;895;955 calls  In the 64-bit case; init_magics() take 25 ms less to complete (Intel Core i5).  Finally; when playing with strength handicap; non-determinism is achieved by setting the seed of the static RNG only once. Afterwards; there is no need to skip output values.  The bench only changes because the Zobrist keys are now different (since they are random numbers straight out of the PRNG).  The RNG seed has been carefully chosen so that the resulting Zobrist keys are particularly well-behaved:  1. All triplets of XORed keys are unique; implying that it    would take at least 7 keys to find a 64-bit collision    (test suggested by ceebo)  2. All pairs of XORed keys are unique modulo 2^32  3. The cardinality of { (key1 ^ key2) >> 48 } is as close    as possible to the maximum (65536)  Point 2 aims at ensuring a good distribution among the bits that determine an TT entry's cluster; likewise point 3 among the bits that form the TT entry's key16 inside a cluster.  Details:       Bitset   card(key1^key2)      ------   --------------- RKISS      key16     64894   = 99.020% of theoretical maximum      low18    180117   = 99.293%      low32    305362   = 99.997%  Xorshift64*; old seed      key16     64918   = 99.057%      low18    179994   = 99.225%      low32    305350   = 99.993%  Xorshift64*; new seed      key16     65027   = 99.223%      low18    181118   = 99.845%      low32    305371   = 100.000%  Bench: 9324905  Resolves #148,True,0,2014-12-01
glinscott,glinscott,2014-12-07 23:58:05+00:00,Add some tablebase positions to bench  This makes it easier to check for regressions in the tablebase code.  Bench: 9489202 5-man bench: 8943906  Resolves #145,True,6,2014-12-01
hxim,glinscott,2014-12-07 23:53:33+00:00,Rename some variables for more clarity.  No functional change.  Resolves #131,True,6,2014-12-01
mcostalba,zamar,2014-12-06 15:08:21+00:00,Explicitly pass RootMoves to TB probes  Currently Search::RootMoves is accessed and even modified by TB probing functions in a hidden and sneaky way.  This is bad practice and makes the code tricky. Instead explicily pass the vector as function argument so to clarify that the vector is modified inside the functions.  No functional change.,True,5,2014-12-01
mcostalba,zamar,2014-12-06 14:58:00+00:00,Move TB stuff under Tablebases namespace  Simplified also some logic while there.  TBLargest needs renaming too; but itis for a future patch because touches also syzygy directory stuff.  No functional change.,True,5,2014-12-01
mcostalba,zamar,2014-12-06 14:35:50+00:00,Refactor syzygy code in search  Move to SF coding style.  Also skip calculating piece count in search() when TB are not found (!TBCardinality)  No functional change.,True,5,2014-12-01
zamar,zamar,2014-12-06 14:23:08+00:00,Retire support for Haiku installation directory from Makefile  - It is out of the scope of the project. - It is the responsibility of Haiku package maintainer to   configure this.  No functional change  Resolves #143,True,5,2014-12-01
zamar,zamar,2014-12-06 14:19:39+00:00,Retire hackish support for aCC and HP-UX from Makefile  - It is out of scope of the project. - We have no way to verify that it even works anymore  No functional change  Resolves #142,True,5,2014-12-01
mcostalba,zamar,2014-11-30 20:37:24+00:00,Retire total_piece_count()  We really don't need to uglify in this way our nice count() API with this ad-hoc hack.  So remove the hack and use the already existing infrastructure.  No functional change.  Resolves #134,True,6,2014-11-01
hxim,zamar,2014-11-30 20:24:32+00:00,Remove CONNECTED_KINGS from Syzygy code  No functional change  Resolves #140,True,6,2014-11-01
tjaderxyz,zamar,2014-11-30 19:53:04+00:00,Cleaning Syzygy profiling data  Updating the makefile so that the clean and gcc-profile-clean targets also remove the profiling data files in the syzygy directory.  No functional change.  Resolves #136,True,6,2014-11-01
mcostalba,zamar,2014-11-30 19:35:35+00:00,Rewrite TBScore in uci_pv()  Streamline the code and make it understandable.  No functional change.  Resolves #135,True,6,2014-11-01
mcostalba,zamar,2014-11-30 19:23:17+00:00,Retire #ifdef SYZYGY macro  It just clutters the code for no real reason.  No functional change.  Resolves #139,True,6,2014-11-01
Unknown,glinscott,2014-11-25 23:56:48+00:00,Bitbase index() from ADD to OR.  No functional change.  Resolves #132,True,1,2014-11-01
lucasart,glinscott,2014-11-25 23:55:57+00:00,Introduce ratio operation  Just like in Physics; the ratio of 2 things in the same unit; should be without unit.  Example use case: - Ratio of a Depth by a Depth (eg. ONE_PLY) should be an int. - Ratio of a Value by a Value (eg. PawnValueEg) should be an int.  Remove a bunch of useless const while there.  No functional change.  Resolves #128,True,1,2014-11-01
Unknown,glinscott,2014-11-25 23:49:58+00:00,Syzygy tablebases  Adds support for Syzygy tablebases to Stockfish.  See the Readme for information on using the tablebases.  Tablebase support can be enabled/disabled at the Makefile level as well; by setting syzygy=yes or syzygy=no.  Big/little endian are both supported.  No functional change (if Tablebases are not used).  Resolves #6,True,1,2014-11-01
glinscott,glinscott,2014-11-24 00:53:00+00:00,Fix out-of-bound array access printing ponder move  It is possible that we won't have a ponder move if our PV is too short.  In that case; just don't print a ponder move.  No functional change  Resolves #130,True,0,2014-11-01
glinscott,glinscott,2014-11-24 00:50:36+00:00,Fix pondering  The UCI specification states that an engine can never exit the search while pondering.  No functional change.  Resolves #118,True,0,2014-11-01
jcalovski,glinscott,2014-11-21 21:46:59+00:00,Amend defended  Amend defended to remove now redundant condition.  No functional change.  Resolves #125,True,4,2014-11-01
mcostalba,mcostalba,2014-11-21 19:40:25+00:00,Fix doubled pawns asymmetry  When evaluating double pawns we use always lsb() to extract the frontmost square.  This breaks evaluation color symmetry as is possible to verify with an instrumented evaluate()    Value evaluate(const Position& pos) {      Value v = do_evaluate<false>(pos);     Position p = pos;     p.flip();     assert(v == do_evaluate<false>(p));     return v;   }  Passed no regression test:  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21035 W: 4244 L: 4122 D: 12669  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 39839 W: 6662 L: 6572 D: 26605  bench: 8255966,True,4,2014-11-01
mcostalba,mcostalba,2014-11-21 19:37:45+00:00,Further tweak accurate pv  It is a non functional change; but because we now skip copying of pv[] in SpNode; patch has been tested for regression with 3 threads:  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 54668 W: 9873 L: 9809 D: 34986  No functional change.,True,4,2014-11-01
hxim,glinscott,2014-11-18 22:39:17+00:00,Fix some comments  No functional change.  Resolves #123,True,1,2014-11-01
glinscott,glinscott,2014-11-18 22:37:59+00:00,Fix fen output for castling rights  This is a regression from 428962a  We have to cast to char here; otherwise the compiler interprets it as an integer; and writes a number.  No functional change  Resolves #122,True,1,2014-11-01
mcostalba,mcostalba,2014-11-18 10:57:57+00:00,Codying style in accurate PV  This is the first of a patch series to rearrange and simplify accurate PV.  In this patch there is simple coding style and reformatting stuff.  Verified with fishtest it does not crash with MAX_PLY = 8  No functional change.,True,1,2014-11-01
mcostalba,mcostalba,2014-11-17 11:56:48+00:00,"Fix a warning on Intel C++  warning #2259: non-pointer conversion from ""int"" to ""uint8_t={unsigned char}"" may lose significant bits  No functional change.",True,0,2014-11-01
sf-x,glinscott,2014-11-16 23:50:33+00:00,Use PHASE_MIDGAME in game_phase()  No functional change  Resolves #117,True,6,2014-11-01
tjaderxyz,glinscott,2014-11-16 23:48:30+00:00,Clear token before reading from input  Previously token would keep its value from the previous line when an empty line was input; leading to unexpected behaviour.  No functional change  Resolves #119,True,6,2014-11-01
lucasart,glinscott,2014-11-16 23:04:58+00:00,Half History Max  STC LLR: 3.35 (-2.94;2.94) [-0.50;3.50] Total: 17993 W: 3740 L: 3508 D: 10745  LTC LLR: 3.25 (-2.94;2.94) [0.00;4.00] Total: 21346 W: 3691 L: 3453 D: 14202  Bench: 7694316  Resolves #120,True,6,2014-11-01
mcostalba,mcostalba,2014-11-15 04:36:49+00:00,Use DEPTH_MAX instead of MAX_PLY  When comparing to a Depth it is more consistent to use DEPTH_MAX instead of a int.  This is a subtle difference because we use ply and depth almost interchangably in SF; but they are different. FOr counting plies makes ense to continue using ints; while for Depth we have our specific enum.  This cleanly fixes a new Clang 3.5 warning:  No functional change.,True,5,2014-11-01
glinscott,glinscott,2014-11-12 21:16:33+00:00,100% accurate PV display  This gives SF accurate PVs; such that the evaluation of the leaf node in the PV matches the score backed up to the root (99% of the time. q-search will use the value stored in the hash table instead of the eval value sometimes).  One drawback is that fail-high/low only get a minimal 2 move PV.  It doesn't add any additional overhead to the non-PV codepath except an extra eight bytes to the SearchStack structure in multi-threaded searches.  A core part of this is not pruning based on TT score in PV nodes. This was measured as not being a regression at multiple TCs; except for one exception; fast TC with huge hash; which is not realistic for longer searches.  STC - 1 thread; 128 mb hash ELO: 1.42 +-3.1 (95%) LOS: 81.9% Total: 20000 W: 4078 L: 3996 D: 11926  STC - 3 thread; 128 mb hash ELO: -3.60 +-2.9 (95%) LOS: 0.8% Total: 20000 W: 3575 L: 3782 D: 12643  STC - 3 thread; 8 mb hash ELO: 0.12 +-2.9 (95%) LOS: 53.3% Total: 20000 W: 3654 L: 3647 D: 12699  LTC - 3 thread; 32mb hash ELO: 2.29 +-2.0 (95%) LOS: 98.8% Total: 35740 W: 5618 L: 5382 D: 24740  Bench: 6984058  Resolves #102,True,2,2014-11-01
lucasart,zamar,2014-11-12 21:06:14+00:00,Use quiet ttMove in qsearch() (7962287)  Daniel Jose reported that it was an elo gain in his engine: http://www.talkchess.com/forum/viewtopic.php?t=54290  STC: Hash=16 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 33067 W: 6670 L: 6571 D: 19826  LTC: Hash=64 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 41181 W: 7008 L: 6920 D: 27253  And another one to verify no regression with hash pressure:  STC: Hash=4 LLR: 2.96 (-2.94;2.94) [-4.00;0.00] Total: 25085 W: 5059 L: 4991 D: 15035  Verified that qsearch does not explode after this patch (recapture threshold).  Bench 7962287  Resolves #112,True,2,2014-11-01
mcostalba,zamar,2014-11-12 21:02:20+00:00,Use if/else instead of goto  Real men jump/branch by hand...but we prefer the humble way.  Moved also some uci info code where it belongs; while there.  No functional change.  Resolves #110,True,2,2014-11-01
mcostalba,zamar,2014-11-12 21:00:16+00:00,Use Depth instead of int in search  And make it more ONE_PLY value independent; although we are not there yet.  No functional change.  Resolves #111,True,2,2014-11-01
lucasart,zamar,2014-11-10 23:06:12+00:00,"Profile Build with Hash=16  16MB for 1"" searches is more comensurate with the average use case.  And 16 is the default used by stockfish bench; so it makes sense to be consistent; if only to have the same minimum memory requirement for using SF and compiling it with PGO.  No functional change.  Resolves #109",True,0,2014-11-01
lucasart,zamar,2014-11-09 20:13:56+00:00,Fix bounds of FutilityMoveCounts  This is a left-over from ONE_PLY == 2.  No functional change.  Resolves #107,True,6,2014-11-01
mcostalba,mcostalba,2014-11-09 19:36:28+00:00,Retire pvMove in search()  Now we can directly replace it with the definition resulting in simpler and possibly faster code because PvNode is evaluated at compile time.  No functional change.,True,6,2014-11-01
mcostalba,mcostalba,2014-11-09 19:17:29+00:00,Assorted code-style triviality  No functional change.,True,6,2014-11-01
mcostalba,mcostalba,2014-11-09 09:27:04+00:00,Introduce distance() and unify some API  Original work by Lucas.  No functional change.,True,6,2014-11-01
lucasart,glinscott,2014-11-08 15:56:51+00:00,Codestyle massage Search::init()  * remove some erroneous comments; that were based on the ONE_PLY == 2. * rename hd to d; because there's no more half-depth in SF. * rescope variables into the for loops. * reindent the for loops correctly. * add a comment to explain the eval improving part (not so obvious to read this code as array has 4 dimensions).  No functional change.,True,5,2014-11-01
lucasart,glinscott,2014-11-08 15:47:56+00:00,Be more optimistic in aspiration window  Be more optimistic wrt search instability; and set the unviolated bound half window.  STC LLR: 2.96 (-2.94;2.94) [-1.00;4.00] Total: 16362 W: 3371 L: 3197 D: 9794  LTC LLR: 2.94 (-2.94;2.94) [0.00;5.00] Total: 21666 W: 3780 L: 3569 D: 14317  Bench: 6807896  Resolves #105,True,5,2014-11-01
lucasart,zamar,2014-11-07 21:40:24+00:00,Prune ttMove like any other  This should reduce search inconsistencies; and doesn't seem to have a measurable ELO Impact:  STC with Hash=16 LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 49264 W: 10076 L: 10007 D: 29181  LTC with Hash=64 LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 82149 W: 14044 L: 14023 D: 54082  Plus an extra test; to make sure it doesn't regress with strong hash pressure:  STC with Hash=4 LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 21498 W: 4327 L: 4246 D: 12925  Bench: 7302735  Resolves #100,True,4,2014-11-01
lucasart,glinscott,2014-11-07 19:27:04+00:00,Retire CACHE_LINE_ALIGNMENT  Speed tests showed no benefit.  No functional change.  Resolves #97,True,4,2014-11-01
lucasart,glinscott,2014-11-06 18:01:47+00:00,Apply King Safety later in the endgame  Idea is to apply king safety later in the endgame. Previously; we didn't apply KS in a RR vs. Q ending for example; which causes poor play. Now we calculate king attacks when the attacking side has a queen or more.  STC with 8moves_v3 LLR: 3.06 (-2.94;2.94) [0.00;4.00] Total: 38481 W: 6228 L: 5952 D: 26301  LTC with 2moves_v1 LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 51053 W: 8670 L: 8353 D: 34030  Bench: 7514010  Resolves #98,True,3,2014-11-01
Unknown,zamar,2014-11-05 21:17:19+00:00,Removing some superfluous extern declarations  No functional change.  Resolves #93,True,2,2014-11-01
mcostalba,zamar,2014-11-05 21:11:05+00:00,Assume UCI 'nodes' is int64_t instead of int  UCI specification is not clear on the size of integers that are exchanged in the protocol; so instead of a simple int; assume 'nodes' is a int64_t because we need a bigger size to store this value in many real cases; especialy with very long searches.  No functional change.  Resolves #75,True,2,2014-11-01
mcostalba,zamar,2014-11-05 21:09:21+00:00,Rearrange check_time()  Remove an ugly workaround for a gcc warning while there.  No functional change.,True,2,2014-11-01
ajithcj,glinscott,2014-11-04 15:50:54+00:00,Add bonuses for each threat instead of max threat value.  Use SPSA tuned values for all threat bonuses  STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 6074 W: 1284 L: 1160 D: 3630  LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 13563 W: 2402 L: 2232 D: 8929  Bench: 6981908  Resolves #94,True,1,2014-11-01
Unknown,zamar,2014-11-03 18:40:49+00:00,Optimize TranspositionTable::store() and TranspositionTable::probe() for speed.  No functional change.  Resolves #85,True,0,2014-11-01
lucasart,glinscott,2014-11-03 16:35:02+00:00,Do not assume that enum are signed  Clang 3.5 issues warning on constructs like: abs(f1 - f2). The thing is that f1 and f2 are enum types; and the range given (all positive) allows the compiler to choose an unsigned type (efficiency being one reason to prefer unsigned arithmetic). If f1 < f2 are unsigned; then f1 - f2 wraps around zero and the abs() becomes a no-op. It's the reinterpretation of the unsigned result (large value) as a signed int that happens to give the correct result; thanks to 2's complement. This is all tricky and dangerous!  In the spirit of the standard; we assume nothing on the signedness of enums; and simply calculate the rank and file distances as: - rank_dist(r1; r2) = r1 < r2 ? r2 - r1 : r1 - r2 - file_dist(f1; f2) = f1 < f2 ? f2 - f1 : f1 - f2 this logic can in fact be applied to any enum we may use; so for better generality and to avoid code duplication; we use a template function diff() here.  No functional change.  Resolves #95,True,0,2014-11-01
lucasart,glinscott,2014-11-03 15:36:24+00:00,Cleanup MAX_PLY  This area has become obscure and tricky over the course of incremental changes that did not respect the original's consistency and clarity. Now; it's not clear why we use MAX_PLY = 120; or why we use MAX_PLY+6; among other things.  This patch does the following:  * ID loop: depth ranges from 1 to MAX_PLY-1; and due to TT constraint (depth must fit into an int8_t); MAX_PLY should be 128.  * stack[]: plies now range from 0 to MAX_PLY-1; hence stack[MAX_PLY+4]; because of the extra 2+2 padding elements (for ss-2 and ss+2). Document this better; while we're at it.  * Enforce 0 <= ply < MAX_PLY:   - stop condition is now ss->ply >= MAX_PLY and not ss->ply > MAX_PLY.   - assert(ss->ply < MAX_PLY); before using ss+1 and ss+2.   - as a result; we don't need the artificial MAX_PLY+6 range. Instead we   can use MAX_PLY+4 and it's clear why (for ss-2 and ss+2).  * fix: extract_pv_from_tt() and insert_pv_in_tt() had no reason to use MAX_PLY_PLUS_6; because the array is indexed by plies; so the range of available plies applies (0..MAX_PLY before; and now 0..MAX_PLY-1).  Tested with debug compile; using MAX_PLY=16; and running bench at depth 17; using 1 and 7 threads. No assert() fired. Feel free to submit to more severe crash-tests; if you can think of any.  No functional change.,True,0,2014-11-01
mcostalba,mcostalba,2014-11-02 07:03:52+00:00,Restore std::dec after std::hex  Code is leaking a std::hex; and causes subsequent sync_cout output to be in hexadecimal.  Spotted by Lucas  No functional change.,True,6,2014-11-01
mcostalba,zamar,2014-11-01 22:10:25+00:00,Retire ScalePawnSpan[]  Obscure; undocmented and misnamed array. Replace with the direct formula: it is much more clear what the code does.  No functional change.  Resolves #90,True,5,2014-11-01
mcostalba,mcostalba,2014-11-01 21:24:33+00:00,Merge pull request #89 from official-stockfish/pull_no_pretty  Prefer operator<<() to pretty()    No functional change.,True,5,2014-11-01
mcostalba,zamar,2014-11-01 20:50:52+00:00,Retire PawnsFileSpan  It is useless. Tested as no regression:  STC LLR: 4.06 (-2.94;2.94) [-3.00;1.00] Total: 140718 W: 28527 L: 28568 D: 83623  LTC LLR: 2.94 (-2.94;2.94) [-3.00;1.00] Total: 60034 W: 10359 L: 10303 D: 39372  bench: 6564212  Resolves #88,True,5,2014-11-01
lucasart,zamar,2014-11-01 20:43:57+00:00,Correctly describe POPCNT compile  SSE4.2 has nothing to do with POPCNT. We must dispell this myth; because Stockfish is a reference and many will copy this mistake if they see it in Stockfish: * SSE is an SIMD instruction set; relative to vectorization (using special 128-bit registers). * POPCNT/LZCNT work on normal registers (eg. AL; AX; EAX; RAX).  The confusion comes from the fact that; in the Intel product line; it just so happens that SSE4.2 and POPCNT/LZCNT came out at the same time. But this is not true for AMD. For example; all AMD Pheniom II have SSE3 but no POPCNT/LZCNT; and that is why the modern compile uses  -msse3 -popcnt and not -msse4.2.  No functional change.  Resolves #86,True,5,2014-11-01
lucasart,zamar,2014-11-01 20:35:10+00:00,Consistent use of anonymous namespace  Objects that are only accessible at file-scope should be put in the anonymous namespace. This is what the  C++ standard recommends; rather than using static; which is really C-style and results in static linkage.  Stockfish already does this throughout the code. So let's weed out the few exceptions; because... they have no reason to be exceptional.  No functional change.  Resolves #84,True,5,2014-11-01
lucasart,zamar,2014-11-01 20:16:29+00:00,Remove dead code  No functional change.  Closes #87,True,5,2014-11-01
mcostalba,mcostalba,2014-11-01 18:02:35+00:00,Prefer operator<<() to pretty()  It is more idiomatic; we didn't used it in the past because Position::pretty(Move) had a calling argument; but now we can.  As an added benefit; we avoid a lot of string copies in the process because now we avoid std::ostringstream ss.  No functional change.,True,5,2014-11-01
mcostalba,mcostalba,2014-11-01 17:05:03+00:00,Merge pull request #82 from official-stockfish/clean_up_bishop_code  Code style clean-up    No functional change.,True,5,2014-11-01
mcostalba,mcostalba,2014-10-30 11:32:43+00:00,Code style clean-up  This piece of code needs some love.  No functional change.,True,3,2014-10-01
Unknown,glinscott,2014-10-28 14:23:01+00:00,max_piece_type cleanup; and slight speed increase.  No functional change.  Resolves #81,True,1,2014-10-01
zamar,zamar,2014-10-27 20:26:12+00:00,A small clean up of previous patch suggested by Marco  No functional change,True,0,2014-10-01
zamar,zamar,2014-10-27 20:25:57+00:00,Speed up max_piece_type()  Write code in the way that allows compiler to perform loop unrolling.  My measurement (32 cycles each):  Orig:  Time (Mean: 2466.59375; Trimmed mean: 2464.25; Std: 12.6869487803348) Nodes (Mean: 4294458; Trimmed mean: 4294458; Std: 0) Speed (Mean: 1741.09247987678; Trimmed mean: 1742.72879715475; Std: 8.93612608292678)  Time (Mean: 2470.15625; Trimmed mean: 2468.75; Std: 12.7484581610433) Nodes (Mean: 4294458; Trimmed mean: 4294458; Std: 0) Speed (Mean: 1738.58176151341; Trimmed mean: 1739.54618465403; Std: 8.95585822316946)  Mod:  Time (Mean: 2449.90625; Trimmed mean: 2445.9375; Std: 12.1000116635508) Nodes (Mean: 4294458; Trimmed mean: 4294458; Std: 0) Speed (Mean: 1752.94829372932; Trimmed mean: 1755.75934908231; Std: 8.61478453124504)  Time (Mean: 2442.78125; Trimmed mean: 2441.1875; Std: 8.17839157228837) Nodes (Mean: 4294458; Trimmed mean: 4294458; Std: 0) Speed (Mean: 1758.03872783803; Trimmed mean: 1759.16825356261; Std: 5.81131316346191)  No functional change,True,0,2014-10-01
snicolet,zamar,2014-10-27 11:48:44+00:00,Tune PawnsFileSpan  Passed the following SPRT tests:  STC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 24428 W: 5056 L: 4880 D: 14492  LTC: LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 26590 W: 4715 L: 4472 D: 17403  Bench: 6615949  Resolves #78,True,0,2014-10-01
promaret,zamar,2014-10-27 11:07:35+00:00,"Improve compatibility with Shredder Classic GUI  This commit fixes two issues:  1) Don't print PVs after the search has been interrupted      This solves the ""mate 0 upperbound"" scores that sometimes     creep up when a multi-PV analysis gets interrupted with     the `stop` command.  2) Print multipv before score      Shredder Classic fails to identify the main PV     (the one with multipv 1) if `score` comes first.     This leads to an eval graph that doesn't reflect     the scores actually reported by Stockfish when     doing a multiPV analysis.  No functional change  Closes #76",True,0,2014-10-01
mcostalba,zamar,2014-10-26 19:40:20+00:00,Fix an obscure gcc warning  warning: narrowing conversion from �int� to �char� inside { } is ill-formed in C++11 [-Wnarrowing]  When pedantic meets esoteric!  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-26 19:40:13+00:00,Retire notation.cpp  Now we can finally retire notation.cpp and move UCI helpers under uci.cpp  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-26 19:40:04+00:00,Final UCI helpers renaming  To reflect new changes; specifically that now are all under UCI namespace.  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-26 19:39:56+00:00,Retire notation.h  And move the few remaining content under UCI namespace where they belong.  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-26 19:39:46+00:00,Rename ucioption.h to uci.h  We are going to add all UCI related functions here; so first rename it to a more proper name.  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-26 19:39:37+00:00,Retire to_char() helpers  Remove some useless wrappers and make the conversion explicit and starightforward.  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-26 09:12:56+00:00,Reformat max_threat()  Helper function should just know how to find the biggest piece type in a bitboard. All the threat logic and data shoud be in evaluate_threats().  This nicely separates the scope of the two functions in a more consistent way and simplifies the code.  No functional change.,True,6,2014-10-01
snicolet,glinscott,2014-10-23 17:10:11+00:00,Calculate maximum threat for hanging pieces  Use the max_threat() helper function to estimate more precisely the best hanging piece threat.  Also retunes the Threat array using SPSA.  STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 7598 W: 1596 L: 1468 D: 4534  LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 7896 W: 1495 L: 1350 D: 5051  Bench: 6816504  Resolves #73,True,3,2014-10-01
mcostalba,zamar,2014-10-15 18:36:22+00:00,Document why initing eval tables  Instead of hard-code the weights in a big table; we prefer to calculate them out of few parameters at startup. This allows to keep low the number of independent parameters and hence is good for tuning and for a better insight in the meaning of the numbers.  No functional change.,True,2,2014-10-01
mcostalba,zamar,2014-10-12 19:35:19+00:00,Rename Tracing methods  Easier to understand and more in line with standard Trace classes naming like:  http://msdn.microsoft.com/en-us/library/system.diagnostics.trace.aspx  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-12 19:35:07+00:00,Account for Tempo in do_evaluate()  This is more correct because we let evaluate() to be a pure dispatcher and also now evaluate and tracing outputs are consistent.  No functional change.,True,6,2014-10-01
mcostalba,zamar,2014-10-12 19:34:54+00:00,Fix some warnings with Intel C++ compiler  No functional change.,True,6,2014-10-01
lucasart,zamar,2014-10-12 19:03:49+00:00, Further streamline connected pawn evaluation  Make even more clear what are the terms that contribute to evaluate connected pawns; and completely separate them from the weights that are now fully looked up in a table.  For future tuning makes sense to init the table with a formula instead of hard-code it. This allows to reduce problem space cardinality and makes tuning easier.  And fix a MSVC warning while there: warning C4804: '>>' : unsafe use of type 'bool' in operation  No functional change.,True,6,2014-10-01
lucasart,zamar,2014-10-07 06:42:17+00:00,Merge Connected and Candidate  These two notions are very correlated. Since connected has the most generality; it makes sense to generalize it to encompass what is covered by candidate.  STC: LLR: 4.03 (-2.94;2.94) [-3.00;1.00] Total: 11970 W: 2577 L: 2379 D: 7014  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 13194 W: 2389 L: 2255 D: 8550  bench 7328585,True,1,2014-10-01
joergoster,glinscott,2014-10-06 15:59:56+00:00,Remove the now redundant TT prefetch call from Position::do_move.  Tested for no regression and passed both STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 48250 W: 9757 L: 9686 D: 28807  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 51412 W: 8887 L: 8816 D: 33709  No functional change.  Resolves #66,True,0,2014-10-01
lucabrivio,zamar,2014-10-05 11:49:18+00:00,Simplify futility move count array formula  No functional change,True,6,2014-10-01
mcostalba,zamar,2014-10-04 09:36:29+00:00,Reformat and rename hash_after_move()  Align to standard coding style and properly use enum types. Rename while there.  No functional change.,True,5,2014-10-01
ajithcj,glinscott,2014-10-03 19:54:12+00:00,Extend King Threats to all pieces (other than pawns).  STC LLR: 2.99 (-2.94;2.94) [-1.50;4.50] Total: 20559 W: 4261 L: 4095 D: 12203  LTC LLR: 2.96 (-2.94;2.94) [0.00;4.00] Total: 75232 W: 13097 L: 12696 D: 49439  Bench: 7543790  Resolves #63,True,4,2014-10-01
joergoster,zamar,2014-10-02 21:19:14+00:00,Speculative prefetch  Idea by Peter Oesterlund. Implemented and tested by Joerg Oester  STC 3 threads ELO: 3.19 +-2.1 (95%) LOS: 99.9% Total: 40000 W: 7576 L: 7209 D: 25215  LTC LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 22026 W: 3829 L: 3619 D: 14578  STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 7291 W: 1531 L: 1404 D: 4356  No functional change  Resolves #61,True,3,2014-10-01
lucasart,zamar,2014-10-01 19:51:32+00:00,Convert TT depth to int8_t  Now that half plies have been removed from the engine; we can encode TT depth into an int8_t.  Range is -128 to +127; so it goes still further than the previous limit of 121 plies (with ONE_PLY == 2 where depth - DEPTH_NONE was encoded as an uint8_t).  No functional change.  Resolved #60,True,2,2014-10-01
mcostalba,mcostalba,2014-09-30 07:05:20+00:00,Trivial code style fixes  Mainly to sync mine and official repo.  No functional change.,True,1,2014-09-01
mcostalba,mcostalba,2014-09-29 13:17:12+00:00,Move ONE_PLY to be 1 instead of 2: search()  Now that half-plies are no more used we can simplify the code assuming that ONE_PLY is 1 and no more 2.  Verified with a SMP test: LLR: 2.95 (-2.94;2.94) [-4.50;0.00] Total: 8926 W: 1712 L: 1607 D: 5607  No functional change.,True,0,2014-09-01
lucasart,zamar,2014-09-28 16:45:49+00:00,Clean up VALUE_KNOWN_WIN conditions  A patch (+ some extra changes) passed with:  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 14575 W: 3101 L: 2967 D: 8507  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 42579 W: 7580 L: 7496 D: 27503  Bench: 6545733  Resolves #52,True,6,2014-09-01
uriblass,glinscott,2014-09-27 20:33:28+00:00,Remove use of half-ply reductions from LMR; Null-move; IID and Singular extensions.  STC: ELO: 3.80 +-3.1 (95%) LOS: 99.2% Total: 19727 W: 4190 L: 3974 D: 11563  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 7647 W: 1356 L: 1214 D: 5077  Bench: 6545733  Resolves #55,True,5,2014-09-01
zamar,zamar,2014-09-25 19:42:25+00:00,Cap evaluation based null move extra reduction to three plies  It's a zero elo patch; and a reasonable safeguard against uncontrolled extreme reductions.  STC: ELO: -0.08 +-2.0 (95%) LOS: 46.9% Total: 40000 W: 6728 L: 6737 D: 26535  LTC: ELO: -0.14 +-1.8 (95%) LOS: 44.0% Total: 40000 W: 5557 L: 5573 D: 28870  Bench: 7201830,True,3,2014-09-01
uriblass,glinscott,2014-09-25 18:22:39+00:00,Change history reduction in LMR to be a full ply.  STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 9829 W: 2142 L: 1998 D: 5689  LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 27162 W: 4802 L: 4692 D: 17668  Bench: 7284120  Resolves #53,True,3,2014-09-01
uriblass,glinscott,2014-09-21 17:32:47+00:00,Evaluate king safety when no queen is present.  LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 16657 W: 3547 L: 3391 D: 9719  LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 31258 W: 5664 L: 5403 D: 20191  Bench: 8331165  Resolves #51,True,6,2014-09-01
glinscott,glinscott,2014-09-21 17:27:34+00:00,Fix spacing.  No functional change.,True,6,2014-09-01
mcostalba,lucasart,2014-09-21 00:26:25+00:00,Rearrange evaluation constants definitions  Make them more uniform and consistent.  No functional change.  Conflicts: 	src/evaluate.cpp,True,6,2014-09-01
mcostalba,lucasart,2014-09-21 00:23:12+00:00,Rename time variable to reflect UCI parameters  On top of previous patch; rename time variables to reflect the simplification of UCI parameters.  It is more correct to use as varibales directly the corresponding UCI option; without intorducing redundant intermediate variables.  This allows also to simplify the code.  No functional change.,True,6,2014-09-01
Unknown,glinscott,2014-09-19 14:36:05+00:00,King-pawn threat bonus for endgames.  STC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 10224 W: 1765 L: 1638 D: 6821  LTC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 6923 W: 1027 L: 899 D: 4997  bench 7818100  Resolves #49,True,4,2014-09-01
mcostalba,zamar,2014-09-16 20:14:00+00:00,"Rename ""Contempt Factor"" to ""Contempt""  Suggested by Ronald and Lucas on talkchess.  No functional change.  Conflicts: 	src/ucioption.cpp",True,1,2014-09-01
mcostalba,zamar,2014-09-16 20:13:50+00:00,"Retire struct Log  No more used now that we have removed ""Write Search Log"" UCI option.  No functional change.",True,1,2014-09-01
lucasart,zamar,2014-09-15 19:24:51+00:00,Simplify Time Management UCI options  No functional change,True,0,2014-09-01
mcostalba,zamar,2014-09-04 19:19:03+00:00,Small tweak to idle_loop()  In case of a succesful late join we set again 'searching' flag; so we can restart search immediately without an useless lock/unlock cycle.  No functional change.,True,3,2014-09-01
zamar,zamar,2014-08-30 20:03:41+00:00,Simplify idle_loop()  No functional change,True,5,2014-08-01
lucasart,zamar,2014-08-24 15:28:51+00:00,Retire Search Log  No functional change  Bench: 7461881,True,6,2014-08-01
mcostalba,lucasart,2014-08-09 23:36:22+00:00,Fix perft 1  Compute correct number of moves for this corner case.  A smal bug crept in after recent perft rework.  No functional change.,True,5,2014-08-01
lucasart,lucasart,2014-08-09 23:28:00+00:00,"Retire move_to_san()  Now ""Write Search Log"" will pring moves in UCI format; consistent with all the rest. This functionality is not aimed at end-users anyway. It's hardly useful at all; in fact. Also; pretty-printing SAN moves is something that better belongs in the GUI than in the engine.  No functional change.",True,5,2014-08-01
lucasart,lucasart,2014-08-09 05:25:05+00:00,Move to_char() and to_string() to notation Where they better belong.  Also; this removes '#include <string>' from types.h; which reduces the amount of code to compile (every translation unit includes types.h).  No functional change.,True,5,2014-08-01
mcostalba,lucasart,2014-08-09 05:00:59+00:00,Rework perft implementation  Unify various perft functions and move all the code to search.cpp.  Avoid perft implementation to be splitted between benchmark.cpp (where it has no reason to be) and search.cpp  No functional and no speed change (tested).,True,5,2014-08-01
lucasart,lucasart,2014-08-07 13:15:05+00:00,Write perft(N-1) into cout So that one can redirect cout to /dev/null and only print print cerr in the terminal (for more accurate speed tests).  Suggested by Marco.  No functional change.,True,3,2014-08-01
lucasart,lucasart,2014-08-07 10:51:07+00:00,"Fix Hash in bench The compiler tries to cast Options[""Hash""] into a string; using:  Option::operator std::string() const {   assert(type == ""string"");   return currentValue; }  And; as expected; the assert() fails.  std::to_string() would be the right solution; but it's C++11. And using a stringstream is too much code to achieve so little. Let's keep it the way it was: hardcoded (ie. default hash defined in two places).  No functional change.",True,3,2014-08-01
joergoster,lucasart,2014-08-06 10:42:10+00:00,"Remove insufficient material rule The eval already returns zero in KK; KBK; KNK (see material.cpp). The difference is: - we lose the ""TB pruning"" benefit of the draw rule (ie. search goes on even if eval is zero) - we gain some speed by removing a useless test from the hot path  STC: LLR: 0.05 (-2.94;2.94) [-3.00;1.00] Total: 128000 W: 21357 L: 21560 D: 85083  LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 33023 W: 4613 L: 4509 D: 23901  bench 7461881",True,2,2014-08-01
lucasart,lucasart,2014-08-05 23:04:27+00:00,"Remove useless code in Position::pretty() First; remove some dead code (function never called with a Move argument).  Then; remove printing of legal moves; which does not belong here. Let's keep commands orthogonal and minimal: - the ""d"" command should display the board; nothing more; or less. - ""perft 1"" will display the list of legal moves.  No functional change.",True,1,2014-08-01
lucasart,lucasart,2014-08-05 03:42:48+00:00,"Reduce minimum memory requirement by 16MB Stockfish allocates the default hash (32MB) in main(); before entering UCI::loop(). If there is not enough memory; the program will crash even before UCI::loop() is entered and the GUI is given a change to specify a lower Hash value.  This defective design could be resolved by doing a lazy allocation upon ""isready"" command; as the UCI protocol guarantees that ""isready"" will be sent at least once before any search. But it's a bit cumbersome when using Stockfish ""manually"" to have to remember to type ""isready"" everytime.  So leave the current design; but reduce the default hash to 16MB instread of 32MB. In order to perform such quick searches (depth=13); there is no reason to use so much Hash anyway. Another benefit is to introduce a bit of hash pressure in bench; which increases chances to detect rare bugs related to TT replacement; for example.  This is not a functional change; although it obviously changes the bench.  bench 7461879",True,1,2014-08-01
lucasart,lucasart,2014-08-05 03:40:25+00:00,Default Hash defined in a single place Instead of defining it both in ucioption.cpp and benchmark.cpp. Obviously changing the default Hash will change the bench as a result.  No functional change.,True,1,2014-08-01
lucasart,lucasart,2014-08-04 05:54:09+00:00,Retire divide command The main purpose of perft is to help debugging. But without the breakdown in sum of perft(N-1); it is a completely useless debugging tool.  So perft now displays the breakdown; and divide is therefore removed.  No functional change.,True,0,2014-08-01
mcostalba,lucasart,2014-08-02 14:16:45+00:00,Ensure printing UCI info in multi-pv case  After commit 94b1bbb68be6b0bc3aaf1cb804841a022bcc7007; in case available root moves are less than multiPV; we could never reach condition:  PVIdx + 1 == multiPV  and as a consequence UCI output is not printed.  Fixed suggested by Joerg Oster.  No functional change.,True,5,2014-08-01
oskmeister,lucasart,2014-08-01 11:32:53+00:00,Correct bench timing  No functional change.,True,4,2014-08-01
lucasart,lucasart,2014-07-29 23:06:48+00:00,Document Threat[] indices From Marco's repo.  No functional change.,True,1,2014-07-01
mcostalba,lucasart,2014-07-28 22:53:09+00:00,Fix a warning with MSVC 2010  Warning C4267: 'argument' : conversion from 'size_t' to 'int'; possible loss of data  No functional change.,True,0,2014-07-01
zardav,lucasart,2014-07-28 22:52:32+00:00,Small code style reformatting  No functional change.,True,0,2014-07-01
lucasart,lucasart,2014-07-27 01:18:04+00:00,Aspiration: widen slower STC: LLR: -2.95 (-2.94;2.94) [0.00;4.00] Total: 182323 W: 30664 L: 30234 D: 121425  LTC: LLR: 3.51 (-2.94;2.94) [0.00;4.00] Total: 59841 W: 8345 L: 8006 D: 43490  bench 7962536,True,6,2014-07-01
zardav,lucasart,2014-07-22 23:05:10+00:00,Outpost tuning double mg bonus and half eg bonus.  STC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 18142 W: 3094 L: 2948 D: 12100  LTC: LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 83561 W: 11706 L: 11329 D: 60526  bench 7831429,True,1,2014-07-01
lucasart,lucasart,2014-07-20 00:50:54+00:00,Revert Contempt = 20  Despite being neutral at STC; it turned out to be regressive at LTC:  40k games at LTC with Hash=8 ELO: -2.06 +-1.9 (95%) LOS: 1.4% Total: 39720 W: 5740 L: 5976 D: 28004  40k games at LTC with Hash=128 ELO: -2.69 +-1.9 (95%) LOS: 0.2% Total: 39149 W: 5702 L: 6005 D: 27442  bench 7477963,True,6,2014-07-01
mcostalba,lucasart,2014-07-15 12:59:32+00:00,Simplify evaluate_passed_pawns  From a suggestion by David Zar.  No functional change.,True,1,2014-07-01
lucasart,lucasart,2014-07-14 23:14:58+00:00,Contempt = 20 Also raise the admissible bounds to (-100;100); as there is no reason to prevent users from using high values if they want to.  Does not regress in self play: ELO: 0.10 +-2.0 (95%) LOS: 53.7% Total: 40000 W: 7084 L: 7073 D: 25843  master vs SF 3 ELO: 182.86 +-2.7 (95%) LOS: 100.0% Total: 40000 W: 21843 L: 2541 D: 15616  Contempt = 20 vs SF 3 ELO: 189.25 +-2.8 (95%) LOS: 100.0% Total: 40000 W: 22721 L: 2859 D: 14420  Diff is therefore 6.4 +/- 3.9 elo against a 180-190 elo weaker engine; which is significantly positive; as expected. This elo difference is likely understated; because of FishTest aggressive draw adjudication though.  We could push Contempt further; but after 20cp; it would get in the way of FishTest draw adjudication rule; and is likely to reduce the testing throughput as a result.  bench 8198667,True,0,2014-07-01
zardav,lucasart,2014-07-14 13:19:07+00:00,Bonus passed pawn blocked by our pieces  passed STC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 63965 W: 10950 L: 10692 D: 42323  and LTC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 19237 W: 2740 L: 2562 D: 13935  bench: 7477963,True,0,2014-07-01
mcostalba,lucasart,2014-07-11 10:08:27+00:00,Small reformat to Skill class  Steamline a bit the implementation of skill levels. As a side effect we can retire MultiPV global and use a local variable instead.  No functional change.,True,4,2014-07-01
lucasart,lucasart,2014-07-10 10:25:20+00:00,Remove useless condition  Small simplification; suggested by Uri Blass.  passed STC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 25839 W: 4464 L: 4351 D: 17024  and LTC: LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 220039 W: 29981 L: 30131 D: 159927  No functional change.,True,3,2014-07-01
zamar,lucasart,2014-07-08 23:19:06+00:00,Retire FakeSplit      - Currently broken     - Never been really useful     - Does not work well with new splitting model  Verified for no regression at STC with 3 threads: LLR: 2.96 (-2.94;2.94) [-6.00;0.00] Total: 81905 W: 12122 L: 12381 D: 57402  No functional change,True,1,2014-07-01
mcostalba,lucasart,2014-07-07 13:53:25+00:00,Avoid 'double assigments' tricks  Bitboard init code is already noteasy to follow; so don't make it even harder using 'smart' code.  Also reindent a while loop in standard way.  No functional change.,True,0,2014-07-01
joergoster,lucasart,2014-07-03 11:38:54+00:00,Tune trapped rook penalty  Passed STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 15687 W: 3352 L: 3199 D: 9136  and LTC (parameter tweaks) LLR: 2.95 (-2.94;2.94) [0.00;4.00] Total: 27983 W: 5046 L: 4797 D: 18140  bench: 8330705,True,3,2014-07-01
lucasart,lucasart,2014-07-03 10:23:56+00:00,size_t cast in TranspositionTable::first_entry() 32-bit truncation would make this function bogus when clusterCount >= 2^33 (ie. Hash >= 256 GB).  No function change.,True,3,2014-07-01
lucasart,lucasart,2014-07-03 10:22:53+00:00,Use compiler intrinsic instead of assembly for popcnt This time; do not break compatibility with some AMD machines that have SSE3 and popcnt; but do not have SSE4.2.  No functional change.,True,3,2014-07-01
glinscott,glinscott,2014-07-01 21:01:54+00:00,"Revert ""Use compiler intrinsic instead of assembly for popcnt""  This reverts commit a69f1d7c2060dc7b320a7b4801105df00b22a96a.",True,1,2014-07-01
lucasart,lucasart,2014-07-01 12:50:33+00:00,Use compiler intrinsic instead of assembly for popcnt No functional change.,True,1,2014-07-01
lucasart,lucasart,2014-07-01 10:37:18+00:00,Raise max Hash to 1TB And use size_t where appropriate; as suggested on FishCooking.  No functional change.,True,1,2014-07-01
ajithcj,glinscott,2014-06-30 14:55:10+00:00,Add bonuses for Minors attacking enemy pieces(except pawns) even when they are protected by enemy pawns.  Patch passed STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 8206 W: 1426 L: 1304 D: 5476  and LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 19534 W: 2821 L: 2640 D: 14073  Bench: 9942172,True,0,2014-06-01
joergoster,zamar,2014-06-29 19:17:40+00:00,"Fix Singular extension condition to handle mate scores  With Eelco's patch ""Don't special case for abs(beta) >= VALUE_MATE_IN_MAX_PLY"" condition ""abs(ttValue) < VALUE_KNOWN_WIN"" has been removed from singular extension search; and condition ""abs(beta) < VALUE_KNOWN_WIN"" was added to the SingularExtensionNode definition. This might lead to problems; especially in positions; where a mate is due. For example; this position 5rk1/4K1pp/8/5PPP/8/8/8/1R6 w - - 12 1 triggers an assert. stockfish: search.cpp:434: Value {anonymous}::search(Position&; Search::Stack*; Value; Value; Depth; bool) [with {anonymous}::NodeType NT = (<unnamed>::NodeType)2u; bool SpNode = false]: Assertion `-VALUE_INFINITE <= alpha && alpha < beta && beta <= VALUE_INFINITE' failed.  So let's re-insert the removed condition. First spotted by Uri Blass; fix by me.  Bench: 8759675",True,6,2014-06-01
jprostko,zamar,2014-06-29 14:15:10+00:00,Change the install prefix for Haiku  * /boot/common was removed from Haiku * The equivalent path now that package management has been implemented is /boot/system/non-packaged  No functional change  Bench: 8759681,True,6,2014-06-01
Britvich,glinscott,2014-06-28 18:06:32+00:00,Pack 3 TT entries in 32 bytes cluster  Idea from Ron Britvich  Code reworked by Marco Costalba and Joona Kiiski  Bench: 8095369  Resolves #3 Resolves #10,True,5,2014-06-01
glinscott,glinscott,2014-06-26 19:21:06+00:00,Merge pull request #9 from glinscott/pawnspan  Scale down endgames with pawns on one or two adjacent files    Passed STC  LLR: 2.95 (-2.94;2.94) [-1.50;4.50]  Total: 16081 W: 2745 L: 2604 D: 10732    Passed LTC  LLR: 2.95 (-2.94;2.94) [1.00;6.00]  Total: 123832 W: 17292 L: 16584 D: 89956    128k games to measure ELO at 15+0.05:  ELO: 2.07 +-1.1 (95%) LOS: 100.0%  Total: 128000 W: 21632 L: 20869 D: 85499    New bench: 8028792,True,3,2014-06-01
glinscott,glinscott,2014-06-26 19:20:30+00:00,A bit more cleanup,True,3,2014-06-01
glinscott,glinscott,2014-06-26 15:20:45+00:00,"Merge pull request #8 from glinscott/revert_ce1c260  Revert ""Check for an available slave early on""",True,3,2014-06-01
glinscott,glinscott,2014-06-26 15:16:36+00:00,"Revert ""Check for an available slave early on""  This reverts commit ce1c260ea97c14eea996d0a2638f4876ccbc412b.",True,3,2014-06-01
glinscott,glinscott,2014-06-25 20:45:14+00:00,Original version of shane's patch,True,2,2014-06-01
shane31,glinscott,2014-06-25 20:01:00+00:00,Scale down endgames with pawns on one or two adjacent files,True,2,2014-06-01
glinscott,glinscott,2014-06-23 16:14:03+00:00,Merge pull request #5 from glinscott/authors  Add AUTHORS,True,0,2014-06-01
mcostalba,mcostalba,2014-06-21 13:08:31+00:00,Some reformatting in pawns.cpp  No functional change.,True,5,2014-06-01
mcostalba,mcostalba,2014-06-21 11:07:29+00:00,Ensure ttValue != VALUE_NONE in singular extension search  The assert:    assert(ttValue != VALUE_NONE);  Could fire for multiple reasons (although is very rare); for instance after an IID we can have ttMove != MOVE_NONE while ttValue is still set at VALUE_NONE.  But not only this; actually SMP is a source of corrupted ttValue and anyhow we can detect the condition:   ttMove != MOVE_NONE && ttValue == VALUE_NONE  even north of IID.  Reported by Ronald de Man.  It is so rare that bench didn't change.  bench: 7710548,True,5,2014-06-01
glinscott,glinscott,2014-06-21 04:49:49+00:00,Remove some duplicates,True,5,2014-06-01
glinscott,glinscott,2014-06-21 01:35:09+00:00,Add AUTHORS,True,5,2014-06-01
mcostalba,mcostalba,2014-06-20 22:05:14+00:00,Better value clipping in game_phase()  No functional change.,True,4,2014-06-01
mcostalba,mcostalba,2014-06-20 21:44:46+00:00,Move game_phase() to Position  It seems a more natural to place this function there.  No functional change.,True,4,2014-06-01
mcostalba,mcostalba,2014-06-20 21:15:31+00:00,Small renaming in material weights  Also dropped some temporary variable: compiler is more than able to push on stack temp values by itself (verified).  No functional change.,True,4,2014-06-01
mcostalba,mcostalba,2014-06-19 13:44:42+00:00,Simplify a condition in is_KXK()  No functional change.,True,3,2014-06-01
Kingdefender,mcostalba,2014-06-16 19:50:14+00:00,Don't special case for abs(beta) >= VALUE_MATE_IN_MAX_PLY  Remove from the search this special case and apply null search and razoring also in mate positions.  Tested in no-regression mode and passed both  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 65431 W: 10860 L: 10810 D: 43761  and LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 34928 W: 4814 L: 4713 D: 25401  This patch kicks in only in mate positions and in these cases it seems beneficial in finding mates faster as Yery Spark measured on the Chest mate suite:  Total number of positions 6425 Fixed nodes 200K per position  master: 1049 new:    1154  And also the 5446 'hard' positions again with 2000K nodes (those not found by both engines in 200K nodes):  master: 1069 new:    1395  bench: 7710548,True,0,2014-06-01
Unknown,mcostalba,2014-06-16 10:39:50+00:00,Simplify unstoppable pawns  Tested in no-regression mode and passed both  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17919 W: 3103 L: 2978 D: 11838  and LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 31460 W: 4414 L: 4308 D: 22738  bench: 7709279,True,0,2014-06-01
mcostalba,mcostalba,2014-06-15 08:31:57+00:00,Remove -ansi flag for Clang  It seems this flag is only for gcc and yields a warning under OSX Mavericks:  clang: warning: argument unused during compilation: '-ansi'  No functional change.,True,6,2014-06-01
mcostalba,mcostalba,2014-06-14 10:46:58+00:00,Fix a warning with MSVC in 'analyze' mode  Here MSVC is worried that  StepAttacksBB[PAWN][psq]  could overflow; so change psq initialization to clarify psq is always less than 64.  No functional change.,True,5,2014-06-01
mcostalba,mcostalba,2014-06-14 10:26:08+00:00,Triviality in UCI::loop  Code style paranoid in action here :-)  No functional change.,True,5,2014-06-01
mcostalba,mcostalba,2014-06-14 10:20:54+00:00,Factor out pawn attacks in 'lever'  Improves readibility and possibly speed.  No functional change.,True,5,2014-06-01
ajithcj,mcostalba,2014-06-11 23:32:16+00:00,Simplify pawn threats and merge into ThreatenedByPawn[]  Tested in no-regression mode;  passed STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 14477 W: 2493 L: 2362 D: 9622  and LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 51964 W: 7091 L: 7013 D: 37860  bench: 7875814,True,2,2014-06-01
R-Peleg,mcostalba,2014-06-11 14:42:47+00:00,Tweak outpost name  This name is more accurate; since that function evaluates only one outpost in every call. No functional change.,True,2,2014-06-01
R-Peleg,mcostalba,2014-06-11 14:38:25+00:00,Add bonus for advanced lever  Passed both STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 15413 W: 2670 L: 2530 D: 10213  And LTC: LLR: 2.95 (-2.94;2.94) [1.00;6.00] Total: 66908 W: 9398 L: 8960 D: 48550  Bench : 7859385,True,2,2014-06-01
mcostalba,mcostalba,2014-06-08 20:30:18+00:00,Small renaming in Tracing  No functional change.,True,6,2014-06-01
mcostalba,mcostalba,2014-06-08 19:56:31+00:00,Check for an available slave early on  Don't take the split lock if we don't have available slaves (about 30-40% of times).  This new condition allows to retire the now redundant one on number of threads.  No functional change.,True,6,2014-06-01
mcostalba,mcostalba,2014-06-06 23:21:47+00:00,Use unsigned char as argument of std::isspace  Although signature allows an int:  int isspace( int ch );  The behavior is undefined if the value of ch is not representable as unsigned char and is not equal to EOF.  See  http://en.cppreference.com/w/cpp/string/byte/isspace http://www.greenend.org.uk/rjk/tech/cfu.html  This is really a tricky corner case of C standard!  Spotted and reported by Ron Britvich.  No functional change.,True,4,2014-06-01
mcostalba,mcostalba,2014-06-06 09:12:05+00:00,Avoid to use nullChild  Use instead:  (ss-1)->currentMove == MOVE_NULL  No functional change.,True,4,2014-06-01
mcostalba,mcostalba,2014-06-06 09:10:40+00:00,Remove 'update gains' hack  Use (move != MOVE_NONE) condition to filtering out updating gains at root.  bench: 8454456,True,4,2014-06-01
mcostalba,mcostalba,2014-06-06 09:08:35+00:00,Temporary revert previous patch  Split previous patch in 2 steps: first remove the MOVE_NULL hack; then retire nullChild.  The first step is a prerequisite for second one and affects bench.  The second step (next patch) just removes nullChild without affecting bench.  bench: 8205159,True,4,2014-06-01
mcostalba,mcostalba,2014-06-06 08:07:48+00:00,Avoid to use nullChild  Should be a non functional change; but for some reason bench is changed.  bench: 8454456,True,4,2014-06-01
mcostalba,mcostalba,2014-06-06 07:40:01+00:00,Move Tempo to evaluation  No functional change.,True,4,2014-06-01
mcostalba,mcostalba,2014-06-05 21:55:18+00:00,"Revert ""Score extractors""  Are broken for big-endian case and I have verified with MSVC 2013 Premium bench is correct and there is no miscompilation; so the main reason to change the original code drops.  No functional change.",True,3,2014-06-01
mcostalba,mcostalba,2014-06-05 21:46:58+00:00,Fix a warning with MSVC Premium 2013  Reported by Ron Britvich.  No functional change.,True,3,2014-06-01
pellanda,mcostalba,2014-06-04 20:31:59+00:00,Update Readme.md  Retire line about polyglot.ini and book as they are not used anymore.  No functional change.,True,2,2014-06-01
lucasart,mcostalba,2014-06-03 18:01:36+00:00,Symmetric King Safety: take 2  Another attempt at retiring current asymmetric king evaluation and use a much simpler symmetric one. As a good side effect we can avoid recalculating eval after a null move.  Tested in no-regression mode and passed  STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 21580 W: 3752 L: 3632 D: 14196  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 18253 W: 2593 L: 2469 D: 13191  And a LTC regression test against SF DD to verify we don't have regression against weaker engines due to some kind of 'contempt' effect:  ELO: 54.69 +-2.1 (95%) LOS: 100.0% Total: 40000 W: 11072 L: 4827 D: 24101  bench: 8205159,True,1,2014-06-01
mcostalba,mcostalba,2014-06-03 10:38:58+00:00,Use see() instead of see_sign() in previous patch  Before it was working by accident in case of see_sign() and failing with see() due to how castle moves are coded (king captures the rook).  Better to explicitly filter out castling moves and use see() without any surprise/trick.  No functional case.,True,1,2014-06-01
scchess,mcostalba,2014-06-03 09:43:52+00:00,Add some const qualifier  No functional change.,True,1,2014-06-01
R-Peleg,mcostalba,2014-06-03 09:33:19+00:00,Decrease reduction for moves that escape a capture  Passed both STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 10094 W: 1833 L: 1704 D: 6557  and LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 27738 W: 4147 L: 3928 D: 19663  bench : 8599236,True,1,2014-06-01
mcostalba,mcostalba,2014-06-01 13:29:34+00:00,"Retire Polyglot Book management  Book handling belongs to GUI; we kept this code for historical reasons; but nowdays there is really no need of this old; (mostly) unused and especially incorrect designed functionality.  It is up to the GUI to choose the book (far easier for the user) and to select the book parameters. In no place; including fishtest; TCEC; rating lists; etc. the ""own book"" is used; moreover currently SF is released without any book and even if in the future we bundle a book in the release package; it will be the GUI that will take care of it.  This corrects a wrong design decision that Galurung and later Stockfish inherited from what was common practice many yeas ago.  No functional change.",True,6,2014-06-01
mcostalba,mcostalba,2014-06-01 11:37:21+00:00,"Retire eval weights UCI options  There is really little that user can achieve (apart from a weakened engine) tweaking these parameters that are already tuned and have no immediate or visible effect.  So better do not expose them to the user and avoid the typical ""What is the best setup for my machine?"" kind of question (by far the most common; by far the most useless).  No functional change.",True,6,2014-06-01
mcostalba,mcostalba,2014-05-31 21:48:23+00:00,Retire polyglot.ini  All actively maintained GUI are able to understand UCI protocol; so there is no more need for this obsolete file.  No functional change.,True,5,2014-05-01
mcostalba,mcostalba,2014-05-31 21:34:36+00:00,Restore development version  bench: 8732553,True,5,2014-05-01
mcostalba,mcostalba,2014-05-31 07:16:54+00:00,Stockfish 5  Stockfish bench signature is: 8732553,True,5,2014-05-01
mcostalba,mcostalba,2014-05-26 19:39:48+00:00,"Revert ""Symmetric king safety""  Regression test of 40K games at 60 secs shows this commit to be a 2-3 ELO regression.  So revert to original king safety.  bench: 8732553",True,0,2014-05-01
mcostalba,mcostalba,2014-05-24 22:21:46+00:00,"Fix a warning with Intel compiler  warning #2259: non-pointer conversion from ""int"" to ""int16_t={short}"" may lose significant bits.  No functional change.",True,5,2014-05-01
mcostalba,mcostalba,2014-05-24 22:02:09+00:00,Tidy up tt.h  Backport some non-functional changes found working on 'dense TT' patch.  No functional change.,True,5,2014-05-01
mcostalba,mcostalba,2014-05-24 07:56:32+00:00,Add perft 'divide' command  To show perft numbers for each move. Just use 'divide' instead of 'perft'; for instance:  position startpos moves e2e4 e7e5 divide 4  Inspired by Ronald de Man.  No functional change.,True,5,2014-05-01
mcostalba,mcostalba,2014-05-19 19:19:47+00:00,Update polyglot.ini after last patch  No functional change.,True,0,2014-05-01
lucasart,mcostalba,2014-05-19 12:24:39+00:00,Symmetric king safety  Retire current asymmetric king evaluation and use a much simpler symmetric one.  As a side effect retire the infamous 'Aggressiveness' and 'Cowardice' UCI options.  Tested in no-regression mode;  Passed both STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 33855 W: 5863 L: 5764 D: 22228  And LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 40571 W: 5852 L: 5760 D: 28959  bench: 8321835,True,0,2014-05-01
mcostalba,mcostalba,2014-05-17 20:59:07+00:00,Fix an off-by-one bug in extract_pv_from_tt  At root we start counting plies from 1; instead pv[] array starts from 0. So the variable 'ply' we use in extract_pv_from_tt to index pv[] is misnamed; indeed it is not the real ply; but ply-1.  The fix is to leave ply name in extract_pv_from_tt but assign it the correct start value and consequentely change all the references to pv[]. Instead in insert_pv_in_tt it's simpler to rename the misnamed 'ply' in 'idx'.  The off-by-one bug was unhidden when trying to use 'ply' for what it should have been; for instance in this position:  position fen 8/6R1/8/3k4/8/8/8/2K5 w - - 0 1  at depth 24 mate line is erroneusly truncated due to value_from_tt() using the wrong ply.  Spotted by Ronald de Man.  bench: 8732553,True,5,2014-05-01
mcostalba,mcostalba,2014-05-17 10:49:52+00:00,Extract a reliable PV line  Truncate the extracted PV from the point where the score stored in hash starts to deviate from the root score.  Idea from Ronald de Man.  bench: 8732553,True,5,2014-05-01
vdbergh,mcostalba,2014-05-13 20:37:28+00:00,Drop to qsearch at low depth in razoring  If razoring conditions are satisfied and depth is low; then directly drop in qsearch.  Passed both STC LLR: 2.98 (-2.94;2.94) [-1.50;4.50] Total: 12914 W: 2345 L: 2208 D: 8361  And LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 50600 W: 7548 L: 7230 D: 35822  bench: 8739659,True,1,2014-05-01
Unknown,mcostalba,2014-05-13 19:37:42+00:00,"Remove undefended minors  Tested in ""no regression"" mode.  Passed both STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 68026 W: 12277 L: 12236 D: 43513  And LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 85682 W: 12861 L: 12836 D: 59985  bench: 7311935",True,1,2014-05-01
mcostalba,mcostalba,2014-05-11 08:56:25+00:00,Save stalemates in TT  When there aren't legal moves after a search; instead of returning imediately; save bestValue in TT as in the usual case.  There is really no reason to special case this one.  With this patch is fully fixed (again) follwing position:      7k/6p1/6B1/5K1P/8/8/8/8 w - - 0 1  Also in SMP case.  bench: 8802105,True,6,2014-05-01
mcostalba,mcostalba,2014-05-11 08:29:56+00:00,"Retire ""Idle Threads Sleep"" UCI option  After last Joona's patch there is no measurable difference between the option set or unset.  Tested by Andreas Strangm�ller with 16 threads on his Dual Opteron 6376.  After 5000 games at 15+0.05 the result is:  1 Stockfish_14050822_T16_on   : 3003  5000 (+849;=3396;-755); 50.9 % 2 Stockfish_14050822_T16_off  : 2997  5000 (+755;=3396;-849); 49.1 %  bench: 880215",True,6,2014-05-01
Unknown,mcostalba,2014-05-10 06:54:31+00:00,Make imbalance table more clear  No functional change.,True,5,2014-05-01
R-Peleg,mcostalba,2014-05-08 20:36:30+00:00,Pass Position as const ref in update_stats()  No functional change.,True,3,2014-05-01
mcostalba,mcostalba,2014-05-08 07:09:35+00:00,Clarify some comments in SMP code  Spotted by Joona.  No functional change.,True,3,2014-05-01
mcostalba,mcostalba,2014-05-07 06:56:16+00:00,Reformat and simplify previous patch  No functional change.,True,2,2014-05-01
zamar,mcostalba,2014-05-07 06:38:56+00:00,Allow a slave to 'late join' another splitpoint  Instead of waiting to be allocated; actively search for another split point to join when finishes its search. Also modify split conditions.  This patch has been tested with 7 threads SMP and passed both STC:  LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 2885 W: 519 L: 410 D: 1956  And a reduced-LTC at  25+0.05 LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 4401 W: 684 L: 566 D: 3151  Was then retested against regression in 3 thread case at standard LTC of  60+0.05:  LLR: 2.96 (-2.94;2.94) [-4.00;0.00] Total: 40809 W: 5446 L: 5406 D: 29957  bench: 8802105,True,2,2014-05-01
Britvich,mcostalba,2014-05-05 07:05:29+00:00,Rewrite Score extractors  Less tricky and even a bit faster. With this version Visual Studio Ultimate 2013 Update 2 RC runs fine even in O2 optimization.  No functional change.,True,0,2014-05-01
mcostalba,mcostalba,2014-05-04 11:35:30+00:00,Change search() signature  Pass SpNode as template parameter.  No functional change.,True,6,2014-05-01
mcostalba,mcostalba,2014-05-04 07:58:49+00:00,Revert dynamic contempt  On a final fixed game number test it failed to prove better than standard version.  STC 15+0.05  ELO: -0.86 +-1.7 (95%) LOS: 15.8% Total: 57578 W: 10070 L: 10213 D: 37295  bench: 8802105,True,6,2014-05-01
mcostalba,mcostalba,2014-05-04 07:42:32+00:00,Revert stalemate detection in evaluation  Unfortunatly we have a slow down that causes a regression in STC with no-regression mode:  LLR: -2.96 (-2.94;2.94) [-3.00;1.00] Total: 22454 W: 3836 L: 4029 D: 14589  bench: 8678654,True,6,2014-05-01
mcostalba,mcostalba,2014-05-04 07:34:22+00:00,Revert back KBPsK to latest Gary's version  The bug was found to be elsewhere. This version is correct and also is able to detect as draw positions like:  8/8/5b2/8/8/4k1p1/6P1/5K2 b - - 6 133  bench: 8678654,True,6,2014-05-01
Unknown,mcostalba,2014-05-03 19:40:09+00:00,Fix KXK endgame  Position is win also if strong side has a bishop and a knight (plus other material; otherwise KBNK would be triggered instead of KXK).  This fixes a subtle bug where a search on position  k7/8/8/8/8/P7/PB6/K7 b - - 6 1  Instead of returning a draw score; suddendly returns a big score. This happens because at one point in search we reach this position:  8/Pk6/8/8/8/4B3/P7/K7 w - - 3 8  Where white can promote. In case of rook promotion (and also in case of queen promotion) the resutling position gets a huge static eval that is above VALUE_KNOWN_WIN (from the point of view of white). So for rook promotion it is            &&  futilityBase > -VALUE_KNOWN_WIN  that prevents futility pruning in qsearch. (Removing this condition indeed lets the problem occur). Raising the static eval for K+B+N+X v K to a value higher than VALUE_KNOWN_WIN fixes this particular problem without having to introduce an extra futility pruning condition in qsearch.  I just checked and it seems K+R v K; K+2B v K and even K+B+N v K already get a huge static eval. Why not K+B+N+P v K?  I think this fix corrects an oversight. There is special code for KBNK; but KBNXK is handled by KXK; so the test for sufficient material should also test for B+N.  bench: 8678654,True,5,2014-05-01
mcostalba,mcostalba,2014-05-03 10:12:22+00:00,Fully correct stealmate detection  In the (rare) cases when the two conditions are true; then fully check again with a slow but correct MoveList<LEGAL>(pos).size().  This is able to detect false positives like this one:  8/8/8/Q7/5k1p/5P2/4KP2/8 b - - 0 17  When we have a possible simple pawn push that is not stored in attacks[] array. Because the third condition triggers very rarely; even if it is slow; it does not alters in a measurable way the average speed of the engine.  bench: 8678654,True,5,2014-05-01
mcostalba,mcostalba,2014-05-03 09:47:49+00:00,Add stealmate detection to evaluation  Currently a stealmate position is misevaluated in a negative/positive score; this leads qsearch(); that does not detects stealmates too; to return the wrong score and this yields to some kind of endgames to be completely misevaluated.  With this patch is fully fixed follwing position  7k/6p1/6B1/5K1P/8/8/8/8 w - - 0 1  Also in SMP case.  Correct root cause analysys by Ronald de Man.  bench: 8678654,True,5,2014-05-01
mcostalba,mcostalba,2014-05-02 09:04:18+00:00,Revert to Galurung's KBPsK endgame  After reverting to the original Tord's endgame; a search on position  7k/6p1/6B1/5K1P/8/8/8/8 w - - 0 1  Reports; correctly; a draw score instead of an advantage for white.  Issue reported by Uri Blass.  bench: 8678654,True,4,2014-05-01
mcostalba,mcostalba,2014-05-01 21:08:07+00:00,Use only standard conforming eg_value()  Remove the optimization for Intel; is not standard and can break at any time; moreover our release build is not done with Intel C++ anymore so we don't need to sqeeze the extra speed out from this compiler.  No functional change.,True,3,2014-05-01
mcostalba,mcostalba,2014-05-01 14:26:18+00:00,Don't save stale value in TT after split  If we return from split with a stale value due to a stop or a cutoff upstream occurred; then we exit moves loop and save a stale value in TT before returning search().  This patch; from Joona; fixes this.  bench: 8678654,True,3,2014-05-01
mcostalba,mcostalba,2014-05-01 06:48:59+00:00,Better document search stop condition  Handling a stop or a cutoff in the search is a tricky business; so better document this difficult part of the code.  No functional change.,True,3,2014-05-01
mcostalba,mcostalba,2014-05-01 05:46:44+00:00,Remove dead code in search  We can never have bestValue == -VALUE_INFINITE at the end of move loop because if no legal move exists we detect it with previous condition on !moveCount; if a legal move exists we never prune it due to futility pruning condition:  bestValue > VALUE_MATED_IN_MAX_PLY  So this code never executes; as I have also verified directly.  Issue reported by Joona.  No functional change.,True,3,2014-05-01
mcostalba,mcostalba,2014-04-30 06:55:45+00:00,"Fix a compile error with Intel C++  Intel compiler is very picky: ""error: this operation on an enumerated type requires an applicable user-defined operator function""  Reported by Tony Gaor.  No functional change.",True,2,2014-04-01
snicolet,mcostalba,2014-04-30 06:36:44+00:00,Penalize hanging pieces  Passed both STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 8519 W: 1565 L: 1440 D: 5514  And LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 60618 W: 9141 L: 8777 D: 42700  bench: 8678654,True,2,2014-04-01
mcostalba,mcostalba,2014-04-28 15:27:49+00:00,Rearrange interpolation formula  Put the division at the end to reduce rounding errors. This alters the bench due to different rounding errors; but should not alter ELO in any way.  bench: 7615217,True,0,2014-04-01
Unknown,mcostalba,2014-04-28 15:07:43+00:00,Minor stuff scattered around  Just random minor stuff I found while browsing the code.  No functional change.,True,0,2014-04-01
mcostalba,mcostalba,2014-04-27 17:17:40+00:00,Remove other useless floor()  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-27 17:10:00+00:00,Don't need floor() in timeman.cpp  For positive numbers result is equivalent: http://stackoverflow.com/questions/3300290/cast-to-int-vs-floor  Spotted by Joseph Ellis.  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-27 10:02:36+00:00,Fix Intel compiler warnings  Fallout from previous patch: Intel compiler is very noisy.  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-27 09:44:16+00:00,Remove some useless casts  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-27 09:25:42+00:00,We can add an integer to a Value  We have defined corresponding operators; so rely on them to streamline the code and increase readibility.  No functional change.,True,6,2014-04-01
Unknown,mcostalba,2014-04-27 07:51:48+00:00,Remove rook passers eval completely  Tested in no-regression mode.  Passed STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17727 W: 3248 L: 3122 D: 11357  And (a very long!) LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 106327 W: 16258 L: 16265 D: 73804  bench: 7396783,True,6,2014-04-01
mcostalba,mcostalba,2014-04-27 07:31:22+00:00,Reformatting in material.h  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-27 07:23:45+00:00,Move game phase constants to enum Value  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-26 22:25:47+00:00,Speed up by almost 3%  This apparentely silly tweak allows to speed up the bench by almost 3%.  Not clear why; repeating with perft; the speed up vanishes.  Suggested by Jonathan Calovski.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-26 07:33:50+00:00,Fix issues detected by Coverity Scan  Most of Coverity Scan reports are false positives; but in rare cases we have confirmed (very small) issues.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-25 10:53:51+00:00,Speed up picking of killers  Changing the order of the conditions gives about 1% speed up!  No functional change.,True,4,2014-04-01
Unknown,mcostalba,2014-04-24 06:53:46+00:00,Remove RookOn7th and merge values into psqt  Tested in no-regression mode:  STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 55678 W: 9954 L: 9892 D: 35832  LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 9238 W: 1448 L: 1311 D: 6479  bench: 7905850,True,3,2014-04-01
Unknown,mcostalba,2014-04-24 06:47:13+00:00,Remove penalty for knight when few enemy pawns  Tested in standard mode at STC and no-regression mode at LTC:  STC LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 19503 W: 3502 L: 3349 D: 12652  LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 67474 W: 9974 L: 9921 D: 47579  bench: 8331217,True,3,2014-04-01
jcalovski,mcostalba,2014-04-24 06:38:11+00:00,Shuffle movepicker score  Believed to be a speed optimization as benched on Windows with bench realtime affinity 0x1 deleting highest and lowest runs:  Base	Test 1549259	1608202 1538115	1583934 1543168	1556938 1536365	1554179 1533026	1582010  Signature remains unchanged and gives anywhere from 1-2% nps boost in analysis depending on number of cores used.  No functional change.,True,3,2014-04-01
mcostalba,mcostalba,2014-04-24 06:35:13+00:00,Correctly apply previous patch  Apply the correct values from previous patch.  bench: 8082049,True,3,2014-04-01
joergoster,mcostalba,2014-04-23 06:51:34+00:00,Move queen vs. 3 minors rule to imbalance tables  Tuned with CLOP after 57k games.  Simplification: tested in no-regression mode.  Passed both STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17254 W: 3159 L: 3032 D: 11063  And LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 32413 W: 4967 L: 4864 D: 22582  bench: 8082049,True,2,2014-04-01
mcostalba,mcostalba,2014-04-21 18:56:12+00:00,"Revert ""Generalize shift_bb() to handle double pushes""  Seems to intorduce some compiler warning as reported by Gary. Warning seems bogus; but revert anyhow.  No functional change.",True,0,2014-04-01
mcostalba,mcostalba,2014-04-21 12:30:27+00:00,Reset DrawValue[] before new search  Spotted by Ronald de Man  bench: 7384368,True,0,2014-04-01
Unknown,mcostalba,2014-04-21 10:23:03+00:00,Rise contempt when in advantage  This is a very discussed patch with many argumentations pro and against. The fact is it passed both STC:  LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 16305 W: 3001 L: 2855 D: 10449  And LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 34273 W: 5180 L: 4931 D: 24162  Although it is true that a correct test should include foreign engines; we commit it anyhow so people can test it out in the wild; under broader conditions.  bench: 7384368,True,0,2014-04-01
mcostalba,mcostalba,2014-04-21 09:47:01+00:00,Streamline implementation of Position::pretty()  Simpler and more in line with Bitboards::pretty()  No functional change.,True,0,2014-04-01
Unknown,mcostalba,2014-04-21 05:47:50+00:00,"Raise penalty blocked enemy pawn on 6th rank  Idea from Lyudmil Tsvetkov.  The value seems to be raised a bit abruptly; but as Gary said; a blocked pawn on the sixth rank has been instrumental in limiting king mobility in multiple losses that I've seen from SF. A blocked pawn on fifth rank is much less serious on the king safety impact.  Passed both STC LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 14551 W: 2750 L: 2607 D: 9194  and LTC LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 43595 W: 6917 L: 6618 D: 30060  And even a retest at 60"" fixed games 40K ELO: 1.79 +-1.9 (95%) LOS: 97.0% Total: 39889 W: 6018 L: 5813 D: 28058  bench: 7154916",True,0,2014-04-01
mcostalba,mcostalba,2014-04-20 13:52:37+00:00,Generalize shift_bb() to handle double pushes  And use it in evaluate_space.  No functional change.,True,6,2014-04-01
Unknown,mcostalba,2014-04-20 08:06:51+00:00,Small simplification to passed pawns  Tested in no-regression mode.  Passed both STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 28521 W: 5066 L: 4958 D: 18497  And LTC LLR: 3.04 (-2.94;2.94) [-3.00;1.00] Total: 21939 W: 3261 L: 3138 D: 15540  bench: 8165681,True,6,2014-04-01
jhellis3,mcostalba,2014-04-17 06:45:31+00:00,Remove supporting pawns  Tested in no-regression mode  Passed both STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 44957 W: 7984 L: 7903 D: 29070  and LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 12396 W: 1916 L: 1783 D: 8697  Bench: 7907885,True,3,2014-04-01
Unknown,mcostalba,2014-04-14 05:54:24+00:00,Enable BMI1 too when using BMI2 ARCH  Adding BMI1 allows the compiler to use _blsr_u64 automatically (the advertised 0.3% speed gain). I verified that the compiler does not use this instruction with the -mbmi2 flag only. Also; all processors supporting BMI2 is also supporting BMI1.  No functional change,True,0,2014-04-01
mcostalba,mcostalba,2014-04-13 12:29:42+00:00,More readable trapped rook condition  Prefer  file_of(s) < file_of(ksq)  to the inidrect  file_of(ksq) < FILE_E  To evaluate if semiopen side to check is the left side.  Also other small touches while there.  No functional change.,True,6,2014-04-01
daylen,mcostalba,2014-04-13 07:05:21+00:00,"Simplify Makefile by removing OS X targets  Right now the Makefile is cluttered with OS X equivalents of all the x86 targets. We can get rid of all of them and just check UNAME against ""Darwin"" for the few OS X-specific things we need to do.  We also disable Clang LTO when using BMI2 instructions. For some reason; LLVM cannot find the PEXT instruction when using LTO. I don't know why; but disabling LTO for BMI2 fixes it.  No functional change.",True,6,2014-04-01
mcostalba,mcostalba,2014-04-12 11:51:52+00:00,Move args parsing to UCI::loop  This leaves a very clean main.cpp  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 10:05:25+00:00,Reshuffle in uci.cpp  Move function definitions before call site.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 10:00:37+00:00,Reshuffle in timeman.cpp  Move template definitions before call site.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 08:17:41+00:00,Fix a typo in evaluate  Spotted by Lyudmil Antonov.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 07:18:55+00:00,Retire signature-build  Does not seem used.  No functional change.,True,5,2014-04-01
jromang,mcostalba,2014-04-12 07:15:14+00:00,Add ARCH x86-64-bmi2 support  Intel Haswell and newer CPUs can calculate sliders attacks using special PEXT asm instructions instead of magic bitboards. This gives a +3% speed up.  To enable it just compile with ARCH=x86-64-bmi2  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 06:55:30+00:00,Switch to hardware PEXT  Retire software pext and introduce hardware call when USE_PEXT is defined during compilation.  This is a full complete implementation of sliding attacks using PEXT.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 06:55:30+00:00,Implement PEXT based attacks  According to:  https://chessprogramming.wikispaces.com/BMI2#PEXTBitboards  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 06:55:30+00:00,Add PEXT software implementation  For development/debug purposes.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-12 06:39:18+00:00,Big reshuffle in evaluate.cpp  Reshuffle functions to define them in reverse calling order (C style).  This allow us to define templates before they are used. Currently it is not like this; for instance evaluate_pieces is defined after do_evaluate that calls it. This happens to work for some strange reason (two phase lookup?) but we want to avoid code that works 'by magic'.  As a nice side-effect we can now remove the function prototypes.  No functional change.,True,5,2014-04-01
glinscott,mcostalba,2014-04-12 05:15:51+00:00,Move LowMobPenalty into psq/mobility tables  Tested in no-regression mode.  Passed both STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 36705 W: 6537 L: 6443 D: 23725  and LTC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 9358 W: 1495 L: 1358 D: 6505  bench: 6921356,True,5,2014-04-01
glinscott,mcostalba,2014-04-12 05:05:02+00:00,Reduce penalty for doubled pawns further away from each other  Passed both STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 38339 W: 6849 L: 6649 D: 24841  and LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 22693 W: 3455 L: 3256 D: 15982  bench: 7508468,True,5,2014-04-01
mcostalba,mcostalba,2014-04-11 06:38:09+00:00,Further simplification in evaluate  No functional change,True,4,2014-04-01
mcostalba,mcostalba,2014-04-10 17:45:18+00:00,Get rid of an evaluate_pieces() overload  Rewrite and greatly simplify that part of code.  No functional change.,True,3,2014-04-01
glinscott,mcostalba,2014-04-10 06:35:10+00:00,Add a penalty for low mobility pieces  Passed both STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 81857 W: 14652 L: 14342 D: 52863  and LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 45400 W: 6999 L: 6697 D: 31704  bench: 7716978,True,3,2014-04-01
glinscott,mcostalba,2014-04-08 20:25:54+00:00,Restrict queen mobility to safe squares  Passed both STC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 16188 W: 3119 L: 2971 D: 10098  and LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 6336 W: 1010 L: 882 D: 4444  bench: 7533692,True,1,2014-04-01
lucasart,mcostalba,2014-04-06 09:53:28+00:00,Rescale UCI scores to PawnValueEg  This is more consistent with what other engines are doing. Often people thinks that SF's scores are overblown. In the end; it just boils down to the arbitrary way of rescaling them.  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-06 09:26:12+00:00,Sync some common names  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-06 08:15:11+00:00,Some more work in pretty_pv  No functional change.,True,6,2014-04-01
mcostalba,mcostalba,2014-04-05 17:05:37+00:00,Small tidy up in move_to_san  No functional change.,True,5,2014-04-01
Unknown,mcostalba,2014-04-05 10:48:20+00:00,"Smaller and faster profile-build binaries  I have noticed that increasing the bench depth produces progressively smaller and slightly faster executables at the cost of longer compile times.  Also using bench ""time"" instead of ""depth"" seems to produce slightly smaller/faster executables  given comparable compile times.  I have made a new Makefile that generates smaller and about 1% to 2% faster profile executables at only a little extra compile time.  On  my mobile 2GHz i7 a full profile build time goes from 3'48"" to 4'13"" and the exe goes down by 5% from 416;310 bytes to 395;567 bytes.  No functional change.",True,5,2014-04-01
lucasart,mcostalba,2014-04-05 09:26:44+00:00,Remove QueenOn7th and QueenOnPawn  Small simplification.  Passed SPRT(-3;1) both at STC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 17051 W: 3132 L: 3005 D: 10914  and LTC: LLR: 4.55 (-2.94;2.94) [-3.00;1.00] Total: 24890 W: 3842 L: 3646 D: 17402  The rationale behind this is that I've never managed to add a Queen on 7th rank bonus in DiscoCheck; because it never showed to be positive (evne slightly) in testing. The only thing that worked is Rook on 7th rank.  In terms of SF code; it seemed natural to group it with QueenOnPawn as well as those are done together. I know you're against groupping in general; but when it comes to non regression test; you are being more conservative by groupping. If the group passes SPRT(-3;1) it's safer to commit; than test every component in SPRT(-3;1) and end up with the risk of commiting several -1 elo regression instead of just one -1 elo regression.  In chess terms; perhaps it's just easier to manouver a Queen (which can more also diagonaly) than a Rook. Therefore you can let the search do its job without needing eval ad-hoc terms to guide it. For the Rook which takes more moves to manouver such eval terms can be (marginally) useful.  bench: 7473314,True,5,2014-04-01
Unknown,mcostalba,2014-04-05 09:12:18+00:00,Speed up apply_weight  Speed up by about 2% this hot path function pre-calculating midgame and endgame values of the weight.  No functional change.,True,5,2014-04-01
mcostalba,mcostalba,2014-04-03 09:33:42+00:00,Update Readme to 128 max threads  No functional change.,True,3,2014-04-01
joergoster,mcostalba,2014-04-03 08:42:06+00:00,Queen vs. 3 pieces imbalance  Passed both STC LLR: 7.32 (-2.94;2.94) [-1.50;4.50] Total: 98108 W: 18087 L: 17576 D: 62445  And LTC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 15082 W: 2417 L: 2248 D: 10417  bench: 7717336,True,3,2014-04-01
mcostalba,mcostalba,2014-04-03 08:34:25+00:00,Make operator<< to return void  This should help preventing misuse.  No functional change.,True,3,2014-04-01
Unknown,mcostalba,2014-04-01 09:59:25+00:00,Drop not defended by pawn condition  Passed no-regression test both at STC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 96554 W: 17563 L: 17572 D: 61419  and at LTC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 31891 W: 4905 L: 4801 D: 22185  bench: 7720896,True,1,2014-04-01
mcostalba,mcostalba,2014-04-01 07:39:41+00:00,Do not workaround function argument evaluation  Rewrite options initialization to do not trying to hack upon the undefined evaluation order of function arguments.  No functional change.,True,1,2014-04-01
mcostalba,mcostalba,2014-03-30 12:20:12+00:00,"Fix a compile error with Intel C++  Error: a value of type ""int"" cannot be assigned to an entity of type ""Value""  No functional change.",True,6,2014-03-01
mcostalba,mcostalba,2014-03-30 12:25:57+00:00,Fix a warning with MSVC 2010  Warning C4804: '<' : unsafe use of type 'bool' in operation  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-30 08:45:46+00:00,Show evaluation from white POV in trace  We chose this instead of negamax sign convention (ie. from the point of view of the side to move) because it is more in line to how the eval table is presented.  Also some tweak to formatting while there.  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-29 10:13:42+00:00,Raise VALUE_INFINITE  In some legal positions like this one: R6R/3Q4/1Q4Q1/4Q3/2Q4Q/Q4Q2/Np1Q4/kB1N1KB1  b -- 0 1  We can have a very high score; in this case 30177 and 29267 for midgame and endgame respectively; and because VALUE_INFINITE = 30001 we have an assert in interpolate()  Midgame and endgame scores are stored in 16 bit signed integers so we can rise VALUE_INFINITE a little bit. This does not fix the possibility of overflow in general case; just makes the condition more difficult to trigger and anyhow better uses all the score width.  Raising VALUE_INFINITE to 32000 seems to fix the problem for this particular case.  No functional change.,True,5,2014-03-01
jromang,mcostalba,2014-03-29 09:05:02+00:00,Further simplification of TT replace strategy  No functional change,True,5,2014-03-01
mcostalba,mcostalba,2014-03-29 07:45:40+00:00,Restore old aspiration window to 16  Tested directly at LTC because previous long test series on this topic shows it is TC dependant.  Tested with no-regression mode because gets rid of an ugly and ad-hoc rule.  Test at LTC: LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 67918 W: 10590 L: 10541 D: 46787  bench: 7926803,True,5,2014-03-01
Unknown,mcostalba,2014-03-29 07:37:55+00:00,Pinned pieces affect king safety  Here the new idea is to link pinned pieces with king safety.  Passed both STC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 10047 W: 1867 L: 1737 D: 6443  And LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 10419 W: 1692 L: 1543 D: 7184  bench: 8325087,True,5,2014-03-01
mcostalba,mcostalba,2014-03-26 06:06:29+00:00,Fix a bug in pawns eval tracing  Instead of totals we were showing white and black values.  Spotted by Sven Sch�le  No functional change.,True,2,2014-03-01
mcostalba,mcostalba,2014-03-24 07:32:08+00:00,Simplify TT replace strategy  Tested for no-regression with SPRT[-3; 1] at STC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 32046 W: 6020 L: 5918 D: 20108  No functional change.,True,0,2014-03-01
snicolet,mcostalba,2014-03-24 07:27:40+00:00,Introduce penalty for weak (=unsupported) pawns.  We add a penalty for each pawn which is not protected by another pawn of the same color.  Passed both short TC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 12107 W: 2411 L: 2272 D: 7424  And long TC LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 9204 W: 1605 L: 1458 D: 6141  bench: 7682173,True,0,2014-03-01
mcostalba,mcostalba,2014-03-23 10:17:38+00:00,Fix an incorrect 'friend' declaration  Spotted by Lee David.  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-23 09:42:37+00:00,Retire last usage of operator|(File f; Rank r)  This for some reason was missed.  No functional change.,True,6,2014-03-01
Unknown,mcostalba,2014-03-23 08:46:15+00:00,Refresh TT entries generation automatically on probe  And other assorted simplifications; tested with SPRT[-3; 1]  Passed both short TC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 18814 W: 3600 L: 3475 D: 11739  And long TC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 20731 W: 3217 L: 3096 D: 14418  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-23 07:54:10+00:00,Rename score to value in ExtMove  We use 'score' for the value mid-endgame pair.  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-22 23:06:26+00:00,Trivial formatting in ucioption.cpp  No functional change.,True,5,2014-03-01
mcostalba,mcostalba,2014-03-22 22:54:18+00:00,Retire operator|(File f; Rank r)  Use make_square() instead. Less fancy but more clear.  No functional change.,True,5,2014-03-01
mcostalba,mcostalba,2014-03-22 10:30:06+00:00,"Fix a subtle bug in UCI options printing  We want all the UCI options are printed in the order in which are assigned; so we use an index that; depending on Options.size(); increases after each option is added to the map. The problem is that; for instance; in the first assignment:  o[""Write Debug Log""] = Option(false; on_logger);  Options.size() can value 0 or 1 according if the l-value (that increments the size) has been evaluated after or before the r-value (that uses the size value).  The culprit is that assignment operator in C++ is not a sequence point:  http://en.wikipedia.org/wiki/Sequence_point  (Note: to be nitpick here we actually use std::map::operator=()  that being a function can evaluate its arguments in any order)  So there is no guarantee on what term is evaluated first and behavior is undefined by standard in this case. The net result is that in case r-value is evaluated after l-value the last idx is not size() - 1; but size() and in the printing loop we miss the last option!  Bug was there since ages but only recently has been exposed by the removal of UCI_Analyze option so that the last one becomes UCI_Chess960 and when it is missing engine cannot play anymore Chess960.  The fix is trivial (although a bit hacky): just increase the last loop index.  Reported by Eric Mullins that found it on an ARM and MIPS platforms with gcc 4.7  No functional change.",True,5,2014-03-01
mcostalba,mcostalba,2014-03-18 17:36:39+00:00,Fix a typo  Spotted by Isaac Ha�k Dunn.  No functional change.,True,1,2014-03-01
mcostalba,mcostalba,2014-03-18 11:07:26+00:00,Increase max threads to 128  Thanks to std::bitset we can easily increase the limit of active threads above 64.  Thanks to Lucas Braesch for pointing at the correct solution of using std::bitset.  No functional change.,True,1,2014-03-01
mcostalba,mcostalba,2014-03-16 09:55:58+00:00,Fix a crash under MSVC  Using memset on a std::vector is undefined behavior; so manually init all the data memebers of LimitsType.  Bug intorduced in 41641e3b1eea0038ab6984  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-15 22:43:35+00:00,Split also if no slaves are found  Because we test for available slaves before entering split(); we almost always allocate a slave; only in the rare case of a race (less then 2% of cases) this is not true; but to special case this occurrence is not worth the added complexity.  bench: 7451319,True,5,2014-03-01
mcostalba,mcostalba,2014-03-15 20:26:04+00:00,"Remove ""Max Threads per Split Point"" UCI option  Experimental patch to verify if drop of nps in endgames at very long TC is due to this.  Suggested by Ronald de Man.  bench: 7451319",True,5,2014-03-01
mcostalba,mcostalba,2014-03-15 14:34:31+00:00,Merge default tests in pos_is_ok  No functional change.,True,5,2014-03-01
mcostalba,mcostalba,2014-03-15 10:47:30+00:00,Microptimize castling in undo_move()  We don't need to set 'captured' and 'pt' after we castle back.  No functional change.,True,5,2014-03-01
jcalovski,mcostalba,2014-03-14 18:47:41+00:00,Depth dependant aspiration window delta  Split delta value in aspiration window so that when search depth is less than 24 a smaller delta value is used. The idea is that the search is likely to be more accurate at lower depths and so we can exclude more possibilities; 25% to be exact.  Passed STC LLR: 2.96 (-2.94; 2.94) [-1.50; 4.50] Total: 20430 W: 3775 L: 3618 D: 13037  And LTC LLR: 2.96 (-2.94; 2.94) [0.00; 6.00] Total: 5032 W: 839 L: 715 D: 3478  Bench: 7451319,True,4,2014-03-01
mcostalba,mcostalba,2014-03-14 08:57:34+00:00,Use legal positions for endgame initialization  During endgame initialization we get the material hash key of each endgame forging and ad-hoc position that in same cases is illegal (leaves teh king under capture). This is not a problem for the material key; but rises an assert when SF is run in debug mode with 'testKingCapture' set in pos_is_ok().  So rewrite the code to always produce legal positions.  No functional change.,True,4,2014-03-01
mcostalba,mcostalba,2014-03-14 08:43:19+00:00,Further work in pos_is_ok()  No functional change.,True,4,2014-03-01
daylen,mcostalba,2014-03-14 07:49:08+00:00,Re-add link time optimization on OS X  In the new version of clang; -O4 does not imply -flto; so we set the flag,True,4,2014-03-01
mcostalba,mcostalba,2014-03-13 11:53:03+00:00,Reformat do_castling()  No functional change.,True,3,2014-03-01
mcostalba,mcostalba,2014-03-12 21:46:17+00:00,Further merge StateInfo setup functions  No functional change.,True,2,2014-03-01
mcostalba,mcostalba,2014-03-12 08:14:38+00:00,Merge hash key computation functions  No functional change.,True,2,2014-03-01
mcostalba,mcostalba,2014-03-11 22:19:47+00:00,Use std::count in pos_is_ok()  No functional change.,True,1,2014-03-01
mcostalba,mcostalba,2014-03-11 21:58:08+00:00,Small simplification in gives_check  Use switch statement also for normal case.  No speed regression.  No functional change.,True,1,2014-03-01
mcostalba,mcostalba,2014-03-11 21:19:14+00:00,Print dbg counters after bench  Print last debug counters update just before to exit benchmark.  Suggested by Stephane Nicolet.  No functional change.,True,1,2014-03-01
mcostalba,mcostalba,2014-03-10 07:38:23+00:00,Simplify pseudo_legal()  Big simplification of pawn move check.  Code has been tested with a brute force approach: for every position reached during a bench search; the function has been called for each combinations of Move(from; to) and verified the result is the same of old code.  Actually this function is very critical becuase is the one that ensures corrupted TT moves are discarded; so to properly test it a simple bench is not enough.  Verified also speed is not changed.  No functional chnage.,True,0,2014-03-01
mcostalba,mcostalba,2014-03-09 11:16:27+00:00,Simplify generate<EVASIONS>  No speed regression; tested with both perft and bench.  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-09 10:10:33+00:00,Retire SERIALIZE macros  Explicitly write the 'while' loops. This adds some code but makes clear what's the code behind the macro.  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-08 14:08:55+00:00,Rename castling flag to castling right  This is a more conventional naming as reported also in:  http://chessprogramming.wikispaces.com/Castling+rights  No functional change.,True,5,2014-03-01
snicolet,mcostalba,2014-03-05 07:55:12+00:00,Fix dbg_mean_of() for negative numbers  Type should be int64_t instead of uint64_t  No functional change.,True,2,2014-03-01
Unknown,mcostalba,2014-03-03 07:57:20+00:00,Some minor cleanup stuff  I came across while browsing the code.  No functional change.,True,0,2014-03-01
mcostalba,mcostalba,2014-03-03 07:39:34+00:00,Revert dynamic draw value  When tested with weaker engines did not performed as expected; actually it was even a regression from standard version.  bench: 8430785,True,0,2014-03-01
mcostalba,mcostalba,2014-03-02 12:21:19+00:00,Pass CastlingFlag argument only  Instead of Color and CastlingSide. Change functions API accordingly.  No functional change.,True,6,2014-03-01
mcostalba,mcostalba,2014-03-01 22:22:14+00:00,Remove limit of minimumSplitDepth  There is no reason why an user cannot set it at a value less than 4.  No functional change.,True,5,2014-03-01
mcostalba,mcostalba,2014-03-01 21:07:41+00:00,Rename xxx_to_char() -> to_char()  No functional change.,True,5,2014-03-01
mcostalba,mcostalba,2014-03-01 12:10:05+00:00,Simplify Bitboards::pretty  No functional change.,True,5,2014-03-01
mcostalba,mcostalba,2014-03-01 11:10:42+00:00,Retire UCI_AnalyseMode option  It has been obsoleted out already some time ago and currently there is no point in changing eval score according to if we are in game or analyzing.  So retire the option.  No functional change.,True,5,2014-03-01
joergoster,mcostalba,2014-02-26 18:33:52+00:00,Dynamic draw value  Try to avoid repetition draws at early midgame; this should give an edge against weaker opponents and reduce draw rate.  Tested for regressions with SPRT[-3; 1] and passed both short TC LLR: 2.95 (-2.94;2.94) [-3.00;1.00] Total: 68498 W: 12928 L: 12891 D: 42679  And long TC LLR: 2.96 (-2.94;2.94) [-3.00;1.00] Total: 40212 W: 6386 L: 6295 D: 27531  bench: 7990513,True,2,2014-02-01
mcostalba,mcostalba,2014-02-22 11:00:14+00:00,"Fix a warning with Intel compiler  warning #2259: non-pointer conversion from ""int"" to ""uint8_t={unsigned char}"" may lose significant bits  No functional change",True,5,2014-02-01
mcostalba,mcostalba,2014-02-22 09:38:21+00:00,Fix an assert in Probcut  When running the following position:  8/kPp5/2P3p1/p1P1p1P1/2PpPp2/3p1p2/3P1P2/5K2 w - - 0 1  An assert is raised at depth 92:  assert(-VALUE_INFINITE <= alpha && alpha < beta && beta <= VALUE_INFINITE);  This is because it happens that beta = 29832; so rbeta = 30032 that is > VALUE_INFINITE  Bug spotted and analyzed by Uri; fix suggested by Joerg.  Other fixes where possible but this one is pointed exactly at the source of the bug; so it is the best from a code documentation point of view.  bench: 8430785,True,5,2014-02-01
Unknown,mcostalba,2014-02-20 07:39:00+00:00,Distribute part of first move time to other moves  Passed both short TC: LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 18907 W: 3475 L: 3322 D: 12110  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 19044 W: 2997 L: 2811 D: 13236  bench: 8430785,True,3,2014-02-01
mcostalba,mcostalba,2014-02-20 07:27:13+00:00,Avoid recalculating CheckInfo in generate_castling()  No functional change.,True,3,2014-02-01
mcostalba,mcostalba,2014-02-18 15:41:24+00:00,Don't update pieceCount for ALL_PIECES  It is currently unused and only adds overhead for nothing.  Also set proper type of chess960.  No functional change.,True,1,2014-02-01
mcostalba,mcostalba,2014-02-16 12:06:31+00:00,Update SEE to return a Value  It seems more natural because the actual returned value is from PieceValue[] array.  No functional change.,True,6,2014-02-01
mcostalba,mcostalba,2014-02-16 11:56:54+00:00,Sync code style in material.cpp  Update to use common code style.  No functional change.,True,6,2014-02-01
mcostalba,mcostalba,2014-02-16 11:20:37+00:00,Increase MAX_PLY from 100 to 120  Under some very rare case 100 plies of search could be not enough. Increasing more could lead to crashes due to reached stack size limit on some platforms.  Strongly requested by Uri.  bench: 8430785,True,6,2014-02-01
mcostalba,mcostalba,2014-02-16 10:51:30+00:00,Fix material key for King  Currently king has no material key associated because it can never happen to find a legal position without both kings; so there is no need to keep track of it.  The consequence is that a position with only the two kings has material key set at zero and if the material hash table is empty any entry will match and this is wrong.  Normally bug is hidden becuase the checking for a draw with pos.is_draw() is done earlier than evaluate() call; so that we never check in gameplay the material key of a position with two kings.  Nevertheless the bug is there and can be reproduced setting at startup a position with only two kings and typing 'eval' from prompt.  The fix is very simple: add a random key also for the king.  Also fixed the condition in material.cpp to avoid asserting when a 'just 2 kings' postion is evaluated.  No functional change.,True,6,2014-02-01
mcostalba,mcostalba,2014-02-15 21:21:39+00:00,Restore PorbCut name  Actually MultiCut is too different from current scheme. Note that neither ProbCut is exactly what we do because we try just a handful of captures instead of all moves; nevertheless it seems more in line with what we do.  Suggested by Joona.  No functional change.,True,5,2014-02-01
mcostalba,mcostalba,2014-02-15 13:11:26+00:00,Reformat of eval tracing code  Also assorted rename while there.  No functional change.,True,5,2014-02-01
mcostalba,mcostalba,2014-02-15 08:37:55+00:00,Rename ProbCut to Multicut  The teqnique used is actually MultiCut:  https://chessprogramming.wikispaces.com/Multi-Cut  And not ProbCut:  https://chessprogramming.wikispaces.com/ProbCut  No functional change.,True,5,2014-02-01
mcostalba,mcostalba,2014-02-15 08:20:27+00:00,Assorted renaming in search  Inspired by DON.  No functional change.,True,5,2014-02-01
joergoster,mcostalba,2014-02-15 07:20:33+00:00,Return static eval when reaching MAX_PLY  Makes more sense than returning a draw score. Tested with reduced MAX_PLY = 30 and passed both short TC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 17434 W: 3345 L: 3194 D: 10895  And long TC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 2610 W: 488 L: 373 D: 1749  With current limit of MAX_PLY = 100 the patch should not introduce any measurable change; nevertheless is the correct approach.  Idea of returning eval is from  Michel Van den Bergh.  bench: 8430785,True,5,2014-02-01
mcostalba,mcostalba,2014-02-14 09:43:37+00:00,Fix magic boosters conversion  Fix small overflow error while converting magic boosters from right rotate to left rotate; in particular booster 38 was converted to 4122 instead of the corrcet value 26.  Formula used was:  s1 = original & 63; s2 = (original >> 6) & 63; new = (64 - s1) | ((64 - s2) << 6);  Instead of:  s1 = original & 63; s2 = (original >> 6) & 63; new = ((64 - s1) & 63) | (((64 - s2) & 63) << 6);  This has no impact in number of cycles needed; but just in the resultig number that yields to a rotate amount bigger than 63.  Spotted by Ehsan Rashid.  No functional change.,True,4,2014-02-01
mcostalba,mcostalba,2014-02-14 08:42:50+00:00,Additional renaming from DON  Assorted renaming and triviality.  No functional change.,True,4,2014-02-01
joergoster,mcostalba,2014-02-12 20:52:21+00:00,Fix a compiler warning  Latest master triggers a compiler warning due to comparing int64_t to uint64_t.  notation.cpp: In Funktion �std::string pretty_pv(Position&; int; Value; int64_t; Move*)�: notation.cpp:230:30: Warnung: Vergleich zwischen vorzeichenbehafteten und vorzeichenlosen Ganzzahlausdr�cken [-Wsign-compare]  This patch should fix it.  No functional change.,True,2,2014-02-01
Unknown,mcostalba,2014-02-12 19:01:11+00:00,Simplify time management  Tested with simplification mode SPRT[-4; 0]  Passed both short TC LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 34102 W: 6184 L: 6144 D: 21774  And long TC LLR: 2.96 (-2.94;2.94) [-4.00;0.00] Total: 16518 W: 2647 L: 2545 D: 11326  And also 40/10 TC LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 22406 W: 4390 L: 4312 D: 13704  bench: 8430785,True,2,2014-02-01
mcostalba,mcostalba,2014-02-12 13:47:36+00:00,Move magic random to RKISS  When initializing the magic numbers used to compute sliding attacks; we endless generate a random and test it as a possible magic.  In the general case this takes a lot of iterations; but here; insteaad of picking a casual random; we rotate it a couple of times and generate a number that we know has a good probability to be a magic candidate.  This is becuase the quantities by which we rotate the number are known in advance to produce quickly a good canidate.  The patch; inspired by DON; just moves the shuffle to RKISS changing the boosters to take in account a left rotation instead of a right rotation as in the original.  No functional change.,True,2,2014-02-01
mcostalba,mcostalba,2014-02-12 13:16:21+00:00,"Revert ""Retire null search verification""  Although does not change ELO level; it seems verification is useful in many zugzwang positions as reported by many sources.  So revert this simplification.  bench: 8430785",True,2,2014-02-01
Unknown,mcostalba,2014-02-09 18:42:24+00:00,Faster handling of king captures in Position::see  Another SEE speed up that passed the SPRT short TC test!  LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 81337 W: 15060 L: 14745 D: 51532  No functional change.,True,6,2014-02-01
mcostalba,mcostalba,2014-02-09 16:31:45+00:00,Assorted tweaks from DON  Mainly renames and some little code style improvment; inspired by looking at DON sources:  https://github.com/erashid/DON  No functional change.,True,6,2014-02-01
mcostalba,mcostalba,2014-02-08 12:27:44+00:00,Rewrite previous patch removing the macro  No functional change.,True,5,2014-02-01
Thanar2,mcostalba,2014-02-08 12:17:29+00:00,Inline common path of pos.gives_check  Test for common case which; when running default stockfish bench; avoids 96% of 19 million calls to pos.gives_check().  Yields to a 2-4% speed up according to platform.  Passed fishtest at STC LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 12441 W: 2333 L: 2196 D: 7912 http://tests.stockfishchess.org/tests/view/52f02d790ebc5901df50f887  Passed fishtest at LTC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 42175 W: 6702 L: 6409 D: 29064 http://tests.stockfishchess.org/tests/view/52f0dbe00ebc5901df50f8a0  No functional change.,True,5,2014-02-01
mcostalba,mcostalba,2014-02-08 12:07:57+00:00,Don't fear races when are harmless  Actually race conditions do exist in an engine; just think for a moment to TT concurrent access. Racy code is not a problem per se; if the consequences are well known and correctly handled.  In case of TT access we ensure that the TT move is validated before to be tried; here we just retry the same move in less that 1 case out of a million: this is totally harmless considering that very probably the second time the move is tried we get immediately a TT hit and search quickly returns.  So we simplify the code for no harm.  No fuctional change (in single thread case),True,5,2014-02-01
lucasart,mcostalba,2014-02-08 07:25:08+00:00,Retire null search verification  Tested with SPRT in simplification mode [-4.00;0.00]; this ensures that the patch is (very probably) not a regression.  Passed both short TC LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 27543 W: 4278 L: 4209 D: 19056  And long TC LLR: 2.95 (-2.94;2.94) [-4.00;0.00] Total: 39483 W: 7325 L: 7305 D: 24853  bench: 8347121,True,5,2014-02-01
lucasart,mcostalba,2014-02-04 07:24:46+00:00,"Better document null search window  Hopefully this patch makes the code more:  * Self-documenting: Null search is always a zero window search;   because it is testing for a fail high. It should never be done   on a full window! The current code only works because we don't   do it at PV nodes; and therefore (alpha; beta) = (beta-1; beta):   that's the kind of ""clever"" trick we should avoid.  * Idiot-proof: If we want to enable null search at PV nodes; all we   need to do now is comment out the !PvNode condition. It's that simple!  In theory; null search should not be done at PV nodes; because PV nodes should never fail high. But in practice; they DO fail high; because of aspiration windows; and search inconsistencies; for example. So it makes sense to keep that flexibility in the code.  No functional change.",True,1,2014-02-01
lucasart,mcostalba,2014-02-03 20:37:14+00:00,"Better document razoring  Use ralpha instead of rbeta  * rbeta is confusing people. It took THREE attempts to code razoring at PV nodes correctly in a recent test; because of the rbeta trick. Unnecessary tricks should be avoided.  * The more correct and self-documenting way of doing this; is to say that we use a zero window around alpha-margin; not beta-margin. The fact that; because we only do it at PV nodes; alpha happens to be beta-1 and that the current stuff with rbeta works; may be correct; but is confusing.  Remove the misleading and partially erroneous comment about returning v + margin:  * comments should explain what the code does; not what it could have done.  * this comment is partially wrong in saying that v+margin is ""logical"";   and that it is ""surprising"" that is doesn't work.  From a theoretical perspective; at least 3 ways of doing this are equally defendable:  1/ fail hard: return alpha: The most conservative. We bet that the search will fail low; but we don't know by how much and don't want to take risks.  2/ aggressive fail soft: return v (what the current code does). This corresponds to normal fail soft; with the added assumption that we don't care about the reduction effect (see below point 3/)  3/ conservative fail soft: return v + margin. If the reduced search (qsearch) gives us a score <= v; we bet that the non reduced search will give us a score <= v + margin.  * Saying that 2/ is ""logical"" implies that 1/ and 3/ are not; which is arguably wrong. Besides; experimental results tell us that 2/ beats 3/; and that's not something we can argue against: experimental results are the only trusted metric.  * Also; with the benefit of hindsight; I don't think the fact that 2/ is better than 3/ is surprising at all. The point is that it is YOUR turn to move; and you are assuming that by NOT playing (and letting the opponent capture your hanging pieces in QS) you cannot generally GAIN razor_margin(depth).  No functional change.",True,0,2014-02-01
zamar,mcostalba,2014-02-03 20:23:49+00:00,H-file penalty and center bonus  After almost 50K at long TC it seems slightly positive:  ELO: 1.73 +-1.8 (95%) LOS: 97.3% Total: 47122 W: 7507 L: 7273 D: 32342  bench: 8430785,True,0,2014-02-01
zamar,mcostalba,2014-01-29 17:02:13+00:00,Tweak bishop PSQT tables  Tuned after 49K iterations of SPSA.  Passed both short TC: LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 14231 W: 2684 L: 2542 D: 9005  And long TC: LLR: 2.94 (-2.94;2.94) [0.00;4.00] Total: 87556 W: 13757 L: 13342 D: 60457  bench: 6875743,True,2,2014-01-01
uriblass,mcostalba,2014-01-27 19:09:51+00:00,Reduce VALUE_KNOWN_WIN to 10000  With some positions like  8/8/8/2p2K2/1pp5/br1p1b2/2p2r2/qqkqq3 w - -  The eval score is higher than VALUE_INFINITE because is the sum of VALUE_KNOWN_WIN plus a big material advantage. This leads to an assert. Here are the steps to reproduce:  Compile SF with debug=yes then do  ./stockfish position fen 8/8/8/2p2K2/1pp5/br1p1b2/2p2r2/qqkqq3 w - - go depth 1  This patch fixes the issue in this case; but do exsist other positions for which the patch is not enough and we will need to limit the eval score to be sure not overflow the limit.  Note that is not possible to increase the value of VALUE_INFINITE because should remain within int16_t type to be stored in a TT entry.  bench: 7356053,True,0,2014-01-01
mcostalba,mcostalba,2014-01-27 07:18:48+00:00,Fix null reduction formula  Depth is already dependent on the actual value of ONE_PLY; in particular can be expressed like:  Depth = n * ONE_PLY  And because formula is used to calculate R that is also dependent on the value of ONE_PLY and can be expressed like:  R = x * ONE_PLY  We don't want to divide depth by a 'ply' value but directly by an integer number.  Spotted by sf-x  No functional change.,True,0,2014-01-01
mcostalba,mcostalba,2014-01-26 22:09:22+00:00,Grammar fix in MovePicker::next_move  Thanks to Lyudmil Antonov and Michel Van den Bergh for spotting this and suggesting the fix.  No functional change.,True,6,2014-01-01
Unknown,mcostalba,2014-01-26 09:23:31+00:00,Variable null-move value based reduction  Instead of a fixed reduction of ONE_PLY; now Null move dynamic reduction based on value can grow larger in case we are above beta of a value much higher then PawnValueMg.  Note that now an eval returning VALUE_KNOWN_WIN makes null search to drop in qsearch.  Passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 26141 W: 4871 L: 4699 D: 16571  And long TC: LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 33695 W: 5309 L: 5056 D: 23330  bench: 7356053,True,6,2014-01-01
zamar,mcostalba,2014-01-25 10:29:32+00:00,Do not set default value for architeture in Makefile  Fixes a regression that ARCH parameter was not properly validated. Invalid value would default to generic 32-bit build.  No functional change.,True,5,2014-01-01
Unknown,mcostalba,2014-01-19 10:16:34+00:00,Small simplification to Position::see  Verified there are no hidden bugs and is actually a speed optimization:  Fixed games at 15+0.05 TC ELO: 1.72 +-2.9 (95%) LOS: 87.5% Total: 20000 W: 3741 L: 3642 D: 12617  No functional change,True,6,2014-01-01
zamar,mcostalba,2014-01-19 10:09:44+00:00,"Fix +M0 score when low on time  When time remaining is less than Emergency Move Time; we won't even complete one iteration and engine reports a stale +M0 score.  To reproduce run ""go wtime 10""  info depth 1 seldepth 1 score mate 0 upperbound nodes 2 nps 500 time 4 multipv 1 pv a2a3 info nodes 2 time 4 bestmove a2a3 ponder (none)  This patch fixes the issue.  Tested by Binky at very short TC: 0.05+0.05 ELO: 5.96 +-12.9 (95%) LOS: 81.7% Total: 1458 W: 394 L: 369 D: 695  And at a bit longer TC: ELO: 1.56 +-3.7 (95%) LOS: 79.8% Total: 16511 W: 3983 L: 3909 D: 8619  bench: 7804908",True,6,2014-01-01
mcostalba,mcostalba,2014-01-18 17:22:32+00:00,Increase max hash size to 16GB  TCEC season 3; which is due to start in a few weeks; just had its server upgraded to 64GB RAM and will therefore allow 16GB hash to be used per engine.  This is almost the upper limit without changing the type of size and hashMask. After this we need to move to uint64_t instead of uint32_t.  No functional change.,True,5,2014-01-01
zamar,mcostalba,2014-01-18 16:52:37+00:00,Tweak knight PSQT tables  Passed both short TC: LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 31765 W: 6103 L: 5913 D: 19749  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 38867 W: 6268 L: 5988 D: 26611  bench: 7804908,True,5,2014-01-01
ceebo,mcostalba,2014-01-18 16:22:54+00:00,Simplify pawnless endgame evaluation  Retire KmmKm evaluation function. Instead give a very drawish scale factor when the material advantage is small and not much material remains.  Retire NoPawnsSF array. Pawnless endgames without a bishop will now be scored higher. Pawnless endgames with a bishop pair will be scored lower. The effect of this is hopefully small.  Consistent results both at short TC (fixed games): ELO: -0.00 +-2.1 (95%) LOS: 50.0% Total: 40000 W: 7405 L: 7405 D: 25190  And long TC (fixed games): ELO: 0.77 +-1.9 (95%) LOS: 78.7% Total: 39690 W: 6179 L: 6091 D: 27420  bench: 7213723,True,5,2014-01-01
Unknown,Unknown,2014-01-14 08:24:35+00:00,Introduce 'follow up' moves  When we have a fail-high of a quiet move; store it in a Followupmoves table indexed by the previous move of the same color (instead of immediate previous move as is in countermoves case).  Then use this table for quiet moves ordering in the same way we are already doing with countermoves.  These followup moves will be tried just after countermoves and before remaining quiet moves.  Passed both short TC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 10350 W: 1998 L: 1866 D: 6486  And long TC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 14066 W: 2303 L: 2137 D: 9626  bench: 7205153,True,1,2014-01-01
Unknown,mcostalba,2014-01-12 21:48:08+00:00,Ad-hoc shelter rule  This hacky rule allows to get an about right eval out of this position: r2qk2r/ppp2p2/2npbn2/2b1p3/2P1P1P1/2NB1PPp/PPNP3K/R1BQ1R2 b kq - 0 13  And; more importantly; passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 6239 W: 1249 L: 1127 D: 3863  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 38371 W: 6165 L: 5888 D: 26318  bench: 8183238,True,6,2014-01-01
mcostalba,mcostalba,2014-01-12 21:32:41+00:00,Retire KBBKN endgame  As pointed out by Joona; Lucas and otehr people in the forum; this endgame is not a known; there are many positions where it takes more than 50 moves to claim the win and becasue exact rules is not possible better to retire and allow the search to workout the endgame for us.  bench: 8502826,True,6,2014-01-01
Unknown,mcostalba,2014-01-11 19:10:46+00:00,Rename Position::hidden_checkers to check_blockers  No functional change.,True,5,2014-01-01
Unknown,mcostalba,2014-01-08 22:38:04+00:00,Position::gives_check - use ci.ksq  Also remove a couple of local variables while there.  No functional change.,True,2,2014-01-01
mcostalba,mcostalba,2014-01-08 21:58:25+00:00,Fix early stop condition  While editing original Uri's messy patch I have incorrectly simplified the logic condition. Here is the correct original version; as it was tested.  bench: 8502826,True,2,2014-01-01
Unknown,mcostalba,2014-01-08 14:57:06+00:00,Retire easy move  Remove the easy move code and add the condition to play instantly if only one legal move is available.  Verified there is no regression at 60+0.05 ELO: 0.17 +-1.9 (95%) LOS: 57.0% Total: 40000 W: 6397 L: 6377 D: 27226  bench: 8502826,True,2,2014-01-01
uriblass,mcostalba,2014-01-08 14:45:55+00:00,Stop earlier if iteration is taking too long  If we are still at first move; without a fail-low and current iteration is taking too long to complete then stop the search.  Passed short TC: LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 26030 W: 4959 L: 4785 D: 16286  Long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 18019 W: 2936 L: 2752 D: 12331  And performed well at 40/30 ELO: 4.33 +-2.8 (95%) LOS: 99.9% Total: 20000 W: 3480 L: 3231 D: 13289  bench: 8502826,True,2,2014-01-01
renouve,mcostalba,2014-01-08 14:22:17+00:00,Retire grain size code  Seems useless at long TC.  Tested at 60+0.05 ELO: 2.98 +-2.2 (95%) LOS: 99.6% Total: 30440 W: 4934 L: 4673 D: 20833  And at 120+0.05 ELO: 2.50 +-2.6 (95%) LOS: 97.1% Total: 19633 W: 2848 L: 2707 D: 14078  bench: 8502826,True,2,2014-01-01
mcostalba,mcostalba,2014-01-07 05:30:41+00:00,Assorted grammar fixes  Mainly from Lyudmil Antonov and one from Henri Wiechers and Louis Zulli.  No functional change.,True,1,2014-01-01
zamar,mcostalba,2014-01-07 04:41:16+00:00,Tweak King PST tables  First tested with 50K games at very short TC of 5+0.05 ELO: 3.11 +-2.0 (95%) LOS: 99.9% Total: 49665 W: 10941 L: 10497 D: 28227  Then retested with usual SPRT at short TC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 16875 W: 3198 L: 3049 D: 10628  And at long TC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 5890 W: 985 L: 857 D: 4048  bench: 7800379,True,1,2014-01-01
mcostalba,mcostalba,2014-01-06 00:22:44+00:00,Fix a typo  Spotted by Isaac H. Dunn.  No functional change.,True,0,2014-01-01
Unknown,mcostalba,2014-01-05 13:10:29+00:00,Remove duplicated code  Introduce update_stats() and remove correspondng duplicated code.  No functional change.,True,6,2014-01-01
hfwittmann,mcostalba,2014-01-02 12:01:24+00:00,Ensure move_importance() is non-zero  In case ply is very high; function will round to zero (although mathematically it is always bigger than zero). On my system this happens at movenumber 6661.  Although 6661 moves in a game is; of course; probably impossible; for safety and to be locally consistent makes sense to ensure returned value is positive.  Non functional change.,True,3,2014-01-01
shane31,mcostalba,2014-01-02 11:44:46+00:00,Scale eval when down to only one pawn  Passed both short TC LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 11921 W: 2346 L: 2208 D: 7367  And long TC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 21002 W: 3395 L: 3197 D: 14410  bench: 7602383,True,3,2014-01-01
mcostalba,mcostalba,2014-01-02 00:49:18+00:00,Update copyright year  No functional change.,True,3,2014-01-01
mcostalba,mcostalba,2014-01-01 12:43:58+00:00,Simplify move_importance(): take 3  Use pow() of a negative number instead of 1/x  No functional change.,True,2,2014-01-01
mcostalba,mcostalba,2014-01-01 12:35:11+00:00,Further simplify move_importance()  Function move_importance() is already always positive; so we don't need to add a constant term to ensure it.  Becuase move_importance() is used to calculate ratios of a linear combination (as explained in previous patch); result is not affected. I have also verified it directly.  No functional change.,True,2,2014-01-01
hfwittmann,mcostalba,2014-01-01 11:58:10+00:00,Simplify move_importance()  Drop a useless parameter. This works because ratio1 and ratio2 are ratios of linear combinations of thisMoveImportance and otherMovesImportance and so the yscale cancels out.  Therefore the values of ratio1 and ratio2 are independent of yscale and yscale can be retired.  The same applies to yshift; but here we want to ensure move_importance() > 0; so directly hard-code this safety guard in function definition.  Actually there are some small differences due to rounding errors and usually are at most few millisecond; that's means below 1% of returned time; apart from very short intervals in which a difference of just 1 msec can raise to 2-3% of total available time.  No functional change.,True,2,2014-01-01
mcostalba,mcostalba,2014-01-01 09:56:57+00:00,Rename pawn chain to connected  The flag raises also in case of a pawn duo; i.e. when we have two adjacent pawns on the same rank; and not only in case of a chain; i.e. when the two pawns are on a diagonal line.  See this for a reference: http://en.wikipedia.org/wiki/Connected_pawns  Renaming suggested by Ralph.  No functional change.,True,2,2014-01-01
glinscott,mcostalba,2013-12-31 14:27:52+00:00,Remove bishop pin bonus  Shows no regression at LTC after 20K games:  ELO: 0.03 +-2.7 (95%) LOS: 51.0% Total: 20608 W: 3252 L: 3250 D: 14106  bench: 7516178,True,1,2013-12-01
Unknown,mcostalba,2013-12-31 11:05:22+00:00,Retire KingExposed[] array  And merge its values into KPSQT table.  Passed blazingly fast both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 5348 W: 1091 L: 971 D: 3286  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 3029 W: 530 L: 415 D: 2084  bench: 8702197,True,1,2013-12-01
Unknown,mcostalba,2013-12-30 09:34:20+00:00,Remove asymmThreshold stale comment  No functional change.,True,0,2013-12-01
mcostalba,mcostalba,2013-12-30 00:27:57+00:00,Retire asymmThreshold  Verified with 40K games at long TC does not regress: ELO: 1.74 +-1.9 (95%) LOS: 96.2% Total: 39624 W: 6402 L: 6203 D: 27019  bench: 7762310,True,0,2013-12-01
Matt14916,mcostalba,2013-12-29 09:33:39+00:00,Retire MoveImportance[]  Use a skew-logistic function to replace the MoveImportance[] array.  Verified it does not regress at fixed number of games both at short TC: LLR: -2.91 (-2.94;2.94) [-1.50;4.50] Total: 39457 W: 7539 L: 7538 D: 24380  And long TC: ELO: -0.49 +-1.9 (95%) LOS: 31.0% Total: 39358 W: 6135 L: 6190 D: 27033  bench: 7335588,True,6,2013-12-01
Unknown,mcostalba,2013-12-27 17:46:49+00:00,Fine tune previous patch  Passed short TC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 18331 W: 3608 L: 3453 D: 11270  And scored above 50% on a very long test in long TC LLR: -2.97 (-2.94;2.94) [0.00;6.00] Total: 51533 W: 8181 L: 8047 D: 35305  bench: 7335588,True,4,2013-12-01
mcostalba,mcostalba,2013-12-26 11:08:23+00:00,Further simplify previous patch  Use a single XOR instead of NEGATE + AND  No functional change.,True,3,2013-12-01
Unknown,mcostalba,2013-12-25 20:31:41+00:00,Bonus for file distance of the outermost pawns  In endgame it's better to have pawns on both wings. So give a bonus according to file distance between left and right outermost pawns.  Passed both short TC LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 39073 W: 7749 L: 7536 D: 23788  And long TC LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 6149 W: 1040 L: 910 D: 4199  bench: 7665034,True,2,2013-12-01
Unknown,mcostalba,2013-12-23 19:55:30+00:00,Loosened trigger condition for king safety  Reduce eval discontinuity becuase now we kick in king safety evaluation in many more cases.  Passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 8708 W: 1742 L: 1613 D: 5353  And long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 6743 W: 1122 L: 990 D: 4631  bench: 6835416,True,0,2013-12-01
ceebo,mcostalba,2013-12-23 19:52:12+00:00,Increase pawn king attack weight  Tighter lower bound for pawn attacks so to activate king safety in some cases like here:  6k1/2B3p1/2Pp1p2/2nPp3/2Q1P2K/P2n1qP1/R6P/1R6 w  Original patch by Chris; further simplified by J�rg Oster.  Passed both short TC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 30171 W: 5887 L: 5700 D: 18584  And long TC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 20706 W: 3402 L: 3204 D: 14100  bench: 7607562,True,0,2013-12-01
glinscott,mcostalba,2013-12-19 17:52:34+00:00,Faster and simplified threat eval  Add a bonus according if the attacking pieces are minor or major.  Passed both short TC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 13142 W: 2625 L: 2483 D: 8034  And long TC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 18059 W: 3031 L: 2844 D: 12184  bench: 7425809,True,3,2013-12-01
mcostalba,mcostalba,2013-12-17 09:16:00+00:00,Further simplify Makefile  No functional change.,True,1,2013-12-01
mcostalba,mcostalba,2013-12-17 09:02:14+00:00,Reformat Makefile  No functional change.,True,1,2013-12-01
lucasart,mcostalba,2013-12-15 08:43:29+00:00,Remove threat move stuff  A great simplification that shows no regression and it seems even a bit scalable.  Tested with fixed number of games:  Short TC ELO: 0.60 +-2.1 (95%) LOS: 71.1% Total: 39554 W: 7477 L: 7409 D: 24668  Long TC ELO: 2.97 +-2.0 (95%) LOS: 99.8% Total: 36424 W: 5894 L: 5583 D: 24947  bench: 8184352,True,6,2013-12-01
mcostalba,mcostalba,2013-12-10 06:05:06+00:00,Sync history and counter moves updating  Change updating rule after a TT hit to match the same one at the end of the search.  Small change in functionality; but we want to have uniform rules in the code.  bench: 7767864,True,1,2013-12-01
lucasart,mcostalba,2013-12-10 05:57:06+00:00,Update History and Counter move on TT hit  We already update killers so it is natural to extend to history and counter move too.  Passed both short TC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 52690 W: 9955 L: 9712 D: 33023  And long TC LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 5555 W: 935 L: 808 D: 3812  bench: 7876473,True,1,2013-12-01
Unknown,mcostalba,2013-12-09 07:03:47+00:00,Research at intermediate depth if LMR is very high  After a fail high in LMR; if reduction is very high do a research at lower depth before teh full depth one. Chances are that the re-search will fail low and the full depth one is skipped.  Passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 11363 W: 2204 L: 2069 D: 7090  And long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 7292 W: 1195 L: 1061 D: 5036  bench: 7869223,True,0,2013-12-01
mcostalba,mcostalba,2013-12-07 11:32:18+00:00,More work on Bitboards::init()  No functional change.,True,5,2013-12-01
mcostalba,mcostalba,2013-12-07 10:35:26+00:00,More readable init of MS1BTable[]  Because now it uses lsb(); the BSFTable[] must be already initialized.  No functional change.,True,5,2013-12-01
mcostalba,mcostalba,2013-12-07 09:57:05+00:00,Further simplify Bitboards init()  No functional change.,True,5,2013-12-01
mcostalba,mcostalba,2013-12-06 09:43:17+00:00,Clarify definition of capture_or_promotion()  No functional change.,True,4,2013-12-01
Unknown,mcostalba,2013-12-06 08:03:24+00:00,Even more spelling fixes  No functional change.,True,4,2013-12-01
Unknown,mcostalba,2013-12-04 22:30:37+00:00,Assorted spelling/grammar/captitalization  No functional change.,True,2,2013-12-01
ceebo,mcostalba,2013-12-04 16:51:25+00:00,Micro-optimise dangerous condition  Since all ENPASSANT moves are now considered dangerous; this change of order should give a slight speedup.  Also simplify futilityValue formula.  No functional change.,True,2,2013-12-01
mcostalba,mcostalba,2013-12-04 16:45:09+00:00,Retire TheirHalf[]  We avoid to use an ad-hoc table at the cost of a relative_rank() call in advanced_pawn_push().  On my 32 bit system it is even slightly faster (on 64bit may be different). This is the speed in nps alternating old and new bench runs:  new  368890 368825 369972  old  367798 367635 368026  No functional change.,True,2,2013-12-01
ceebo,mcostalba,2013-12-04 16:19:45+00:00,Broader condition for dangerous pawn moves  Instead of a passed pawn now we just require the pawn to be in the opponent camp to be considered a dangerous move. Added some renaming to reflect the change.  Passed both short TC test LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 10358 W: 2033 L: 1900 D: 6425  And long TC LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 21459 W: 3486 L: 3286 D: 14687  bench: 8322172,True,2,2013-12-01
mcostalba,mcostalba,2013-12-03 10:40:31+00:00,Shrink Position::is_draw()  No functional change.,True,1,2013-12-01
mcostalba,mcostalba,2013-12-03 10:15:39+00:00,Remove redundant argument from hidden_checkers()  No functional change.,True,1,2013-12-01
mcostalba,mcostalba,2013-12-03 09:53:21+00:00,Small improvment to Position::fen()  No functional change.,True,1,2013-12-01
Unknown,mcostalba,2013-12-03 07:50:12+00:00,Re-fix a comment  No functional change.,True,1,2013-12-01
Unknown,mcostalba,2013-12-02 22:51:29+00:00,Another round of spelling fixes  And also renamed a loop variable while there.  No functional change.,True,0,2013-12-01
rklrkl,mcostalba,2013-12-02 19:29:35+00:00,Big assorted spelling fixes  No functional change.,True,0,2013-12-01
Unknown,mcostalba,2013-12-02 17:41:30+00:00,Assorted spelling fixes  No functional change.,True,0,2013-12-01
mcostalba,mcostalba,2013-12-01 10:16:47+00:00,Rename CASTLE to CASTLING  It is call 'castling move'; not 'castle move'  Noticed while reading DiscoCheck sources.  No functional change.,True,6,2013-12-01
mcostalba,mcostalba,2013-12-01 09:09:30+00:00,Simplify a condition in gives_check()  Now that aligned() is quite fast we can skip some logic.  No functional change.,True,6,2013-12-01
mcostalba,mcostalba,2013-11-30 10:32:49+00:00,Rename Bitboards print to pretty  To align to same named Position function and avoid using std::cout directly.  Also remove some stale <iostream> include while there.  No functional change.,True,5,2013-11-01
mcostalba,mcostalba,2013-11-30 10:02:56+00:00,Rewrite some bitboard init code  And move the static function Position::attacks_from() to bitboard code renaming it attacks_bb()  No functional change.,True,5,2013-11-01
daylen,mcostalba,2013-11-29 23:09:17+00:00,Makefile improvements for compiling on OS X  Add a Mac SSE4.2 target. Also change the Mac OS X minimum version to 10.6. Rationale: 97% of Macs run at least 10.6; version 10.9 is now free; and using 10.6 as the minimum version gives a small 5% boost in benchmark speed over versions using 10.0 as the minimum version.  Finally; enable Clang�s Link Time Optimization when compiling for the Mac.  No functional change.,True,4,2013-11-01
mcostalba,mcostalba,2013-11-29 09:50:43+00:00,Restore development version  bench: 8596156,True,4,2013-11-01
mcostalba,mcostalba,2013-11-29 09:23:14+00:00,Stockfish DD  Stockfish bench signature is: 8596156,True,4,2013-11-01
wilsonk,mcostalba,2013-11-29 09:06:54+00:00,Add support for PPC 64bit on Linux  In particular Debian Linux-3.9.8-1- PPC64  No functional change.,True,4,2013-11-01
zamar,mcostalba,2013-11-24 09:26:49+00:00,Generate Qsearch checks only at depth 0  An old idea retested at SPRT(0; 3) with 60+0.05 TC: LLR: 2.95 (-2.94;2.94) [0.00;3.00] Total: 98872 W: 15549 L: 15123 D: 68200  This is a very small elo increase patch so it really stresses the limits of fishtest.  bench: 8596156,True,6,2013-11-01
mcostalba,mcostalba,2013-11-19 06:20:50+00:00,Revert previous fix  It seems to intorduce a regression when tested with 3 threads at 15+0.05:  ELO: -2.26 +-2.2 (95%) LOS: 2.4% Total: 30000 W: 4813 L: 5008 D: 20179  bench: 8331357,True,1,2013-11-01
hongzhicheng,mcostalba,2013-11-18 15:41:49+00:00,Get correct excluded moves for split nodes  Tested setting FakeSplit to true and running  ./stockfish bench 128 2  There is a different signature with and without the patch so it affects functionality but only in SMP case.  bench: 8331357,True,0,2013-11-01
mcostalba,mcostalba,2013-11-17 22:47:18+00:00,Revert previous patch  It seems a regression at 15+0.05: ELO: -4.82 +-2.1 (95%) LOS: 0.0% Total: 40000 W: 7181 L: 7736 D: 25083  bench: 8331357,True,6,2013-11-01
mcostalba,mcostalba,2013-11-17 09:24:25+00:00,Fix an assert in SMP case  SMP case is very tricky and raises an assert in stage_moves():  assert(stage == KILLERS_S1 || stage == QUIETS_1_S1 || stage == QUIETS_2_S1)  So rewrite the code to just return moves[] when we are sure we are in quiet moves stages.  Also rename stage_moves to quiet_moves to reflect that.  No functional change (but needs testing in SMP case),True,6,2013-11-01
mcostalba,mcostalba,2013-11-17 08:51:04+00:00,Retire quietsSearched[]  Use MovePicker moves[] to access already tried quiet moves. A bit of care shall be taken to avoid calling stage_moves() when we are still at ttMove stage; because moves are yet to be generated. Actually our staging move generation makes this code a bit more tricky than what I'd like; but removing an ausiliary redundant array like quietsSearched[] is a good thing.  Idea by DiscoCheck  bench: 9355734,True,6,2013-11-01
mcostalba,mcostalba,2013-11-11 18:53:19+00:00,Simplify generate<EVASIONS>  Use the newly introduced LineBB[] to simplify this super hot-path function.  Verified with perft we don't have any speed regression; although the number of squares removed is less than before in case of contact check.  Insipred by DiscoCheck implementation.  Perft numbers are the same; but we have an harmless functional change due to reorder of moves; because now some illegal moves are no more detected at generation time; but in the search.  bench: 8331357,True,0,2013-11-01
gcramer,mcostalba,2013-11-11 14:55:08+00:00,Faster castling in Chess960 case  Only rook attackers has to be considered; all other attackers are already handled in the lines above.  No functional change.,True,0,2013-11-01
zamar,mcostalba,2013-11-11 07:46:11+00:00,Reintroduce gains  This seems a die hard idea :-)  Passed both short TC LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 17485 W: 3307 L: 3156 D: 11022  And long TC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 38181 W: 6002 L: 5729 D: 26450  bench: 8659830,True,0,2013-11-01
joergoster,mcostalba,2013-11-10 16:21:59+00:00,Remove opposed flag for doubled pawns  Actually; it is not used; as both arrays have the same values. Some local tests in either direction showed no improvement.  Also some minor corrections in the comments.  No functional change.,True,6,2013-11-01
mcostalba,mcostalba,2013-11-10 16:14:46+00:00,Rename squares_aligned()  Rename to the shorter but still clear aligned()  No functional change.,True,6,2013-11-01
mcostalba,mcostalba,2013-11-10 11:05:19+00:00,Simplify squares_aligned()  Use newly introduced LineBB[]  No functional change.,True,6,2013-11-01
ceebo,mcostalba,2013-11-10 10:52:38+00:00,"Evaluate mobility of pinned pieces exactly  Previously some squares could be ""incorrectly"" awarded to a pinned piece.  e.g. in 3k4/1q6/3b4/3Q4/8/5K2/B7/8 b - - 0 1 the black bishop get 4 squares too many and the white queen gets 6.  Passed both short TC. LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 4871 W: 934 L: 817 D: 3120  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 38968 W: 6113 L: 5837 D: 27018  bench: 9282549",True,6,2013-11-01
ceebo,mcostalba,2013-11-10 08:48:49+00:00,Remove RedundantMajor  But compensate by reducing rook and queen value by 53 = (160 / 3)  Material imbalances are affected as follows:         Red. Major   Rook  Queen  Total QRR      +160      -2*53    -53     +1 QR       +160        -53    -53    +54 RR       +160      -2*53      0    +54 R           0        -53      0    -53 Q           0          0    -53    -53  so that the imbalance changes by at most 54 + 53 = 107 units. This corresponds to appromximately 3.5cp in the final evaluation.  Verified with fixed number 40000 games at both short and long TC it does not regress.  Short TC 15+0.05 ELO: 1.93 +-2.1 (95%) LOS: 96.6% Total: 40000 W: 7520 L: 7298 D: 25182  Long TC 60+0.05 ELO: -0.33 +-1.9 (95%) LOS: 36.5% Total: 39663 W: 6067 L: 6105 D: 27491  bench: 6703846,True,6,2013-11-01
mcostalba,mcostalba,2013-11-09 18:05:43+00:00,Fix printing of incorrect PV in some cases  As; Gary (that analyzed the bug) says:  SF does not print a PV when the original best move fails low; we hit our time allowance; and stop the search.  The output from the SF search is below.  It was failing low on Ne1 at depth 34. Then; we get bestmove Qd3; but no PV change.  info depth 34 seldepth 45 score cp 38 upperbound nodes 483484489 nps 15464575 time 31264 multipv 1 pv f3e1 h5h4 e1d3 h4g3 f2g3 a6f6 f1f6 e7f6 d1a4 f6e7 a1f1 d8f8 a4b3 b7b6 b3c2 f7f6 c2a4 h3g5 b2b3 g5f7 a4c6 f7d6 h1g2 f6f5 e4f5 d6f5 info depth 34 seldepth 45 score cp 38 upperbound nodes 483484489 nps 15464575 time 31264 multipv 1 pv f3e1 h5h4 e1d3 h4g3 f2g3 a6f6 f1f6 e7f6 d1a4 f6e7 a1f1 d8f8 a4b3 b7b6 b3c2 f7f6 c2a4 h3g5 b2b3 g5f7 a4c6 f7d6 h1g2 f6f5 e4f5 d6f5 info depth 34 seldepth 47 score cp 30 upperbound nodes 2112334132 nps 17255517 time 122415 multipv 1 pv f3e1 h5h4 d1a4 a6f6 e1d3 d8f8 a4c2 h4g3 f2g3 f6f1 a1f1 h7g8 b2b3 f7f6 a3a4 b7b6 info depth 34 seldepth 47 score cp 30 upperbound nodes 2112334132 nps 17255517 time 122415 multipv 1 pv f3e1 h5h4 d1a4 a6f6 e1d3 d8f8 a4c2 h4g3 f2g3 f6f1 a1f1 h7g8 b2b3 f7f6 a3a4 b7b6 info nodes 18235667001 time 969824 bestmove e2d3 ponder c8d7  Looking at the code; if we hit Signals.stop; we return from id_loop before printing any PV.  It is possible for us to have resorted the RootMove list though; which will change the move that is actually played.  No functional change.,True,5,2013-11-01
mcostalba,mcostalba,2013-11-09 17:41:51+00:00,Fix compile in debug mode  No functional change.,True,5,2013-11-01
lucasart,mcostalba,2013-11-09 09:17:27+00:00,Futility pruning simplification  1/ eval margin and gains removed: 16bit are now free on TT entries; due to the removal of eval margin. may be useful in the future :) gains removed: use instead by Value(128). search() and qsearch() are now consistent in this regard.  2/ futility_margin() linear formula instead of complex (log(depth); movecount) formula.  3/ unify pre & post futility pruning pre futility pruning used depth < 7 plies; while post futility pruning used depth < 4 plies. Now it's always depth < 7.  Tested with fixed number of games both at short TC: ELO: 0.82 +-2.1 (95%) LOS: 77.3% Total: 40000 W: 7939 L: 7845 D: 24216  And long TC ELO: 0.59 +-2.0 (95%) LOS: 71.9% Total: 40000 W: 6876 L: 6808 D: 26316  bench 7243575,True,5,2013-11-01
mcostalba,mcostalba,2013-11-07 21:32:13+00:00,"Revert ""Retire eval margin and gains""  This reverts commit ecd07e51d0f03ccd3e41e5634518b299989254dd.  Patch was incorrect and partial. It will be reapplied in the correct form.  bench: 9189063",True,3,2013-11-01
glinscott,mcostalba,2013-11-07 21:26:03+00:00,Restrict mobility of pinned pieces  Passed both short TC: LLR: 3.00 (-2.94;2.94) [-1.50;4.50] Total: 54342 W: 10950 L: 10692 D: 32700  And long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 61976 W: 10654 L: 10251 D: 41071  This patch introduces a slowdown of 3.5 % !!!!!  bench: 7911558,True,3,2013-11-01
lucasart,mcostalba,2013-11-07 18:46:51+00:00,Retire eval margin and gains  1/ eval margin and gains removed:  - gains removed by Value(128): search() and qsearch() now behave consistently!  2/ futility_margin()  - testing showed that there is no added value in this weird (log(depth); movecount)    formula; and a much simpler linear formula is just as good. In fact; it is most    likely better; as it is not yet optimally tuned.  - the new simplified formula also means we get rid of FutilityMargins[]; its    initialization code; and more importantly ss->futilityMoveCount; and the hacky    code that updates it throughout the search().  - the current formula gives negative futility margins; and there is a hidden interaction    between the move coutn pruning formula and the futility margin one: what happens is    that MCP is supposed to be triggered before we use the non-sensical negative futility    margins.  3/ unify pre & post futility pruning  - pre futility pruning (what SF calls value based pruning) used depth < 7 plies;    while post futility pruning (what SF calls static null move pruning) used depth < 4 plies.  - also the condition depth < 7 in pre futility pruning was not obvious; and it seemd    to be depth < 16 (futility_margin() returns an infinite value when depth >= 7).  Tested with fixed number of games both at short TC: ELO: 0.82 +-2.1 (95%) LOS: 77.3% Total: 40000 W: 7939 L: 7845 D: 24216  And long TC ELO: 0.59 +-2.0 (95%) LOS: 71.9% Total: 40000 W: 6876 L: 6808 D: 26316  bench: 10206576,True,3,2013-11-01
ceebo,mcostalba,2013-11-07 18:20:24+00:00,Two more parameters eliminated  RedundantRook and RedundantQueen replaced by simple variable RedundantMajor. Also the SameColor coefficient for Queen<->Queen has been set by definition to 0.  The remaining 5 parameters:  LinearCoefficients[ROOK] LinearCoefficients[QUEEN] QuadraticCoefficientsSameColor[ROOK][ROOK] QuadraticCoefficientsSameColor[QUEEN][ROOK] RedundantMajor  are sufficient to equate the material imbalances for the 5 common material configurations of R; RR; Q; QR and QRR to any desired values simultaneously.  With the chosen parameters there should be no functional change unless one side has more than 2 rooks or more than 1 queen. For example bench from the start position using the commands:  ./stockfish go depth 16  produces identical output except for one extra node in the last iteration.  bench: 8198094,True,3,2013-11-01
ceebo,mcostalba,2013-11-05 19:08:39+00:00,Zero more redundant coefficients  Coefficients for Bishop<->BishopPair and Bishop<->Bishop are also pretty much redundant. By altering the values in LinearCoefficients[] these coefficients can be zeroed without changing the imbalance calculations in any position with less than 3 bishops for one side.  bench: 7995098,True,1,2013-11-01
ceebo,mcostalba,2013-11-05 19:08:39+00:00,Zero redundant material imbalance terms  First coefficient in the SameColor array does an equivalent job when folded into the LinearCoefficients array.  All of the diagonal terms in the OppositeColor array are redundant due to cancellation.  No functional change.,True,1,2013-11-01
zamar,mcostalba,2013-11-02 10:34:42+00:00,Test Easy Move if no BestMoveChanges  In case we find a very good move after a troubled start; we don't return immediately anymore.  Tested directly at long TC where it passed: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 13910 W: 2397 L: 2228 D: 9285  bench: 7995098,True,5,2013-11-01
mcostalba,mcostalba,2013-11-01 07:56:15+00:00,Set timer to a fixed interval  And remove a complex (and broken) formula.  Indeed previous code was broken in case of TC with big time increments where available_time() was too similar to total time yielding to many time losses; so for instance:  go wtime 2600 winc 2600 info nodes 4432770 time 2601 <-- time forfeit!  maximum search time = 2530 ms available_time = 2300 ms  For a reference and further details see:  https://groups.google.com/forum/?fromgroups=#!topic/fishcooking/dCPAvQDcm2E  Speed tested with bench disabling timer alltogheter vs timer set at max resolution; showed we have no speed regressions both in single core and when using all physical cores.  No functional change.,True,4,2013-11-01
Unknown,mcostalba,2013-10-31 05:13:30+00:00,Use a formula for chain membership bonus  Passed both short TC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 5087 W: 1072 L: 951 D: 3064  And long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 28620 W: 5042 L: 4798 D: 18780  bench: 7995098,True,3,2013-10-01
mcostalba,mcostalba,2013-10-28 18:31:25+00:00,Tweak bishop pair and knight weight  A combo of two patches that failed SPRT with score higher than 50% but togheter they succeed:  SPRT at 60+0.05 LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 7312 W: 1276 L: 1139 D: 4897  bench: 8029334,True,0,2013-10-01
Matt14916,mcostalba,2013-10-27 07:03:58+00:00,Fix divide by zero bug in late game  If the game got late enough that move_importance(currentPly) * slowMover / 100 rounds to 0; then we ended up dividing 0 by 0 when only looking 1 move ahead.  This apparently caused the search to almost immediately abort and Stockfish would blunder in long games. So convert thisMoveImportance to a double.  No functional change.,True,6,2013-10-01
mcostalba,mcostalba,2013-10-24 18:40:26+00:00,Retire mirror()  Inline the only caller site.  No functional change.,True,3,2013-10-01
mcostalba,mcostalba,2013-10-24 18:34:23+00:00,Prefer file_bb() to FileBB[]  No functional change.,True,3,2013-10-01
joergoster,mcostalba,2013-10-24 18:11:33+00:00,Penalty for Knight when enemy pawns are few  This seems more a material imbalance topic; anyhow test is good and so patch is applied as is.  Passed both short TC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 17391 W: 3548 L: 3393 D: 10450  And long TC: LLR: 3.00 (-2.94;2.94) [0.00;6.00] Total: 34660 W: 5972 L: 5700 D: 22988  bench: 8291883,True,3,2013-10-01
mcostalba,mcostalba,2013-10-23 17:56:35+00:00,Further smplify pawn endgames  Dumb down a bit the code and trade some possible speed (but this is far from hot path anyhow) for some added readability for the layman.  No functional change.,True,2,2013-10-01
ceebo,mcostalba,2013-10-23 14:00:49+00:00,Use flip_sq idea in endgame.cpp  The normalising transformation is computed all at once by the helper function get_flip_sq and then applied immediately to the relevant squares as soon as they are loaded from the position class.  bench: 8350690,True,2,2013-10-01
ceebo,mcostalba,2013-10-22 21:09:40+00:00,"Simplify futility move count formula  Simpler formula but introduces some slight changes if d >= 10  Original code grows like  0.225 * d^1.8 New code grows like       0.222 * d^1.8  Full list of values:  d old new diff -------------- 0 2 2 0 1 2 2 0 2 3 3 0 3 4 4 0 4 5 5 0 5 6 6 0 6 7 7 0 7 9 9 0 8 11 11 0 9 13 13 0 10 15 16 1 11 18 19 1 12 21 21 0 13 24 24 0 14 27 28 1 15 31 31 0 16 35 35 0 17 39 38 -1 18 42 42 0 19 47 46 -1 20 51 51 0 21 55 55 0 22 60 60 0 23 65 65 0 24 70 70 0 25 75 75 0 26 81 80 -1 27 87 86 -1 28 92 91 -1 29 98 97 -1 30 104 103 -1 31 111 109 -2  Test code:  int main() {    for(int d=0; d<32; d++)   {      int a = int(3 + 0.3 * pow(double(d); 1.8)) * 3/4 + (2 < d && d < 5);      int b = int(2.4 + 0.222 * pow(d + 0.0; 1.8));       std::cout << d << "" "" << a << "" "" << b << "" "" << b-a << std::endl;   }    return 0; }  bench: 8350690",True,1,2013-10-01
ceebo,mcostalba,2013-10-22 21:06:06+00:00,Simplify futility margins formula  New formula mathces the old formula until d = 45  Test code:  int main() {    for(int d=1; d<=45; d++)   {      int a = int(log(double(d * d) / 2) / log(2.0) + 1.001);      int b = int(2.9 * log(double(d)));       if (a != b) std::cout << d << std::endl;   }    return 0; }  bench: 8455956,True,1,2013-10-01
mcostalba,mcostalba,2013-10-22 15:47:16+00:00,Tweak again chain pawn bonus  This is the first chain bonus version from Ralph that also passed both  Short TC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 23460 W: 4727 L: 4556 D: 14177  And long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 31858 W: 5497 L: 5240 D: 21121  And performed better against current committed version; always at 60secs:  LLR: -2.94 (-2.94;2.94) [-3.00;3.00] Total: 26301 W: 4477 L: 4580 D: 17244  This test was done by Leonid.  bench: 8455956,True,1,2013-10-01
mcostalba,mcostalba,2013-10-22 15:33:11+00:00,"Re-add ""Further increase safe checks bonus""  After 40K games at 60 secs; result is still not clear; but not a regression against SF 4  After ELO: 50.11 +-2.1 (95%) LOS: 100.0% Total: 40000 W: 10547 L: 4817 D: 24636  Before ELO: 49.51 +-2.1 (95%) LOS: 100.0% Total: 40000 W: 10483 L: 4821 D: 24696  So re-apply the patch to avoid to special-case this one.  bench: 7403882",True,1,2013-10-01
mcostalba,mcostalba,2013-10-22 15:27:58+00:00,Restore behaviour after count<ALL_PIECES> fix  Because pos.count<ALL_PIECES>(Us) was always zero; rewrite the formula as if this would still be the case.  bench: 8510004,True,1,2013-10-01
Unknown,mcostalba,2013-10-20 21:41:40+00:00,Further improve chain pawn evaluation  Passed both short TC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 28299 W: 5854 L: 5667 D: 16778  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 9738 W: 1797 L: 1644 D: 6297  bench: 9294116,True,6,2013-10-01
mcostalba,mcostalba,2013-10-20 21:36:46+00:00,Fix pos.count<ALL_PIECES>()  It was never updated !  Currently it only affects evaluate_passed_pawns() and in particularly the rule to increase the bonus if we have more non-pawn pieces. We could simply use popcount() instead and avoid the little slowdown in put_piece() and remove_piece(); but this would leave a very subtle and tricky hole where people are forced to remember that pos.count<ALL_PIECES>() does not work. This is not obvious and so dangerous.  Thanks to Ronald de Man for spotting this.  bench: 7931424,True,6,2013-10-01
mcostalba,mcostalba,2013-10-20 21:19:08+00:00,Fix build on Intel compiler  Due to a strange issue (bug?) the ternary operator does not return a BitCountType for icc; so revert to the expression.  The same patch was already applied in 9749f1f14c956133c2f42f96592b  Thanks to NssY Wanyonyi for pointing out this.  No functional change.,True,6,2013-10-01
mcostalba,mcostalba,2013-10-20 08:04:43+00:00,"Revert ""Further increase safe checks bonus""  This reverts commit 4bc2374450e30101392 for two reasons.  First regression testing shows almost equal score:  Before the patch: ELO: 49.75 +-2.5 (95%) LOS: 100.0% Total: 27205 W: 7113 L: 3244 D: 16848  After the patch: ELO: 48.87 +-2.9 (95%) LOS: 100.0% Total: 20860 W: 5478 L: 2563 D: 12819  Second; and more sensible to me; this patch increases safe check bonuses to 4 times their original value (!) and considering:  - Values were already well tuned  - Values are highly critical  - King safety is highly critical; very TC   dependent and very difficult to test  - Our testing coverage is partial (self-testing;   blitz times)  I think is better to be safe than sorry and so I revert the patch.  bench: 8440524",True,6,2013-10-01
Unknown,mcostalba,2013-10-19 10:19:36+00:00,Further increase safe checks bonus  Passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 10466 W: 2087 L: 1953 D: 6426  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 26334 W: 4540 L: 4310 D: 17484  And also proved stronger than a slightly different patch; also succesful against master:  https://github.com/mcostalba/Stockfish/commit/dc6830a3b4ed12  But losing against current one in a match at 60secs with SPRT [-3; 3]:  LLR: -2.96 (-2.94;2.94) [-3.00;3.00] Total: 44484 W: 7360 L: 7463 D: 29661  bench: 9160831,True,5,2013-10-01
mcostalba,mcostalba,2013-10-18 16:49:38+00:00,Some evaluation code reshuffle  No functional change.,True,4,2013-10-01
joergoster,mcostalba,2013-10-18 08:27:55+00:00,Score chain pawn also by rank  Use the (rescaled) CandidatePassed[] table that is already rank based.  Passed both short TC LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 11048 W: 2272 L: 2135 D: 6641  And long TC LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 4116 W: 769 L: 645 D: 2702  bench: 8440524,True,4,2013-10-01
ceebo,mcostalba,2013-10-15 05:36:01+00:00,Simplification of KPsK function  Also the drawing criteria has been slightly loosened. It now detects a draw if the king is ahead of all the pawns and on the same file or the adjacent file.  bench: 7700683,True,1,2013-10-01
ceebo,mcostalba,2013-10-15 05:34:29+00:00,Bug fix for KQKRPs endgame  This lost position 8/8/3q4/8/5k2/2P1R3/2K2P2/8 w - - 0 1 was previously evaluated as a draw.  The king and rook need to be correctly placed with respect to the _same_ pawn.  (Note also that the check for the pawn being on RANK_2 in the old version is redundant: it must be on RANK_2 if it hopes to protect a rook on RANK_3)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2013-10-01
Unknown,mcostalba,2013-10-14 21:24:29+00:00,Double king safety weights  Good both at short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 5448 W: 1133 L: 1012 D: 3303  And at long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 40509 W: 6836 L: 6541 D: 27132  bench: 7700683,True,0,2013-10-01
ceebo,mcostalba,2013-10-14 17:55:07+00:00,Remove a drawing rule from KBPsK function  The rule can be incorrect if the attacking king is well placed e.g. 8/6K1/8/8/7k/1B6/7P/8 w - - 0 1  bench: 8279065,True,0,2013-10-01
mcostalba,mcostalba,2013-10-14 17:38:08+00:00,Massive stronger/weaker renming  No functional change.,True,0,2013-10-01
ceebo,mcostalba,2013-10-14 17:23:57+00:00,Add helper function verify_material  Allows to remove a lot of assert code in endgames.  No functional change.,True,0,2013-10-01
ceebo,mcostalba,2013-10-14 05:44:02+00:00,Add some knowledge for KRPKB endgame  bench: 8279065,True,0,2013-10-01
ceebo,mcostalba,2013-10-14 05:44:01+00:00,Improve KBPsK endgame  Better endgame with bishop and blocked g-pawn  bench: 8279065,True,0,2013-10-01
mcostalba,mcostalba,2013-10-13 10:35:17+00:00,Remove unuseful optimization in RKISS  Don't need a struct here. Speed test shows result is teh same. Moreover RKISS is used mainly at startup to compute magics; so prefer to keep it simple...RKISS ;-)  Also some assorted triviality while there.  No functional change.,True,6,2013-10-01
zamar,mcostalba,2013-10-09 17:13:41+00:00,Smoother transition for LMR  Passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 12376 W: 2596 L: 2454 D: 7326  And long TC: LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 14798 W: 2584 L: 2409 D: 9805  bench: 8279065,True,2,2013-10-01
uriblass,mcostalba,2013-10-08 19:24:21+00:00,Increase slowmover and reduce instability  These two changes go in opposite directions and it seems that the combination is stronger than original.  Here are the positive tests at various TC:  15+0.05 LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 24561 W: 4946 L: 4772 D: 14843  60+0.05 LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 15259 W: 2598 L: 2423 D: 10238  40/30 LLR: 2.96 (-2.94;2.94) [-3.00;3.00] Total: 2570 W: 527 L: 422 D: 1621  Unfortunately there is also a bad result with one sec time increment that needs to be further investigated:  12+1 LLR: -2.97 (-2.94;2.94) [-3.00;3.00] Total: 2694 W: 438 L: 543 D: 1713  bench: 8340585,True,1,2013-10-01
lucasart,mcostalba,2013-10-08 17:51:08+00:00,Use TT refined value to stand pat  Passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 17811 W: 3520 L: 3366 D: 10925  And long TC: LLR: 2.95 (-2.94;2.94) [0.00;6.00] Total: 30255 W: 5070 L: 4825 D: 20360  bench: 8340585,True,1,2013-10-01
lucasart,mcostalba,2013-10-05 16:12:52+00:00,Use double everywhere  Rationale:  - Speed of double and float is about the same (not on the hot path anyway)  - Double makes code prettier (no need to write 1.0f; just 1.0)  - Only practical advantage of float is to use less memory; but since we never   store large arrays of double; we don't care.  No functional change.,True,5,2013-10-01
lucasart,mcostalba,2013-10-05 16:10:43+00:00,Use prefix operators wherever possible  No functional change.,True,5,2013-10-01
mcostalba,mcostalba,2013-09-29 07:43:10+00:00,Add more depth/positions to bench  Increase bench default depth from 12 to 13 and add 15 new endgame positions to have broader coverage and also more reliable nps calulcation used for fishtest framework.  Due to the new endgame positions; where nps is higher; the total nps is increased of about 15%.  Thanks to Lucas and J�rg for the suggestions.  No functional change; but bench number is now:  bench: 8336338,True,6,2013-09-01
mcostalba,mcostalba,2013-09-28 13:47:59+00:00,Drop 'is' prefix from query functions  Most but not all.  No functional change.,True,5,2013-09-01
mcostalba,mcostalba,2013-09-28 11:16:16+00:00,Fix build on Mac OS X  For some users -stack_size;0x4000 does not work; so revert for now.  osX 10.6.8 gcc version 4.7.3 (MacPorts gcc47 4.7.3_2)  g++: error: unrecognized command line option '-stack_size;0x4000' make[2]: *** [stockfish] Error 1 make[1]: *** [gcc-profile-make] Error 2 make: *** [profile-build] Error 2  No functional change.,True,5,2013-09-01
mcostalba,mcostalba,2013-09-28 08:10:51+00:00,"Revert ""Use a per-thread array""  This reverts commit 800410eef1c0811 and instead increases stack size.  I went through the old emails with Daylen that reported the crash issue on Mac OS X and was fixed by 0049d3f337b6f3a66a0.  It was reported default stack size for a thread in Mac OS X is 8 megabytes while the patch that we are reverting allows to reduce stack size at max of about 217KB; so the reason for the crash was only marginal in MAX_MOVES value. On those emails Daylen also hinted how to increase stack size for Mac OS X to 16MB.  So prefer to increase stack size to 16MB instad of re-inventing the wheel and do our home grown stack as we did with the patch that we are now reverting (it will remain anyhow in git history for documentation purposes).  No functional change.",True,5,2013-09-01
lucasart,mcostalba,2013-09-28 07:54:22+00:00,Simplify extensions  Unify extensions between PV and not PV nodes and remove all but check extensions.  This is a simplification so tested at fixed number of games where proved to not regress.  About 45k games at 15+0.05 ELO: 1.23 +-2.0 (95%) LOS: 88.5% Total: 45643 W: 9107 L: 8946 D: 27590  About 45k games at 60+0.05 ELO: 1.07 +-1.8 (95%) LOS: 87.8% Total: 46786 W: 7728 L: 7584 D: 31474  bench: 3172206,True,5,2013-09-01
R-Peleg,mcostalba,2013-09-27 07:40:48+00:00,Simplify tte use condition  No functional change.,True,4,2013-09-01
imor,mcostalba,2013-09-27 07:04:24+00:00,Fix best move lookup bug  If the uci option 'Best Book Move' is set to true the lookup still returns a move at random instead of the move with the highest weight.  No functional change.,True,4,2013-09-01
mcostalba,mcostalba,2013-09-27 06:59:03+00:00,Increase MAX_MOVES to 256  This should be enough for any legal position; even the handcrafted ones; like the one presented by Reuven:  1Q5R/4Q1K1/B1Q5/B4Q2/N2Q4/pQ4Q1/pn2Q3/krQ4R w - -  Where currently we crash. This reverts the patch 0049d3f337b6f3a66a06503c of 8/4/2012 where stack was shrinked due to crashes while in deep analysys.  No functional change.,True,4,2013-09-01
mcostalba,mcostalba,2013-09-27 06:44:36+00:00,Use a per-thread array for generated moves  This greately reduces stack usage and is a prerequisite for next patch.  Verified with 40K games both in single and SMP case that there are no regressions.  No functional change.,True,4,2013-09-01
jromang,mcostalba,2013-09-23 06:11:43+00:00,Update disabled warnings for Intel compiler  No functional change.,True,0,2013-09-01
jromang,mcostalba,2013-09-23 06:11:14+00:00,Replace -O3 with -fast for intel compiler  No functional change.,True,0,2013-09-01
Unknown,mcostalba,2013-09-23 06:08:52+00:00,Reduce negative quiets by ONE_PLY / 2  Passed both short TC: LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 3402 W: 708 L: 593 D: 2101  And long TC: LLR: 2.93 (-2.94;2.94) [0.00;6.00] Total: 23379 W: 3972 L: 3759 D: 15648  bench: 3529630,True,0,2013-09-01
mcostalba,mcostalba,2013-09-23 05:59:51+00:00,Final time management setup  This is an even safer setup proposed and tested by Alexandre Meirelles.  Regression testing of 40K games at 10+0.05 show result is stable both against current master:  ELO: -0.29 +-2.2 (95%) LOS: 39.7% Total: 40000 W: 8010 L: 8043 D: 23947  and again original master (the one with smallest time parameters):  ELO: 1.71 +-2.2 (95%) LOS: 93.8% Total: 40000 W: 8325 L: 8128 D: 23547  Alexandre verified with LittleBlitzer time losses are greately reduced with this setup:  Games Completed = 2100 of 3000 (Avg game length = 35.745 sec)  Settings = RR/128MB/15000ms+50ms/M 1000cp for 12 moves; D 150 moves/ Time = 39200 sec elapsed; 16800 sec remaining  1.  Stockfish 190913             1091.5/2100    803-720-577      (L: m=313 t=1 i=0 a=406)    (D: r=278 i=91 f=136 s=8 a=64)    (tpm=212.5 d=14.75 nps=925427)  2.  Houdini 2.0 w32              1008.5/2100    720-803-577      (L: m=250 t=299 i=0 a=254)    (D: r=278 i=91 f=136 s=8 a=64)    (tpm=204.1 d=12.04 nps=1326351)  No functional change.,True,0,2013-09-01
mcostalba,mcostalba,2013-09-19 05:26:36+00:00,Increase Emergency Move Time to 20  Goes in the direction of avoiding time losses and seems equivalent after almost 40K games at super fast TC of 10+0.05  ELO: 2.61 +-2.2 (95%) LOS: 99.1% Total: 39869 W: 8258 L: 7959 D: 23652  No functional change.,True,3,2013-09-01
mcostalba,mcostalba,2013-09-17 14:32:39+00:00,Increase Emergency Move Time to 10  Goes in the direction of avoiding time losses and seems equivalent after almost 40K games at super fast TC of 10+0.05  ELO: 2.41 +-2.3 (95%) LOS: 98.1% Total: 37222 W: 7843 L: 7585 D: 21794  No functional change.,True,1,2013-09-01
mcostalba,mcostalba,2013-09-16 21:59:37+00:00,Fix a silly unstoppable eval bug  The logic is broken for black side because we get more bonus for pawn in 7th rank than for pawn in 2nd rank!  Spotted by Reuven Peleg  bench:3884409,True,0,2013-09-01
zamar,mcostalba,2013-09-16 07:07:47+00:00,"Fix time parameters for blitz games  The ideal setting for super-blitz might be something like:      ""Emergency Base Time"" = 50     ""Emergency Move Time"" = 5  This would give a total emergency time buffer of:      50 + 40 * 5 = 250 ms  This setup replaces the previous half cooked hack ""Don't blunder under extreme time pressure"".  Test results are very good at super blitz; but keep good even at 60 secs.  At 5+0.05 ELO: 24.30 +-2.4 (95%) LOS: 100.0% Total: 37802 W: 10060 L: 7420 D: 20322  At 15+0.05 ELO: 13.41 +-2.9 (95%) LOS: 100.0% Total: 22271 W: 4853 L: 3994 D: 13424  At 60+0.05 ELO: 5.30 +-3.2 (95%) LOS: 99.9% Total: 16000 W: 2897 L: 2653 D: 10450  No functional change.",True,0,2013-09-01
mcostalba,mcostalba,2013-09-16 06:57:37+00:00,Rewrite unstoppable pawns evaluation  Instead of current code; give a bonus according to the frontmost square among candidate + passed pawns.  This is a big simplification that removes a lot of accurate code substituting it with a statistically based one using the common 'bonus' scheme; leaving to the search to sort out the details.  Results are equivalent but code is much less and; as an added bonus; we now store candidates bitboard in pawns hash and allow this info to be used in evaluation. This paves the way to possible candidate pawns evaluations together with all the other pieces; as we do for passed.  Patch passed short TC LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 16927 W: 3462 L: 3308 D: 10157  Then failed (quite quickly) at long TC LLR: -2.95 (-2.94;2.94) [0.00;6.00] Total: 8451 W: 1386 L: 1448 D: 5617  But when ran with a conclusive 40K fixed games at 60 secs it proved almost equivalent to original one.  ELO: 1.08 +-2.0 (95%) LOS: 85.8% Total: 40000 W: 6739 L: 6615 D: 26646  bench: 3884003,True,0,2013-09-01
R-Peleg,mcostalba,2013-09-15 19:49:06+00:00,Code style at passed pawn eval  No functional change.,True,6,2013-09-01
R-Peleg,mcostalba,2013-09-15 19:45:18+00:00,Nicer operator declerations  No functional change.,True,6,2013-09-01
Unknown,mcostalba,2013-09-15 07:17:21+00:00,Use pre-increment also for native types  Now that we use pre-increment on enums; it make sense; for code style uniformity; to swith to pre-increment also for native types; although there is no speed difference.  No functional change.,True,6,2013-09-01
mcostalba,mcostalba,2013-09-15 07:09:06+00:00,Fix operator++ definition  ENABLE_OPERATORS_ON has incorrect definitions of post-increment and post-decrement operators.  In particularly the returned value is the variable already incremented/decremented; while instead they should return the variable _before_ inc/dec.  This has no real effect because are only used in loops and where the returned value is never used; neverthless it is wrong. The fix would be to copy the variable to a dummy; then inc/dec the variable; then return the dummy.  So instead; rename to pre-increment that can be implemented without the dummy; actually the current implementation it is already the correct pre-increment; with the only change to return a reference (an l-value) and not a copy; so to properly mimic the pre-increment on native integers.  Spotted by Kojirion.  No functional change.,True,6,2013-09-01
mcostalba,mcostalba,2013-09-15 05:59:09+00:00,Don't blunder under extreme time pressure  We always attempt to keep at least this emergencyBaseTime at clock. But if available time is very low it means that we will force ourself to play immediately to satisfy the emergencyBaseTime constrain and so leading to blunders.  Patch is good at short and very short TC (15secs and 5secs respectively) LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 26590 W: 5426 L: 5245 D: 15919  LLR: 2.96 (-2.94;2.94) [-1.50;4.50] Total: 5767 W: 1397 L: 1268 D: 3102  Instead seems has no influence at longer TC (60 secs) LLR: -2.96 (-2.94;2.94) [0.00;6.00] Total: 79862 W: 13623 L: 13339 D: 52900  So it is committed to have a broader testing but is to be consider still EXPERIMENTAL and can be reverted easily.  No functional change.,True,6,2013-09-01
mcostalba,mcostalba,2013-09-14 11:08:37+00:00,Move classify_leaf() to c'tor in bitbases  No functional change.,True,5,2013-09-01
mcostalba,mcostalba,2013-09-14 09:19:12+00:00,Small touches to bitbase.cpp  Inspired by Lucas's code:  https://github.com/lucasart/chess/blob/master/src/kpk.cc  No functional change.,True,5,2013-09-01
R-Peleg,mcostalba,2013-09-13 16:08:22+00:00,Increase passed bonus for having more pieces  Passed both short TC: LLR: 2.95 (-2.94;2.94) [-1.50;4.50] Total: 36463 W: 7575 L: 7365 D: 21523  And long TC: LLR: 2.97 (-2.94;2.94) [0.00;6.00] Total: 2953 W: 564 L: 446 D: 1943  bench: 3846852,True,4,2013-09-01
mcostalba,mcostalba,2013-09-12 06:44:11+00:00,"Revert ""Move draw by material check""  Possible regression  bench: 4554579",True,3,2013-09-01
mcostalba,mcostalba,2013-09-12 06:38:19+00:00,"Revert ""Fix random moves when time < 10ms""  Possible regression.  No functional change.",True,3,2013-09-01
mcostalba,mcostalba,2013-09-11 17:15:28+00:00,Extend checks more when below alpha  Passed both short TC: LLR: 2.97 (-2.94;2.94) [-1.50;4.50] Total: 8739 W: 1830 L: 1698 D: 5211  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 6716 W: 1238 L: 1101 D: 4377  bench: 4554576,True,2,2013-09-01
uriblass,mcostalba,2013-09-11 07:15:47+00:00,Extend checks more in losing positions  Passed both short TC: LLR: 2.98 (-2.94;2.94) [-1.50;4.50] Total: 3974 W: 860 L: 741 D: 2373  And long TC: LLR: 2.96 (-2.94;2.94) [0.00;6.00] Total: 16807 W: 2917 L: 2733 D: 11157  bench: 3767999,True,2,2013-09-01
R-Peleg,mcostalba,2013-09-10 21:02:05+00:00,Simplify unstoppable pawns evaluation  No functional change,True,1,2013-09-01
mcostalba,mcostalba,2013-09-10 19:23:20+00:00,Fix random moves when time < 10ms  In case we have less then 10ms to think as soon as we wake up the timer; it immediately fires and calls check_time() where due to condition:  elapsed > TimeMgr.maximum_time() - 2 * TimerResolution  the stop flag is set and search returns immediately; without actually search anything.  Here the somewhat hacky fix is to start the timer after at least one iteration as been completed.  No functional change.,True,1,2013-09-01
R-Peleg,mcostalba,2013-09-10 17:18:10+00:00,More readable space mask  No functional change.,True,1,2013-09-01
R-Peleg,mcostalba,2013-09-09 22:47:31+00:00,Change condition to use relative rank  No functional change,True,0,2013-09-01
mcostalba,mcostalba,2013-09-08 13:28:53+00:00,Fix some comments in position.cpp  No functional change.,True,6,2013-09-01
mcostalba,mcostalba,2013-09-08 13:11:35+00:00,Move draw by material check  It is more natural to test this case among others material distributions.  No functional change.,True,6,2013-09-01
mcostalba,mcostalba,2013-09-07 16:25:24+00:00,Remove unreachable values in mobility table  The possible maximum mobility cardinality (plus one in case of zero squares available) is:  - Knights: max. 8  squares -> max. 9  entries - Bishops: max. 13 squares -> max. 14 entries - Rooks:   max. 14 squares -> max. 15 entries - Queen:   max. 27 squares -> max. 28 entries  So remove the extra entries in the table.  Spotted by Dariusz Orzechowski.  No functional change.,True,5,2013-09-01
mcostalba,mcostalba,2013-09-07 10:30:44+00:00,Fix warning: double to float truncation  MSVC 2013 says: warning C4305: '*=' : truncation from 'double' to 'float'  No functional change.,True,5,2013-09-01
lucasart,mcostalba,2013-09-07 07:34:22+00:00,Singular extension at 8 plies also for PV nodes  Passed both short TC: LLR: 2.96 (-2.94;2.94) Total: 11451 W: 2455 L: 2282 D: 6714  And long TC LLR: 2.96 (-2.94;2.94) Total: 15813 W: 2907 L: 2723 D: 10183  bench: 3864419,True,5,2013-09-01
lucasart,mcostalba,2013-09-07 07:25:45+00:00,Union of 2 changes  Union of  - LMR >= 3 plies from Gary tests.stockfishchess.org/tests/view/522522960ebc595d328fcafd  - allows() tweak from Reuven tests.stockfishchess.org/tests/view/5225fa1c0ebc595d328fcb53  Both passed Step I and failed Step II.  Instead this union passed both short TC: LLR: 2.95 (-2.94;2.94) Total: 14525 W: 3063 L: 2874 D: 8588  And long TC LLR: 2.94 (-2.94;2.94) Total: 31075 W: 5566 L: 5308 D: 20201  bench: 4238160,True,5,2013-09-01
lucasart,mcostalba,2013-09-05 16:50:16+00:00,"Do not prune useless checks in QS  Passed both SPRT tests in ""simplification mode""; so with elo0: -3.00 alpha: 0.05 elo1: 3.00 beta: 0.05  Short TC: LLR: 2.96 (-2.94;2.94) Total: 6243 W: 1302 L: 1195 D: 3746  Long TC LLR: 2.96 (-2.94;2.94) Total: 22972 W: 4124 L: 4020 D: 14828  bench: 4633330",True,3,2013-09-01
mcostalba,mcostalba,2013-09-05 04:34:48+00:00,"Revert ""Fix check for bishop pair in material imbalance""  Idea is sound but implementation is partial. Ryan and Joona noticed that     we leave an hole in material table. Also we got another report by an user     of an odd behaviour. Namely; if you start stockfish and from the prompt     give 'bench' you get 3453941; then if you run again bench you get 3453940.      The reason is that two different positions with the same number of pieces;     but one with a bishop pair and another without have the same material key.     But after Eelco patch also different material imbalance and this yields     to this issue.      Restesting at long TC shows the patch does not really contribute at     ELO improvement. Actually patch failed at long TC.      LLR: -2.97 (-2.94;2.94)     Total: 23109 W: 4104 L: 4092 D: 14913      So revert.      bench: 3453945",True,3,2013-09-01
R-Peleg,mcostalba,2013-09-03 18:11:00+00:00,Rewrite backward pawn detection  Use the new backmost_sq() instead of a loop.  No functional change.,True,1,2013-09-01
Kingdefender,mcostalba,2013-09-03 17:40:34+00:00,Fix check for bishop pair in material imbalance  Prefer pos.bishop_pair() to pos.count<BISHOP>(WHITE) > 1 because the first checks that the two bishops are on different color squares.  Although the change seems to kick in only in very rare cases; quite surprisingly it was able to pass SPRT test at short TC.  LLR: 2.95 (-2.94;2.94) Total: 39818 W: 8174 L: 7956 D: 23688  bench: 3453941,True,1,2013-09-01
mcostalba,mcostalba,2013-09-02 09:03:01+00:00,"Rewrite KBBKN endgame  This was thought to be a draw but the bishops generally win. However; it takes up to 66 moves. The position in the diagram was thought to be a draw for over one hundred years; but tablebases show that White wins in 45 moves. All of the long wins go through this type of semi-fortress position. It takes several moves to force Black out of the temporary fortress in the corner; then precise play with the bishops prevents Black from forming the temporary fortress in another corner (Nunn 1995:265ff).  Before computer analysis; Speelman listed this position as unresolved; but ""probably a draw"" (Speelman 1981:109).  bench: 3453945",True,0,2013-09-01
mcostalba,mcostalba,2013-09-01 20:48:09+00:00,Don't use lpthread for Android  Thanks to Peter Osterlund for the feedback.  No functional change.,True,6,2013-09-01
mcostalba,mcostalba,2013-09-01 16:18:37+00:00,Improve ARM compatibility  STANDALONE-TOOLCHAIN.html in Android NDK says:  It is recommended to use the -mthumb compiler flag to force the generation of 16-bit Thumb-1 instructions (the default being 32-bit ARM ones).  If you want to target the 'armeabi-v7a' ABI; you will need ensure that the following two flags are being used:    CFLAGS='-march=armv7-a -mfloat-abi=softfp'  Note: The first flag enables Thumb-2 instructions; and the second one       enables H/W FPU instructions while ensuring that floating-point       parameters are passed in core registers; which is critical for       ABI compatibility. Do *not* use these flags separately!  Thanks to Peter Osterlund for pointout this doc and for showing me an example Makefile to follow.  No functional change.,True,6,2013-09-01
uriblass,mcostalba,2013-09-01 15:07:21+00:00,Union of 2 changes that failed with good score  This is a union of 2 changes:  A tweak of recaptures limit from Joona Kiiski http://tests.stockfishchess.org/tests/view/52166d7c0ebc59319a242400  and a tweak of move count pruning from Leonid Pechenik http://tests.stockfishchess.org/tests/view/5217c7e60ebc59319a242456  The set passed both short TC at 30+0.05 LLR: 2.96 (-2.94;2.94) Total: 18936 W: 3723 L: 3566 D: 11647  And the usual long TC at 60+0.05 LLR: 2.95 (-2.94;2.94) Total: 48962 W: 8837 L: 8487 D: 31638  bench: 3453945,True,6,2013-09-01
mcostalba,mcostalba,2013-09-01 14:39:04+00:00,Assorted clean up in endgames  No functional change.,True,6,2013-09-01
mcostalba,mcostalba,2013-08-30 14:42:18+00:00,"Fix a bogus assert in allows()  Becuase castle is coded as ""king captures the rook"" the to_sq(move); A1/8 or H1/8 is empty after the move; leading to assert assert(p != NO_PIECE) in color_of().  Teach allows() asserts about castle and fix the crash.  Bug reported by Ryan Takker and tracked down by Tom Vijlbrief.  No functional change.",True,4,2013-08-01
mcostalba,mcostalba,2013-08-30 14:22:22+00:00,Use frontmost_sq() and backmost_sq helpers  Should easier to read than the lsb() / msb() low level functions.  No functional change.,True,4,2013-08-01
glinscott,mcostalba,2013-08-29 21:02:18+00:00,Enable LMR for dangerous moves  Passed both short TC LLR: 2.96 (-2.94;2.94) Total: 5598 W: 1250 L: 1125 D: 3223  And long TC LLR: 2.97 (-2.94;2.94) Total: 16441 W: 3102 L: 2912 D: 10427  bench: 4620975,True,3,2013-08-01
R-Peleg,mcostalba,2013-08-29 20:53:21+00:00,Bonus for rook behind a passed  If our rook is behind a passed pawn; all squares are defended.  One of the longest tests to pass !  Passed both short TC LLR: 2.97 (-2.94;2.94) Total: 44560 W: 9518 L: 9281 D: 25761  And long TC LLR: 2.96 (-2.94;2.94) Total: 61348 W: 11618 L: 11192 D: 38538  bench: 3787694,True,3,2013-08-01
R-Peleg,mcostalba,2013-08-29 11:59:49+00:00,Replace hardcoded 128 by constant  No functional change.,True,3,2013-08-01
glinscott,mcostalba,2013-08-28 17:50:11+00:00,Add lsb() overload  Helper to find least significant bit relative to the given color.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-08-01
uriblass,mcostalba,2013-08-26 17:29:58+00:00,Time management: move faster if PV is stable  Move faster but compensate by allocating more time when the best move changes.  Passed short TC at 15+0.05 LLR: 2.93 (-2.94;2.94) Total: 13895 W: 3030 L: 2882 D: 798  Long TC at 60+0.05 LLR: 2.96 (-2.94;2.94) Total: 9266 W: 1777 L: 1624 D: 5865  At time increment 30+0.5 LLR: 2.96 (-2.94;2.94) Total: 6703 W: 1238 L: 1134 D: 4331  And at fixed game number; longer TC 120+0.05 ELO: 5.17 +-2.8 (95%) LOS: 100.0% Total: 19306 W: 3378 L: 3091 D: 12837  bench: 4728533,True,0,2013-08-01
R-Peleg,mcostalba,2013-08-25 16:36:49+00:00,Simplify chain detection  No functional change.,True,6,2013-08-01
R-Peleg,mcostalba,2013-08-25 16:31:47+00:00,Simplify kf definition in shelter_storm()  No functional change.,True,6,2013-08-01
leachjoinery,mcostalba,2013-08-24 08:08:03+00:00,"Fix KBPK bug  With  position fen 7k/8/8/8/8/7P/6K1/7B w - - 0 1 go depth 25  The evaluation at depth 22 is not draw as it should be. The reason is that when search reaches the position 8/6kP/8/8/8/3B4/6K1/8 w - - 0 1 if white plays h8R or h8N then we get a position that is a ""KNOWN_WIN"" and is _not_ a check; so futility pruning in qsearch kicks in and black may think that it is ""futile"" to reply Kxh8 since; according to the logic of the code; it cannot raise the score back towards a draw.  bench: 4728533",True,5,2013-08-01
R-Peleg,mcostalba,2013-08-22 12:39:08+00:00,Simplify condition for backward pawn  No functional changes.,True,3,2013-08-01
mcostalba,mcostalba,2013-08-22 11:13:06+00:00,"Retire redundant endgames  The case of two lone kings on the board is already considered by the ""No pawns"" scaling factor rules in material.cpp as is KBK and KNK.  Moreover we had a small leak in endgames map because for KK endgame it happens white and black material keys are the same (both equal to zero); so when adding the black endgame in Endgames::add() we were overwriting the already exsisting white one; leading to a memory leak found by Valgrind.  So remove the endgames althogheter and rely on scaling to correctly set the endgames value to a draw.  No functional change.",True,3,2013-08-01
zamar,mcostalba,2013-08-22 07:06:48+00:00,Use null move when depth >= 2 plies  Passed both short TC: LLR: 2.96 (-2.94;2.94) Total: 23725 W: 5031 L: 4855 D: 13839  And long TC: LLR: 2.96 (-2.94;2.94) Total: 15730 W: 2939 L: 2754 D: 10037  bench: 4729333,True,3,2013-08-01
mcostalba,mcostalba,2013-08-21 06:41:47+00:00,Restore development version  No functional change.,True,2,2013-08-01
mcostalba,mcostalba,2013-08-20 07:01:25+00:00,Stockfish 4  Stockfish bench signature is: 4132374,True,1,2013-08-01
tomtor,mcostalba,2013-08-19 14:53:46+00:00,Fix crash when reaching max ply  Bug introduced in 1b7223a53c419212efbd that updated the ss base stack without increasing the dimension.  No functional change.,True,0,2013-08-01
tomtor,mcostalba,2013-08-19 06:55:17+00:00,Remove useless condition in KXK endgame  Because eval is never called when in check.  No functional change.,True,0,2013-08-01
lp--,mcostalba,2013-08-18 07:13:57+00:00,Further tweak movecount pruning  Passed both short TC LLR: 2.95 (-2.94;2.94) Total: 15140 W: 3125 L: 2976 D: 9039  And long TC LLR: 2.95 (-2.94;2.94) Total: 17118 W: 3165 L: 2974 D: 10979  bench: 4132374,True,6,2013-08-01
mcostalba,mcostalba,2013-08-17 09:05:55+00:00,"Normalize ""pawn in front of minor"" patch  No functional change.",True,5,2013-08-01
R-Peleg,mcostalba,2013-08-16 07:57:21+00:00,Use constants arguments where possible  No functional changes.,True,4,2013-08-01
mcostalba,mcostalba,2013-08-15 07:36:26+00:00,Revert using exceptions  Due to crashes. It will be reapplied once we understand what's happening.  No functional change.,True,3,2013-08-01
R-Peleg,mcostalba,2013-08-14 08:53:43+00:00,Simplify DistanceRingsBB init  Verified by same benchmark and picking some random values.  No functional change.,True,2,2013-08-01
R-Peleg,mcostalba,2013-08-14 07:38:35+00:00,Some renaming in TT store()  No functional change.,True,2,2013-08-01
mcostalba,mcostalba,2013-08-14 06:29:57+00:00,Use exceptions to stop the search  Instead of classical flags; throw an exception when we want to immediately halt the search. Currently only one type is used for both UCI stop and threads cut off.  No functional change.,True,2,2013-08-01
tomtor,mcostalba,2013-08-13 12:20:02+00:00,Bonus for a pawn in front of knight/bishop  Idea originated from a post of Don Dailey on talkchess and reported by Eelco.  This is the last succesful attempt of a long series of trials (as usually happens; the 'idea' alone is not enough).  Passed both short 15secs TC LLR: 2.97 (-2.94;2.94) Total: 7629 W: 1645 L: 1515 D: 4469  And long 60secs TC LLR: 2.96 (-2.94;2.94) Total: 10218 W: 1932 L: 1775 D: 6511  bench: 4944581,True,1,2013-08-01
RyanTaker,mcostalba,2013-08-13 05:36:33+00:00,Remove Now Unneeded Help Text  With the new automatic setting of split depth instead of a default; the user no longer needs guidance on setting the split point.  Also threads now defaults to one.  No functional change.,True,1,2013-08-01
mcostalba,mcostalba,2013-08-11 05:02:50+00:00,Don't set Search::RootColor in Eval::trace  Search::RootColor is a global parameter set before to start a search; it is not something trace() should change.  This patch allows to add trace() calls; for debugging; inside search itself without altering the bench; and also ensures that the values returned by trace() and evaluate() are fully equivalent.  No functional change.,True,6,2013-08-01
mcostalba,mcostalba,2013-08-10 15:11:13+00:00,Fix GrainSize rounding error  The rounding formula is different between positive and negative scores due to the GrainSize/2 term that is asymmetric.  So use truncation instead of rounding. This guarantees that evaluation is rounded to zero in the same way for both positive and negative scores.  Found with position's flip  bench: 4634244,True,5,2013-08-01
mcostalba,mcostalba,2013-08-09 06:21:55+00:00,Fix 'improving' condition  Because VALUE_NONE is 30002; it happens that after a check the next move is never an improving one.  After this patch bench signature is independent from VALUE_NONE actual value.  bench: 4303194,True,4,2013-08-01
mcostalba,mcostalba,2013-08-08 08:28:48+00:00,Increase LMR when not improving  Apply to LMR the same Eelco's idea applied to move count pruning.  This is the result of a series of attempts started by Thomas Kolarik.  Passed both short TC LLR: 2.95 (-2.94; 2.94) Total: 5675 W: 1241 L: 1117 D: 3317   And long TC: LLR: 2.95 (-2.94; 2.94) Total: 8748 W: 1689 L: 1539 D: 5520  bench: 4356801,True,3,2013-08-01
mcostalba,mcostalba,2013-08-05 12:44:06+00:00,Further tweak Position::flip  No functional change.,True,0,2013-08-01
mcostalba,mcostalba,2013-08-05 10:58:14+00:00,"Rewrite flip() to use FEN string manipulation  Instead of dealing directly with internal parameters just ""flip"" the FEN string and set the position from that.  No functional change.",True,0,2013-08-01
mcostalba,mcostalba,2013-08-03 16:30:43+00:00,Streamline time computation  No functional change.,True,5,2013-08-01
mcostalba,mcostalba,2013-08-03 14:41:18+00:00,"Update polyglot.ini with new ""Min Split Depth"" default  No functional change.",True,5,2013-08-01
dfannius,mcostalba,2013-08-03 14:18:28+00:00,"Refactor do_castle()  Not a real functional change; but bench changed due to different piecelist reordering. To verify it a temporary my canonicalize_rooks function was written as follows. It just ensures that the rook on the ""smaller"" square is listed first.  void Position::canonicalize_rooks(Color c) {    if (pieceCount[c][ROOK] == 2)    {       Square s0 = pieceList[c][ROOK][0];       Square s1 = pieceList[c][ROOK][1];       if (s0 > s1)       {          pieceList[c][ROOK][0] = s1;          pieceList[c][ROOK][1] = s0;          index[s0] = 1;          index[s1] = 0;       }    } }  With this both bench and the test on Chess960 positions  ./stockfish bench 128 1 8 Chess960.epd file > /dev/null  Gives same result.  bench: 4424151",True,5,2013-08-01
zamar,mcostalba,2013-08-02 14:48:25+00:00,"Retire cpu_count()  Set threads number always to 1 at startup and let the user explicitly to chose the number of threads.  Also preserve the useful behavior of automatically set ""Min Split Depth"" according to the requested threads; indeed this parameter is too technical for a casual user; so; when left to zero; we set it on a sensible value.  No functional change",True,4,2013-08-01
mcostalba,mcostalba,2013-08-01 14:32:46+00:00,Further factor out position update code  Along the lines of previous patch.  No functional change,True,3,2013-08-01
dfannius,mcostalba,2013-08-01 13:50:19+00:00,Factor out pieceList updating code  The new Position methods add_piece; move_piece; and remove_piece now manage the member variables pieceList; pieceCount; and index; and 9 blocks of code in Position that used to manipulate those data structures by hand now call the new methods.  There is a slightly slowdown (< 1%) on Clang and on perft; but the cleanup compensates the little speed loss.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2013-08-01
mcostalba,mcostalba,2013-07-31 16:35:52+00:00,Rework Thread hierarchy  Introduce ThreadBase struct that is search agnostic and just handles low level stuff; and derive all the other specialized classes form here.  In particular TimerThread does not hinerits anymore all the search related stuff from Thread.  Also some renaming while there.  Suggested by Steven Edwards  No functional change.,True,2,2013-07-01
mcostalba,mcostalba,2013-07-31 16:35:32+00:00,Fix a race at thread creation  At thread creation start_routine() is called and from there the virtual function idle_loop() because we do this inside Thread c'tor; where the virtual mechanism is disabled; it could happen that the base class idle_loop() is called instead.  The issue happens with TimerThread and MainThread where; at launch; start_routine calls Thread::idle_loop instead of the derived ones.  Normally this bug is hidden because c'tor finishes before start_routine() is actually called in the just created execution thread; but on some platforms and in some cases this is not guaranteed and the engine hangs.  Reported by Ted Wong on talkchess  No functional change.,True,2,2013-07-01
mcostalba,mcostalba,2013-07-29 17:33:30+00:00,Tidy up Position::pretty  No functional change.,True,0,2013-07-01
mcostalba,mcostalba,2013-07-29 17:32:59+00:00,Small renaming  No functional change.,True,0,2013-07-01
mcostalba,mcostalba,2013-07-29 17:01:50+00:00,Speed up move generation  Pass the color as template parameter to generate_all()  Speedup of 1;3% in perft and 2;5% in bench !  No functional change.,True,0,2013-07-01
Kingdefender,mcostalba,2013-07-28 23:21:21+00:00,Increase pruning if evaluation is not improving  Add an additional set of margins to movecount pruning to be used when static evaluation is getting worse than previous move.  Here are the margins table with changing depth (fm0 not improving; fm1 improving):      d: 0; fm0: 3; fm1: 3     d: 1; fm0: 4; fm1: 4     d: 2; fm0: 6; fm1: 6     d: 3; fm0: 7; fm1: 10     d: 4; fm0: 11; fm1: 15     d: 5; fm0: 15; fm1: 21     d: 6; fm0: 21; fm1: 29     d: 7; fm0: 27; fm1: 37     d: 8; fm0: 35; fm1: 47     d: 9; fm0: 42; fm1: 57     d: 10; fm0: 51; fm1: 68     d: 11; fm0: 60; fm1: 81     d: 12; fm0: 70; fm1: 94     d: 13; fm0: 81; fm1: 108     d: 14; fm0: 92; fm1: 123     d: 15; fm0: 104; fm1: 139  Good at both short TC  LLR: 2.97 (-2.94;2.94) Total: 11502 W: 2503 L: 2361 D: 6638  And long TC  LLR: 2.98 (-2.94;2.94) Total: 7189 W: 1421 L: 1277 D: 4491  bench: 4364793,True,6,2013-07-01
mcostalba,mcostalba,2013-07-27 09:34:15+00:00,Annotate an unlikely condition  No functional change.,True,5,2013-07-01
mcostalba,mcostalba,2013-07-27 06:25:45+00:00,Fix an assert in KBK endgame  The endgame king + minor vs king is erroneusly detected as king + minor vs king + minor  Here the fix is to detect king + minor earlier; in particular to add these trivial cases to endgame evaluation functions.  Spotted by Reuven Peleg  bench: 4727133,True,5,2013-07-01
tomtor,mcostalba,2013-07-25 22:12:46+00:00,Rewrite pawn shield and storm code  Passes quickly both short TC: LLR: 2.95 (-2.94;2.94) Total: 5755 W: 1349 L: 1222 D: 3184  And long TC: LLR: 2.95 (-2.94;2.94) Total: 2744 W: 628 L: 505 D: 1611  bench: 4727133,True,3,2013-07-01
mcostalba,mcostalba,2013-07-25 05:44:27+00:00,Fix a typo in bitboard.h  Introduced by previous patch.  Spotted by Joerg Oster  No functional change.,True,3,2013-07-01
R-Peleg,mcostalba,2013-07-24 17:49:17+00:00,Use #ifndef instead of #if !defined  And #ifdef instead of #if defined  This is more standard form (see for example iostream file).  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-07-01
mcostalba,mcostalba,2013-07-24 05:53:32+00:00,Simplify captures ordering  A big simplification and removing of useless code.  Finished at 50% both at short TC (with SPRT) than at long TC at fixed number of games: ELO: -0.14 +-3.4 (95%) LOS: 46.8% Total: 15206 W: 2836 L: 2842 D: 9528  bench: 5059948,True,2,2013-07-01
mcostalba,mcostalba,2013-07-24 05:46:25+00:00,"Revert ""Halve king eval margin""  This reverts commit 4b3a0fdab03a7529ede42891963d3036712a0bd5.  As Gary says: "" It failed when I tried it at long TC previously; and only barely passed this time.  Some anecdotal evidence is that it hurts vs other engines as well (the Lightspeed rating list showed a 16 elo drop from previous best version - still +- 5 error bars on both; but that's still significant)""  I also agree that if we have some doubts (like in this case) it is better to be safe than sorry.  bench: 4615572",True,2,2013-07-01
RyanTaker,mcostalba,2013-07-24 05:41:51+00:00,Tune pawn PSQT values  Reduces the influence of PSQT for entries such as the extended center and the h-file.  Passed both short TC test: LLR: 2.95 (-2.94;2.94) Total: 23919 W: 5207 L: 5029 D: 13683  And long TC one: LLR: 2.96 (-2.94;2.94) Total: 5762 W: 1108 L: 974 D: 3680  Bench: 4617880  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-07-01
R-Peleg,mcostalba,2013-07-22 18:22:40+00:00,Use arrow operator instead of * and .  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2013-07-01
R-Peleg,mcostalba,2013-07-22 18:02:31+00:00,Better condition in is_pseudo_legal()  Simplify occupied destination condition.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2013-07-01
mcostalba,mcostalba,2013-07-21 09:01:24+00:00,Small touches in move generation  No functional change.,True,6,2013-07-01
mcostalba,mcostalba,2013-07-21 07:55:08+00:00,Some renaming in MovePicker  No functional change.,True,6,2013-07-01
mcostalba,mcostalba,2013-07-20 23:04:29+00:00,Rewrite and simplify SEE  This very speed critical code was full of clever (!) tricks and subtle details.  So I have rewritten it in a more straithforward way and; as very often happens; result is even faster than original.  No functional change.,True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 16:45:38+00:00,"Revert ""Fix critical SEE bug (take 2)""  This reverts commit 3e95800814d  For some reason it fails the short TC test: LLR: -2.96 (-2.94;2.94) Total: 20033 W: 4214 L: 4265 D: 11554  bench: 4769737",True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 13:15:31+00:00,"Revert ""Yet another attempt at signature-build""  Still broken on OS X  No functional change.",True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 12:24:47+00:00,"Fix critical SEE bug (take 2)  It is somewhat unbilievable but our SEE is broken !      If the first SEE move is a king capture and square is     defended then SEE continues instead of breaking.      The bug shows only on normal SEE; not see_sign() so     probing with a:      dbg_hit_on_c(slIndex==1; captured == KING);      reports just a tiny:      Total 3465656 Hits 6646 hit rate (%) 0      Bug was there since Retire seeValues[] and move PieceValue[] out of Position of 26/6/2011 (!)     although for some reason didn't show immediately; indeed the     bougous patch was a ""No functional change"" (!!)      bench: 4699504",True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 12:20:33+00:00,Revert all the SEE stuff  The speed up seems to introduce some functionality change.  Revert to original master for now.  bench: 4769737,True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 12:05:04+00:00,Yet another attempt at signature-build  This one should work on all flavours of sed  Suggested by by Louis Zulli  No functional change.,True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 11:37:12+00:00,"Fix critical SEE bug  It is somewhat unbilievable but our SEE is broken !  If the first SEE move is a king capture and square is defended then SEE continues instead of breaking.  The bug shows only on normal SEE; not see_sign() so probing with a:  dbg_hit_on_c(slIndex==1; captured == KING);  reports just a tiny:  Total 3465656 Hits 6646 hit rate (%) 0  Bug was there since 351ef5c85b6d4b9c71e9da of 26/6/2011 (!) although for some reason didn't show immediately; indeed the bougous patch was a ""No functional change"" (!!)  bench: 4793754",True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 10:34:35+00:00,Speedup see()  And rename next_attacker() SEE helper  This very simple patch is able to speed up bench run of almost 2% !  No functional change.,True,5,2013-07-01
mcostalba,mcostalba,2013-07-20 00:38:14+00:00,Fix signature-build under OSX  On OS X when you use -i an extension for the in-place substitution a backup files is required.  http://stackoverflow.com/questions/4247068/sed-command-failing-on-mac-but-works-on-linux  So rewrite to make sed flushing sign.txt in one go and avoid using -i option.  Reported by Louis Zulli  No functional change.,True,5,2013-07-01
R-Peleg,mcostalba,2013-07-19 15:07:54+00:00,Microptimize gives_check() for castling case  Without patch we have 333198 nps; with patch 334249.  A very small +0.3%; not a lot manily becuase this is a side path that is taken very few times.  Anyhow idea is correct becuase first 'quick' condition has an hit rate of about 95%.  No functional change.,True,4,2013-07-01
mcostalba,mcostalba,2013-07-19 09:13:18+00:00,Small simplification in space eval scoring  No functional change.,True,4,2013-07-01
mcostalba,mcostalba,2013-07-19 08:27:58+00:00,Rename MoveStack to ExtMove  Stack has no meaning here; while ExtMove (extended move); better clarifies that we have a move + a score.  No functional change.,True,4,2013-07-01
mcostalba,mcostalba,2013-07-19 07:37:31+00:00,Better document what we skip when in check  No functional change.,True,4,2013-07-01
R-Peleg,mcostalba,2013-07-19 06:16:39+00:00,Halve king eval margin  But still keep the same original margin for score.  Passed both short TC test LR: 2.95 (-2.94;2.94) Total: 3710 W: 845 L: 726 D: 2139  And long TC LLR: 2.95 (-2.94;2.94) Total: 57859 W: 10939 L: 10532 D: 36388  bench: 4769737  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2013-07-01
mcostalba,mcostalba,2013-07-15 19:39:06+00:00,Drop grep and tr dependency in Makefile  Use only sed to get the bench signature.  No functional change.,True,0,2013-07-01
mcostalba,mcostalba,2013-07-15 19:09:06+00:00,"Don't use __builtin_expect  Partially revert previous patch and use unlikey() just as code annotation.  Actually it is better to rely on a profiler for branch prediction:  http://blog.man7.org/2012/10/how-much-do-builtinexpect-likely-and.html  ""In fact; even when only one in ten thousand values is nonzero; we're still at only roughly the break-even point""  No functional change;",True,0,2013-07-01
mcostalba,mcostalba,2013-07-15 19:01:02+00:00,Better annotate unlikely conditions  And in case of gcc we win also a small speed optimization due to better branch prediction.  No functional change.,True,0,2013-07-01
R-Peleg,mcostalba,2013-07-15 18:40:49+00:00,Simplify a condition in refutes()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2013-07-01
mcostalba,mcostalba,2013-07-14 10:23:28+00:00,Update 'make help'  No functional change.,True,6,2013-07-01
mcostalba,mcostalba,2013-07-14 09:57:06+00:00,Add signature-profile-build make target  Extend patch 3f64a2af6a7dac4 to profile builds.  here the make command is:  make signature-profile-build ARCH=xxx COMP=xxx  No functional change.,True,6,2013-07-01
mcostalba,mcostalba,2013-07-14 09:13:13+00:00,Retire engine Tag  It is somewhat redundant and could make SF name too long; so use just Version; in case of a signature build Version will be set to 'sig-xxx' otherwise; if left empty; we fall back on usual date stamp.  No functional change.,True,6,2013-07-01
mcostalba,mcostalba,2013-07-14 08:59:25+00:00,Add signature-build make target  When compiling with:  make signature-build ARCH=xxx COMP=xxx  After binary has been roduced; it will be run to get the signature 'stockfish bench' and this number will be used as Version; so that it will be easy to track the original sources from a binary.  No functinal change.,True,6,2013-07-01
mcostalba,mcostalba,2013-07-13 21:13:30+00:00,Fix build on Intel compiler  Due to a strange issue (bug?) the ternary operator does not return a BitCountType for icc; so revert to the expression used before bcbc9bfd1f5efeaa3  No functional change.,True,5,2013-07-01
mcostalba,mcostalba,2013-07-13 16:01:13+00:00,Fully qualify memset and memcpy  And other trivial touches.  Ispired by Lucas's DiscoCheck  No functional change.,True,5,2013-07-01
tomtor,mcostalba,2013-07-13 16:01:03+00:00,Retire enoughMaterial + lower trapped rook threshold  Here speed up is the name of the game.  Speed up is gained:  - Removing the useless enoughMaterial code  - Limiting trapped rook evaluation to where it counts  Tested at long TC: LLR: 2.97 (-2.94;2.94) Total: 10061 W: 1948 L: 1790 D: 6323  bench: 4558173,True,5,2013-07-01
mcostalba,mcostalba,2013-07-13 14:57:03+00:00,"A useless assignment found by Clang�s static analyzer  Warning is: ""Value stored to 'xxx' is never read"" and it is raised in SpNode case.  No functional change.",True,5,2013-07-01
mcostalba,mcostalba,2013-07-13 11:03:09+00:00,Fix build with MSVC 2013  Also add an assert hinted by MSVC code analysis tool.  No functional change.,True,5,2013-07-01
mcostalba,mcostalba,2013-07-13 05:43:50+00:00,Fix printing of PV info: take 2  Now last PV line is printed twice; fix that.  No functional change.,True,5,2013-07-01
mcostalba,mcostalba,2013-07-12 21:42:42+00:00,Fix printing of PV info  It was erroneusly skipped after the aspiration window rework.  Reported by Eelco.  No functional change.,True,4,2013-07-01
mcostalba,mcostalba,2013-07-11 14:07:10+00:00,Rename some UCI options  Thanks to Don; Miguel; Louis and the other people of talkchess forum for the suggestion:  http://www.talkchess.com/forum/viewtopic.php?t=48612  Also sync polyglot.ini with current UCI options  No functional change.,True,3,2013-07-01
mcostalba,mcostalba,2013-07-11 05:23:48+00:00,Fix a crash with depth 1 perft  Bug recently introduced in e215a88cddd16e09  No functional change.,True,3,2013-07-01
mcostalba,mcostalba,2013-07-09 17:03:11+00:00,Don't IID when in check also in PvNodes  This tiny functional change allows to nicely simplify things.  Performed at 50% in short TC: LLR: -0.43 (-2.94;2.94) Total: 46406 W: 9681 L: 9565 D: 27160  And succesfully passed long TC reverse test: LLR: -2.95 (-2.94;2.94) Total: 4945 W: 858 L: 937 D: 3150  bench: 4507230,True,1,2013-07-01
mcostalba,mcostalba,2013-07-09 06:04:12+00:00,Revert previous patch  Unfortunatly a reverse test at long TC failed:  master^ vs master LLR: 1.37 (-2.94;2.94) Total: 33682 W: 6294 L: 6071 D: 21317  So becuase short TC score is 50% there is a good possibility patch is not scalable.  So revert it.  bench: 4507288,True,1,2013-07-01
mcostalba,mcostalba,2013-07-08 05:23:30+00:00,"Simplify ""fail high upon reduction"" in null search  Do not use threat move to detect the condition. This let us to retire the big allows() function.  Test at short TC was within 50% score: LLR: -2.95 (-2.94;2.94) Total: 38272 W: 7941 L: 7940 D: 22391  To be verified with reverse long TC  bench: 4191565",True,0,2013-07-01
mcostalba,mcostalba,2013-07-07 11:39:58+00:00,Skip node-level cut-off tests when in check  No functional change.,True,6,2013-07-01
mcostalba,mcostalba,2013-07-03 16:59:23+00:00,Simplify aspiration window code  Here the main difference is that now we center aspiration window on last returned score. This allows to simplify handling of mate scores.  We have done a reversed SPRT tests; where we wanted to verify if master is stronger than this patch.  Long TC: master vs this patch (reverse test) LLR: -2.95 (-2.94;2.94) Total: 37992 W: 7012 L: 6920 D: 24060  bench: 4507288,True,2,2013-07-01
mcostalba,mcostalba,2013-07-03 16:58:23+00:00,Workaround github issue  Temporary revert aspiration window patch so to be visible to everybody: it will be re-applied with next patch  No functional change (together with next one),True,2,2013-07-01
mcostalba,mcostalba,2013-07-03 07:06:03+00:00,Simplify aspiration window code  Here the main difference is that now we center aspiration window on last returned score. This allows to simplify handling of mate scores.  We have done a reversed SPRT tests; where we wanted to verify if master is stronger than this patch.  Long TC: master vs this patch (reverse test) LLR: -2.95 (-2.94;2.94) Total: 37992 W: 7012 L: 6920 D: 24060  bench: 4507288,True,2,2013-07-01
mcostalba,mcostalba,2013-07-03 06:21:21+00:00,Disable flto when debugging  Link-time optimization does not work well with generation of debugging information:  http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html  Reported by Louis Zulli  No functional change.,True,2,2013-07-01
mcostalba,mcostalba,2013-07-02 18:12:57+00:00,"Revert ""Remove confusing optimization""  This reverts commit e05c80a08859f6c4f0f599ca0b262ced00ad66fe.  we gain a speed up of 1.5% under gcc !  No functional change.",True,1,2013-07-01
mcostalba,mcostalba,2013-07-02 05:27:08+00:00,Merge branch 'master' into aspiration  bench: 4507288,True,1,2013-07-01
mcostalba,mcostalba,2013-07-02 05:25:39+00:00,"Revert ""Increase earlier aspiration window size""  This reverts commit b88bc7b7667fc6ddbfc7412fb2c0bfc13e3bf11c.",True,1,2013-07-01
mcostalba,mcostalba,2013-07-02 05:24:17+00:00,Entering a pawn endgame is no more dangerous  A simplification of the 'dangerous' definition.  Seems neutral at reverse test at long TC  master vs patch LLR: -2.96 (-2.94;2.94) Total: 16974 W: 3122 L: 3139 D: 10713  bench: 4689029,True,1,2013-07-01
mcostalba,mcostalba,2013-07-01 17:29:38+00:00,Increase earlier aspiration window size  bench: 4377851,True,0,2013-07-01
mcostalba,mcostalba,2013-07-01 17:25:23+00:00,Merge branch 'master' into aspiration,True,0,2013-07-01
mcostalba,mcostalba,2013-06-30 11:12:04+00:00,Fix a stale comment  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-30 10:49:39+00:00,Simplify search results update  Also some rename while there.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-30 09:35:53+00:00,Reorder conditions according to their frequency  This should minimize useless tests.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-30 09:14:02+00:00,Center aspiration window on last returned score  bench: 4428212,True,6,2013-06-01
mcostalba,mcostalba,2013-06-30 08:54:09+00:00,Simplify aspiration window loop  Don't open the window in case we find a mate score: this will be takes care with next patch.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-29 09:23:07+00:00,Use calloc() in TranspositionTable::set_size()  Function calloc() already initializes memory to zero; so avoid calling clear() afterwards.  Also some renaming while there (inspired by DiscoCheck).  No functional change.,True,5,2013-06-01
mcostalba,mcostalba,2013-06-23 11:19:03+00:00,Fix some stale comments  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-23 11:13:13+00:00,Move SquareDistance[] to bitboard.cpp  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-23 09:30:40+00:00,Don't explicitize enum values when not needed  Compiler will chose the correct values in sequential order for you.  Also move file and rank bitboards definitions to bitboard.h  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-23 08:16:43+00:00,Retire in_front_bb(Color c; Square s) overload  Explciitly call rank_of() in the few places where it is used.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-23 08:09:24+00:00,Retire ThisAndAdjacentFilesBB[]  It is unused. Also renamed attack_span_mask to pawn_attack_span  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-23 07:03:40+00:00,Simplify hidden_checkers()  De-templetize and pass color as function argument. No speed change.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-22 10:46:03+00:00,Name functions along corresponding UCI commands  No functional change.,True,5,2013-06-01
mcostalba,mcostalba,2013-06-21 07:10:03+00:00,Micro-optimize perft  Avoid to call perft function when we just need to count moves; at leaf nodes.  Speed up of almost 2%  No functional change.,True,4,2013-06-01
RyanTaker,mcostalba,2013-06-19 05:22:10+00:00,Include file attacks in 'major on pawn'  Passed both short TC: LLR: 2.97 (-2.94;2.94) Total: 57846 W: 12248 L: 11974 D: 33624  And long one: LLR: 2.95 (-2.94;2.94) Total: 9181 W: 1732 L: 1581 D: 5868  bench: 4609948,True,2,2013-06-01
R-Peleg,mcostalba,2013-06-17 16:12:15+00:00,Remove confusing optimization  Here we skip the call to pos.attacks_from<ROOK>(s) in the 98% of cases; testing the first 2 members first. Unfortunatly code is a bit triky and not clear. So we give up to the speed optimization in exchange of more code clarity.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2013-06-01
R-Peleg,mcostalba,2013-06-17 16:02:59+00:00,Merge some if statements in pos_is_ok()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2013-06-01
mcostalba,mcostalba,2013-06-17 07:30:59+00:00,Remove redundant condition in probcut  When !ss->skipNullMove it is assured that excludedMove == MOVE_NONE  No functional change.,True,0,2013-06-01
mcostalba,mcostalba,2013-06-16 11:21:10+00:00,Rename piece_count and piece_list  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-16 09:32:10+00:00,Don't calculate pawnsOnSquares twice  And reformat some code while there.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-16 08:40:36+00:00,Use move_pawns() in Pawns::probe  And rename some stuff.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-14 06:27:06+00:00,"Revert ""Reduce more CUT nodes only if parent node is reduced""  This reverts commit d54e8a59551a7ebcbf2c2155dce46c7386b1742a.  It was not proved with SPRT this tweak is stronger. So revert it for now to follow fishtest guidelines.  bench: 5108393",True,4,2013-06-01
mcostalba,mcostalba,2013-06-14 06:21:02+00:00,Fix description of TT entry  It was way outdated and wrong !  No functional change.,True,4,2013-06-01
mcostalba,mcostalba,2013-06-13 18:05:02+00:00,"Reduce more CUT nodes only if parent node is reduced  So when we are doing a LMR search at the parent ALL node.  This patch didn't prove stronger at 60"" TC LLR: -2.97 (-2.94;2.94) Total: 22398 W: 4070 L: 4060 D: 14268  But; first; it scores at 50%; second (and most important for me) the opposite; i.e. normal reduction when parent node is not reduced; seems very bad: LLR: -2.95 (-2.94;2.94) Total: 7036 W: 1446 L: 1534 D: 4056  According to Don; this idea of increased reduction of CUT nodes works because if parent node is reduced; missing a cut-off due to reduced depth search (meaning position is somehow tricky) forces a full depth research at parent node; giving due insight in this set of sensible positions.  IOW if we expect a node to fail-high at depth n; then we assume it should fail-high also at depth n-1; if this doesn't happen it means position is tricky enough to deserve a research at depth n+1.  bench: 4687419",True,3,2013-06-01
mcostalba,mcostalba,2013-06-13 17:50:32+00:00,Reduce more CUT nodes  We got a good result from this tweak; in line with what was already found by Don Dailey.  At short TC: LLR: 2.95 (-2.94;2.94) Total: 13097 W: 2742 L: 2598 D: 7757  At long TC: LLR: 2.97 (-2.94;2.94) Total: 7281 W: 1408 L: 1265 D: 4608  bench: 5108393,True,3,2013-06-01
mcostalba,mcostalba,2013-06-13 17:46:49+00:00,"Introduce Cut/All node definitions  Follow Don Dailey definition of cut/all node:  ""If the previous node was a cut node; we consider this an ALL node. The only exception is for PV nodes which are a special case of ALL nodes. In the PVS framework; the first zero width window searched from a PV node is by our definition a CUT node and if you have to do a re-search then it is suddenly promoted to a PV nodes (as per PVS search) and only then can the cut and all nodes swap positions. In other words; these internal search failures can force the status of every node in the subtree to swap if it propagates back to the last PV nodes.""  http://talkchess.com/forum/viewtopic.php?topic_view=threads&p=519741&t=47577  With this definition we have an hit rate higher than 90% on:      if (!PvNode && depth > 4 * ONE_PLY)         dbg_hit_on_c(cutNode; (bestValue >= beta));  And an hit rate of just 28% on:      if (!PvNode && depth > 4 * ONE_PLY)         dbg_hit_on_c(!cutNode; (bestValue >= beta));  No functional change.",True,3,2013-06-01
mcostalba,mcostalba,2013-06-13 05:42:43+00:00,Don't use std::vector::data()  It is a C++11 only function.  Reported by Eelco.  No functional change.,True,3,2013-06-01
mcostalba,mcostalba,2013-06-09 21:36:46+00:00,Fix again early stop ss pointer  Fix was wrong becuase search starts from ss+1; code is a bit tricky here; so rewrite in a way to be more easy to read and understand.  Spotted by Eelco.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 21:27:07+00:00,Don't need to expose namespace Zobrist  It can be local to position.cpp  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 11:54:38+00:00,Zobrist::init() should be Position::init()  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 11:10:21+00:00,Convert pieceSquareTable to 3 dimensions  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 10:56:05+00:00,More consistent 'piece' variable naming  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 10:44:04+00:00,Introduce operator~(Piece c)  Small syntactic sugar to reverse piece color.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 10:32:16+00:00,Retire psq_delta()  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 09:52:39+00:00,Use alpha instead of beta-1  It is more directly related to a fail-low.  No functional change.,True,6,2013-06-01
mcostalba,mcostalba,2013-06-09 09:01:11+00:00,Fix incorrect 'ss' pointer in early stop check  The exclusion search used to verify one move is much better than other shall be called with 'ss' and not 'ss+1'  No functional change.,True,6,2013-06-01
dorzechowski,mcostalba,2013-06-08 09:01:28+00:00,Fix a typo  No functional change.,True,5,2013-06-01
mcostalba,mcostalba,2013-06-08 08:56:20+00:00,Fix search log when using skills  In case of we pick a sub-optimal move be sure to print this; and not the best one on seach log file.  Bug spotted by Guenther Demetz.  No functional change.,True,5,2013-06-01
mcostalba,mcostalba,2013-06-01 14:19:42+00:00,Fix a crash when 'go' multiple times  Search is started after setting a position and issuing UCI 'go' command. Then if we stop the search and call 'go' again without setting a new position it is assumed that the previous setup is preserved; but this is not the case because what happens is that SetupStates is reset to NULL; leading to a crash as soon as RootPos.is_draw() is called because st->previous is now stale.  UCI protocol is not very clear about requiring that a position is setup always before launching a search; so here we easy the life of GUI developers assuming that the current state is preserved after returning from a 'stop' command.  Bug reported by Gregor Cramer.  No functional change.,True,5,2013-06-01
mcostalba,mcostalba,2013-06-01 11:17:39+00:00,Assorted renaming in evaluation  And some reshuffle too.  No functional change.,True,5,2013-06-01
jundery,mcostalba,2013-05-31 07:17:48+00:00,Passed pawn tuning  A small number of tests with simulated annealing at 15s indicated these values may be better  And this is verified at long 60+0.05 TC LLR: 2.95 (-2.94;2.94) Total: 40658 W: 7821 L: 7501 D: 25336  bench: 4931544,True,4,2013-05-01
mcostalba,mcostalba,2013-05-27 15:43:38+00:00,Shrink engine UCI name  Some GUI have problems with long names.  Reported by George Speight.  No functional change.,True,0,2013-05-01
mcostalba,mcostalba,2013-05-25 11:14:41+00:00,Add Pawn Structure also to polyglot.ini  No functional change.,True,5,2013-05-01
mcostalba,mcostalba,2013-05-25 10:38:14+00:00,"Re-add ""Pawn Structure"" UCI option  And reshuffle the code to not special case this parameter.  No functional change.",True,5,2013-05-01
mcostalba,mcostalba,2013-05-25 10:01:50+00:00,More uniform tracing code  No functional change.,True,5,2013-05-01
uriblass,mcostalba,2013-05-23 15:59:39+00:00,"Bunch of 3 small patches  This patch is the sum of:  - Grainsize of 4 instead of 8  - Removing ""depth < DEPTH_ZERO""  - Change DEPTH_QS_RECAPTURES = -5 to -7  All the patches individually failed to pass SPRT but scored around 50%.  Together they pass easily short TC: LLR: 2.96 (-2.94;2.94) Total: 4429 W: 964 L: 844 D: 2621  And with some difficult long TC of 60+0.05: LLR: 2.95 (-2.94;2.94) Total: 64133 W: 11968 L: 11532 D: 40633  bench: 4821467",True,3,2013-05-01
mcostalba,mcostalba,2013-05-19 20:00:49+00:00,Microptimize MoveList loop  Add MOVE_NONE at the tail; this allows to loop across MoveList checking for *it != MOVE_NONE; and because *it is used imediately after compiler is able to reuse it.  With this small patch perft speed increased of 3%  And it is also a semplification !  No functional change.,True,6,2013-05-01
mcostalba,mcostalba,2013-05-19 19:41:56+00:00,Delay killers[] initialization  Most of the time we cut-off earlier; at captures; so this results in useless work.  There is a small functionality change becuase 'ss' can change from MovePicker c'tor to when killers are tried due; for instance; to singular search.  bench: 4603795,True,6,2013-05-01
mcostalba,mcostalba,2013-05-19 19:36:23+00:00,Reduce countermoves less in LMR  Passed SPRT for both short TC 15+0.05: LLR: 2.95 (-2.94;2.94) Total: 17724 W: 3756 L: 3598 D: 10370  And long TC 60+0.05: LLR: 2.95 (-2.94;2.94) Total: 22672 W: 4232 L: 4011 D: 14429  bench: 4418832,True,6,2013-05-01
mcostalba,mcostalba,2013-05-19 11:28:25+00:00,Mimic an iterator for looping across MoveList  Seems more conventional.  No functional change.,True,6,2013-05-01
zamar,mcostalba,2013-05-16 14:20:50+00:00,"Use two counter moves instead of one  Very good at long 60""+0.05 TC LLR: 2.95 (-2.94;2.94) Total: 5954 W: 1151 L: 1016 D: 3787  [edit: slightly changed form original patch to avoid useless loop  across killers when killer is MOVE_NONE]  bench: 4327405",True,3,2013-05-01
mcostalba,mcostalba,2013-05-15 18:59:56+00:00,"Rename Refutation to Countermove  Use proper naming according to:  http://chessprogramming.wikispaces.com/Countermove+Heuristic  The name of this idea is ""Countermove Heuristic"" and was first introduced by Jos Uiterwijk in 1992  No functional change.",True,2,2013-05-01
uriblass,mcostalba,2013-05-14 22:34:05+00:00,Increased mobility array  Performed more or less well at short TC LLR: 2.95 (-2.94;2.94) Total: 50517 W: 9815 L: 9574 D: 31128  And a bit better at long TC LLR: 2.96 (-2.94;2.94) Total: 15564 W: 2805 L: 2624 D: 10135  bench: 4375253,True,1,2013-05-01
mcostalba,mcostalba,2013-05-14 22:06:11+00:00,Revert trapped rook bug fix  It seems that do  not limiting checking the trapped rook only on rank 1 improves the score.  At long TC LLR: 2.97 (-2.94;2.94) Total: 6581 W: 1346 L: 1204 D: 4031  bench: 4985012,True,1,2013-05-01
glinscott,mcostalba,2013-05-14 21:52:44+00:00,Minor bugfixes to refutation table  Don't update refutation table in case of previous move is MOVE_NULL or MOVE_NONE and don't try refutation if is already a killer move.  Pass both short TC LLR: 2.96 (-2.94;2.94) Total: 4310 W: 953 L: 869 D: 2488  And long one LLR: 2.95 (-2.94;2.94) Total: 6707 W: 1254 L: 1184 D: 4269  bench: 4785954,True,1,2013-05-01
mcostalba,mcostalba,2013-05-13 18:42:44+00:00,Reformat previous patch  No functional change.,True,0,2013-05-01
zamar,mcostalba,2013-05-13 17:48:41+00:00,Enable refuation table  Very good result both at short TC 15+0.05 LLR: 2.95 (-2.94;2.94) Total: 2803 W: 596 L: 483 D: 1724  And at long TC 60+0.05 LLR: 2.95 (-2.94;2.94) Total: 2862 W: 548 L: 431 D: 1883  bench: 4329221,True,0,2013-05-01
zamar,zamar,2013-05-12 20:21:46+00:00,Simple always overwrite Refutation table,True,6,2013-05-01
mcostalba,mcostalba,2013-05-11 09:49:44+00:00,Use Them instead of ~Us  Unortunatly we have no guarantee that the call to operator~(Color c) is resolved at compile time.  Perhaps the solution would be to use C++11 const_expr; but for now simply use the good old-style ternary operator that works as expected.  No functional change.,True,5,2013-05-01
mcostalba,mcostalba,2013-05-11 09:13:06+00:00,Some code reformat in evaluate_pieces  No functional change.,True,5,2013-05-01
mcostalba,mcostalba,2013-05-09 17:09:51+00:00,Simplify previous patch  No functional change.,True,3,2013-05-01
mcostalba,mcostalba,2013-05-08 21:04:11+00:00,Merge 'passed_pawns' tweaks  Good at both short and long TC  15+0.05 LLR: 2.96 (-2.94;2.94) Total: 28220 W: 5531 L: 5349 D: 17340  TC 60+0.05 LLR: 2.95 (-2.94;2.94) Total: 12612 W: 2221 L: 2057 D: 8334  bench: 4857939,True,2,2013-05-01
R-Peleg,mcostalba,2013-05-05 20:51:18+00:00,Avoid explicit bitwise operators  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2013-05-01
jundery,jundery,2013-05-05 17:12:04+00:00,Passed pawn eval  Use a stepped function to evaluate bonuses and add the bonus to the middle game  bench: 4857939,True,6,2013-05-01
mcostalba,mcostalba,2013-05-05 11:46:26+00:00,Merge increased 'movecount' pruning  Good at both short and long TC  15+0.05 LLR: 2.95 (-2.94;2.94) Total: 13814 W: 2731 L: 2588 D: 8495  TC 60+0.05 LLR: 2.95 (-2.94;2.94) Total: 18013 W: 3136 L: 2946 D: 11931  bench: 4306557,True,6,2013-05-01
mcostalba,mcostalba,2013-05-05 10:31:32+00:00,Simplify previous condition  No functional change.,True,6,2013-05-01
mcostalba,mcostalba,2013-05-05 10:27:11+00:00,Fix trapped rook condition  A rook is trapped if on rank 1 as is the king. Currently the condition aloows for the rook to be also in front of the pawns as long as king is on first rank.  Verified with short TC test: LLR: -1.71 (-2.94;2.94) Total: 23234 W: 4317 L: 4317 D: 14600  Here what it counts is that after 23K games result is equal.  bench: 4696542,True,6,2013-05-01
mcostalba,mcostalba,2013-05-04 10:15:31+00:00,Further simplify previous patch  No functional change.,True,5,2013-05-01
R-Peleg,mcostalba,2013-05-04 09:13:22+00:00,Merge some conditions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2013-05-01
mcostalba,mcostalba,2013-05-03 13:24:54+00:00,Drop some redundant defined(_WIN64)  When it is already defined(_WIN32).  According to Microsoft documentation: http://msdn.microsoft.com/en-us/library/b0084kay.aspx  _WIN32 Defined for applications for Win32 and Win64. Always defined.  _WIN64 Defined for applications for Win64.  Patch suggested by Joona.  No functional change.,True,4,2013-05-01
mcostalba,mcostalba,2013-05-03 08:26:03+00:00,Print time and node count before search ends  This info is normally printed together with PV info in uci_pv() but when search is stopped; for instance when max search time is reached; uci_pv is not called and we miss this bits.  Suggested by gravy_train  No functional change.,True,4,2013-05-01
mcostalba,mcostalba,2013-05-03 08:12:31+00:00,"Merge mobility area tweak  A nice improvment.  Was good at 15+0.05 LLR: 2.96 (-2.94;2.94) Total: 10731 W: 2176 L: 2040 D: 6515  And at 60""+0.05 LLR: 2.96 (-2.94;2.94) Total: 10601 W: 1968 L: 1810 D: 6823  bench: 4676606",True,4,2013-05-01
glinscott,glinscott,2013-05-02 18:37:55+00:00,Fix rounding issue,True,3,2013-05-01
glinscott,glinscott,2013-05-02 13:47:34+00:00,More aggressive move count pruning,True,3,2013-05-01
mcostalba,mcostalba,2013-05-02 07:38:23+00:00,Another take at TT alignment  This time revert to original version but using uintptr_t instead of size_t  Suggested by Lucas.  No functional change.,True,3,2013-05-01
mcostalba,mcostalba,2013-05-01 21:42:16+00:00,"Re-add ""Cache line aligned TT""  But this time do not play with pointers; in particular do not assume that size_t is an unsigned type of the same width as pointers.  This code should be fully portable.  No functional change.",True,2,2013-05-01
jhellis3,jhellis3,2013-05-01 07:37:50+00:00,Tweak Mobility Area  Only consider pawns and the king as restricting.,True,2,2013-05-01
mcostalba,mcostalba,2013-04-30 18:01:07+00:00,Restore development version  No functional change.,True,1,2013-04-01
mcostalba,mcostalba,2013-04-30 17:42:43+00:00,Stockfish 3  Stockfish bench signature is: 4176431,True,1,2013-04-01
mcostalba,mcostalba,2013-04-30 17:42:21+00:00,"Revert ""Cache line aligned TT""  This reverts commit 083fe5812485597e13943b690cc24a8f25c0d140  It seems to break Android build  No functional change.",True,1,2013-04-01
mcostalba,mcostalba,2013-04-28 22:55:32+00:00,"Temporary revert ""Expose EvalInfo struct to search""  It is not needed for the release and introduces a slowdown; although very small.  Probably it will be readded after the release.  No functional change.",True,6,2013-04-01
mcostalba,mcostalba,2013-04-27 11:08:11+00:00,Fix a 'value > VALUE_INFINITE' assert  This fixes an assert while testing with debug on.  Assert was due to static null pruning returning value  eval - futility_margin(depth; (ss-1)->futilityMoveCount)  That was sometimes higher than VALUE_INFINITE triggering an assert at the caller site.  Because eval con be equal to ttValue and anyhow is read from TT that can be corrupted in SMP case; we need to sanity check it before to use.  bench: 4176431,True,5,2013-04-01
mcostalba,mcostalba,2013-04-26 17:38:11+00:00,Cache line aligned TT  Let TT clusters (16*4=64 bytes) to hold on a singe cache line. This avoids the need for the double prefetch.  Original patches by Lucas and Jean-Francois that has also tested on his AMD FX:  BIG HASHTABLE  ./stockfish bench 1024 1 18 > /dev/null  Before: 1437642 nps 1426519 nps 1438493 nps  After: 1474482 nps 1476375 nps 1475877 nps  SMALL HASHTABLE  ./stockfish bench 128 1 18 > /dev/null  Before: 1435207 nps 1435586 nps 1433741 nps  After: 1479143 nps 1471042 nps 1472286 nps  No functional change.,True,4,2013-04-01
mcostalba,mcostalba,2013-04-26 10:14:01+00:00,Fix a crash introduced few days ago  Crash is due to uninitialized ss->futilityMoveCount that when happens to be negative; yields to an out of range access in futility_margin().  Bug is subtle because it shows itself only in SMP case. Indeed in single thread mode we only use the  Stack ss[MAX_PLY_PLUS_2];  Allocated at the begin of id_loop() and due to pure (bad) luck; it happens that for all the MAX_PLY_PLUS_2 elements; ss[i].futilityMoveCount >= 0  Note that the patch does not prevent futilityMoveCount to be overwritten after; for instance singular search or null verification; but to keep things readable and because the effect is almost unmeasurable; we here prefer a slightly incorrect but simpler patch.  bench: 4311634,True,4,2013-04-01
mcostalba,mcostalba,2013-04-25 19:52:26+00:00,Store Eval::Info in Search::Stack  Instead of a pointer. This should fix the issue of remaining with a stale pointer when for instance calling IID; but also null search verification; singular search and razoring where we call search with the same ss pointer. In this case ss->ei is overwritten in the search() call and upon returning remains stale.  This patch could have a performance hit because Eval::Info is big (176 bytes) and during splitting we copy 4 ss entries.  On the good side; this patch is a clean solution.  Proposed by Gary.  No functional change.,True,3,2013-04-01
mcostalba,mcostalba,2013-04-25 10:57:37+00:00,Expose EvalInfo struct to search  Allow to use EvalInfo struct; populated by evaluation(); in search.  In particular we allocate Eval::Info on the stack and pass a pointer to this to evaluate().  Also add to Search::Stack a pointer to Eval::Info; this allows to reference eval info of previous/next nodes.  WARNING: Eval::Info is NOT initialized and is populated by evaluate(); only if the latter is called; and this does not happen in all the code paths; so care should be taken when accessing this struct.  No functional change.,True,3,2013-04-01
RyanTaker,mcostalba,2013-04-25 10:13:17+00:00,Increase rook/queen on 7th bonus  Shows an increase at 15+0.05 LLR: 3.01 (-2.94;2.94) Total: 20450 W: 4091 L: 3927 D: 12432  And at 60+0.05 LLR: 2.97 (-2.94;2.94) Total: 61432 W: 10849 L: 10441 D: 40142  bench: 4493356  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2013-04-01
mcostalba,mcostalba,2013-04-25 10:05:00+00:00,Merge Joona's increased static null pruning  The idea is to fail high more easily in static null test if in the parent node we are already very deep in the move list; so the propability to fail high there is very low.  [edit: I have slightly changed the functionality moving  ss->futilityMoveCount = moveCount;  At the end of the pruning code; this should not affect ELO in anyway; but makes code more natural and logic]  Test with SPRT is good at 15+0.05 LLR: 2.96 (-2.94;2.94) Total: 50653 W: 10024 L: 9780 D: 30849  And at 60+0.05 LLR: 2.97 (-2.94;2.94) Total: 40799 W: 7227 L: 6921 D: 26651  bench: 4530093,True,3,2013-04-01
mcostalba,mcostalba,2013-04-25 08:56:56+00:00,Fix cpu_count() on some platforms  When we use sysconf(_SC_NPROCESSORS_ONLN) to get number of cores; we have to include sysconf library that is unistd.h  Sometimes it happens to work just becuase unistd.h indirectly included by some other libraries; but not always.  Reported and fixed by Eyal BD  No functional change.,True,3,2013-04-01
zamar,zamar,2013-04-23 06:26:36+00:00,Fix potential overflow,True,1,2013-04-01
zamar,zamar,2013-04-21 13:53:27+00:00,More aggressive post-futility pruning,True,6,2013-04-01
mcostalba,mcostalba,2013-04-19 08:31:18+00:00,Skip a couple of popcount in previous patch  And some little tidy up  No functional change.,True,4,2013-04-01
mcostalba,mcostalba,2013-04-19 07:36:00+00:00,"Merge Joona's bishop+pawn tweak  The idea is to penalize a bishop in case of its pawns are on the same colored squares.  Good at short 15""+0.05 TC LLR: 2.95 (-2.94;2.94) Total: 4252 W: 925 L: 806 D: 2521  And at longer 60""+0.05 TC LLR: 2.95 (-2.94;2.94) Total: 15006 W: 2743 L: 2564 D: 9699  bench: 5274705",True,4,2013-04-01
zamar,zamar,2013-04-17 06:58:59+00:00,Try more aggressive version,True,2,2013-04-01
zamar,zamar,2013-04-16 20:20:31+00:00,Give a small penalty for bishop for each pawn on the same colored square,True,1,2013-04-01
mcostalba,mcostalba,2013-04-14 21:29:25+00:00,Skip a redundant check  Spotted by Joona  No functional change.,True,6,2013-04-01
mcostalba,mcostalba,2013-04-10 20:23:48+00:00,De-templetize Position::is_draw()  Now that we always check for repetition we don't need a template anymore.  No functional change.,True,2,2013-04-01
zamar,mcostalba,2013-04-10 20:20:40+00:00,Always check repetition  It seems stronger both at fast 15+0.05 TC with fixed game number test: ELO: 2.74 +-2.7 (95%) LOS: 97.6% Total: 24000 W: 4698 L: 4509 D: 14793  And also at long 60+0.05 TC with SPRT LLR: 3.05 (-2.94;2.94) Total: 38986 W: 6845 L: 6547 D: 25594  bench: 5157061,True,2,2013-04-01
mcostalba,mcostalba,2013-04-09 21:32:06+00:00,Simplify and speed up previous patch  Use an optinal argument instead of a template parameter. Interestingly; not only is simpler; but also faster; perhaps due to less L1 instruction cache pressure because we don't duplicate the very used SEE code path.  No functional change.,True,1,2013-04-01
zamar,mcostalba,2013-04-09 21:31:57+00:00,Document asymmetric SEE pruning trick  Here are the tests:  sprt @ 60+0.05 ELO: 3.53 +-2.8 (95%) LOS: 99.3% Total: 18794 W: 3098 L: 2907 D: 12789  16000 @ 60+0.05 ELO: 1.39 +-3.1 (95%) LOS: 81.0% Total: 16000 W: 2689 L: 2625 D: 10686  16000 @ 15+0.05 ELO: 2.82 +-3.3 (95%) LOS: 95.1% Total: 16000 W: 3148 L: 3018 D: 9834  No functional change  Signature: 4969307,True,1,2013-04-01
zamar,mcostalba,2013-04-09 21:29:58+00:00,Don't treat king safety differently in AnalysisMode  Rationale:  - Current settings seem to make engine *significantly* weaker in analysis mode. - In practice this setting only has effect when king safety scores are high. - Even in analysis mode its far more important to know if one side is getting mated; rather than get evaluation correct with 1cp accuracy.  No functional change,True,1,2013-04-01
mcostalba,mcostalba,2013-04-09 21:29:58+00:00,Rescale UCI parameters to 100  And correspondingly modify internal ones to compensate it.  No functional change.,True,1,2013-04-01
mcostalba,mcostalba,2013-04-09 21:29:58+00:00,"Tweak some UCI parameters  According to Jean-Paul this setup should be stronger than default.  And SPRT test seems to confirm it:  At fast TC 15""+0.05 ELO: 3.33 +-2.7 (95%) LOS: 99.2% Total: 25866 W: 5461 L: 5213 D: 15192  At longer TC 60""+0.05 ELO: 7.27 +-5.0 (95%) LOS: 99.8% Total: 6544 W: 1212 L: 1075 D: 4257  bench: 5473339  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2013-04-01
mcostalba,mcostalba,2013-04-09 21:29:58+00:00,Re-add 'Cowardice' and 'Aggressiveness' UCI options  I have lost my bet with Jean-Paul; so now I re-add the two options...and I am glad of it :-)  No functional change.,True,1,2013-04-01
mcostalba,mcostalba,2013-04-09 21:29:58+00:00,"Increase null verification threshold to 12 plies  Increasing depth limit to 10 plies seems stronger after 16K games at 15""+0.05 (ELO: +3.56) and also repeating the test at 60""+0.05 TC:  ELO: 2.08 +-3.1 (95%) LOS: 90.9% Total: 16000 W: 2641 L: 2545 D: 10814  Moreover setting the limit to 12 is proved stronger then limit set to 10 by direct SPRT test at 15""+0.05:  ELO: 2.56 +-2.0 (95%) LOS: 99.5% Total: 46568 W: 9240 L: 8897 D: 28431  So we directly set the limit to 12; the strongest setup.  bench: 4361224",True,1,2013-04-01
zamar,zamar,2013-04-05 18:05:32+00:00,Make use of asymmetric SEE,True,4,2013-04-01
zamar,zamar,2013-04-05 18:05:32+00:00,Fix a silly bug,True,4,2013-04-01
zamar,zamar,2013-04-05 18:05:32+00:00,Introduce asymmetric SEE.  No functional change,True,4,2013-04-01
mcostalba,mcostalba,2013-04-05 14:56:01+00:00,Lower minimum allowed TT size to 1 MB  Setting a very low TT size could be used for some specific testing.  No functional change.,True,4,2013-04-01
mcostalba,mcostalba,2013-04-05 06:59:38+00:00,"Revert ""Double Impact of Gain tables""  This reverts commit 36c82b751ce227c05bfb  Seems a regression against 2.3.1 tested with 20K games at 60""+0.05  With patch applied ELO: 15.44 +-2.8 (95%) LOS: 100.0% Total: 20000 W: 3928 L: 3040 D: 13032  Without patch applied ELO: 18.76 +-2.8 (95%) LOS: 100.0% Total: 20000 W: 3903 L: 2824 D: 13273  bench: 4781239",True,4,2013-04-01
HiraokaTakuya,mcostalba,2013-04-04 19:39:48+00:00,Don't early stop if we have a mated score  No functional change.,True,3,2013-04-01
zamar,mcostalba,2013-04-03 17:14:59+00:00,"Double Impact of Gain tables  Very unorthodox idea.  After 16000 games at 60""+0.05 ELO: 3.14 +-3.4 (95%) LOS: 96.6% Total: 13407 W: 2278 L: 2157 D: 8972  bench: 4705335",True,2,2013-04-01
mcostalba,mcostalba,2013-03-30 21:26:30+00:00,Set IID half way between d/2 and d-4  Master IID formula is depth / 2 Previous patch is depth - 4 * ONE_PLY  This one is the middle way:  (dept/2 + depth-4*ONE_PLY)/2  -> depth-2*ONE_PLY-depth/4  After 16000 games at 60+0.05 th 1 ELO: 4.08 +-3.1 (95%) LOS: 99.5% Total: 16000 W: 2742 L: 2554 D: 10704  bench: 4781239,True,5,2013-03-01
mcostalba,mcostalba,2013-03-29 21:50:04+00:00,Merge branch 'master' into increase_iid,True,4,2013-03-01
mcostalba,mcostalba,2013-03-25 19:04:49+00:00,Raise Min Split Depth  Raise the limit to 12 so to allow people to test on many cores machines.  Suggested by Gary and Martin.  No functional change.,True,0,2013-03-01
mcostalba,mcostalba,2013-03-24 22:32:21+00:00,Update bestValue when futility pruning (2)  Same idea of 5af8179647b9e80353c in qsearch() but applied to search()  After 15500 games at 15+0.05 ELO: 4.48 +-3.4 (95%) LOS: 99.5% Total: 15500 W: 3061 L: 2861 D: 9578  bench: 4985829,True,6,2013-03-01
zamar,mcostalba,2013-03-23 20:28:51+00:00,Fix bogus mate scores in some positions  Always before pruning the move; it's important to check that:  bestValue > VALUE_MATED_IN_MAX_PLY  See example position:  8/2p1p3/P1NpP3/3k4/1P1BN3/2P1P3/2Q5/6K1 w - - 0 1 http://support.stockfishchess.org/discussions/problems/268-wrong-declaring-a-forced-mate-in-3-moves  This problem was present in 2.3.1; then it was fixed by my patch.  After 24000 games at 15+0.05 ELO: 2.40 +-4.4 (95%) LOS: 95.7% Total: 24000 W: 4774 L: 4608 D: 14618  bench: 4465997,True,5,2013-03-01
jundery,mcostalba,2013-03-23 11:17:12+00:00,Use ALL_PIECES value to reference attackedBy  No functional change,True,5,2013-03-01
mcostalba,mcostalba,2013-03-22 19:57:31+00:00,Increase non-PV IID search depth  bench: 5146380,True,4,2013-03-01
mcostalba,mcostalba,2013-03-19 18:08:41+00:00,Better document bitbase loop  Thanks to Lucas to spot the weak comment and to Jundery to suggest a better one.  No functional change.,True,1,2013-03-01
glinscott,mcostalba,2013-03-18 19:40:06+00:00,"Add KNPKB endgame  In a game vs Junior; SF had the option to trade into a winning pawn endgame; and failed to do so. PGN at bottom.  This FEN was one key position: 8/2Nb1k2/6pp/4Pp2/5K1P/5PP1/8/8 w - - 5 62.  SF master chooses h5 here; with a fail high; which goes into the drawn KNPKB ending. With the patch; SF correctly chooses Ke3; which maintains chances to win.  [Event ""nTCEC - Stage 2a - Season 1""] [Site ""http://www.tcec-chess.net""] [Date ""2013.03.05""] [Round ""11.3""] [White ""Stockfish 210213""] [Black ""Junior 13.3""] [Result ""1/2-1/2""] [Variant ""normal""]  1. d4 f5 2. g3 Nf6 3. Bg2 e6 4. c4 d5 5. Nh3 c6 6. O-O Bd6 7. Bf4 Be7 8. Nd2 O-O 9. Qb3 a5 10. Rfd1 Ne4 11. Be3 Nd7 12. Nf4 Ndf6 13. f3 a4 14. Qc2 Nxd2 15. Bxd2 dxc4 16. Qxc4 b5 17. Qc3 Qb6 18. Rac1 e5 19. Nd3 exd4 20. Qxc6 Qxc6 21. Rxc6 Bd7 22. Rcc1 Be6 23. Bb4 Rae8 24. Bxe7 Rxe7 25. Nb4 Bc4 26. Bf1 Rd7 27. Rd2 Re8 28. Rcd1 Rc7 29. Ra1 Rd8 30. Rc1 Rdd7 31. Rcd1 Re7 32. Ra1 Nd5 33. Nc2 Ne3 34. Nxd4 Bxa2 35. Nxb5 Rc5 36. Nd4 Bf7 37. Kf2 g6 38. Rd3 Nxf1 39. Kxf1 Rc4 40. b3 axb3 41. Nxb3 Kf8 42. Rd8+ Re8 43. Rxe8+ Bxe8 44. Kf2 Ke7 45. Ra7+ Bd7 46. Ke1 Rc3 47. Rb7 Rc2 48. Kd1 Rc4 49. Kd2 Kd6 50. Kd3 Rc7 51. Rxc7 Kxc7 52. Kd4 Kd6 53. Nc5 Bb5 54. e4 Be2 55. e5+ Ke7 56. Ke3 Bd1 57. Kf4 h6 58. h3 Kf7 59. h4 Bc2 60. Na6 Ba4 61. Nc7 Bd7 62. h5 g5+ 63. Ke3 Ba4 64. f4 Bd1 65. fxg5 hxg5 66. h6 Kg6 67. e6 f4+ 68. gxf4 gxf4+ 69. Kxf4 Bh5 70. Ke5 Kh7 71. Kf6 Kxh6 72. Na6 Bg4 73. e7 Bh5 74. Nc7 Bg6 75. Nd5 Be8 76. Ne3 Kh7 77. Nc4 Kh6 78. Nd2 Kh5 79. Nf3 Kg4 80. Nd4 Bh5 81. Ne6 Be8 82. Nc5 Kf3 83. Kf5 Ke3 84. Ke5 Ke2 85. Kf4 Kd2 86. Ne4+ Kd3 87. Ke5 Ke3 88. Nf6 Bf7 89. Nd5+ Kf3 90. Kf5 Ke2 91. Ke4 Be8 92. Nc3+ Kd2 93. Kd4 Kc2 94. Nd5 Kd1 95. Nf6 Bf7 96. Ne4 Be8 97. Ke3 Kc2 98. Nd6 Bd7 99. Kd4 Kd1 100. Kd3 Ba4 101. Nc4 Bb5 102. Kc3 Be8 103. Nb2+ Ke1 104. Kd3 Kf2 105. Nd1+ 1/2-1/2  No functional change (just because bench does not change)",True,0,2013-03-01
mcostalba,mcostalba,2013-03-16 10:20:03+00:00,Further increase SEE prune depth  After 16000 games at 60+0.05 ELO: 2.89 +-5.4 (95%) LOS: 96.5% Total: 16000 W: 2775 L: 2642 D: 10583  bench: 5442365,True,5,2013-03-01
mcostalba,mcostalba,2013-03-16 10:12:35+00:00,"Revert ""Check for easy move just once""  This reverts commit a24da071f0d6128c633febab7df55f14475217c3  Seems a regression when tested against 2.3.1  With this patch; have after 20000 games at 60+0.05; we have  ELO: 13.42 +-4.8 (95%) LOS: 100.0% Total: 20000 W: 3746 L: 2974 D: 13280  Instead with the patch reverted:  ELO: 16.62 +-4.8 (95%) LOS: 100.0% Total: 20000 W: 3816 L: 2860 D: 13324  Although we are within error bounds here we take the conservative approach of not introducing changes that are not proved stronger It doesn't mean that the change shall be weaker; simply that we don't want to take any risk.  No functional change.",True,5,2013-03-01
RyanTaker,mcostalba,2013-03-15 08:14:00+00:00,Improved Readability of Material  This is a non-functional change that simply changes the look of the code to help clarity.  No functional change.,True,4,2013-03-01
jundery,mcostalba,2013-03-12 18:58:32+00:00,Do more work between prefetch and querying transposition table  More time to load the cache line before access  No functional change.,True,1,2013-03-01
glinscott,mcostalba,2013-03-11 21:23:19+00:00,Check for easy move just once  Here the rational seems to be that if after one try easy move detection fails then the easy move is not so easy :-)  After 15563 games at 60+0.05 ELO: 3.04 +-5.5 (95%) LOS: 97.0% Total: 15563 W: 2664 L: 2528 D: 10371  No functional change.,True,0,2013-03-01
glinscott,mcostalba,2013-03-11 18:07:55+00:00,Be more aggressive on trying to finish iterations  Increase MaxRatio to use more time when in trouble.  After 16000 games at 60+0.05 ELO: 4.89 +-5.4 (95%) LOS: 99.9% Total: 16000 W: 2700 L: 2475 D: 10825  No functional change.,True,0,2013-03-01
mcostalba,mcostalba,2013-03-04 08:41:56+00:00,Increase see prune depth  This seems good at short TC controls.  After 10000 games at 20+0.05 ELO: 9.56 +-6.8 (95%) LOS: 100.0% Total: 10000 W: 1949 L: 1674 D: 6377  Testing at long TC and regression testing is still ongoing. So this is a bit speculative commit and could be reverted in the future.  Also re-testing at long TC the SEE pruning in PV nodes seems less effective (perhaps even a regression; but still ongoing) so disabled for now.  bench: 4968764,True,0,2013-03-01
mcostalba,mcostalba,2013-03-04 08:29:46+00:00,"Revert ""Store moves sent with ""position"" UCI command""  This reverts commit 0d68b523a390e2f5c37f211316869d798e852289.  After easy move semplification this machinery is not needed anymore (because of we don't need to know if a root move is a recapture)  No functional change.",True,0,2013-03-01
mcostalba,mcostalba,2013-03-04 08:27:00+00:00,"Simplify ""easy move"" detection  Detect a move as easy only if it is the only one ;-) or if is much better than remaining ones after we have spent 20% of search time.  Tests are ongoing; but it seems this semplification stands. Anyhow it is experimental for now and could be reverted/improved with further work Gary is testing right now.  No functional change.",True,0,2013-03-01
mcostalba,mcostalba,2013-03-04 08:07:48+00:00,"Avoid locking/unlocking in a tight loop  After previous patch if split point master is waiting for job and ""Use Sleeping Threads"" is false (our condition for official releases) then it will lock/unlock splitPoint mutex in a super tight loop badly affecting performance.  Rewrite the code to lock only when we are about to finish. Note that race condition on slavesMask is anyhow fixed.  No functional change.",True,0,2013-03-01
jundery,mcostalba,2013-03-04 07:52:24+00:00,Fix race condition where idle_loop() gets called from Split()  SplitPoint member slavesMask wasn't read under lock  No functional change.,True,0,2013-03-01
jhellis3,mcostalba,2013-03-04 07:30:55+00:00,"Stop search if only 1 legal move  There is no point searching a move that is forced. It wastes time while allowing computer opponents to fill hash with 100% accuracy.  [edit: Condition moved together with ""easy move"" ones]  Bench identical: 4922272",True,0,2013-03-01
mcostalba,mcostalba,2013-03-02 12:20:40+00:00,Fix easy re-capture case  We detect an easy move as a recapture with an high margin on the second best move.  Unfortunatly the recapture detection is broken becuase we identify as a recapture any move that follows an opponent's previous capture !  This patch fix the logic to correctly detect a real re-capture.  No functional change.,True,5,2013-03-01
mcostalba,mcostalba,2013-03-02 12:08:50+00:00,"Store moves sent with ""position"" UCI command  Store all the game moves until current position.  This will be used by next patch.  No functional change.",True,5,2013-03-01
mcostalba,mcostalba,2013-03-01 08:44:19+00:00,Rename sp to splitPoint  Still keep 'sp' name when used as local variable with limited scope.  From Jundery.  No functional change.,True,4,2013-03-01
jundery,mcostalba,2013-03-01 07:05:47+00:00,Remove strange use of the ternary operator  Note that we read shared data without lock protection; so code is theoretically prone to torn reads. But; first splitPoint pointer never changes; and alpha is of integer type so it is read in a single DWORD access.  No functional change.,True,4,2013-03-01
jundery,mcostalba,2013-03-01 06:57:18+00:00,Split() clean up locking  Only unlock and relock when idle_loop() is actually called  No functional change,True,4,2013-03-01
mcostalba,mcostalba,2013-02-27 07:14:00+00:00,"Merge Lucas's ""SEE pruning at PV nodes""  bench: 4922272",True,2,2013-02-01
mcostalba,mcostalba,2013-02-27 07:07:26+00:00,Remove pruning condition on alpha  Further simplifying on Lucas's idea; seems reliable in tests:  ELO: 2.15 +-7 (95%) LOS: 84.9% Total: 9999 W: 1831 L: 1769 D: 6399,True,2,2013-02-01
lucasart,mcostalba,2013-02-27 07:04:32+00:00,Prune negative SEE moves also in PV nodes  This patch is actually the sum of two contributions that have been tested independently:  1) Pruning of negative SEE moves in PV  After 10000 games at 20+0.05 ELO: 5.18 +-7 (95%) LOS: 99.2% Total: 10000 W: 1952 L: 1803 D: 6245  2) Remove of bestValue > VALUE_MATED_IN_MAX_PLY condition  After 23000 games at 20+0.05 ELO: 1.63 +-4 (95%) LOS: 88.1% Total: 23000 W: 4232 L: 4124 D: 14644  The whole patch as been re-tested at long TC with positive results:  After 10000 games at 60+0.05 ELO: 4.31 +-7 (95%) LOS: 98.3% Total: 10000 W: 1765 L: 1641 D: 6594,True,2,2013-02-01
mcostalba,mcostalba,2013-02-23 18:27:32+00:00,Avoid a tricky line in shelter_storm()  kf = (kf == FILE_A) ? kf++ : ....  is tricky becuase kf is updated twice and it happens to do the right thing just by accident.  Rewrite in a better way.  Spotted by pdimov  No functional change.,True,5,2013-02-01
mcostalba,mcostalba,2013-02-23 16:05:28+00:00,Convert Readme to markdown format  Looks better on GitHub; that supports this format.  No functional change.,True,5,2013-02-01
mcostalba,mcostalba,2013-02-21 06:19:48+00:00,Use DD-MM-YY as date format  In engine name and version number.  No functional change.,True,3,2013-02-01
mcostalba,mcostalba,2013-02-21 04:51:04+00:00,Statically link std libraries under mingw  Allows for easier redistribution.  No functional change.,True,3,2013-02-01
mcostalba,mcostalba,2013-02-20 11:39:09+00:00,"Merge Gary's bishop_pin patch  Give a bonus if a bishop can pin a piece or can give a discovered check through an x-ray attack.  Seems good after 24000 games at 15""+0.05 (single thread):  ELO: 12.30 +- 99%: 5.79 95%: 4.40 LOS: 100.00% Total: 24000 W: 4931 L: 4082 D: 14987  bench: 4917064",True,2,2013-02-01
jundery,mcostalba,2013-02-19 19:06:01+00:00,Print leading zeroes in hash keys  And convert to uppercase. Reset the stream to dec too.  [Edit: Also fixed the hash key in Position::pretty()],True,1,2013-02-01
glinscott,glinscott,2013-02-19 15:31:52+00:00,Merge branch 'master' into bishop_pin_clop,True,1,2013-02-01
glinscott,glinscott,2013-02-19 15:31:50+00:00,Bring back original bonus,True,1,2013-02-01
mcostalba,mcostalba,2013-02-19 06:54:14+00:00,Update copyright year  No functional change.,True,1,2013-02-01
glinscott,glinscott,2013-02-17 03:36:58+00:00,Back to CLOP average values,True,6,2013-02-01
mcostalba,mcostalba,2013-02-16 11:44:17+00:00,Account for gamePly after each move  Rename startPosPly to gamePly and increment/decrement the variable after each do/undo move. This adds a little overhead in do_move() but we will need to have the game ply during the search for the next patches now under test.  Currently we don't increment gamePly in do_null_move() becuase it is not needed at the moment. Could change in the future.  As a nice side effect we can now remove an hack in startpos_ply_counter().  No functional change.,True,5,2013-02-01
mcostalba,mcostalba,2013-02-15 15:25:33+00:00,"Merge Gary's king safety tweak  Still well within error bars; so probably not a big improvement; but may be worthwhile. I will let the test keep running. The idea for the tweak came from the TCEC game against Houdini. Stockfish saw it as a draw; well past when it should have seen problems. King safety was off; since it was QN and pawns only; but in fact the king was quite vulnerable.  After 8000 games at 60/1 (Gary's test)  ELO: -0.43 +- 99%: 10.02 95%: 7.62 Wins: 1235 Losses: 1245 Draws: 5520 Total: 8000  PGN of game against houdini. Moves 55-59 it was seeing a draw; and Houdini was seeing a good sized advantage for black. With the change; Stockfish now recognizes that moving the king there is a bad idea.  [Event ""nTCEC - Stage 1 - Season 1""] [Site ""http://www.tcec-chess.net""] [Date ""2013.02.07""] [Round ""4.2""] [White ""Stockfish 2.31""] [Black ""Houdini 3.0""] [Result ""0-1""] [Variant ""normal""]  1. Nf3 Nf6 2. c4 e6 3. Nc3 Bb4 4. Qc2 O-O 5. a3 Bxc3 6. Qxc3 b6 7. b4 a5 8. Bb2 axb4 9. axb4 Rxa1+ 10. Bxa1 Na6 11. e3 Qe7 12. b5 Nc5 13. Qc2 Bb7 14. Be2 d6 15. O-O Ra8 16. Bb2 h6 17. Ra1 Rxa1+ 18. Bxa1 e5 19. Qa2 Be4 20. Ne1 Bg6 21. Bb2 Kh7 22. f3 Nfd7 23. Bc3 h5 24. Qa1 h4 25. Kf1 Qf6 26. Qa7 Qd8 27. Qa2 e4 28. Qa1 h3 29. g3 exf3 30. Nxf3 Bf5 31. Bd4 g6 32. Kf2 Kg8 33. Qa3 Bg4 34. d3 Qc8 35. Bxc5 bxc5 36. Ke1 Qb7 37. e4 Bxf3 38. Bxf3 Ne5 39. Be2 Qc8 40. Qa6 Qd8 41. Qa5 Kh7 42. Kd1 Kg7 43. Qa7 Kg8 44. Qa5 Kh7 45. Qa7 Kg7 46. Qa5 Qb8 47. Kd2 Kh7 48. Kc2 Kg8 49. Qa6 Qd8 50. Qa5 Qf6 51. Qe1 Kg7 52. Qf1 Qe6 53. Qe1 Qd7 54. Qc1 Qe8 55. Kc3 Qa8 56. Kb3 Kh7 57. Qa3 Qd8 58. Qc1 c6 59. Qc3 Qb6 60. Ka4 Qb7 61. Qd2 Nd7 62. Qc3 Qa7+ 63. Kb3 Kg8 64. Bg4 cxb5 65. cxb5 Nb6 66. Bxh3 Qa4+ 67. Kb2 Qd1 68. Ka3 Qe2 69. Kb3 Qh5 70. Bg2 Qxh2 71. Qf6 Qxg3 72. Bf1 Qe3 73. Kc2 Na4 74. b6 Nxb6 75. Qd8+ Kg7 76. Qxb6 Qf2+ 77. Kc3 Qxf1 78. Qxd6 Qf6+ 79. Qxf6+ Kxf6 80. Kc4 g5 81. Kxc5 Ke5 82. d4+ Kxe4 83. d5 g4 84. d6 g3 85. d7 g2 86. d8=Q g1=Q+ 87. Kb5 Qb1+ 88. Ka4 Qa2+ 89. Kb4 f5 90. Qe8+ Kf4 91. Qg6 Qd5 92. Qg1 Qe4+ 93. Ka5 Qe2 94. Qg8 Kf3 95. Qd5+ Qe4 96. Qd1+ Kg2 97. Qd2+ Kf1 98. Qh2 f4 99. Qh3+ Ke2 100. Qg4+ Kd2 101. Qg5 Kc2 102. Qh4 0-1  bench: 5518286",True,4,2013-02-01
mcostalba,mcostalba,2013-02-15 10:58:33+00:00,Further speed up bitbase generation  Another trick; along the same lines of previous patch. This time we first check positions with white side to move that; becuase we start with pawn on rank 7; are easily classified as wins; then black ones.  Number of cycles reduced to 15 !  Becuase now it is faster we can remove a lot of code to detect theoretical draws. We will calculate them anyhow; although a bit slower; but the speed up trick more than compensates it.  Verified that generated bitbases match original ones.  No functional change.,True,4,2013-02-01
glinscott,glinscott,2013-02-15 01:29:24+00:00,Add new clop tuned value,True,4,2013-02-01
glinscott,glinscott,2013-02-14 02:41:15+00:00,Merge branch 'master' into bishop_pin_clop,True,3,2013-02-01
glinscott,glinscott,2013-02-14 02:40:38+00:00,"Revert ""Use CLOP mean value instead of max""  This reverts commit d0c2faa5fd9ad05f865d2a69b59efab43b2be421.",True,3,2013-02-01
mcostalba,mcostalba,2013-02-13 19:13:56+00:00,Speedup KPK bitbase of 25%  Change the way the index is coded so that now looping from 0 to IndexMax generates the pawns from RANK_7 down to RANK2.  Becuase positions with pawns at RANK_7 are easily classified as wins/draws; this small trick allows to reduce the number of needed iterations from 30 down to 26!  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-02-01
mcostalba,mcostalba,2013-02-13 19:13:44+00:00,Simplify bitbase.cpp  Use a std::vector to store positions and rearrange KPKPosition.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-02-01
glinscott,glinscott,2013-02-13 17:21:16+00:00,Use CLOP mean value instead of max,True,2,2013-02-01
glinscott,glinscott,2013-02-13 17:19:54+00:00,Merge branch 'simplify_eval' into bishop_pin_clop,True,2,2013-02-01
glinscott,glinscott,2013-02-13 05:12:02+00:00,CLOP tuned,True,2,2013-02-01
glinscott,glinscott,2013-02-12 05:10:21+00:00,Add clop parameters,True,1,2013-02-01
glinscott,glinscott,2013-02-11 15:26:25+00:00,Merge branch 'master' into simplify_eval,True,0,2013-02-01
glinscott,glinscott,2013-02-11 15:26:18+00:00,Bishop pins only,True,0,2013-02-01
mcostalba,mcostalba,2013-02-10 23:09:21+00:00,Rename and de-templetize sort()  Rename to insertion_sort so to avoid confusion with std::sort; also move it to movepicker.cpp and use the bit slower std::stable_sort in search.cpp where it is used in not performance critical paths.  No functional change.,True,6,2013-02-01
mcostalba,mcostalba,2013-02-09 15:37:20+00:00,Further simplify first_entry()  We can encode the ClusterSize directly in the hashMask; this allows to skip the left shift.  There is no real change; but bench number is now different because instead of using the lowest order bits of the key to index the start of the cluster; now we don't use the last two lsb bits that are always set to zero (cluster size is 4). So for instance; if 10 bits are used to index the cluster; instead of bits [9..0] now we use bits [11..2]. This changes the positions that end up in the same cluster affecting TT hits and so bench is different.  Also some renaming while there.  bench: 5383795,True,5,2013-02-01
mcostalba,mcostalba,2013-02-09 09:55:38+00:00,Microptimize first_entry() for 32bits  Do a 32bit bitwise 'and' instead of a 64bit subtract and bitwise 'and'.  This is possible because even in the biggest hash table case (8GB) the number of entries is 2^29 so storable in an unsigned int.  No functional change.,True,5,2013-02-01
mcostalba,mcostalba,2013-02-09 09:55:20+00:00,Retire TTCluster and simplify TT  Also some renaming while there.  No functional change.,True,5,2013-02-01
mcostalba,mcostalba,2013-02-09 06:43:53+00:00,Simplify move_to_san()  Nicely simplify disambiguation code.  No functional change.,True,5,2013-02-01
glinscott,glinscott,2013-02-08 13:53:13+00:00,Slight tweak to king safety.  Bench: 5534531,True,4,2013-02-01
mcostalba,mcostalba,2013-02-08 10:45:33+00:00,Retire slavesPositions  Save the current active position in each Thread instead of keeping a centralized array in struct SplitPoint.  This allow to skip a memset() call at each split.  No functional change.,True,4,2013-02-01
mcostalba,mcostalba,2013-02-08 09:07:09+00:00,Add const qualifer to go()  Obsolete renmant of when position was directly passed to the search instead of being copied for the main thread as is now.  From Jundery.  No functional change.,True,4,2013-02-01
mcostalba,mcostalba,2013-02-08 08:20:40+00:00,Workaround value-initialization in MSVC  The syntax splitPoints() should force the compiler to value-initialize the array and because there is no user defined c'tor it falls back on zero-initialization.  Unfortunatly this is broken in MSVC compilers; because value initialization for non-POD types is not supported; so left splitPoints un-initialized and add in split() initialization of slavesPositions; that is the only member not already set at split time.  This fixes an assert under MSVC when running with more than one thread.  Spotted and reported by Jundery.  No functional change.,True,4,2013-02-01
glinscott,mcostalba,2013-02-07 05:51:55+00:00,Add KBPKP endgame  It is a draw if pawns are on G or B files; weaker pawn is on rank 7 and bishop can't attack the pawn.  No functional change (because it is very rare and does not appear in bench),True,3,2013-02-01
mcostalba,mcostalba,2013-02-06 19:48:26+00:00,Change slave_available() API  To return a pointer to the available thread instead of a bool. This allows to simplify the core loop in split().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-02-01
jundery,mcostalba,2013-02-06 07:03:37+00:00,Rename posKey stored in the transposition table  [Edit: Slightly extended by me]  No functional change.,True,2,2013-02-01
jundery,mcostalba,2013-02-06 06:49:40+00:00,Add const qualifer to check_is_dangerous  No functional change.,True,2,2013-02-01
mcostalba,mcostalba,2013-02-05 05:35:38+00:00,"Slightly change split() API  This function ""returns"" two values: bestValue and bestMove  Instead of returning one and passing as pointer the other be consistent and pass as pointers both.  No functional change.",True,1,2013-02-01
mcostalba,mcostalba,2013-02-04 21:59:20+00:00,Derive ThreadPool from std::vector  Prefer sub-classing to composition in this case.  No functional change.,True,0,2013-02-01
mcostalba,mcostalba,2013-02-04 21:17:04+00:00,Move split() under Thread  Previous renaming patch suggested this reformat: when a better naming leads to a better code!  No functional change.,True,0,2013-02-01
mcostalba,mcostalba,2013-02-04 21:00:41+00:00,Some renaming in split()  Naming suggested by jundery.  No functional change.,True,0,2013-02-01
mcostalba,mcostalba,2013-02-03 10:14:21+00:00,Be clear about not LMR the ttMove  Currently a ttMove is reduced with ss->reduction = DEPTH_ZERO; so it is actually not reduced (as it should be); but the trick works just becuase it happens that ttMove is the first to be tried and  reduction(depth; 1)  Always returns zero. So explicitly forbid reduction of ttMove in the LMR condition. This is much clear and self-documented.  No functional change.,True,6,2013-02-01
mcostalba,mcostalba,2013-02-03 09:11:12+00:00,Templetize score_xxx() functions  So to be style-wise aligned with the corresponding generate() functions.  No functional change.,True,6,2013-02-01
mcostalba,mcostalba,2013-02-03 08:23:04+00:00,Rename prevents_move() to refutes()  Better! From DiscoCheck.  No functional change.,True,6,2013-02-01
mcostalba,mcostalba,2013-02-03 08:08:32+00:00,Correctly score enpassant captures  Surprisingly this rare case was not considered when scoring a capture.  Also take in account that in the promotion case we gain a new piece (typically a queen) but we lose the promoting pawn.  These small issues were present since Glaurung times!  Found while browsing DiscoCheck sources  bench: 5400063,True,6,2013-02-01
mcostalba,mcostalba,2013-02-02 16:45:09+00:00,Unify History and Gains under a single Stats class  Handling of History and Gains is almost the same; with the exception of the update logic; so unify both classes under a single Stats struct.  No functional change.,True,5,2013-02-01
mcostalba,mcostalba,2013-02-02 15:54:35+00:00,Retire history.h  And move the contents to movepick.cpp; where they are mostly used.  Idea from DiscoCheck.  No functional change (bench 5379503),True,5,2013-02-01
glinscott,glinscott,2013-02-02 15:19:59+00:00,Simplify eval take 2.  Bench 5097444,True,5,2013-02-01
mcostalba,mcostalba,2013-02-02 06:16:33+00:00,"Restore ""fail-low of reduced"" and close regression  This reverts ""Threat Extensions"" and is the last of this revert series.  In single-thread tests we should now be on par with 2.3.1",True,5,2013-02-01
mcostalba,mcostalba,2013-02-02 05:44:04+00:00,"Revert ""Simplify Evaluation""  This reverts commit 496c7497cb81de4383",True,5,2013-02-01
mcostalba,mcostalba,2013-02-02 05:41:05+00:00,"Revert ""Extend full 3 fold detection to PvNodes""",True,5,2013-02-01
mcostalba,mcostalba,2013-01-28 12:40:47+00:00,Rewrite do_castle_move()  And handle the castle directly in do/undo_move(). This allow to greatly simplify the code.  Here the beast is the nasty Chess960 that is really tricky to get it right because could be that 'from' and 'to' squares are the same or that king's 'to' square is rook's 'from' square.  Anyhow should work: verified on all Chess960 starting positions.  No functional and no speed change also in Chess960.,True,0,2013-01-01
mcostalba,mcostalba,2013-01-27 11:15:02+00:00,Rewrite do_null_move()  Use a more traditional approach; along the same lines of do_move().  It is true that we copy more in do_null_move(); but we save the work in undo_null_move(). Speed test shows the new code to be even a bit faster.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-27 10:03:55+00:00,Get rid of some locals in do_castle_move()  Rewrite the logic to get rid of kBefore and rBefore.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-27 09:19:11+00:00,Don't prefetch if not needed  Prefetch access to hash tables only in case we have changed pawn or material hash keys.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-26 21:43:58+00:00,Retire generate_king_moves()  We have only one call place so inline its content. BTW; function is already declared as FORCE_INLINE.  Also some small refactoring while there.  No functional change.,True,5,2013-01-01
glinscott,glinscott,2013-01-26 20:35:00+00:00,Bring back just bishop pins,True,5,2013-01-01
mcostalba,mcostalba,2013-01-26 13:38:51+00:00,Clarify slavesMask usage  When a thread is allocated a bit is set in slavesMask. This bit corresponds to the thread's index field that; because it happens to be the position in the threads array; eventually it is equal to the loop index 'i'.  But instead of relying on this 'coincidence'; explicitly use the 'idx' field so to clarify slavesMask usage.  Backported from c++11 branch.  No functional change.,True,5,2013-01-01
mcostalba,mcostalba,2013-01-26 09:20:46+00:00,"Revert ""Further push singular extension""  This reverts commit 4c91dbc28e8bb6265f8  Seems a regression on extended test by both Gary and me.",True,5,2013-01-01
mcostalba,mcostalba,2013-01-26 09:18:36+00:00,Merge branch 'simplify_eval' of https://github.com/glinscott/Stockfish  Test results are looking good after 12500 games.  ELO: 6.55 +- 99%: 8.02 95%: 6.09 LOS: 99.99% Wins: 1968 Losses: 1732 Draws: 8813  Also; here are the noise.py results; which seem to have stabilized: Games: 12526 ; result: [1969; 1734; 8823] Estimated ELO: 6.94963842777 Noise as function of number of games: ['81.89'; '565.26'; '110.87'; '104.39'; '38.22'; '49.98'; '18.56'; '16.76'; '11.02'; '8.90'; '17.36'; '9.84'; '10.81'; '5.13'; '6.22'; '3.32'; '5.83'; '7.21'; '15.27'; '1.63'; '4.04'; '9.51'; '0.54'; '0.75'; '1.06'; '2.93'; '4.59'; '6.85'; '13.62'; '9.87'; '14.74'; '20.46'; '22.18'; '24.33'; '31.02'; '34.99'; '35.22'; '33.22'; '32.46'; '37.02'; '29.10'; '36.34'; '42.11'; '39.33'; '26.16'; '28.25'; '35.42'; '31.04'; '29.26'; '23.91'; '22.52'; '23.49'; '20.00'; '24.39'; '17.22'; '16.50'; '10.69'; '9.15'; '9.57'; '4.77'; '6.67'; '3.87'; '2.57'; '2.84'; '2.60'; '3.32'; '2.08'; '2.93'; '4.47'; '4.41'; '4.83'; '4.86'; '6.40'; '5.98'; '6.10'; '6.83'; '5.83'; '6.22'; '5.71'; '8.52'; '9.25'; '5.98'; '7.52'; '7.76'; '8.76'; '8.55'; '8.64'; '7.19'; '5.83'; '4.59'; '4.77'; '4.26'; '4.98'; '5.29'; '5.41'; '4.92'; '5.59']  bench: 5229106,True,5,2013-01-01
glinscott,glinscott,2013-01-24 13:54:13+00:00,Simplify evaluation,True,3,2013-01-01
mcostalba,mcostalba,2013-01-21 22:31:33+00:00,Small reformat of split()  No functional chhange.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2013-01-01
mcostalba,mcostalba,2013-01-20 16:36:24+00:00,Fix an idiotic icc warning  Intel Compiler has 'invented' this pearl:  warning #1476: field uses tail padding of a base class  Just becuase we have subclassed MainThread and added the field 'bool thinking'.  Pure nosense. Silence the warning.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-20 16:35:55+00:00,Futher renaming in thread.cpp  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-16 19:00:05+00:00,Big renaming in thread stuff  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-01-01
mcostalba,mcostalba,2013-01-16 18:58:55+00:00,Fix race while exiting  Fix again TimerThread::idle_loop() to prevent a theoretical race with 'exit' flag in ~Thread().  Indeed in Thread d'tor we raise 'exit' and then call notify() that is lock protected; so we have to check again for 'exit' before going to sleep in idle_loop().  Also same change in Thread::idle_loop() where we now check for 'exit' before to go to sleep.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2013-01-01
lucasart,mcostalba,2013-01-15 16:03:56+00:00,"Remove Threat Extension  Great code simplification: - instead do not futility prune threat refutations. allows_move() is therefore removed.  4000 games at 50;000 nodes/move: 1085-989-1926 [51.2%] LOS=98.3%  4000 games in 10""+0.1"" 756-751-2493 [50.1%] LOS=55.1%  EDIT: I have retested the patch of Lucas in a slightly different form (without pruning in PvNode) and test mre or less confirms that 60 lines of code are totally unuseful:  After 6195 games at 15""+0.05"" 1333 - 1325 - 3537 ELO 0  bench 5140990",True,1,2013-01-01
mcostalba,mcostalba,2013-01-14 18:32:30+00:00,Fix a bug in timer loop  Silly logic bug introduced in dda7de17e74d7e8  Timer thread; when msec = 0; instead of going to sleep; calls check_time() in an endless loop.  Spotted and reported by snino64 due to abnormally high CPU usage.  No functional change.,True,0,2013-01-01
mcostalba,mcostalba,2013-01-14 01:01:37+00:00,Polymorphic Thread hierarchy  Subclass MainThread and TimerThread and declare idle_loop() virtual. This allow us to cleanly remove a good bunch of hacks; relying on C++ polymorphism to do the job.  No functional change.,True,0,2013-01-01
mcostalba,mcostalba,2013-01-13 23:02:32+00:00,"Don't use do_sleep flag  Rename it is_finished and use it only in main thread to signal search is finished. This allows us to simplify the complex SMP logic.  Ultra tricky patch: deep test is required under wide conditions like pondering on and option ""Use Sleeping Threads"" set to false.  No functional change.",True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 22:56:04+00:00,Re-add the hack  This reverts commit 869c9244101  I misunderstood here. Actually it can happen that thread is created but still not entered idle_loop and at the same time start_searching() is called.  Becuase 'do_sleep' is set start_searching() will set it to false and start the search; but when; at last; the thread enters idle_loop(); resets the flag and goes to sleep: not what we want.  Revert the hack waiting for a better solution in the next patches.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 17:24:43+00:00,Retire set_timer()  Also assure in Thread::timer_loop() that when timer interval is 0 (timer is disabled) we never call check_time()  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 16:05:30+00:00,Retire obsolete race hack  This hack was introduced in d282cf6964d493 to workaround a race with start_searching(); but these days is no more needed.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 15:57:40+00:00,Retire Threads wake_up() and sleep()  These functions are used in just one place. And generalize wait_for_stop()  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 15:43:26+00:00,Rename wake_up() to notify_one()  To align to C++ std::thread conventions.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 13:39:41+00:00,Unify 'ponderhit' handling  Finally we can now merge the 'ponderhit' case with 'stop' and 'quit'.  The patches have been done step by step to help debugging becuase this is really tricky code.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 13:32:30+00:00,"Small change to ""ponderhit"" handling  Reset Limits.ponder only if search continue; but if we are going to stop the search there is no need (and is also confusing) to clear the 'ponder' flag.  This mimics the behaviour upon rceiving 'stop' when pondering.  No functional change.",True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 13:15:19+00:00,Simplify and rename wait_for_stop_or_ponderhit()  Setting stopOnPonderhit is now done by the caller.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-13 12:17:16+00:00,Simplify a condition in search()  And rearrange best value update in case of SpNode.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-12 12:21:14+00:00,Clarify SAN disambiguation in case of a pinned piece  In SAN notation when two pieces of the same type can move to a given destination square; a disambiguation additional info (like starting file) shall be added to the SAN move.  If one of the two pieces is pinned; the corresponding move _could_ be illegal and in this case disambiguation is not needed. But to be pinned alone it is not enough to deduce that the move is illegal; for instance in this position:  R3rk2/2r6/8/8/8/8/8/K7 b - - 0 1  The move Rc8 is ambiguous although the rook in e8 is pinned and the correct SAN notation should be Rcc8.  No functional change.,True,5,2013-01-01
mcostalba,mcostalba,2013-01-12 11:06:55+00:00,Async 'stop' command  Don't wait for the search to finish after a 'stop' command; but keep processing the GUI input if any.  Also explicitly wake up the main thread (that could be sleeping) after a 'stop' or 'quit' command and do not rely on wait_for_search_finished() doing it for us.  This patch cleans up the code and functions's definitions; but it is risky and needs a good test under different conditions to be sure it does not introduces hungs up.  No functional change.,True,5,2013-01-01
mcostalba,mcostalba,2013-01-06 22:06:20+00:00,"Revert so called ""fromNull patch""  Revert patch c581b7ea3627482  Seems a regression after testing from Gary: ELO: 7.24 +- 99%: 17.03 95%: 12.93 LOS: 97.86% Wins: 439 Losses: 381 Draws: 1962  And mine: After 5410 games at 15""+0.05 Wins: 936 Losses: 1141 Draws: 3333  ELO -13  Moreover we know that there is a regression in the range of patches which include the fromNull patch.  Probably this is not the only regression since 2.3.1 and perhaps the idea under fromNull is good; but at the moment; while in deep regression hunting; better to be on the safe side and revert it entirely.  My guess on why this is a regression is that using the negated evaluation of previous ply in case of null search fails to take in account the king safety asymmetry between the two colors. This is of course just a guess.  bench 5503830",True,6,2013-01-01
mcostalba,mcostalba,2013-01-06 11:06:19+00:00,Have fun with union in book.cpp  Fancy way to use an union to map polyglot zobrist keys in one go.  Also some renaming while there.  No functional change.,True,6,2013-01-01
mcostalba,mcostalba,2013-01-04 16:11:24+00:00,Retire 'Cowardice' and 'Aggressiveness' UCI options  They are not self-describing and create a lot of user requests about them.  Given that the values are already well tuned there is no need to expose them as UCI options.  No functional change.,True,4,2013-01-01
mcostalba,mcostalba,2013-01-04 15:30:46+00:00,Retire 'mate in x' hack  Sometimes is faster; but not always and on very long mates produces strange scores probably due to truncation of PV artifacts.  So simply perform normal search also in case of UCI 'mate x' command; with the only difference that when a mate in x is found search returns immediately.  No functional change.,True,4,2013-01-01
mcostalba,mcostalba,2013-01-04 13:52:21+00:00,Don't exit if unable to find bench file  Now that we can call 'bench' command also from interactive terminal it makes no more sense to exit the application if the user types a wrong file name.  No functional change.,True,4,2013-01-01
mcostalba,mcostalba,2013-01-04 13:45:04+00:00,Teach file_to_char() about upper/lower case  This allows to further simplify Position::fen()  No functional change.,True,4,2013-01-01
mcostalba,mcostalba,2013-01-04 12:38:14+00:00,Reformat FEN construction  Simplify and shrink code.  No functional change.,True,4,2013-01-01
mcostalba,mcostalba,2012-12-31 16:20:39+00:00,Remove some obsolete asserts on TT values  Now that insert_pv_in_tt() stores VALUE_NONE in TT's position evaluation those 2 asserts are obselete.  No functional change.,True,0,2012-12-01
mcostalba,mcostalba,2012-12-31 10:59:53+00:00,Allow to pass a 'seed' to RKISS  This somewhat simplifies the code.  Suggested by Lucas Braesch.  No functional change.,True,0,2012-12-01
mcostalba,mcostalba,2012-12-31 10:34:18+00:00,"Micro-optimization in evaluate_space()  Since &-ing with SpaceMask restricts the set to the home half of the board; it is possible to use just one popcount instead of 2 by shifting ""safe"" to the other half of the board. This gives a small speedup especially on systems where hardware popcount is not available.  Patch kindly sent by Richard Vida.  No functional change.",True,0,2012-12-01
mcostalba,mcostalba,2012-12-30 14:49:02+00:00,Add 'mate' limit to 'bench' command  It is now possible to run SF on a 'mate in x' testsuite.  For instance in case of a file with fen strings of positions with mate in 10 we can now 'bench' on it:  stockfish bench 128 1 10 mate_in_10.epd mate  No functional change.,True,6,2012-12-01
mcostalba,mcostalba,2012-12-30 13:43:23+00:00,"Handle UCI command ""mate in x moves""  Following a user request I added the handling of UCI:  go mate x  Currently we just return from a PV node if x moves have been done. Probably not the best approach. I have looked at Fruit/Toga sources and there is even simpler: engine falls back on a fixed depth search.  No functional change.",True,6,2012-12-01
mcostalba,mcostalba,2012-12-27 12:57:17+00:00,"Revert evaluation cache  And return on using TT as backing store for position evaluations.  Tests (even on single thread) show eval cache was a regression. In multi thread result should be even worst because eval cache is a per-thread struct; while TT is shared.  After 4957 games at 15""+0.05 (single thread) eval cache vs master 969 - 1093 - 2895  -9 ELO  So previous reported result of +18 ELO was probably due to an issue in the testing framework (a bug in cutechess-cli) that has been fixed in the meanwhile.  bench: 5386711",True,3,2012-12-01
mcostalba,mcostalba,2012-12-27 10:34:48+00:00,Add list of legal moves to Position::pretty()  Along the same lines of previous patch now we add the list of the legal moves in the given position.  No functional change.,True,3,2012-12-01
mcostalba,mcostalba,2012-12-26 17:28:45+00:00,Add checkers info to Position::pretty()  In case current position is under check; list the squares of the checker(s) pieces.  This should satisfy a specific user request.  No functional change.,True,2,2012-12-01
mcostalba,mcostalba,2012-12-26 11:27:41+00:00,Remove two obsolete asserts in prevents_move  Now that this function is called also to calculate move's extensions the asserts are no more valid.  No functional change.,True,2,2012-12-01
mcostalba,mcostalba,2012-12-26 11:21:59+00:00,Rename yields_to_threat and prevents_threat  Follow Lucas suggestions and better name these two functions.  No functional change.,True,2,2012-12-01
mcostalba,mcostalba,2012-12-25 18:17:27+00:00,"Introduce Null Threat extension  In case of null search at low depths returns a fail low due to a threat then; rather than return beta-1 (to cause a re-search at full depth in the parent node); we set a flag threatExtension = true (false by default) that will cause moves that prevent the threat to be extended of one ply in the following search.  Idea and patch is by Lucas Braesch.  Lucas also did the tests: 1500 games in 5""+0.05"": SF_threatExtension vs SF_20121222: 366 - 331 - 803 [51.2%] LOS=90.8%  3000 games in 10""+0.1"": SF_threatExtension vs SF_20121222: 610 - 559 - 1831 [50.8%] LOS=93.2%  Tests confirmed by Gary after 10570 games; ELO: 2.79 +- 99%: 8.72 95%: 6.63 LOS: 94.08% Wins: 1523 Losses: 1438 Draws: 7607  And finally by me at 15""+0.05; single thread; 3824 games threatExtension vs master 768 - 692 - 2364  +7 ELO  bench 4918443",True,1,2012-12-01
mcostalba,mcostalba,2012-12-25 17:48:41+00:00,Fix a couple of extra spaces  No functional change.,True,1,2012-12-01
mcostalba,mcostalba,2012-12-25 16:59:35+00:00,Retire Position::in_check()  It is redundant with Position::checkers()  No functional change.,True,1,2012-12-01
mcostalba,mcostalba,2012-12-25 10:51:08+00:00,Retire Position::move_is_legal()  Use the new contains() method of struct MoveList  No functional change.,True,1,2012-12-01
mcostalba,mcostalba,2012-12-25 10:31:32+00:00,Small tweak in is_pseudo_legal()  This is difficult code becuase a bug here could lead to very subtle crashes in case of SMP games where we have TT move corruption due to concurrent access.  Anyhow I have fully verified te code throwing at it random moves. It shoudl work.  No functional change.,True,1,2012-12-01
mcostalba,mcostalba,2012-12-22 10:38:36+00:00,Introduce namespace Pawns  And retire old struct PawnTable along the same lines of previous patch.  No functional change.,True,5,2012-12-01
mcostalba,mcostalba,2012-12-16 11:58:39+00:00,Introduce namespace Material  And retire old struct MaterialTable simplifying the code.  No functional change.,True,6,2012-12-01
mcostalba,mcostalba,2012-12-15 12:11:10+00:00,Don't need to check for bestValue < beta to split  With rearrangement of fail high code this condition is no more necessary.  Found by J�rg Oster.  No fuctional change.,True,5,2012-12-01
mcostalba,mcostalba,2012-12-15 10:20:04+00:00,Remove an extra semicolon  No functional change.,True,5,2012-12-01
mcostalba,mcostalba,2012-12-15 10:18:52+00:00,Revert store of distinct upper and lower bounds  Test by Joona prooves the new feature don't value 70 added lines of code.  Grand totals after 10040 games (crashes: 0) for tt_both  master_9edc7 - 6a93488_6a934: 1756 - 1688 - 6596 ELO +2 (+- 2.7)  Confirmed by test of Gary:  After 8680 games: ELO: 0.80 +- 99%: 9.62 95%: 7.31 LOS: 65.38% Wins: 1288 Losses: 1268 Draws: 6130  Thanks a lot to both for testing it !!!  bench 5149248,True,5,2012-12-01
mcostalba,mcostalba,2012-12-10 08:26:02+00:00,"Merge branch 'eval_cache'  Unusually good result. Defenitly needs further verifications.  After 2160 games at 15""+0.05 Mod vs Orig 486 - 367 - 1307 ELO +19  bench: 6261882",True,0,2012-12-01
mcostalba,mcostalba,2012-12-09 13:19:21+00:00,Fix comparison with alpha; not beta  This silly bug seems the reason of the unsual bench value.  bench: 6261882,True,6,2012-12-01
mcostalba,mcostalba,2012-12-09 13:14:44+00:00,Ensure valueLower <= valueUpper  In case a TTEntry stores both an upper and a lower bound ensure that upper bound is not smaller than lower bound.  bench 1813815,True,6,2012-12-01
mcostalba,mcostalba,2012-12-09 12:15:50+00:00,Store distinct upper and lower bound scores  This is more complex than what I'd like but I was unable to split in small chunks.  Here we add 2 slots to TTEntry (valueUpper and depthUpper) so that sizeof(TTEntry) returns to the original 16 bytes and we can pack exactly 4 entries in a 64 bytes cache line.  Now we save an upper bound score alongside a lower (exact) score. The idea is to increase TT cut-offs rates becuase there is now an higher probability for a node to use TT info.  This patch is highly experimental and probably needs further steps as is hinted by an unrealistic bench number:  bench: 2022385,True,6,2012-12-01
mcostalba,mcostalba,2012-12-08 11:32:48+00:00,Micro-optimize color_of()  In almost all cases we already know in advance that color_of() argument is different from NO_PIECE.  So avoid the check for NO_PIECE in color_of() and test at caller site in the very few places where this case could occur.  As a nice side effect; this patch fixes a (bogus) warning under some versions of gcc.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-12-01
erbsenzaehler,mcostalba,2012-12-04 18:57:16+00:00,Update Readme.txt now that we support 64 threads  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-12-01
mcostalba,mcostalba,2012-12-04 07:05:15+00:00,"Merge branch 'eval_cache'  Use an eval cache instead of TT to store node position evaluations.  It is already an improvment and; because it frees two TT entry slots; paves the way to extend TT to store both upper and lower bounds.  After 4855 games; single thread; 15""+0.05 Mod vs Orig 1165 -920 - 2770 ELO +18  bench: 5149248",True,1,2012-12-01
mcostalba,mcostalba,2012-12-04 06:57:15+00:00,Increase MAX_THREADS to 64  And document why this is an hard limit. It seems for some (lucky) people 32 threads are not enough.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-12-01
mcostalba,mcostalba,2012-12-01 17:11:01+00:00,Reintroduce eval optimizaion from null search  Now that conversion to eval cache is finished we can reintroduce this optimization.  bench: 5149248,True,5,2012-12-01
mcostalba,mcostalba,2012-12-01 14:19:50+00:00,Don't save eval score in TT  This patch completes the removal of eval info in TT table.  No functional change.,True,5,2012-12-01
mcostalba,mcostalba,2012-12-01 14:13:08+00:00,Don't use TT just to save a node evaluation  In search(); after we evalute the position; in case there isn't any TT entry we create one with just the evaluation score.  This patches removes that code. The reason becuase the patch deserves a single commit it is becuase introduces a (very small) functional change due to the fact that the total number of TT stores is less now and this slightly alters the TT hits of our benchmark.  bench: 4983262,True,5,2012-12-01
mcostalba,mcostalba,2012-12-01 14:01:00+00:00,"Don't read eval from TT anymore  Rely fully on eval cache. Note that we still save eval info to TT; this is not needed at this moment and will be removed in future patches. We keep it so to have a ""non functional change"" patch.  No functional change.",True,5,2012-12-01
mcostalba,mcostalba,2012-12-01 13:48:13+00:00,Retire eval optimization from null search  Simplify things preparing for further changes.  bench: 4983282,True,5,2012-12-01
mcostalba,mcostalba,2012-12-01 13:01:20+00:00,Add eval cache infrastructure  With this patch series we want to introduce a per-thread evaluation cache to store node evaluation and do not rely anymore on the TT table for this.  This patch just introduces the infrastructure.  No functional change.,True,5,2012-12-01
mcostalba,mcostalba,2012-11-27 19:05:03+00:00,Don't double check for move legality  In case of a RootNode or a SpNode move has been already checked for legality so we can skip a redundant check.  Spotted by Frank Genot.  No functional change.,True,1,2012-11-01
mcostalba,mcostalba,2012-11-26 15:13:36+00:00,Update bestValue when futility pruning  In qsearch we should update the bestValue as we do in case of futilityValue < beta; also when pruning moves with non-positive see.  Spotted by Lucas Braesch  Bench: 5695710,True,0,2012-11-01
mcostalba,mcostalba,2012-11-18 10:46:37+00:00,"Avoid spamming the GUI in multipv search  Send the PV lines to GUI only once at the end of the PV search loop or just in case of long searches.  We need to sync also sending of ""currmove"" info to avoid sending info on current move without first informing the GUI on the PV line we are searching on.  No functional change.",True,6,2012-11-01
mcostalba,mcostalba,2012-11-17 12:08:04+00:00,Triviality in move_gives_check()  It seems even a bit faster; although handling of the special cases is not the hot path.  No functional change.,True,5,2012-11-01
mcostalba,mcostalba,2012-11-17 11:50:10+00:00,Better document fail-high condition  At this point we have already verified (value > alpha) and this implies; in case of a non-PV node; where search window size is zero; that value >= beta.  This is not so self-evident; so document the code with an assert condition.  No functional change.,True,5,2012-11-01
mcostalba,mcostalba,2012-11-11 12:30:20+00:00,Don't access std::cout from Position::print()  Let the caller to decide where to redirect (cout or cerr) the ASCII representation of the position. Rename the function to reflect this.  Renamed also from_fen() and to_fen() to set() and fen() respectively.  No functional change.,True,6,2012-11-01
mcostalba,mcostalba,2012-11-11 10:52:11+00:00,Restore old BOUND_EXACT logic in qsearch  In case a PvNode node has a static evaluation above alpha but no available moves we want to flag the node as BOUND_EXACT; not as BOUND_UPPER as is currently.  The behaviour was recently introduced with patch d471c49700fbe8281 of 3/10/2012  Spotted by Hongzhi Cheng.  bench: 5558464,True,6,2012-11-01
mcostalba,mcostalba,2012-11-11 10:20:39+00:00,"Revert ""Don't prune discovered checks""  Both Lucas re-test and Jean-Francois confirrm it is a regression.  Here Jean-Francois's results after 3600 games : Score of 96d3b1c92b8 vs 3b87314: 690 - 729 - 2181 [0.495] 3600 ELO: -3.86 +- 99%: 14.94 95%: 11.35 LOS: 15.03% Wins: 690 Losses: 729 Draws: 2181 Total: 3600  Bench: 5404066",True,6,2012-11-01
mcostalba,mcostalba,2012-11-07 17:29:56+00:00,"Don't prune discovered checks  Don't prune and eventually extend check moves of type DISCO_CHECK (pun intended; Lucas will understand :-) ).  Patch from Lucas Braesch that has also tested it:  Result: 879-661-2137; score=52.96%; LOS=100.00% (time 10""+0.1"")  I have started a verification test right now.  bench: 6004966",True,2,2012-11-01
mcostalba,mcostalba,2012-11-07 17:07:03+00:00,"Previous patch test results  From Jean-Francois's  Final result after 5000 games : Score of c581b7e vs a878312: 1163 - 970 - 2867 [0.519] 5000 ELO: 13.35 +- 99%: 12.71 95%: 9.65 LOS: 100.00% Wins: 1163 Losses: 970 Draws: 2867 Total: 5000  From me  After 3266 games at 20""+0;05 Score of c581b7e vs a878312: 612 - 607 - 2047  So no regression at longer TC and perhaps a little gain at fast TC.",True,2,2012-11-01
mcostalba,mcostalba,2012-11-05 15:12:28+00:00,Another attempt at evaluation shortcut  In this case we try a rather drastic approach: we simply don't futility prune in qsearch when arriving from a null move.  So we save evaluating and also save to mess with eval margins at all because margin is used only in futility.  Also accuracy should not be affected; actually it improves because we don't prune anything anymore.  bench: 5404066,True,0,2012-11-01
mcostalba,mcostalba,2012-11-05 06:41:28+00:00,"Temporary revert previous patch  Performs well at very short TC of 40/4+0.05 (courtesy of Jean-Francois): Wins: 2503 Losses: 2146 Draws: 5581 Total: 10230 +12 ELO  But is poor at longer TC of 20""+0.05 Wins: 321 Losses: 373 Draws: 1141 Total: 1808 -10 ELO  The patch was clearly a tradoff between speed and accuracy and the most interesting part of it are test results that can be commented as follows:  - A short TC is very sensible to any speed increase - A longer TC is more sensible to accuracy and less to speed  So a patch that does not change speed is suitable to be tested at short TC; while a speed/accuracy compromise patch is IMO better to be tested at longer TC to verify loss of accuracy can be tolerated.  In this case the revert is only temporary. We will come back again once we will be able to preserve the evaluation margin.  bench: 5809010",True,0,2012-11-01
mcostalba,mcostalba,2012-11-04 09:48:14+00:00,Skip evaluate() call after a null move  Reuse the evaluation of the parent with inverted sign and set margin to zero (this is an hack!).  This is done only in qsearch where almost 15% of calls are from a null move. In normal search the number of nodes where  (ss-1)->currentMove == MOVE_NULL  is almost zero and so there is no need of using this trick.  The big advantage of this patch is a speed-up due to skipped evaluate() calls; that are very costly.  Functionality is of course affected and we will need to proper test it later. For now we just register a 3-4% speed up.  Suggested by Hongzhi Cheng.  bench: 5051328,True,6,2012-11-01
mcostalba,mcostalba,2012-11-03 16:09:18+00:00,"Correctly fix ""break from split"" patch  In case split cut-offs we return with still some moves to go but we really want to break out from the loop now.  No functional change.",True,5,2012-11-01
mcostalba,mcostalba,2012-11-03 14:57:20+00:00,Relax constrain in prevents_threat()  When testing if a move blocks the threat path there is no reason to require the threat to be a slider. Indeed threat can be a double pawn push like in this example:  r1bq1rk1/ppp1np1p/4n1p1/3p4/3P2Q1/2P1B3/PPBN2PP/R4RK1 w - - 0 16  Where white's move Rf6 blocks the threat f5.  As a nice side effect we can retire the now useless helper piece_is_slider().  This patch kicks in only very rare cases; indeed the bench is still the same!  bench: 5809010,True,5,2012-11-01
mcostalba,mcostalba,2012-11-03 14:36:12+00:00,Sync connected_threat() and yields_to_threat()  Rename stuff so to sync as much as posisble the two related functions.  No functional change.,True,5,2012-11-01
mcostalba,mcostalba,2012-11-03 13:54:38+00:00,Don't 'break' upon returning from split()  There is no guarantee that split() consumes all the node's moves. Indeed split() can return without performing any job for instance because MAX_SPLITPOINTS_PER_THREAD is reached or becuase no available threads are found (this latter case is much more common).  So search must continue in those cases and we cannot force exiting from move's loop.  Bug introduced by 1ac417edb845 of 5/10/2012  Spotted by Frank Genot.  No functional change.,True,5,2012-11-01
mcostalba,mcostalba,2012-11-03 13:24:29+00:00,Remove a redundant condition in connected_moves()  If a previous move attacks the king (with the piece of the threat move removed) then must be a discovered check; otherwise it means that first move gave check and we were not able to do a null move.  Also renamed stuff to better document the function's context.  No functional change.,True,5,2012-11-01
mcostalba,mcostalba,2012-11-03 12:34:04+00:00,Relax constrain in connected_moves()  When testing if a piece is moving through the squares vacated by a previous move there is no reason to require the piece to be a slider; indeed we can have a double pawn push like in this example:  r1q2rk1/2p1bppp/2Pp4/pN5b/Q1P1p3/4B2P/PP1R1PP1/1K5R w - - 3 18  Where black's move f5 is connected to previous move Be7 that frees the path.  Or we can have a castle move:  r1bqkb1r/pppp1ppp/2n1pn2/1B6/4P3/2N2N2/PPPP1PPP/R1BQK2R b KQkq - 5 1  Where a previous move Bb5 allows the white to castle king side.  This time patch is mine ;-)  new bench: 5809010,True,5,2012-11-01
mcostalba,mcostalba,2012-11-03 12:27:44+00:00,Reformat connected_moves()  Prepare code for the next patch that will affect functionality.  No functional change.,True,5,2012-11-01
mcostalba,mcostalba,2012-11-02 23:36:40+00:00,Fix an off-by-one bug in multi pv print  We send to GUI multi-pv info after each cycle; not just once at the end of the PV loop. This is because at high depths a single root search can be very slow and we want to update the gui as soon as we have a new PV score.  Idea is good but implementation is broken because sort() takes as arguments a pointer to the first element and one past the last element.  So fix the bug and rename sort arguments to better reflect their meaning.  Another hit by Hongzhi Cheng.  Impressive!  No functional change.,True,4,2012-11-01
mcostalba,mcostalba,2012-11-02 16:18:38+00:00,"Fix a condition in connected_moves()  When checking if the moving piece p1 in a previous move m1 defends the destination square of a move m2 we have to use the occupancy with the from square of m2 removed so to take in account the case in which f2 will block an x-ray attack from p1.  For instance in this position: r2k3r/p1pp1pb1/qn3np1/1N2P3/1p3P2/2B5/PPP3QP/R3K2R b KQ - 1 9  The move eXf6 is connected to the previous move Bc3 that defends the destination square f6.  With this patch we have about 10% more moves detected as 'connected'. Anyhow the absolute number is very low; about 4000 more moves out of 6M nodes searched.  Another issue spotted by Hongzhi ""Hawk Eye"" Cheng ;-)  new bench: 5757373",True,4,2012-11-01
mcostalba,mcostalba,2012-11-02 11:11:49+00:00,Micro-optimize pop_lsb() for 64bit case  On Intel; perhaps due to 'lea' instruction this way of zeroing the lsb of *b seems faster than a shift+negate.  On perft (where any speed difference is magnified) I got a 6% speed up on my Intel i5 64bit.  Suggested by Hongzhi Cheng.  No functional change.,True,4,2012-11-01
mcostalba,mcostalba,2012-11-02 10:43:23+00:00,Fix a warning under MSVC  Compiler complies that 'cnt' is initialized but unused (in !CheckThreeFold case). Moving the definition of 'cnt'out of the loop  seems to do the trick.  No functional change.,True,4,2012-11-01
mcostalba,mcostalba,2012-11-01 17:45:38+00:00,Pass InCheck as template parameter of qsearch()  Instead of use a variable so to resolve many conditions already at compile time. In quiesce is also where we have most of the InCheck nodes and is one of the most performance critical code paths.  Speed up of 1.5% with Clang and 1% with gcc  Suggested by Hongzhi Cheng.  No functional change.,True,3,2012-11-01
mcostalba,mcostalba,2012-10-30 19:27:07+00:00,Use correct occupancy in connected_threat()  When checking if a move defends the threatened piece we correctly remove from the occupancy bitboard the moved piece. This patch removes from the occupancy also the threatening piece so to consider the cases of moves that defend the threatened piece x-raying through the threat move.  As example in this position: r3k2r/p1ppqp2/Bn4p1/3p1n2/4P1N1/5Q1P/PPP2P1P/R3K2R w KQkq - 1 10  The threat black move is dxe4. With this patch we include (and so don't prune) white's Bb7 that would be pruned otherwise.  The number of affected position is very low; around 1% of cases; so we don't expect ELO changes; neverthless this is the logical and natural thing to do.  Patch suggested by Hongzhicheng.  new bench: 5323798,True,1,2012-10-01
mcostalba,mcostalba,2012-10-30 19:03:35+00:00,Retire move_attacks_square()  There is only one call site. This patch is a preparation for the next one that will affect functionality.  No functional change.,True,1,2012-10-01
mcostalba,mcostalba,2012-10-29 07:07:17+00:00,Get rid of ReducedStateInfo struct  ReducedStateInfo is a redundant struct that is also prone to errors; indeed must be updated any time is updated StateInfo. It is a trick to partial copy a StateInfo object in do_move().  This patch takes advantage of builtin macro offsetof() to directly calculate the number of quad words to copy. Note that we still use memcpy to do the actual job of copying the (48 bytes) of data.  Idea by Richard Vida.  No functional and no performance change.,True,0,2012-10-01
mcostalba,mcostalba,2012-10-28 10:28:14+00:00,Creative formatting in uci.cpp  Have some fun breaking the indentation rules :-)  No functional change.,True,6,2012-10-01
glinscott,mcostalba,2012-10-28 09:17:57+00:00,Detect drawish KQKP endings  Based off of the rules from the wikipedia page; here: http://en.wikipedia.org/wiki/Queen_versus_pawn_endgame.  bench does not change: 5312693 but patch is real; has been tested on specific positions.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-27 13:07:20+00:00,Reformat check_is_dangerous()  And shuffle some code at search.cpp tail.  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-27 11:31:23+00:00,Use std::stack instead of fixed size array  Only in not performance critical code like pretty_pv(); otherwise continue to use the good old C-style arrays like in extract/insert PV where I have done some code refactoring anyhow.  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-26 14:06:47+00:00,"Fix broken uci notation for promotions  Silly typo (introduced in e304db9d1ecf6a23) completely messed up move notation in case of promotions causing ""Illegal move"" warning in cutechess-cli.  Reported by J�rg Oster.  No functional change.",True,4,2012-10-01
mcostalba,mcostalba,2012-10-26 10:41:12+00:00,Fix asserts due to TT access races  In multi-threads runs with debug on we experience some asserts due to the fact that TT access is intrinsecally racy and its contents cannot be always trusted so must be validated before to be used and this is what the patch does.  No functional case.,True,4,2012-10-01
mcostalba,mcostalba,2012-10-26 09:56:33+00:00,Extend full 3 fold detection to PvNodes  And restore old behaviour of not returning from a RootNode without updating RootMoves[].  Also renamed is_draw() template parameters to reflect a 'positive' logic (Check instead of Skip) that is easier to follow.  New bench: 5312693,True,4,2012-10-01
mcostalba,mcostalba,2012-10-26 09:01:10+00:00,Merge pull request #34 from jromang/repetition  Improve 3 fold repetition detection,True,4,2012-10-01
jromang,jromang,2012-10-25 13:57:44+00:00,Full three fold repetition detection only at root node,True,3,2012-10-01
jromang,jromang,2012-10-25 06:54:05+00:00,Enable true 3 fold detection in search,True,3,2012-10-01
jromang,jromang,2012-10-25 06:28:55+00:00,Allow full repetition detection  Based on sshivaji 6ee19aa5389ce60181907ba53bbb50642f2d5657 commit,True,3,2012-10-01
mcostalba,mcostalba,2012-10-24 22:07:59+00:00,Unknown message,True,2,2012-10-01
mcostalba,mcostalba,2012-10-24 13:01:39+00:00,Rename RootPosition and shuffle think()  Just slightly code reshuffles; noting interesting here...  No functional change.,True,2,2012-10-01
mcostalba,mcostalba,2012-10-24 12:31:33+00:00,Drop Chess960 and UCIMultiPV globals and rename MultiPV  No functional change.,True,2,2012-10-01
mcostalba,mcostalba,2012-10-24 10:52:29+00:00,Wrap in a class Skill Level code  Note that the actual pickup is done in the class d'tor so to be sure it is always triggered; even in case of a sudden exit due to a 'stop' signal.  No functional change.,True,2,2012-10-01
mcostalba,mcostalba,2012-10-24 09:35:53+00:00,Shuffle aspiration window loop  No functional change.,True,2,2012-10-01
mcostalba,mcostalba,2012-10-22 08:03:53+00:00,Retire refine_eval()  Inline its content and better comment what it does through some renaming.  No functional change.,True,0,2012-10-01
mcostalba,mcostalba,2012-10-21 22:55:16+00:00,Don't copy a full Position object in print()  Function move_to_san() requires the Position to be passed by referenced because a do/undo move is done inside the function to detect a possible mate and to add to the san string the corresponding '#' suffix.  Instead of passing a copy of current position pass directly the original position object after const casting it. This has the advantage to avoid a costly Position copy; on the down side a bench test could report different searched nodes if print(move) is used; due to the additionals do_move() calls.  No functional change.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-21 22:38:12+00:00,Don't need to init board[] with NO_PIECE  Now that NO_PIECE == 0 the common memset() will do the work.  No functional change.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-21 09:50:56+00:00,Change NO_PIECE value and shrink PieceValue[]  This requires changing color_of() definition.  No functional change.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-21 09:16:21+00:00,Use self-describing constants instead of numbers  And remove now useless comments.  No functional change.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-21 07:12:02+00:00,Move RootColor from Eval to Search  No functional change.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-20 09:02:37+00:00,Contempt factor: use DrawValue also in case of stealmates  Spotted by J�rg Oster.  No functional change (when contempt factor is not used).,True,5,2012-10-01
mcostalba,mcostalba,2012-10-20 08:48:26+00:00,Fix compatibility with old Windows 95 and 98  Report and patches by bnemias.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-10-01
mcostalba,mcostalba,2012-10-20 08:07:27+00:00,Merge pull request #33 from daylen/master  Further improve OS X compatibility    Change the minimum supported version from 10.6 to 10.0    No functional change.,True,5,2012-10-01
daylen,daylen,2012-10-16 07:13:16+00:00,Further improve compatibility when compiling on OS X  Change the minimum supported version from 10.6 to 10.0,True,1,2012-10-01
mcostalba,mcostalba,2012-10-14 23:13:41+00:00,Fix Makefile for PowerPC with prefetch enabled  Existing Makefile is buggy for PowerPC; it has no SSE; yet it is given it if Prefetch is enabled; because it isn't ARMv7.  Patch from Matthew Brades.  No functional change.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-14 10:47:16+00:00,Document why is safe ttValue == VALUE_NONE  We can have ttValue == VALUE_NONE when we use a TT slot to just save a position static evaluation; but in this case we also save DEPTH_NONE so to avoid using the ttValue in search. This happens to work; but due to a number of lucky and tricky cases that we now documnet through a bunch of asserts and a little change to value_from_tt() that has no real effect but clarifing the code.  No functional change.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-14 07:02:17+00:00,Set TT size to 32 MB during 'bench'  On some platforms 128 MB of RAM for TT is too much; so run 'bench' with the default 32 MB size.  No functional change although of course now 'bench' reports a different number: 5545018,True,6,2012-10-01
mcostalba,mcostalba,2012-10-13 12:49:01+00:00,Move all Contempt Factor code to search.cpp  Where it is used.  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-13 12:24:01+00:00,Retire BitCount8Bit[] table  Use popcount() instead in the only calling place. It is used only at initialization so there is no speed regression and anyhow even initialization itself is not slowed down: magic bitboard setup stays around 175 msec on my slow 32bit Core Duo.  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-13 11:45:45+00:00,Use new 64 bit De Bruijn BitScan  Allows to sync 32 and 64 bits implementations.  Idea by Kim Walisch; reported by Gerd Isenberg: http://talkchess.com/forum/viewtopic.php?t=45554  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-13 09:45:14+00:00,"Retire can_return_tt() and rewirte TT-hit code  Simplify the code and doing this introduce a couple of (very small) functional changes:  - Always compare to depth even in ""mate value"" condition - TT cut-off in qsearch also in case of PvNode; as in search  Verified against regression with 2500 games at 30""+0.05 on 2 threads: 451 - 444 - 1602  Functional changed: new bench is 5544977",True,5,2012-10-01
mcostalba,mcostalba,2012-10-13 08:40:38+00:00,Scale contempt factor to zero at endgame  Contempt Factor is more effective at opening/middle game and seems harmful at endgame phase. See:  http://chessprogramming.wikispaces.com/Contempt+Factor  http://web.archive.org/web/20070707023203/www.brucemo.com/compchess/programming/contempt.htm  Therefore we scale down the contempt factor while going on with the game so to reach zero at endgame phase.  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-11 19:12:43+00:00,"Fix a minor bug in search  As Joona says: ""The problem is that when doing full window search (-VALUE_INFINITE; VALUE_INFINITE); and pruning all the moves will return fail low which is mate score; because only clause touching alpha is ""mate distance pruning"". So we are returning mate score although we are just pruning all the moves. In reality there probably is no mate in sight.  Bug spotted and fixed by Joona.",True,3,2012-10-01
jromang,mcostalba,2012-10-11 19:01:52+00:00,ARM lsb/msb assembly  Implement lsb/msb using armv7 assembly instructions. msb is the easiest one; using a gcc intrinsic that generates code using the ARM's clz instruction. lsb is also using this clz instruction; but with the help of ARM's 'rbit' (bit reversing) instruction. This leads to a >2% speed gain.  I also renamed 'arm-32' to the more meaningfull 'armv7' in the Makefile  No functional change.,True,3,2012-10-01
jromang,mcostalba,2012-10-11 05:34:48+00:00,Introduce arm-32 ARCH in Makefile  No functional change.,True,3,2012-10-01
mcostalba,mcostalba,2012-10-10 06:13:36+00:00,Retire is_dangerous() and inline its content  No functional change.,True,2,2012-10-01
mcostalba,mcostalba,2012-10-08 09:43:47+00:00,Rearrange prefetch code  No functional change.,True,0,2012-10-01
mcostalba,mcostalba,2012-10-07 22:36:08+00:00,Merge pull request #29 from RyanTaker/patch-3  Add Contempt Factor to Polyglot.ini,True,6,2012-10-01
RyanTaker,RyanTaker,2012-10-07 16:49:55+00:00,Add Contempt Factor in Polyglot  The contempt factor was previously not included in polyglot.ini,True,6,2012-10-01
mcostalba,mcostalba,2012-10-07 11:15:41+00:00,Sync qsearch with search  Port to qsearch() the same changes we recently added to search().  Overall this search refactoring series shows almost 2% speed up on gcc compile.  No functional change.,True,6,2012-10-01
daylen,daylen,2012-10-07 00:56:12+00:00,Improve compatibility with older versions of Mac OS X  Use the -mmacosx-version-min flag to support older versions of Mac OS X (like version 10.6 and 10.7) when compiled on a machine running version 10.8.,True,6,2012-10-01
mcostalba,mcostalba,2012-10-06 11:01:44+00:00,Fix POPCNT support on mingw 64  When using asm 'popcnt' instruction the given operand registers must be of the same type.  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-06 10:34:09+00:00,Fix mingw compile with ARCH=x86-64  When using the Makefile (as for the mingw case); IS_64BIT and USE_BSFQ are already set with ARCH=x86-64 and do not need to be redefined.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-10-01
mcostalba,mcostalba,2012-10-06 08:12:34+00:00,Fix Contempt Factor implementation  First disable Contempt Factor during analysis; then calculate the modified draw score from the point of view of the player; so from the point of view of RootPosition color.  Thanks to Ryan Taker for suggesting the fixes.  No functional change.,True,5,2012-10-01
mcostalba,mcostalba,2012-10-06 07:09:27+00:00,Fix fallouts from previous patch  These kind of arch specific code is really nasty to make it right becuase you need to verify on all the platforms.  Now should compile properly also on ARM  Reported by Jean-Francois.  No functional change.,True,5,2012-10-01
jromang,mcostalba,2012-10-05 22:43:16+00:00,Allow prefetching on non-x86 platforms with gcc  In particular on ARM processors. Original patch by Jean-Francois; sligtly modified by me to preserve the meaning of NO_PREFETCH flag.  Verified with gcc; clang and icc that prefetch instruction is correctly created.  No functional change.,True,4,2012-10-01
mcostalba,mcostalba,2012-10-05 16:24:38+00:00,Retire futility_move_count()  And remove (bestValue < beta) condition from moves loop.  No functional change.,True,4,2012-10-01
mcostalba,mcostalba,2012-10-05 11:53:05+00:00,Rewrite search best value update  A simplification and also a small speed-up of about 1% mainly due to reducing calls to thisThread->cutoff_occurred().  Worst case split point recovering time after a cut-off occurred is limited to 3 msec on my slow PC; and usually is below 1 msec; so it seems safe to remove the cutoff_occurred() check.  No functional change.,True,4,2012-10-01
mcostalba,mcostalba,2012-10-05 06:28:23+00:00,Add experimental contempt factor  This is very crude and very basic: simply in case of a draw for repetition or 50 moves rule return a negative score instead of zero according to the contempt factor (in centipawns). If contempt is positive engine will try to avoid draws (to use with weaker opponents); if negative engine will try to draw. If zero (default) there are no changes.  No functional change.,True,4,2012-10-01
mcostalba,mcostalba,2012-10-03 16:59:24+00:00,Retire EasyMoveMargin  Use a value related to PawnValue instead.  This is a different patch from previous one because could affect game play and skill levels; although in a mostly unmeasurable way. Indeed thresold has been raised so easy move is a bit harder to trigger and skill level is a bit more prone to blunders.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-10-01
mcostalba,mcostalba,2012-10-03 16:56:36+00:00,Don't hide thresolds values  Show the real value in the code; not hide it behind a variable name; especially when there is only once occurence.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-10-01
mcostalba,mcostalba,2012-10-02 04:39:27+00:00,"Further push singular extension  Extend for an extra half-ply in case the node is (probably) going to fail high. In this case the added overhead is limited.  A novelity is the way this patch has been tested: Always in self-play but with a much longer TC to allow the singular extension to fully kick in and also (my impression) to have less noisy results.  Ater 1015 games on my QUAD at 60""+0.05 Mod vs Orig 173 - 150 - 692 ELO +8",True,1,2012-10-01
mcostalba,mcostalba,2012-10-01 08:44:04+00:00,Further rearrange search()  No functional change.,True,0,2012-10-01
mcostalba,mcostalba,2012-09-30 09:35:14+00:00,Don't push on the stack 200KB in one go  This could be a limit on some platforms (as it seems to be in Native Client). Patch from a SF fork on github:  https://github.com/ccherng/Stockfish/commit/47374afd6fdfabd9de183a7a67d645daad45fb21  No functional change.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-30 08:19:22+00:00,"Add support for node limited search  Handle also the SMP case. This has been quite tricky; not trivial to enforce the node limit in SMP case becuase with ""helpful master"" concept we can have recursive split points and we cannot lock them all at once so there is the risk of counting the same nodes more than once.  Anyhow this patch should be race free and counted nodes are correct.  No functional change.",True,6,2012-09-01
mcostalba,mcostalba,2012-09-29 21:12:39+00:00,Skip some useless initializations in search()  And rearrange a bit the initialization code. Still some polishing to do; but it is a first step.  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-29 16:05:49+00:00,Don't need to early check PV moves for legality  As long as isPvMove (renamed to pvMove) is set after legality check; we can postpone legality even in PV case.  Patch aligns the PV case with the common non-pv one.  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-22 09:19:10+00:00,Drop a magic in book.cpp  Mask out move's spacial flags without relying on internal Move representation.  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-22 08:59:33+00:00,Tweaks to bitcount functions  Seems even a bit faster now (almost 1% in 32bit case).  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-21 22:37:18+00:00,Restore development version,True,4,2012-09-01
mcostalba,mcostalba,2012-09-21 22:20:44+00:00,Stockfish 2.3.1  Stockfish bench signature is: 5423738,True,4,2012-09-01
glinscott,mcostalba,2012-09-21 21:25:13+00:00,Bonus for rook/queen attacking pawns on same rank  Patch and tuning by Gary Linscott from an idea of Ryan Taker.  Double tested by Gary:  Wins: 3390 Losses: 2972 Draws: 11323 LOS: 99.999992% ELO: 8.213465 +- 99%: 6.746506 95%: 5.124415 Win%: 51.181792 +- 99%: 0.969791 95%: 0.736740  And by me:  After 5612 games 1255  1085  3271 +11 ELO,True,4,2012-09-01
mcostalba,mcostalba,2012-09-20 17:25:27+00:00,Fix compile on 64 bits  Reported by Quocvuong82.  No functional change.,True,3,2012-09-01
mcostalba,mcostalba,2012-09-19 18:47:53+00:00,Simplify BSFTable initialization  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-09-01
mcostalba,mcostalba,2012-09-16 12:14:55+00:00,Fix crash under Chess 960  We have a crash with this position:  rkqbnnbr/pppppppp/8/8/8/8/PPPPPPPP/RKQBNNBR w HAha -  What happens is that even if we are castling QUEEN_SIDE; in this case we have kfrom (B8) < kto (C8) so the loop that checks for attackers runs forever leading to a crash.  The fix is to check for (kto > kfrom) instead of Side == KING_SIDE; but this is slower in the normal case of ortodhox chess; so rewrite generate_castle() to handle the chess960 case as a template parameter and allow the compiler to optimize out the comparison in case of normal chess.  Reported by Ray Banks.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-16 08:32:57+00:00,Rename class Book to PolyglotBook  And move struct BookEntry out of the header where it is not needed.  No functional change.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-16 06:57:26+00:00,"Fix KpsK endgame  Broken by commit a44c5cf4f77b05a03 of 3 /12 / 2011 that was labeled ""No functional change"" because our 'bench' test didn't triggered that particular endgame. Indeed we need to run a specific bench on a set of endgames position when touching endgame.cpp because normal bench does not cover endgames properly.  Found by MSVC 2012 code analyzer.",True,6,2012-09-01
mcostalba,mcostalba,2012-09-15 09:02:08+00:00,Restore development version  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-15 08:56:17+00:00,Stockfish 2.3  Stockfish bench signature is: 5416292,True,5,2012-09-01
mcostalba,mcostalba,2012-09-15 08:55:39+00:00,Fix compile with Intel 13.0  It seems Intel is unable to properly workout templates with 'static' storage specifier.  Workaround using an anonymous namespace instead.  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-14 08:05:46+00:00,Don't exit earlier from aspiration window loop  Currently we exit the loop when  abs(bestValue) >= VALUE_KNOWN_WIN  but there is no logical reason for this. It seems more natural to re-search again with full open window.  This has practically no impact in most cases; we have a 'no functional change' running 'bench' command.,True,4,2012-09-01
mcostalba,mcostalba,2012-09-14 07:57:13+00:00,Fix MSVC 2012 64bits warnings  Reported by Rein.  No functional change.,True,4,2012-09-01
mcostalba,mcostalba,2012-09-11 18:24:31+00:00,Speed-up generate<LEGAL>  The trick here is to check for legality only in the (rare) cases we have pinned pieces or a king move or an en-passant.  This trick is able to increase the speed of perft of more then 20%!  No functional change.,True,1,2012-09-01
mcostalba,mcostalba,2012-09-09 15:05:02+00:00,Remove redundancy in move generation  Introduce generate_all_moves() and remove a good bunch of redundant code.  No functional change.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-09 09:50:28+00:00,Simplify generate_castle()  Skipping the calls to std::min(); std::man() we get even a nice speed-up on perft.  No functional change.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-09 08:24:40+00:00,Rename *last to *end  It is a more correct name because it points past the last move of the list.  No functional change.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-09 08:02:11+00:00,Enable link time optimization only when optimizing  Because it is quite slow; skip it when 'optimize' flag is 'no'  No functional change.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-07 13:21:50+00:00,"Revert ""Simplify Option c'tor""  std::to_string() is C++11 material; not c++03.  So revert the patch.",True,4,2012-09-01
mcostalba,mcostalba,2012-09-06 16:18:13+00:00,Simplify Option c'tor  No functional change.,True,3,2012-09-01
mcostalba,mcostalba,2012-09-04 07:38:51+00:00,Get rid of struct Time  We just need the milliseconds of current system time for our needs. This allows to simplify the API.  No functional change.,True,1,2012-09-01
mcostalba,mcostalba,2012-09-02 15:04:22+00:00,Rename current_time() to now()  Follow C++11 naming conventions.  No functional change.,True,6,2012-09-01
mcostalba,mcostalba,2012-09-01 22:27:53+00:00,Greatly speed up SEE  Simply reshuffling the code inverting the condition in next_attacker() yields a miraculous speed up of more than 3% under gcc!  On my laptop a bench run goes from 320Knps to 330Knps  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-01 16:57:38+00:00,Unroll least valuable attacker loop in SEE  This allows to reduce the scanning for new X-ray attacks according to the capturing piece type.  It seems to be just a very small speed increase in MSVC 64 bit and gcc 32 bit; I guess cache issues value more than some instruction less to execute (as usual).  No functional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-09-01 13:42:04+00:00,Slightly simplify SEE  Some renaming and small code reshuffle.  No fuctional change.,True,5,2012-09-01
mcostalba,mcostalba,2012-08-31 17:47:07+00:00,Retire Time::restart()  Simplify API.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-08-01
mcostalba,mcostalba,2012-08-31 17:47:00+00:00,Don't need to memset HashTable  Default c'tor Entry() already initializes to zero all its POD members.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-08-01
mcostalba,mcostalba,2012-08-29 17:11:44+00:00,Terminate threads before to exit main()  It is very difficult and risky to assure that a running thread doesn't access a global variable. This is currently true; but could change in the future and we don't want to rely on code that works 'by accident'. The threads are still running when ThreadPool destructor is called (after main() returns) and this could lead to crashes if a thread accesses a global that has been already freed. The solution is to use an exit() function and call it while we are still in main(); ensuring global variables are still alive at threads termination time.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-08-01
mcostalba,mcostalba,2012-08-29 17:11:44+00:00,Convert to sync_cout and sync_endl  Serialize access to std::cout all over the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-08-01
mcostalba,mcostalba,2012-08-29 17:11:31+00:00,Introduce serialization of accesses to std::cout  When many threds concurrently print you need to serialize the access to std::cout to avoid output lines are intermixed with the contents of each thread.  This is not strictly needed at the moment because only main thread prints out; although some ad-hoc test could trigger UCI::loop() printing while searching.  Anyhow we want to lift this pretty avoidable constrain also as a prerequisite for future work.  This patch just introduces the support; next one will enable the serialization.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-08-01
mcostalba,mcostalba,2012-08-27 17:17:02+00:00,Correctly handle handover of setup states  Before the search we setup the starting position doing all the moves (sent by GUI) from start position to the position just before to start searching.  To do this we use a set of StateInfo records used by each do_move() call. These records shall be kept valid during all the search because repetition draw detection uses them to back track all the earlier positions keys. The problem is that; while searching; the GUI could send another 'position' command; this calls set_position() that clears the states! Of course a crash follows shortly.  Before searching all the relevant parameters are copied in start_searching() just for this reason: to fully detach data accessed during the search from the UCI protocol handling. So the natural solution would be to copy also the setup states. Unfortunatly this approach does not work because StateInfo contains a pointer to the previous record; so naively copying and then freeing the original memory leads to a crash.  That's why we use two std::auto_ptr (one belonging to UCI and another to Search) to safely transfer ownership of the StateInfo records to the search; after we have setup the root position.  As a nice side-effect all the possible memory leaks are magically sorted out for us by std::auto_ptr semantic.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-08-01
mcostalba,mcostalba,2012-08-26 16:07:54+00:00,Use std::deque to store setup states,True,6,2012-08-01
mcostalba,mcostalba,2012-08-25 19:00:07+00:00,Document PolyGlotRandoms[] offsets  Should be more clear from where the 'magic' numbers come from.  Also bit of reformat while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-08-01
mcostalba,mcostalba,2012-08-24 12:41:29+00:00,Explicitly use threads.size()  Instead of just size(). Although code is longer; should be more immediate to understand when reading.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-08-01
mcostalba,mcostalba,2012-08-24 11:30:36+00:00,Introduce struct Mutex and ConditionVariable  To mimics C++11 std::mutex and std::condition_variable; also rename locks and condition variables to be more uniform across the classes.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-08-01
mcostalba,mcostalba,2012-08-24 08:30:50+00:00,Slightly microptimize SEE  Reduce of one instruction. It seems a tad faster on the profiler now. Very slightly but anyhow it is a code semplification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-08-01
mcostalba,mcostalba,2012-08-22 10:44:43+00:00,Use size_t as operator[] argument type  This better mimics std::vector::operator[] and fixes a warning with MSVC 64bit.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-08-01
mcostalba,mcostalba,2012-08-22 10:34:52+00:00,Merge generate_direct_checks() in generate_moves()  Further reduce redundancy in move generation. Veirifed no speed regression on MSVC; Clang and gcc.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-08-01
mcostalba,mcostalba,2012-08-22 08:23:03+00:00,Streamline generate_moves()  Greatly simplify these very performace critical functions. Amazingly we don't have any speed regression actually under MSVC we have the same assembly for generate_moves() !  In generate_direct_checks() 'target' is calculated only once being a loop invariant.  On Clang there is even a slight speed up.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-08-01
mcostalba,mcostalba,2012-08-20 18:17:58+00:00,Reformat piece values arrays  And rename stuff while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-08-01
mcostalba,mcostalba,2012-08-20 17:24:06+00:00,Move zobrist keys out of Position  Are used by Position but do not belong to that class; there is only one instance of them (that's why were defined as static); so move to a proper namespace instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-08-01
mcostalba,mcostalba,2012-08-20 13:44:30+00:00,Retire copy c'tor from class Position  Not needed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-08-01
mcostalba,mcostalba,2012-08-20 06:54:38+00:00,Prefer a reference to a pointer  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-08-01
mcostalba,mcostalba,2012-08-19 23:08:34+00:00,Use enums instead of constants for piece values  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-08-01
mcostalba,mcostalba,2012-08-19 22:01:48+00:00,Document De Bruijn sequences  Insted of raw magic numbers.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-08-01
mcostalba,mcostalba,2012-08-19 22:01:47+00:00,Avoid wake up master thread when useless  Check we are the last slave of the split point before to wake up the master. This should avoid spurious wakes up.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-08-01
mcostalba,mcostalba,2012-08-19 22:01:28+00:00,Simplify idle_loop() signature  We can detect the split point master also from within idle_loop; so we can call the function without parameters and remove an overloaded member hack in Thread class.  Note that we don't need to take a lock around curSplitPoint when entering idle_loop() because if we are the master then curSplitPoint cannot change under our feet (because is_searching is set and so we cannot be reallocated); if we are a slave we enter idle_loop() only upon Thread creation and in that case is always splitPointsCnt == 0. This is true even in the very rare case that curSplitPoint != NULL; if we have been already allocated even before entering idle_loop().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-08-01
mcostalba,mcostalba,2012-08-19 10:01:46+00:00,Prefer size_t over int for array sizes  Align to standard library conventions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-08-01
mcostalba,mcostalba,2012-08-18 12:08:12+00:00,Introduce namespace Bitbases  Let's continue this namespace galore...  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-08-01
mcostalba,mcostalba,2012-08-18 11:26:22+00:00,Introduce namespace UCI  Ater previous patch it comes naturally to take this extra step.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-08-01
mcostalba,mcostalba,2012-08-18 10:30:27+00:00,Retire struct OptionsMap  Directly use the underlying std::map instead and avoid a useless inheritance.  As a nice side-effect Options global object has now a default c'tor avoiding possible issues with globals initializations.  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-08-01
mcostalba,mcostalba,2012-08-18 10:00:56+00:00,Explicitly qualify STL functions  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-08-01
mcostalba,mcostalba,2012-08-18 09:46:24+00:00,Retire MovePickerExt struct  Templetize MovePicker::next_move() member function instead. It is easier and we also avoid the forwarding of MovePicker() c'tor arguments in the common case.  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-08-01
mcostalba,mcostalba,2012-07-30 17:05:15+00:00,Guard against 'divide by zero' in bench  Also remove an useless cast.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-07-01
jprostko,mcostalba,2012-07-30 05:29:46+00:00,Added Haiku-specific changes to Makefile  First change: If Haiku is host platform; change installation prefix to /boot/common/bin  Second change: Only link in pthreads if Haiku isn't host platform.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-07-01
mcostalba,mcostalba,2012-07-26 17:16:24+00:00,Fix UCI promotion move notation  Regression introduced by revision f0db6a6c0b82a586  Spotted by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2012-07-01
listx,listx,2012-07-19 19:09:39+00:00,Readme.txt: more grammar/style fixes,True,3,2012-07-01
listx,listx,2012-07-18 23:46:51+00:00,Readme.txt: grammar/stylistic fixes,True,2,2012-07-01
mcostalba,mcostalba,2012-07-15 08:22:00+00:00,Fix regression in move_to_san()  Broken since commit 628808a11382a3ac  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-07-01
mcostalba,mcostalba,2012-07-15 07:29:07+00:00,Introduce notation.h  And group there all the formatting functions but uci_pv() that requires access to search.cpp variables.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-07-01
mcostalba,mcostalba,2012-07-15 06:48:33+00:00,Rewrite pv_info_xxx() signatures  Use the helpers to format the PV info but without writing to output stream (file or cout). Message formatting and sending are two logically different task.  Incidentaly reintroduce the pretty_pv() name; from Glaurung memories :-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-07-01
mcostalba,mcostalba,2012-07-14 11:29:11+00:00,Include castle moves in 'dangerous' flag  Simplifies the code and seems more natural.  We have a very small fucntional change becuase now at PV nodes castles are extended one ply anyhow.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-07-01
mcostalba,mcostalba,2012-07-14 11:18:14+00:00,Merge exclusion search conditions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-07-01
mcostalba,mcostalba,2012-07-13 16:57:26+00:00,Remove redundant condition in is_dangerous()  A pawn on 7th is always passed so retire this redundant condition.  No funtional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-07-01
mcostalba,mcostalba,2012-07-08 09:50:23+00:00,Silence a MSVC warning in class Tie  With warning level 4 MSVC complains that a default assignment operator could not be generated due to member 'file' is a reference (warning C4512).  Use a pointer instead of a reference and move struct Tie outisde class Logger while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-07-01
mcostalba,mcostalba,2012-07-08 08:36:40+00:00,Rename first_1 / last_1 in lsb / msb  It seems more accurate: lsb is clear while 'first bit' depends from where you look at the bitboard.  And fix compile in case of 64 bits platforms that do not use BSFQ intrinsics.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-07-01
mcostalba,mcostalba,2012-07-07 18:46:13+00:00,Use last_1() to compute new TT size  Transposition table consists of a power of 2 number of TTCluster entries.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-07-01
mcostalba,mcostalba,2012-07-07 18:05:38+00:00,Revert to -O3 with Clang  Instead of -O4 option that does not work with both mingw and Linux gcc (tested with Clang 3.1).  As reported by Reed Kotler: Turns out that -O4 is not a valid option for clang unless you have the proper gold linker and plugins built. That's because -O4 enables LTO; which writes out bitcode files during the compile; and then loads those and optimizes them during the link phase.  It requires a linker that supports LLVM's LTO. There is a plugin for Gold available as part of LLVM.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-07-01
mcostalba,mcostalba,2012-07-07 15:28:39+00:00,Fix signedness warning in time_to_msec()  We have a signed integer here so let the return type take in account that.  Found by Clang with -Weverything option.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-07-01
mcostalba,mcostalba,2012-07-05 10:55:35+00:00,"More idiomatic signature for operator=()  Return a reference instead of void so to enable chained assignments like  ""p = q = Position(...);""  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2012-07-01
mcostalba,mcostalba,2012-07-05 10:48:17+00:00,"Streamline null search reduction formula  Although a (little) functional change; we have no ELO change but formula it is now more clear.  After 13019 games at 30""+0.05 Mod vs Orig 2075 - 2088 - 8856 ELO 0 (+- 3.4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2012-07-01
mcostalba,mcostalba,2012-06-30 07:00:48+00:00,"Clear transposition table on ""ucinewgame""  It seems the standard behaviour as implemented in most engines although UCI protocol does not specify what to do upon ""ucinewgame"" command.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-06-01
mcostalba,mcostalba,2012-06-25 07:09:55+00:00,Templetize make_move() helpers  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-06-01
mcostalba,mcostalba,2012-06-24 23:14:42+00:00,Reduce indentation in UCIOption::operator=()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-06-01
mcostalba,mcostalba,2012-06-24 11:38:29+00:00,Micro-optimize move_to_san()  Calculate the attacks only for the piece to disambiguate; not for all.  Also some reformatting while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-06-01
mcostalba,mcostalba,2012-06-24 10:07:18+00:00,Use type_of() to categorize the moves  Needed to rename old MoveType (used in move generation) to GenType.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-06-01
mcostalba,mcostalba,2012-06-24 08:46:31+00:00,Rename move.cpp  to notation.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-06-01
mcostalba,mcostalba,2012-06-24 08:45:37+00:00,Rename ThreadsManager to ThreadPool  It is a more standard naming convention.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-06-01
mcostalba,mcostalba,2012-06-23 08:17:54+00:00,Replace make_square() with operator|(File; Rank)  Be fancy :-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-06-01
mcostalba,mcostalba,2012-06-23 07:34:07+00:00,Coding style in move.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-06-01
mcostalba,mcostalba,2012-06-22 05:31:18+00:00,"Add min pawn-king distance to endgame evaluation  At endgame time push the king near his pawns (actually one of them).  Original idea is from Critter (although slightly different); implementation is mine and is completely different from the original; in particular it is different the algorithm to compute the minimum distance from pawns.  After 19895 games at 15""+0.05 Mod vs Orig 3638 - 3248 - 13009 ELO +7  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-06-01
mcostalba,mcostalba,2012-06-17 08:41:18+00:00,Calculate min distance between king and his pawns  Just added infrastructure.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-06-01
mcostalba,mcostalba,2012-06-10 10:46:52+00:00,Reformat pick_random() in magics calculation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-06-01
mcostalba,mcostalba,2012-06-02 08:04:11+00:00,Fix a compile error in opposite_colors()  Error is due to ambiguous overloading of operator^ because we have both the built-in operator^(int; int) and the user defined operator^(Bitboard; Square).  This error does not trigger when using Makefile becuase; due to luck; the user defined operator^(Bitboard; Square) happens to be always defined _after_ opposite_colors() so that compiler does not claim. But in case of Microsoft MSVC we don't have a Makefile and the order of files compilation is chosen by the compiler (in an unpredictable way). So it could still happen that error is not detected (as in my case); but in another case the order of compilation of the files could be so that at some point both operator^ were defined before opposite_colors() and this triggers the error.  The fix is much simpler than the explanation :-)  Reported by Quocvuong82.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-06-01
mcostalba,mcostalba,2012-05-27 13:13:14+00:00,Fix an issue when adding a book during the game  Currently when we fail to open a book file; for instance if it doesn't exsist; we leave Book::open() with ifstream failbit set. If then the book file is added; we correctly open it at next attempt; but failbit is still set so that after opening we exit because ifstream::good() returns false.  The fix is to reset failbit upon exiting.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-05-01
mcostalba,mcostalba,2012-05-27 12:46:55+00:00,Retire PieceOffset[] in book.cpp  And calculate piece offset on the fly. Also improve comments.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-05-01
mcostalba,mcostalba,2012-05-26 22:17:22+00:00,Fix a possible 'Division by zero'  In case a book entry has 'count' field set to 0 we crash. Spotted by Clang's static analyzer.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-05-01
mcostalba,mcostalba,2012-05-26 21:43:23+00:00,Rename psq_score in ReducedStateInfo  So to be fully in sync with StateInfo; and move struct to position.h; just below StateInfo.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-05-01
mcostalba,mcostalba,2012-05-26 09:14:08+00:00,Fix book file regression  Revision 2aac860db3d04881103a3b0d0 of 27 / 4 / 2012 changed can_castle() signatures from bool to int and this broke the code that calculates polyglot hash key in book.cpp  Instead of directly fixing the code we prefer to change castling rights definitions to align to the polyglot ones (as we did in previous patch). After this step we can simply take internal castle rights as they are and use them directly to calculate polyglot book hash key; as we do in this patch that fixes the regression.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-05-01
mcostalba,mcostalba,2012-05-26 09:03:35+00:00,Redefine enum CastleRight  To be aligned with PolyGlot book castle right definitions.  This will be used by next patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-05-01
mcostalba,mcostalba,2012-05-19 07:45:16+00:00,Add a known draw case in kpk bitbase generation  Early classify as known draws the positions where white king is trapped on the rook file.  Suggested by Dan Honeycutt.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-05-01
mcostalba,mcostalba,2012-05-12 11:50:11+00:00,Simplify Position::print()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-05-01
mcostalba,mcostalba,2012-05-12 09:00:26+00:00,"Revert ""Don't split if reduced below min_split_depth""  After extensive testing (I was off line this week and let the test go on) it seems this change is useless:  After 33968 games on a QUAD (4 threads) at 15""+0.05 Mod vs Orig 5425 - 5550 - 22993 ELO -1 (+-2.1)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-05-01
mcostalba,mcostalba,2012-05-12 08:21:52+00:00,Improve previous patch  Only in case of promotion we care about an upper case promotion piece char; so std::transform() is overkill for the task.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-05-01
bpfliegel,mcostalba,2012-05-11 23:04:17+00:00,Junior promotion patch  Assumption: Junior sends promotions according to the side to move (ucase/lcase). Fact: Stockfish generally handles promotion lcase. Patch: Handling position fen input moves always with lcase promotions.  Ported back by Portfish. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-05-01
mcostalba,mcostalba,2012-05-11 16:16:51+00:00,Fix compilation with Android NDK  It seems ADL lookup is broken with the STLPort library. Peter says:  The compiler is gcc 4.4.3; but I don't know how many patches they have applied to it. I think gcc has had support for Koenig lookup a long time. I think the problem is the type of the vector iterator. For example; line 272 in search.cpp:   if (bookMove && count(RootMoves.begin(); RootMoves.end(); bookMove))  gives the error:  jni/stockfish/search.cpp:272: error: 'count' was not declared in this scope  Here RootMoves is:   std::vector<RootMove> RootMoves;  If std::vector<T>::iterator is implemented as T*; then Koenig lookup would fail because RootMove* is not in namespace std.  I compile with the stlport implementation of STL; which in its vector class has:   typedef value_type* iterator;  I'm not sure if this is allowed by the C++ standard. I did not find anything that says the iterator type must belong to namespace std. The consensus in this thread  http://compgroups.net/comp.lang.c++.moderated/argument-dependent-lookup/433395  is that the stlport iterator type is allowed.  Report and patch by Peter Osterlund.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-05-01
mcostalba,mcostalba,2012-05-01 12:16:20+00:00,Simplify attacks_bb()  And some formatting while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-05-01
mcostalba,mcostalba,2012-05-01 11:09:20+00:00,Change pos.pieces() argument order  Let first argument to be the 'color'. This allows to align pos.pieces() signatures with piece_list(); piece_count() and all the other functions where 'color' argument is passed as first one.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-05-01
mcostalba,mcostalba,2012-05-01 10:37:12+00:00,Convert constants to decimal representation  Hex representation doesn't add any value in those cases. Preserve hex representation where more self-documenting for instance for binary masks values.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-05-01
mcostalba,mcostalba,2012-04-29 22:28:07+00:00,"Don't split if reduced depth is below min_split_depth  It seems to increase SMP performances. To note that this patch goes in the opposite direction of ""Active reparenting"" where we try to reparent an idle slave as soon as possible. Instead here we prefer to keep it idle instead of splitting on a shallow / near the leaves node.  After 11550 games on a QUAD (4 threads) at 15""+0.05 Mod vs Orig 1972 - 1752 - 7826 ELO +6 (+-3.6)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2012-04-01
mcostalba,mcostalba,2012-04-29 22:11:23+00:00,Increase optimization level of Clang  Set optimization level to 4 and get a 2.564% faster binary:  Stockfish (Clang; Level 4) bench: $ make build ARCH=osx-x86-64 COMP=clang (Clang does not support PGO) Average of 4 trials: Total time (ms): 5137.5 Nodes searched: 5631135 Nodes/second: 1096084.5  Stockfish (Clang; Level 3) bench: $ make build ARCH=osx-x86-64 COMP=clang (Clang does not support PGO) Average of 4 trials: Total time (ms): 5269.25 Nodes searched: 5631135 Nodes/second: 1068679.25  Stockfish (GCC; PGO) bench: $ make profile-build ARCH=osx-x86-64 Average of 4 trials: Total time (ms): 5286 Nodes searched: 5631135 Nodes/second: 1065292.25  Suggestion and performance tests by Daylen Yang.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-29 17:58:48+00:00,Remove unreachable extension condition  A PvNode that givesCheck has been already granted an extension of ONE_PLY in previous condition.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
trojanfoe,mcostalba,2012-04-29 10:47:02+00:00,Add support for Mac clang compiler  Makefile modified to support the clang compiler under Mac. This was tested using clang 4 under Mountain Lion; but should also work fine under Lion and possibly under Snow Leopard.  It requires the 'Xcode 4.x Command Line Tools' to be installed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-28 10:10:51+00:00,Proper indenting of multiple conditions  Triviality due to a boring saturday morning.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-04-01
mcostalba,mcostalba,2012-04-28 09:54:33+00:00,Rename square_empty() to is_empty()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-04-01
mcostalba,mcostalba,2012-04-28 09:37:55+00:00,Micro-optimize king evaluation  Reuse already calculated value; instead of calling king_safety() again.  Patch suggested by Balint Pfliegel.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-04-01
mcostalba,mcostalba,2012-04-27 09:59:18+00:00,Fix wrong condition in PawnEntry::king_safety()  Since revision 374c9e6b63d0e233371 we use also castling information to calculate king safety. So before to reuse the cached king safety score we have to veify not only king position; but also castling rights are the same of the pre-calculated ones.  This is a very subtle bug; found only becuase even after previous patch; consecutives runs of 'bench' _still_ showed different numbers. Pawn tables are not cleared between 'bench' runs and in the second run a king safety score; previously evaluated under some castling rights; was reused by another position with different castling rights instead of being recalculated from scratch.  Bug spotted and tracked down by Balint Pfliegel  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-04-01
mcostalba,mcostalba,2012-04-26 18:37:30+00:00,Clear TT before running 'bench'  Now that we can call bench multiple times from command prompt we need to ensure searched nodes remain constant across different runs.  Spotted by B�lint Pfliegel.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2012-04-01
mcostalba,mcostalba,2012-04-22 16:52:31+00:00,"Retire ""Active reparenting""  After 6K games at 60"" + 0.1 on QUAD with 4 threads this implementation fails to show a measurable increase; result is well within error bar.  Perhaps with 8 or more threads resut is better but we don't have the hardware to test. So retire for now and in case re-add in the future if it proves good on big machines.  The only good news is that we don't have a regression and implementation is stable and bug-free; so could be reused somewhere in the future.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2012-04-01
mcostalba,mcostalba,2012-04-17 17:51:49+00:00,Fix endless reaparenting loop  The check for detecting when a split point has all the slaves still running is done with:     slavesMask == allSlavesMask  When a thread reparents; slavesMask is increased; then; if the same thread finishes; because there are no more moves; slavesMask returns to original value and the above condition returns to be true. So that the just finished thread immediately reparents again with the same split point; then starts and then immediately exits in a tight loop that ends only when a second slave finishes; so that slavesMask decrements and the condition becomes false. This gives a spurious and anomaly high number of faked reparents.  With this patch; that rewrites the logic to avoid this pitfall; the reparenting success rate drops to a more realistical 5-10% for 4 threads case.  As a side effect note that now there is no more the limit of maxThreadsPerSplitPoint when reparenting.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-04-01
mcostalba,mcostalba,2012-04-16 17:28:08+00:00,Improved cutoff check when reparenting  Check for a cutoff occurred also high in the tree and not only at current split point.  This avoids some more wasted reparenting.  No functional chnage.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-04-01
mcostalba,mcostalba,2012-04-14 08:51:59+00:00,Use more_than_one() instead of single_bit()  It is more correct given what the function does. In particular single_bit() returns true also in case of empty bitboards.  Of course also the usual renaming while there :-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-04-01
mcostalba,mcostalba,2012-04-14 06:20:31+00:00,Reparent to latest  Instead of reparenting to oldest split point; try to reparent to latest. The nice thing here is that we can use the YBWC helpful master condition to allow the reparenting of a split point master as long as is reparented to one of its slaves.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-04-01
mcostalba,mcostalba,2012-04-12 20:17:52+00:00,"Don't reparent if a cutoff is pending  And update master->splitPointsCnt under lock protection. Not stricly necessary because single_bit() condition takes care of false positives anyhow; but it is a bit tricky and moving under lock is the most natural thing to do to avoid races with ""reparenting"".  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2012-04-01
mcostalba,mcostalba,2012-04-10 17:22:58+00:00,"Active Reparenting  In Young Brothers Wait Concept (YBWC) available slaves are booked by the split point master; then start to search below the assigned split point and; once finished; return in idle state waiting to be booked by another master.  This patch introduces ""Active Reparenting"" so that when a slave finishes its job on the assigned split point; instead of passively waiting to be booked; searches a suitable active split point and reprents itselfs to that split point. Then immediately starts to search below the split point in exactly the same way of the others split point's slaves. This reduces to zero the time waiting in idle loop and should increase scalability especially whit many (8 or more) cores.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2012-04-01
mcostalba,mcostalba,2012-04-09 12:11:38+00:00,Sync compute_xxx implementations  Also refactored Position::pos_is_ok() while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-04-01
mcostalba,mcostalba,2012-04-09 10:14:00+00:00,Move Tempo to evaluation  Apart from the semplification it is now more clear that the actual Tempo added was half of the indicated score. This is becuase at start compute_psq_score() added half Tempo unit and in do_move() white/black were respectively adding/subtracting one Tempo unit.  Now we have directly halved Tempo constant and everything is more clear.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-04-01
mcostalba,mcostalba,2012-04-09 08:41:41+00:00,Micro-optimize do_castle_move()  Use the same tables update trick used in do_move().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-04-01
mcostalba,mcostalba,2012-04-09 07:09:02+00:00,Disable book during analysis  It is still enabled during fixed limit search so to use it during fixed depth/nodes/time matches.  Bug reported by Daylen.  No functional changes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-04-01
mcostalba,mcostalba,2012-04-08 16:19:49+00:00,Introduce make_castle_right() helper  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-08 15:55:01+00:00,Shrink castlePath[] and castleRookSquare[] sizes  Shrinking from [16] to [2][2] is able to speedup perft of start position of almost 5% !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-08 07:46:04+00:00,Reduce stack usage  Shrink dimensions of the biggest stack consumers arrays. In particular movesSearched[] can be safely shrinked without any impact on strenght or risk of crashing. Also MAX_PLY can be reverted to 100 with almost no impact so to limit search recursion and hence stack allocation.  A different case is for MAX_MOVES (used by Movepicker's moves[]); because we know that do exsist some artificial position with about 220 legal moves; so in those cases SF will crash. Anyhow these cases are never found in games. An open risk remains perft; especially run above handcrafted positions.  This patch originates from a report by Daylen that found SF crashing on his Mac OS X 10.7.3 while in deep analysys on the following position:  8/3Q1pk1/5p2/4r3/5K2/8/8/8 w - - 0 1  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-07 13:07:30+00:00,"Fix 'bench' for Chess960 case  Now a fen file with Chess960 positions is correctly parsed. But it is mandatory to set ""UCI_Chess960"" option _before_ to call bench.  Note that this was not needed/possible before adding the possibility to call 'bench' from command prompt.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-04-01
mcostalba,mcostalba,2012-04-07 12:45:53+00:00,Use bench to implement UI 'perft' command  Now that we can call bench on current position we can directly use it to perform our perft.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-04-01
mcostalba,mcostalba,2012-04-07 11:08:34+00:00,Teach 'bench' to run current position  Now that we can call bench from command prompt has a sense to teach bench to run the current set position. To do this is enough to call bench with 'current' as fen source parameter.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-04-01
mcostalba,mcostalba,2012-04-07 10:47:37+00:00,"Don't need to wait after a ""ponderhit""  It is enough to wake up main thread. This is a better fix than d033d5e06a604f.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-04-01
mcostalba,mcostalba,2012-04-07 10:34:22+00:00,"Revert ""Penalty for undefended rook""  After extensive test Gary says:  ""So; after 16k games at 10""+1"" on an i7; the undefended rook test looks to be not good (albeit by a very small margin). 3063 - 3093 - 9844 (-1).  I doubt that is causing the regression; but even so; it looks like it's not worth keeping; and we can go back to the simpler undefended minors check.""  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-04-01
mcostalba,mcostalba,2012-04-06 18:42:45+00:00,Replace Position::copy()  With assignment operator. And fix Position::flip().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-04-01
mcostalba,mcostalba,2012-04-06 17:47:55+00:00,Revert thread_local stuff  Unfortunatly accessing thread local variable is much slower than object data (see previous patch log msg); so we have to revert to old code to avoid speed regression.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-04-01
mcostalba,mcostalba,2012-04-06 17:03:15+00:00,Use thread_local compiler specifics  Much faster then pthread_getspecific() but still a speed regression against the original code.  Following are the nps on a bench:  Position 454165 454838 455433  tls 441046 442767 442767  ms (Win) 450521 447510 451105  ms (pthread) 422115 422115 424276  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-04-01
mcostalba,mcostalba,2012-04-06 14:30:41+00:00,"Fix a (theoretical) race leading to a crash  After we release the SplitPoint lock the master; suppose is main thread; can safely return and if a ""quit"" command is pending; main thread exits and associated Thread object is freed. So when we access master->is_searching a crash occurs.  I have never found such a race that is of course very rare becuase assumes that from lock releasing we go to sleep for a time long enough for the main thread to end the search and return. But you can never know; and anyhow a race is a race.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-04-01
mcostalba,mcostalba,2012-04-06 14:05:52+00:00,"Teach UI thread to use main thread resources  So to avoid a crash when setting the moves in UCI ""position startpos moves ...."" command.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-04-01
mcostalba,mcostalba,2012-04-06 13:36:45+00:00,Don't store Thread info in Position  But use the newly introduced local storage for this. A good code semplification and also the correct way to go.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-04-01
mcostalba,mcostalba,2012-04-06 13:36:39+00:00,Introduce thread local storage  Use thread local storage to store a pointer to the thread we are running on. This will allow to remove thread info from Position class.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-04-01
mcostalba,mcostalba,2012-04-06 11:38:27+00:00,Rewrite pop_1st_bit() to be endian independent  With this change sources are fully endianess independent; so we can simplify the Makefile.  Somewhat surprisingly we don't have any speed regression !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-04-01
mcostalba,mcostalba,2012-04-04 11:12:08+00:00,Use a Thread instead of an array index  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-04-01
mcostalba,mcostalba,2012-04-04 06:35:49+00:00,Big Position renaming  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-04-01
mcostalba,mcostalba,2012-04-04 05:54:48+00:00,Micro-optimize last_1() for 32bits  Verified assembly it is a bit simpler.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-04-01
mcostalba,mcostalba,2012-04-02 17:40:12+00:00,Fix bench with fen files regression  Erroneusly adds default positions to the fens loaded from external file.  Bug introduced in adb71b8096436a  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-04-01
mcostalba,mcostalba,2012-04-02 08:58:29+00:00,Simplify Endgames::probe()  With this API change we simplify both function and caller site.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-04-01
mcostalba,mcostalba,2012-04-01 15:16:51+00:00,Use polymorphism to resolve map() overloading  The 2 overload functions map() accept a pointer to EndgameBase<Value> or a pointer to EndgameBase<ScaleFactor>.  Because Endgame<E> is derived from one of them we can directly use a pointer to this class to resolve the overload as is needed in Endgames::add().  Also made class Endgames fully parametrized and no more hardcoded to the types (Value or ScaleFactor) of endgames stored.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-01 11:45:43+00:00,Use a std::vector to store searchMoves  A std::set (that is a rb_tree) seems really overkill to store at most a handful of moves and nothing in the common case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-01 11:00:15+00:00,Retire platform specifics include in misc.cpp  Now that platform.h is included in types.h we don't need this stuff anymore.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-01 10:30:54+00:00,Better document square flipping helpers  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-01 10:01:13+00:00,Introduce Bitboards namespace  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-04-01 09:06:30+00:00,Process 'bench' also from SF prompt  It is possible to start with 'stockfish'; then from command prompt type 'bench' and SF will do what you expect. Old behaviour is anyhow preserved. As a bonus we can now start from command line any UCI command understood by Stockfish. The difference is that after execution of a command from arguments SF quits; while at the end of the same command from prompt SF stays in UCI loop.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-04-01
mcostalba,mcostalba,2012-03-31 18:07:11+00:00,Use std::vector to implement HashTable  Allows some code semplification and avoids directly allocation and managing heap memory.  Also the usual renaming while there.  No functional change and no speed regression.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-31 10:59:23+00:00,Rename Materials and Pawns hash stuff  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-31 08:16:09+00:00,Complete the renaming in Search::LimitsType  This completes the job started with revision 4124c94583c8f61.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-31 09:01:31+00:00,Reset search time as early as possible  In particualr before to wake up main thread that could take some random time. Until we don't reset search time we are not able to correctly track the elapsed search time and this can be dangerous under extreme time pressure.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-30 17:58:58+00:00,"Revert ""Call wait_for_search_finished() only when quitting""  We need to wake up main thread if it is sleeping waiting for stop or ponderhit; so we cannot skip calling wait_for_search_finished().  Found by Othello1984.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-03-01
mcostalba,mcostalba,2012-03-29 20:14:15+00:00,Last touches to pawns shelter code  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2012-03-01
mcostalba,mcostalba,2012-03-29 19:04:27+00:00,"Fix an hang when max depth is reached  In this case SF stop searching and goes sleeping waiting for a stop / ponderhit before to return best move. So when a ""stop"" arrives we need to wake up the main thread again.  Another regression introduced by 3aa471f2a9cb; hopefully the last one.  Thanks to Otello1984 to reporting this.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2012-03-01
mcostalba,mcostalba,2012-03-28 23:09:27+00:00,Refactor pawns shelter and storm  Renamed stuff and added comments. The aim is to make more readable; at least by me ;-) ; this newly added part of code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-03-01
mcostalba,mcostalba,2012-03-28 18:11:37+00:00,Restore MS1BTable[]  Incredible typo from my side!  The 2 tables are completely different; one counts 1s the other returns the msb position. Even more incredible the 'stockfish bench' command returns the same number of nodes!!!  Spotted by Justin Blanchard.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-03-01
mcostalba,mcostalba,2012-03-28 17:24:02+00:00,"Silently handle ""ucinewgame"" command  Avoid returning ""Unknown command""; it seems some GUI are misguided by this.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2012-03-01
mcostalba,mcostalba,2012-03-28 13:08:19+00:00,Replace MS1BTable[] with BitCount8Bit[]  We already have the necessary infrastructure in place.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-03-01
mcostalba,mcostalba,2012-03-28 06:48:30+00:00,"Merge pull request #11 from glinscott/squash  Add more detailed pawn shelter/storm evaluation  After 10670 games at 10""+0.05 Mod vs Orig 2277 - 1941 - 6452 ELO +11 !!!  The first real increase since 2.2.2; congratulations Gary !!!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2012-03-01
mcostalba,mcostalba,2012-03-27 18:27:20+00:00,Set do_sleep out of lock protection  Fixes a not so rare crash (once every 100 games) newly introduced. Unfortunatly I am still not able to figure out why :-(  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-03-01
mcostalba,mcostalba,2012-03-27 13:26:58+00:00,"Use UCI names in Search::LimitsType  There is no need to ""invent"" different names from the original UCI parameters.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2012-03-01
mcostalba,mcostalba,2012-03-26 18:57:27+00:00,"Merge pull request #9 from glinscott/master  Penalty for undefended rook  Almost no change at longer TC; but perhaps there is a tiny increase....  After 17522 games at 10""+0.05 Mod vs Orig 3064 - 2967 - 11491 ELO +2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2012-03-01
mcostalba,mcostalba,2012-03-26 17:59:01+00:00,"Simplify start_searching() signature  Retire the ""sync"" behaviour that now is up to the caller to honour.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2012-03-01
mcostalba,mcostalba,2012-03-26 17:44:30+00:00,"Call wait_for_search_finished() only when quitting  When quitting we should avoid RootPosition to be destroyed while threads are still running; leading to a crash. In case of a ""stop"" or ""ponderhit"" command there is no need for the UI thread to wait.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2012-03-01
mcostalba,mcostalba,2012-03-26 17:22:41+00:00,Introduce and use wait_for_search_finished()  Helper function that allows us to simplify the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-03-01
glinscott,glinscott,2012-03-26 11:52:10+00:00,Add more detailed pawn shelter/storm evaluation,True,0,2012-03-01
mcostalba,mcostalba,2012-03-26 07:18:17+00:00,Move ThreadsManager::exit() to d'tor  And add final touches to this long patch series.  All the series has been verified against regression with 20K games at fast TC.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-03-01
mcostalba,mcostalba,2012-03-25 22:08:35+00:00,Fix compile error with gcc  We have a clash with start_fn defined both as a Thread memeber and as a function pointer type in pthread_create().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 15:44:55+00:00,Reset Thread::maxPly before a new search  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 15:37:48+00:00,"Fix race in ThreadsManager::sleep()  We cannot set do_sleep flag of main thread before ""bestmove"" is sent to GUI; otherwise GUI could send immediately the next ""go"" command that triggers start_thinking() and because do_sleep is set UI thread resets the flag to launch a new search. But when shortly after main thread returns to main_loop() flag is incorrectly reset and main thread goes to sleep hanging the engine.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2012-03-01
glinscott,glinscott,2012-03-25 14:18:29+00:00,Merge remote-tracking branch 'upstream/master',True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 11:43:19+00:00,Try to mimic std::thread API  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 09:23:52+00:00,Use std::vector<Thread*> to store threads  We store pointers instead of Thread objects because Thread is not copy-constructible nor copy-assignable and default ones are not suitable. So we cannot store directly in a std::vector.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 09:23:51+00:00,Refactor Thread class  Associate platform OS thread to the Thread class instead of creating it from ThreadsManager.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 09:23:49+00:00,Refactor ThreadsManager::set_size() functionality  Split the data allocation; now done (mostly once) in read_uci_options(); from the wake up and sleeping of the slave threads upon entering/exiting the search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 09:23:16+00:00,"Revert ""Don't sync with C library I/O buffers""  It seems is the cause of strange and rare hangs reported by some users where Stockfish stops responding to GUI. It is not clear why but for the moment revert the patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2012-03-01
mcostalba,mcostalba,2012-03-25 08:57:33+00:00,Don't ceil cpu_count()  It is already done at calling site where it is more appropiate.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-24 09:14:21+00:00,Fix a MSVC warning  Not correct warning about use of an uninitialized variable. The warning is not correct becuase we can never reach the warned code when in SpNode; anyhow the fix is simple.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-24 09:05:17+00:00,Rename lock.h to platform.h  And move some more platform specific code there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-23 18:28:20+00:00,"Remove last platform specific code form thread.cpp  A somewhat tricky function pointer cast allows us to move the platform specifics to lock.h; the cast is tricky because return type is not the same of the casted function in Linux (for Windows return type is a DWORD that is a long) but this should not be a problem as long as the size is the same;  From: http://stackoverflow.com/questions/188839/function-pointer-cast-to-different-signature  ""OpenSSL was only casting functions pointers to other function types taking and returning the same number of values of the same exact sizes; and this (assuming you're not dealing with floating-point) happens to be safe across all the platforms and calling conventions I know of. However; anything else is potentially unsafe.""  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-03-01
mcostalba,mcostalba,2012-03-22 21:40:04+00:00,Merge two loops in ThreadsManager::init()  In analogy with ThreadsManager::exit()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2012-03-01
mcostalba,mcostalba,2012-03-22 18:32:30+00:00,"Use a local copy of tte->value()  This should avoid some aliasing issues with TT table access.  After 3913 games at 10""+0.05 Mod vs Orig 662 - 651 - 2600  ELO +0 (+- 6.4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2012-03-01
glinscott,glinscott,2012-03-22 11:33:47+00:00,Penalty for undefended rook as well,True,3,2012-03-01
mcostalba,mcostalba,2012-03-22 06:49:11+00:00,Merge pull request #8 from glinscott/master  Optimize undefended minor check. Little editing by me; no change even at assembly level.  No regression after 8K games at fast TC on a 64bit CPU.,True,3,2012-03-01
glinscott,glinscott,2012-03-21 12:19:21+00:00,Optimize undefended minor check.,True,2,2012-03-01
glinscott,mcostalba,2012-03-21 07:00:57+00:00,"Penalize undefended minors  Even if not under attack. This seems to be good especially on openings.  After 12112 games at 10""+0.05 Mod vs Orig 2175 - 1997 - 7940 ELO +5 (+- 3.7)  [Patch series from Gary; little edited by me]  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2012-03-01
mcostalba,mcostalba,2012-03-20 20:46:08+00:00,Fix Logger under MSVC iostream libraries  We need splitted Tie classes because MSVC stream library takes a lock on buffer both on reading and on writing and this causes an hang because; while searching; the I/O thread is locked on getline() and when main thread is trying to std::cout() something it blocks on the same lock waiting for I/O thread getting some input and releasing the lock.  The solution is to use separated streambuf objects for cin and cout.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-03-01
mcostalba,mcostalba,2012-03-20 18:24:52+00:00,"Remove cruft from Logger class  A big code simplification and cruft removing; make Logger class a singleton and fully self conteined. Also add direction indicators ("">>"" and ""<<"") to better differentiate input and output lines in the log file.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2012-03-01
mcostalba,mcostalba,2012-03-20 06:09:58+00:00,"Better on_change() argument name  Using ""o"" as a parameter with the on_xxx(const UICOption& o) functions is a bit dangerous because of confusion with ""0"".  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2012-03-01
mcostalba,mcostalba,2012-03-19 20:59:25+00:00,"Add also logging of std::cin  Some trial was needed to find the correct recipe but now we log both stdin and stdout to file ""io_log.txt"".  Link http://spec.winprog.org/streams/ was very useful to understand the details of iostreams implementation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2012-03-01
mcostalba,mcostalba,2012-03-18 22:10:24+00:00,"Add (smart) logging facility  By means of ""Use Debug Log"" UCI option it is possible to toggle the logging of std::cout to file ""out.txt"" while preserving the usual output to stdout. There is zero overhead when logging is disabled and we achieved this without changing a single line of exsisting code; in particular we still use std::cout as usual.  The idea and part of the code comes from this article: http://groups.google.com/group/comp.lang.c++/msg/1d941c0f26ea0d81  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2012-03-01
mcostalba,mcostalba,2012-03-18 22:10:18+00:00,Show startup messages immediately  In particular before initialization. So that SF seems more snappy at startup.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-18 11:02:23+00:00,Revert to byTypeBB[0] storing occupied squares  As it was in Glaurung times. Also rearranged order so that byTypeBB[0] is accessed before byTypeBB[x] to be more cache friendly. It seems there is even a small speedup.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-18 10:18:38+00:00,Rename occupied_squares() to pieces()  Also some microoptimizations; were there from ages but hidden: the renaming suddendly made them visible!  This is a good example of how better naming lets you write better code. Naming is really a kind of black art!  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-17 20:44:50+00:00,UCI buttons don't need a value  Take advantage of this to further simplify the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-17 12:16:51+00:00,"Don't use ""OwnBook"" by default  Stick to UCI protocol that says:  * by default all the opening book handling is done by the GUI;   but there is an option for the engine to use its own book   (""OwnBook"" option; see below)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-03-01
mcostalba,mcostalba,2012-03-17 10:24:19+00:00,"Retire ""ucinewgame"" UCI option  UCI protocol it is not clear about what the engine should be supposed to do when ""ucinewgame"" is received. Stockfish simply sets the position to start FEN; but it is redundant becuase the GUI always resends the position after ""ucinewgame"" command; so it seems we can safely ignore that command.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-03-01
mcostalba,mcostalba,2012-03-17 09:35:01+00:00,"Fix UCI 'button' options  When a button fires UCIOption::operator=() is called and from there the on_change() function. Now it happens that in case of a button the on_change() function resets option's value to ""false"" triggering again UCIOption::operator=() that calls again on_change() and so on in an endless loop that is experienced by the user as an application hang.  Rework the button logic to fix the issue and also be more clear about how button works.  Reported by several people working with Scid and tracked down to the ""Clear Hash"" UCI button by Steven Atkinson.  Bug recently introduced by 2ef5b4066e649.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-03-01
mcostalba,mcostalba,2012-03-12 18:34:19+00:00,Don't sync with C library I/O buffers  Now we are forced to just use C++ iostream becuase buffers are independent and using C library functions like printf() or scanf() could yield to issues.  Speed up of about 1%.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-03-01
mcostalba,mcostalba,2012-03-10 18:38:56+00:00,Fix time_to_msec() precision  Result of t.time * 1000 should be a 64 bit value; not an int.  Bug reported by several users.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-03-07 06:39:01+00:00,Introduce Eval namespace  Wrap evaluation related stuff and reshuffle a bit the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-03-01
mcostalba,mcostalba,2012-03-07 06:31:43+00:00,"Double pinner bonus  Fine tune newly introduced pinner bonus score:  After 34696 games at 2""+0.05 Mod vs Orig 7474 - 7087 - 20135 ELO +3 (+- 2.4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2012-03-01
mcostalba,mcostalba,2012-03-06 18:21:00+00:00,Convert init of eval to async option  So to be done only once at startup and in the (unlikely) cases that a relevant UCI parameter is changed; instead of doing it at the beginning of each search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-03-01
mcostalba,mcostalba,2012-03-05 18:20:07+00:00,Async UCI options actions  Introduce 'on change' actions that are triggered as soon as an UCI option is changed by the GUI. This allows to set hash size before to start the game; helpful especially on very fast TC and big TT size.  As a side effect remove the 'button' type option; that now is managed as a 'check' type.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-03-01
mcostalba,mcostalba,2012-03-05 18:18:46+00:00,Use new Time class in timed_wait()  And simplify the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-03-01
mcostalba,mcostalba,2012-03-04 22:37:44+00:00,Introduce single_bit() helper  Self-documenting code instead of a tricky bitwise tweak; not known by everybody.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-03-01
mcostalba,mcostalba,2012-03-04 22:01:31+00:00,"Introduce pinning bonus  Add a bonus if a slider is pinning an enemy piece. Idea from Critter.  After 27443 games at 2""+0.05 Mod vs Orig 5900 - 5518 - 16025 ELO +4 (+- 2.7)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2012-03-01
mcostalba,mcostalba,2012-03-03 17:01:39+00:00,Rewrite time measurement code  Introduce and use a new Time class designed after QTime; from Qt framework. Should be a more clear and self documented code.  As an added benefit we now use 64 bits internally to get millisecs from system time. This avoids to wrap around to 0 every 2^32 milliseconds; which is 49.71 days.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-03-01
mcostalba,mcostalba,2012-02-29 05:20:48+00:00,"Halve rook on open file bonus for endgame  After 42206 fast games TC 2""+0.05 Mod vs Orig 12871 - 16849 - 12486 ELO +3 (+- 2.6)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2012-02-01
mcostalba,mcostalba,2012-02-27 19:32:41+00:00,Fix a shift overflow warning  Visual Studio 11 is worried that shift result could overflow an integer; this is impossible becuase max value of the shift is 4; but compiler cannot know it.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-02-01
mcostalba,mcostalba,2012-02-27 18:44:04+00:00,Micro-optmize castling moves  Pre compute castle path so to quickly test for impeded rule.  This speeds up perft on starting position of more than 2%.  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-02-01
mcostalba,mcostalba,2012-02-26 17:39:53+00:00,Rename promotion_piece_type() to promotion_type()  Shorter and equally clear to understand.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-26 17:39:40+00:00,Introduce another two (bitboard;square) operators  And simplify the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-26 11:05:37+00:00,Fix MSVC warning on streampos to size_t conversion  Fix this warning with MSVC 64 bits:  warning C4244: '=' : conversion from 'std::streampos' to 'size_t'; possible loss of data  Point is that std::streampos could be negative; while size_t is always non-negative.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-21 19:31:22+00:00,Retire ss->bestMove  And introduce SPlitPoint bestMove to pass back the best move after a split point.  This allow to define as const the search stack passed to split.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-02-01
mcostalba,mcostalba,2012-02-21 19:29:05+00:00,"Don't update bestValue in check_is_dangerous()  It is a prerequisite for next patch and simplifies the function. testing at ultra fast TC shows no regression.  After 24302 games at 2""+0.05 Mod vs Orig 5122 - 5038 - 13872 ELO +1 (+- 2.9)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2012-02-01
mcostalba,mcostalba,2012-02-20 18:34:43+00:00,Fix a wrong check in pos_is_ok()  Bug introduced by revision a44c5cf4f77b05a038 of 3/12/2011.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-02-01
mcostalba,mcostalba,2012-02-20 18:20:13+00:00,Further simplify castling rights  Reverse the meaning of castleRightsMask[sq] so that now is stored the castling right that will be removed in case a move starts from or arrives to sq square. This allows to simplify the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-02-01
mcostalba,mcostalba,2012-02-19 11:20:29+00:00,Spread usage of pos.piece_moved()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-19 10:50:50+00:00,Retire empty_squares()  Use ~pos.occupied_squares() instead and avoid to hide the ~ computation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-19 10:31:36+00:00,Index en-passant zobrist keys by file  Instead of by square. This is a more conventional approach; as reported also in:  http://chessprogramming.wikispaces.com/Zobrist+Hashing  We shrink zobEp[] from 64 to 8 keys at the cost of an extra 'and 7' at runtime to get the file out of the ep square.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-19 09:32:38+00:00,Move some stuff out of lock protection in split()  We shouldn't need lock protection to increment splitPointsCnt and set curSplitPoint of masterThread.  Anyhow because this code is very tricky and prone to races bound the change in a single patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-19 09:04:49+00:00,Micro-optimize castleRights update  When updating castleRights in do_move() perform only one 64bit xor with zobCastle[] instead of two.  The trick here is to define zobCastle[] keys of composite castling rights as a xor combination of the keys of the single castling rights; instead of 16 independent keys.  Idea from Critter although implementation is different.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-18 09:57:00+00:00,Small renaming in Thread struct  Should be a bit more clear the meaning of the single variables.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-02-01
mcostalba,mcostalba,2012-02-18 09:20:07+00:00,Fix a race when extracting PV from TT  Because TT table is shared tte->move() could change under our feet; in particular we could validate tte->move() then the move is changed by another thread and we call pos.do_move() with a move different from the original validated one !  This leads to a very rare but reproducible crash once every about 20K games.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-02-01
mcostalba,mcostalba,2012-02-18 09:16:01+00:00,Increase MAX_PLY from 100 to 256  There is no need to limit the maximum ply searched to 100; with deep exclusion search extensions we could reach it even with much smaller search depths.  The only drawback is an increase in stack usage; but is limited mainly to id_loop(); in particular the recursive search() functions are not affected.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-02-01
mcostalba,mcostalba,2012-02-13 09:07:09+00:00,Micro-optimize pop_1st_bit() for 32 bits  Small perft speed-up of 2% and also a code simplification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-02-01
mcostalba,mcostalba,2012-02-13 08:15:55+00:00,Templetize sliding attacks  No functional change and no speed regression; it seems to be even a bit faster on MSVC and gcc.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-02-01
mcostalba,mcostalba,2012-02-12 14:26:18+00:00,Speedup sliders attacks for 32bit CPU  Replace a 64 bit 'and' by two 32 bits ones and use unsigned instead of int.  This simple patch increases perft speed of 6% on my Intel Core 2 Duo !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-12 13:17:12+00:00,Don't wake up threads at the beginning of the search  But only when needed; after a split point. This behaviour does not apply when useSleepingThreads is false; becuase in this case threads are not woken up at split points so must be already running.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-12 09:07:10+00:00,Don't reset 50-move counter after castling  Rule says should be reset only after a capture and/or a pawn move.  This incredible bug was here since Glaurung times !  Spotted by Kiriakos.  No functional change in the test bench because we don't reach the 50 moves limits.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-02-01
mcostalba,mcostalba,2012-02-06 05:34:32+00:00,Merge pull request #3 from glinscott/b46bf29  Detect stalemate in evaluation,True,0,2012-02-01
glinscott,glinscott,2012-02-05 19:52:01+00:00,Simpler stalemate check.,True,6,2012-02-01
glinscott,glinscott,2012-02-05 15:24:53+00:00,Detect stalemate in KXK endgames  Also; handle cases where there are 2 bishops of the same color.,True,6,2012-02-01
mcostalba,mcostalba,2012-02-04 09:41:09+00:00,"Add ""Slow Mover"" UCI parameter to adjust time management  With default value of 100 no change in regard of current behaviour. Increasing the value makes SF to think a longer time for each move. Decreasing the value makes SF to move faster.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2012-02-01
mcostalba,mcostalba,2012-02-03 16:33:09+00:00,Move wait_for_stop_or_ponderhit() under Thread  This method belongs to Thread; not to ThreadsManager.  Reshuffle stuff in thread.cpp while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-02-01
mcostalba,mcostalba,2012-02-03 12:43:58+00:00,"Reduce lock contention in idle_loop  Release split point lock before to wake up master thread. This seems to increase speed in case ""sleeping threads"" are used:  After 7792 games with 4 threads at very fast TC (2""+0.05) Mod vs Orig 1722 - 1627 - 4443 ELO +4 (+- 5.1)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-02-01
mcostalba,mcostalba,2012-02-03 12:14:57+00:00,Fix an alignment warning with MSVC  The declared alignment is different from the one in the definition.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-02-01
mcostalba,mcostalba,2012-01-31 19:19:25+00:00,Fix subtle race with slave allocation  When allocating a slave we set both is_searching and splitPoint under lock protection.  Unfortunatly the order in which the variables are set is not defined. This article was very clarifying:  http://software.intel.com/en-us/blogs/2007/11/30/volatile-almost-useless-for-multi-threaded-programming/  So when in idle loop we test for is_searching and then access splitPoint; it could happen that splitPoint is still not updated leading to a possible crash.  Fix the race lock protecting splitPoint access.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-01-01
mcostalba,mcostalba,2012-01-31 19:17:37+00:00,Fix bug in useless checks prune  With current code we could raise bestValue above beta; not what is intended for.  Spotted by Richard Vida.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-01-01
mcostalba,mcostalba,2012-01-30 18:19:47+00:00,Reformat kpk bitbase  Simplify and streamline the code. Verified all the resulting bitbases are not changed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-29 10:25:02+00:00,Don't log search info after a stop  Fix an issue where the log file stores an incorrect +0.00 eval after a search has been stopped.  Bug reported by Ajedrecista.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-29 09:59:50+00:00,Bitwise operator overloads between Bitboard and Square  Yes; we try to be fancy here ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-29 08:38:40+00:00,Replace clear_bit() with xor_bit()  This allows to retire ClearMaskBB[] and use just one SquareBB[] array to set and clear a bit.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-27 18:49:38+00:00,Rename ValueType to Bound  It is a more conventional and common naming.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-27 18:41:24+00:00,Do not require -lpthread when linking in mingw  With this we should compeltely remove the need of installing third party POSIX threads library when compiling with mingw-gcc under Windows.  Spotted by Trung Tu.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-27 18:31:41+00:00,Restore LMR depth limit  It is not clear the advantage and we don't want to risk of introducing regressions on this very critical parameter. So revert to old limit.  After 16003 games Mod vs Orig 2496 - 2421 - 11086 ELO +1 (+-3)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-27 18:24:22+00:00,Reformat threads code  Apart from some renaming the biggest change is the retire of split_point_finished() replaced by slavesMask flags. As a side effect we now take also split point lock when allocation available threads.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-25 06:32:31+00:00,Use Windows threads library with mingw  Instead of Posix threads. This seems to fix time losses of the gcc compiled version for Windows. The patch replaces the MSVC specific _MSC_VER flag with _WIN32 and _WIN64 that are defined both by MSVC and mingw-gcc.  Workaround found by Jim Ablett.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-01-01
mcostalba,mcostalba,2012-01-24 06:12:19+00:00,Order bad captures by MVV/LVA  Instead of by SEE. Almost no ELO change but it is a bit easier and is a more natural choice given that good captures are ordered in the same way.  After 10424 games Mod vs Orig 1639 - 1604 - 7181 ELO +1 (+-3.8)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-01-01
mcostalba,mcostalba,2012-01-23 19:52:21+00:00,"Revert ""Fix link time optimization gcc option""  It seems we need to pass the full optimization flags to the linker otherwise we end up in a slow compile:  http://lists.debian.org/debian-devel/2011/06/msg00181.html  Regression reported by Benigno Hernandez.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2012-01-01
mcostalba,mcostalba,2012-01-23 19:30:19+00:00,Simplify locking usage  pass references (Windows style) instead of pointers (Posix style) as function arguments.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-23 19:24:15+00:00,Simplify our insertion sort implementation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
AugustePop,mcostalba,2012-01-22 20:58:42+00:00,Fix link time optimization gcc option  The previous line; LDFLAGS += $(CXXFLAGS); does not make sense; and breaks profile-build; thus changing it into: LDFLAGS += -flto.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-22 15:06:29+00:00,Shrink sequencer table  Integrate TT_MOVE step into the first state. This allows to avoid the first call to next_phase() in case of a TT move.  And use overflow detection instead of the bunch of STOP_XX states to detect end of moves.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-22 12:57:24+00:00,Assorted code style in movepicker.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-22 10:41:34+00:00,Fix incorrect assert(PvNode == (alpha != beta - 1))  In case of a PvNode could happen that alpha == beta - 1; for instance in case the same previous node was visited with same beta during a non-pv search; the node failed low and stored beta-1 in TT. Then the node is searched again in PV mode; TT value beta-1 is retrieved and updates alpha that now happens to be beta-1.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-22 10:19:44+00:00,Order the recaptures by MVV/LVA  Almost no functional change because multiple recaptures to same square are very rare; but neverthless it seems the correct thing to do.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-21 23:42:59+00:00,Rename NON_CAPTURE to QUIET  It is a more conventional naming and is nicer.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-21 23:13:47+00:00,Reshuffle stuff in MovePicker  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-21 22:30:56+00:00,Fix ss->currentMove when probcutting  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-21 15:05:54+00:00,Use an enum instead of a table as MovePicker sequencer  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-21 11:49:37+00:00,Sync generate_direct_checks() with generate_piece_moves()  They are almost the same; if the function arguments would have been the same they could even be integrated.  Also a bit of renaming while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-18 16:52:55+00:00,Triviality in SERIALIZE_PAWNS() macro usage  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-01-01
UncombedCoconut,mcostalba,2012-01-18 16:48:53+00:00,Remove unused #include lines,True,2,2012-01-01
UncombedCoconut,mcostalba,2012-01-18 16:48:53+00:00,"Fix ""go nodes""; at least when Threads=1",True,2,2012-01-01
mcostalba,mcostalba,2012-01-18 07:10:40+00:00,Don't allow LMR to fall in qsearch  And increase LMR limit. Tests show no change ELO wise; but we prefer to take the risk to commit anyhow becuase is a 'prune reducing' patch.  After 10749 games Mod vs Orig: 1670 - 1676 - 7403 ELO 0 (+-3.7)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-01-01
mcostalba,mcostalba,2012-01-18 06:47:42+00:00,Microptimize generation of pawn evasions  Skip calling promotion generation functions in the very common case of no possible promotion evasion. Also retire generate_pawn_captures()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2012-01-01
mcostalba,mcostalba,2012-01-16 18:29:15+00:00,Simplify pawn captures generation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-16 18:26:42+00:00,Fix a (bogus) warning with gcc 4.4  Fix an incorrect warning: 'bm may be used uninitialized' with the old but still commonly used gcc 4.4  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-15 16:02:06+00:00,Retire double-profile-build Makefile target  Now that we don't support anymore popcount detection at runtime this target is obsolete.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-15 11:50:09+00:00,Fix gcc name used in Link Time Optimization  Use $(CXX) instead of assuming compiler name is 'gcc'  Spotted by Louis Zulli.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-15 08:21:00+00:00,Make init_magic() piece agnostic  All the piece dependant data is passed now as function arguments so that the code is exactly the same for bishop and rook.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-14 22:11:59+00:00,Unify some template specializations  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-14 22:00:10+00:00,Retire queen_attacks_bb()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-14 17:04:13+00:00,Use 'adjacent' instead of 'neighboring'  It is more correct and specific. Another naming improvement while reading Critter sources.  No functional changes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-14 14:27:24+00:00,Restore development version  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-14 14:01:21+00:00,Stockfish 2.2.2  Dedicated to the new Jim's super fast builds ! :-)  stockfish bench signature is: 5447426  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-14 13:22:34+00:00,Move struct RootMove to Search namespace  And directly pass RootMoves instead of SearchMoves to main thread. A class declaration is better suited in a header and slims a bit the fatty search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-14 12:06:01+00:00,Use a set to store SearchMoves  We just need to verify if a legal move is among the SearchMoves; so we don't need a vector for this.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-13 06:58:21+00:00,Fix a gcc 4.7 warning  New gcc 4.7 complains about casting a volatile pointer to void* so assign the variables directly.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-13 06:27:01+00:00,Enable easy move detection only for recaptures  It could lead to terrible mistakes otherwise; as it happened during a game on playchess when on this position (after white's f4):  2q4r/4b1k1/p3rpp1/3np2p/PpNpNP1P/1P1P2PQ/2P1R3/4R1K1 b - - 0 1  SF moves immediately e5xf4 instead of the correct f5. In general during engine matches it is impossible the opponent leaves a piece hanging or anyhow starts a clear losing sequence. So avoid to fall in subtle traps.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-12 18:37:44+00:00,Use operator~ to flip colors and squares  More natural and nicer. Idea from Critter.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2012-01-01
mcostalba,mcostalba,2012-01-12 17:40:58+00:00,Small touches in FEN decoding  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2012-01-01
mcostalba,mcostalba,2012-01-10 20:53:07+00:00,Retire is_mate()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-01-01
mcostalba,mcostalba,2012-01-09 21:36:45+00:00,Introduce piece_moved() to simplify common code  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-09 21:08:37+00:00,Unify PseudoAttacks arrays  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-08 15:09:18+00:00,Use CheckInfo to generate checks  It should help to avoid recalculating check squares of sliding attackers for queen when already done for bishops and rooks. Of course this helps when there are bishop; rook and queen on the board !  Fixed also a subtle bug (use of same variable b in while condition and in condition body) introduced recently by revision d655147e8c that triggers in case we have at least 2 non-pawn discovered check pieces. This is very rare that's why didn't show in the node count verification where we actually have a case of 2 dc pieces in position 14; but one is a pawn.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-08 11:28:51+00:00,Add castling to generation of checking moves  During generation of non-captures checks (in qsearch) we don't consider castling moves that give check; this patch includes also this rare case. Verified with perft that all the non-capture checks are now generated.  There should be a very little slowdown due to the extra work; but actually I failed to measure it. I don't expect any ELO improvment; there is even no functional change on the standard depth 12 search; it is just to have a correct move generator.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2012-01-07 12:13:28+00:00,Last touches to movegen.cpp  The full movegen patch series shows a speed up of almost 6% (!) on perft; and code is much more readable too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-07 11:03:19+00:00,Retire the redundant MV_CHECK  MV_CHECK is an alias of the more appropiate named MV_NON_CAPTURE_CHECK so use only the latter.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-07 11:03:17+00:00,Retire generate_discovered_checks  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-07 11:03:16+00:00,Rearrange pawn moves generation  Functional change due only to rearrangement  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-07 11:03:15+00:00,Reshuffle stuff in movegen.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-07 10:18:09+00:00,Retire OLD_LOCKS option  And make CRITICAL_SECTION locks the only option for Windows. This guarantees backward compatibility with all the Windows versions (even XP and older) and an hassle free experience when compiling for Windows. Tests performed by Ingo and reported on talkchess confirm there is no speed penalty against the most modern SRW locks:  http://www.talkchess.com/forum/viewtopic.php?t=41835&start=20  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2012-01-01
mcostalba,mcostalba,2012-01-06 23:04:08+00:00,Fix compile on HP-UX 11's HP's C++  On that platform non-bracketed casting are not supported.  Reported by Richard Lloyd.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-06 17:09:25+00:00,Restore development version  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2012-01-01
mcostalba,mcostalba,2012-01-06 16:01:40+00:00,"Stockfish 2.2.1  Hopefully fixed the ""lose on time"" issue.  stockfish bench signature is: 5457475  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-01-01
mcostalba,mcostalba,2012-01-06 12:24:37+00:00,"Extra time management safety  Further increase safety against time losses. After this change (tested on LittleBlitzer and cutechess) I had no more time losses at 2"" and 1""+0.02 TC both on Windows and Linux on more than 10000 games.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-01-01
mcostalba,mcostalba,2012-01-06 00:41:45+00:00,"Try hard not to lose on time  We try hard not to lose on time even under extreme time pressure. We achieve this through 3 different but coordinated steps:      1) Increase max frequency of timer events      2) Quickly return after a stop signal      3) Take in account timer resolution  With these SF played under LittleBlitzer at 1""+0.02 and 3""+0 without losing on time even one game.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2012-01-01
mcostalba,mcostalba,2012-01-03 20:31:50+00:00,Avoid a race at thread creation  Before creating main thread we set its do_sleep flag to true; then thread is created and it will go to sleep in main_loop() after resetting do_sleep.  But if after the setting of do_sleep and before its resetting the UI thread calls start_thinking() it will not wait on:    if (!asyncMode)       while (!main.do_sleep)           cond_wait(&sleepCond; &main.sleepLock);  as it should but will immediately return before the main thread has started the search. This very rare race show itself during bench; when the first position is erroneusly skipped so that bench node count results of 5309038 instead of the correct 5457475.  The patch is somewhat tricky; but is simple and it works!  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-01-01
mcostalba,mcostalba,2012-01-03 18:18:38+00:00,Streamline generation of MV_NON_EVASION  Small speed-up of 3% in perft.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-01-01
mcostalba,mcostalba,2012-01-03 18:01:47+00:00,Fix a warning under gcc  Locals left and right shadow two same named variables in the std::ifstream base class.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2012-01-01
mcostalba,mcostalba,2012-01-02 15:44:04+00:00,Revert cond_signal() fix  It seems it yields to missing wake-up events with the result of SF loosing on time as reported by many people.  So revert the patch and use a more robust approach: assume there can be spurious wake ups events and make the code to work also in those cases.  While debugging I found that WaitForSingleObject() had wrong parameter 0 instead of INFINITE yielding to a crash while exiting under Windows; strangely unnoticed til now.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-02 11:03:54+00:00,Big renaming of move's helpers  The aim is to have shorter names without losing readibility but; if possible; increasing it.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2012-01-01
mcostalba,mcostalba,2012-01-01 13:46:18+00:00,Simplify Book APIs  Retire open(); close() and name() from public visibility and greately simplify the code. It is amazing how much can be squeezed out of an already mature code !  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2012-01-01
mcostalba,mcostalba,2011-12-31 14:44:00+00:00,Restore development version  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-31 14:43:28+00:00,Stockfish 2.2  stockfish bench signature is: 5457475  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-31 14:40:12+00:00,Fix cond_signal() semantics when using OLD_LOCKS  In Windows when OLD_LOCKS is defined we use SetEvent() to mimic the semantic of the POSIX pthread_cond_signal().  Unfortunatly there is not a direct mapping because with SetEvent() the state of an event object remains signaled until it is set explicitly to the nonsignaled state or until a single waiting thread has been released. Instead in case of pthread_cond_signal(); if there are no waiting threads it has no effect. What we may want is something like PulseEvent() instead of SetEvent(). Unfortunatly it is documented by Mcrosoft as 'unreliable' due to spurious wakes up that could filter out the signal resetting. So we opt to reset manually any pending signaled state before to go to sleep.  This fixes the strange misbehaves during 'stockfish bench' when using OLD_LOCKS under Windows.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-31 09:46:14+00:00,Unify BitCountType selection  Now that HasPopCnt is a compile time constant we can centralize and unify the BitCountType selection.  Also rename count_1s() in the more standard popcount()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-31 07:48:16+00:00,Fix Windows 64 build  Broken by previous patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-30 18:13:44+00:00,Reformat types.h  Retire obsolete code and reshuffle stuff.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 15:23:11+00:00,Simplify debug functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 14:23:33+00:00,Assorted cleanups in benchmark.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 13:16:15+00:00,Retire RootMove::nodes  Was used for time management but is no more used today.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 12:52:16+00:00,Update copyright year to 2012  And refresh Readme.txt while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 12:19:20+00:00,Simplify printing of engine info  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 11:17:03+00:00,Retire run-time detection of hardware POPCNT  It was meant to build a single binary optimized for any kind of CPU: with and without hardware POPCNT.  This is a nice idea but in practice was never used; or people builds binary with popcnt enabled or not; mainly according to their type of CPU. And it was also never used in the official Jim's builds where; in case; would be easier for a number of reasons; do build two different versions: with and without SEE42 support.  So retire this feature and simplify the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 10:58:55+00:00,Fix an off-by-one bug in ucioption.cpp  Harmless but anyhow wrong.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-30 10:58:54+00:00,Better use STL algorithms in Endgame functions  This leads to a further and unexpected simplification of this already very size optimized code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-29 09:33:06+00:00,Wait for main thread to finish before to exit  Currently after a 'quit' command UI thread raises stop signal; exits from uci_loop() and calls Threads.exit() while the search threads are still active.  In Threads.exit() main thread is asked to terminate; but if it is parked in idle_loop() it will exit and free its resources (in particular the shared Movepicker object) while sibling slaves are still active and this leads to a crash.  The fix is to let the UI thread always wait for main thread to finish the search before to return from uci_loop().  Found by Valgrind when running with 8 threads.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-12-01
mcostalba,mcostalba,2011-12-29 09:25:11+00:00,Use for_each() in Endgames d'tor  And fix some comments while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-12-01
mcostalba,mcostalba,2011-12-28 18:42:50+00:00,Add user-defined conversions to UCIOption  Greatly improves the usage. User defined conversions are a novelity for SF; another amazing C++ facility at work !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-28 13:20:24+00:00,Fix score_to_uci()  The condition for a mate score was wrong:  abs(v) < VALUE_MATE - PLY_MAX * ONE_PLY  instead of  abs(v) < VALUE_MATE_IN_PLY_MAX  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-28 12:33:31+00:00,"Better document how mate scores are stored in TT  During the search we score a mate as ""plies to mate from the root"" to compare in an homogeneous way the values returned by different sub-trees. However we store in TT a mate score as ""plies to mate from the current position"" the let the TT value remain valid across the game.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2011-12-01
mcostalba,mcostalba,2011-12-28 09:57:08+00:00,Retire SquaresByColorBB[] and enum SquareColor  Use same_color_squares() instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-28 09:38:48+00:00,Rename Pieces  Align with PieceType naming convention and make them more readable.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-27 17:53:00+00:00,Document mate distance pruning  It is simple but somewhat tricky code that deserves a bit of documentation. A bit of renaming while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-12-01
mcostalba,mcostalba,2011-12-27 00:04:00+00:00,Assert enhancements in search  Add the check that alpha < beta - 1 if and only if PvNode is true. The current code would not flag PvNode and alpha == beta - 1. In other words; the || is not an exclusive OR!.  Also sync assert conditions of search() and qsearch()  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-12-01
mcostalba,mcostalba,2011-12-26 23:56:11+00:00,Reformat UCI option code  Make a better use of C++ operators overloading to streamline the APIs.  Also sync polyglot.ini file while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-12-01
mcostalba,mcostalba,2011-12-25 10:50:59+00:00,Rename getters functions removing 'get_' prefix  Follow the suggested Qt style:  http://doc.qt.nokia.com/qq/qq13-apis.html  It seems to me simpler and easier to read.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-12-01
mcostalba,mcostalba,2011-12-25 08:29:51+00:00,Restore std::cout instead of printf()  I am not able to reproduce the speed regression anymore; and also we were using cout even before speed regression so probably the reason is not there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-12-01
mcostalba,mcostalba,2011-12-24 08:58:46+00:00,Correctly define operators in types.h  Be consistent with the way these operators are defined in plain C (and in C++).  Spotted by Lucas Braesch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-24 08:25:20+00:00,Don't update killers for evasions  We don't use killers to order evasions; so it seems natural do not consider an evasion cut-off move as a possible killer. Test shows almost no change; as it should be becuase this is a really tiny change; but neverthless seems the correct thing to do.  After 11893 games Mod vs Orig 1773 - 1696 - 8424 ELO +2 (+-3.4)  Idea from Critter.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-18 20:18:51+00:00,Use ADL to skip std:: qualifier  Take advantage of argument-dependent lookup (ADL) to avoid specifying std:: qualifier in some STL functions. When a function argument refers to a namespace (in this case std) then the compiler will search the unqualified function in that namespace too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-12-01
mcostalba,mcostalba,2011-12-17 15:59:32+00:00,"Disable again buffering at startup  Partially revert efd21679980dfd59 Without this patch SF does not send ""bestmove"" to GUI.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-12-01
mcostalba,mcostalba,2011-12-17 14:58:19+00:00,Headers cleanup in ucioption.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-17 14:50:06+00:00,Use printf() instead of std::cout()  Seems sensibly faster: On a  ./stockfish bench > /dev/null  We have +2% on mingw and even +5% on MSVC !  Also removed the nice but complex enum set960 machinery; use directly the underlying move_to_uci() function.  Speed regression reported by Heinz van Saanen.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-16 18:17:47+00:00,Retire update_history() Inline the only caller site  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-12-01
mcostalba,mcostalba,2011-12-16 06:23:24+00:00,"Fix book move with searchmoves compatibility  Do not return the book move if is not among the RootMoves;in particular if we have been asked to search on a move subset with ""searchmoves"" then return book move only if it is among this subset.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2011-12-01
mcostalba,mcostalba,2011-12-14 20:56:37+00:00,Simplify id_loop() signature  And related assorted cleanup of this very important function.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-14 18:22:22+00:00,Reformat sending of PV information  Introduce pv_info_to_log() and pv_info_to_uci() and greatly cleanup this stuff.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-14 05:18:33+00:00,Further simplify aspiration code  Actually after last patch it happens that delta starts always with the fixed value of 16.  So further remove useless code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-14 04:56:53+00:00,Simplify aspiration window calculation  It seems that we just need to look at previous score to compute aspiration window size.  After 5350 games: Mod vs Orig 800 - 803  - 3647 ELO +0 (+- 5.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-12 19:13:24+00:00,Retire RootMoveList  Diretcly use the underlying std::vector<Move> and the STL algorithms. Also a bit of cleanup while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-12-01
mcostalba,mcostalba,2011-12-11 10:44:09+00:00,Fix another crash triggered by previous patch  It is ok to redirect st pointer to startState; but the latter should be updated with the content pointed by the st of the original position. The bug is hidden when startState and *st are the same as is the case of searching from start position; but as soon as moves are made (as is the case when splitting) the bug leads to a crash.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-12-01
mcostalba,mcostalba,2011-12-11 09:31:46+00:00,"Fix a crash when quitting while searching  The Position object used by UI thread is a local variable in uci_loop(); so after receiving ""quit"" command the function returns and the position is freed from the stack.  This should not be a problem becuase in start_thinking() we copy the position to RootPosition that is the one used by main search thread. Unfortunatly we blindly copy also StateInfo pointer that still points to the startState struct inside UI position. So the pointer becomes stale as soon as UI thread leaves uci_loop() and because this happens while main search thread is still recovering after the 'stop' signal we have a crash.  The fix is to update the pointer to the correct startState after the copy.  Found with Valgrind.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-12-01
mcostalba,mcostalba,2011-12-10 18:14:49+00:00,"Prune silly comments in search()  Comments should be informative but not pedantic / obvious. The only exception is the function description where we indulge a bit on the ""chatty"" side; but has always been like this since Glaurung times; so we continue with this tradition.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-12-01
mcostalba,mcostalba,2011-12-10 16:35:37+00:00,Allow to prune also first move  Tested togheter with previous patch; shows no regression and is a semplification.  After 5817 games: Mod vs Orig 939 - 892 - 3986 ELO +2 (+- 5.1)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-10 16:35:36+00:00,Don't update bestValue when pruning  Simply return a fail-low score  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-10 11:40:05+00:00,Fix description of endgame scaling functions  Triggered by a comment of Eelco on talkchess. Also a bit of cleanup while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-08 12:55:27+00:00,Fix compile for 64 bits  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-12-01
mcostalba,mcostalba,2011-12-08 12:48:18+00:00,Set captureThreshold according to static evaluation  Consider negative captures as good if still enough to reach beta.  After 7502 games: Mod vs Orig 1225 - 1158 - 5119 ELO +3 (+- 4.5)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-12-01
mcostalba,mcostalba,2011-12-07 16:30:28+00:00,Remove some (int) casts  A cast rarely is the right solution. In this case was enough to redifine 3 variables with type size_t instead of int  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-07 06:49:24+00:00,Retire all extensions (but checks) for non-PV nodes  It seems we don't have any added value. Note that the moves that were used to be extended are still flagged as dangerous so to avoid at least pruning them.  After 9555 games Mod vs Orig 1562 - 1540 - 6453 ELO +0 (+- 4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-12-01
mcostalba,mcostalba,2011-12-06 18:41:48+00:00,"Prefer empty() to size()  As Heinz says:  ""Function empty() should have a constant run-time even  on lousy compilers and you spare the not.  The change is even measurable: + 100-150 nodes/sec. Wow:-)""  Patch from Heinz van Saanen  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2011-12-01
mcostalba,mcostalba,2011-12-05 20:04:32+00:00,Use operator() instead of apply() in endgames  It is more idiomatic for a functor (a function object) as are the endgames.  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-12-01
mcostalba,mcostalba,2011-12-04 11:24:15+00:00,Fix disambiguation bug in move_to_san()  A pinned piece cannot move and so does not play any role in SAN disambiguation.  Reported by Steven Edwards.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-12-01
mcostalba,mcostalba,2011-12-04 11:03:59+00:00,Move SearchStack under Search namespace  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-12-01
mcostalba,mcostalba,2011-12-04 10:36:03+00:00,Retire move.h  Also some assorted comments fixes and other trivia.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-12-01
mcostalba,mcostalba,2011-12-03 11:02:13+00:00,Prefer 0 to EmptyBoardBB  Easier and even faster or at least easier to optimize.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-03 10:58:55+00:00,Retire neighboring_files_bb() overload  Rarely used and we prefer to not hide the complexity.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-03 09:54:44+00:00,Don't disable IO buffering at startup  It was never clear to me why we needed this trick; and now that we rely only on C++ std::getline() and std::cout for input / output it is even more a mistery what this code does.  So disable it and wait to see if someone screams ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-03 09:48:31+00:00,Tidy up comments in uci.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-12-03 08:58:46+00:00,Tidy up comments in thread.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-12-01
mcostalba,mcostalba,2011-11-28 06:30:31+00:00,Include <cstring> in search.h  Now we use memset() directly there.  Spotted by Justin Blanchard.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-11-01
mcostalba,mcostalba,2011-11-27 21:36:13+00:00,Little reformat of elapsed_search_time()  Change name and argument type.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-11-01
mcostalba,mcostalba,2011-11-27 16:46:18+00:00,"Detach search arguments from UI thread  Detach from the UI thread the input arguments used by the search threads so that the UI thread is able to receive and process any command sent by the GUI while other threads keep searching.  With this patch there is no more need to block the UI thread after a ""stop""; so it is a more reliable and robust solution than the previous patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-11-01
mcostalba,mcostalba,2011-11-27 11:19:33+00:00,"After a ""stop"" do not read new input until search finishes  Unfortunatly xboard sends immediately the new position to search after sending ""stop"" when we have a ponder miss.  Becuase main thread position is not copied but is referenced directly from root position and the latter is modified by the ""position.."" UCI command we end up with the working position that changes under our feet while the search is still recovering after the ""stop"" and this causes a crash.  This happens only with the (broken) xboard; native UCI does not have this problem.  Reported by otello1984  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-11-01
mcostalba,mcostalba,2011-11-26 17:29:40+00:00,Fix a race in pondering mode  Fixes an hang when playing with ponder ON. Perhaps there is still a very small race but now it seems engine does not hang anymore.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-26 12:43:22+00:00,"Introduce Search namespace  Move global search-related variables under ""Search"" namespace.  As a side effect we can move uci_async_command() and wait_for_stop_or_ponderhit() away from search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-11-01
mcostalba,mcostalba,2011-11-26 10:51:12+00:00,Rewrite async I/O  Use the starting thread to wait for GUI input and instead use the other threads to search. The consequence is that now think() is alwasy started on a differnt thread than the caller that returns immediately waiting for input. This reformat greatly simplifies the code and is more in line with the common way to implement this feature.  As a side effect now we don't need anymore Makefile tricks with sleep() to allow profile builds.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-19 23:02:13+00:00,Reformat search dispatch code  Reduce indentation level and lines of code and tidy up some comment.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-19 13:37:57+00:00,Fix regression with printing of debug info  Output of debug info each second was disabled due to recent patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-19 11:04:42+00:00,"Don't check for early stop when StopOnPonderhit is set  If we are pondering we will stop the search only when GUI sends ""ponderhit"" or ""stop"" commands or when we reach maximum depth. In all the other cases we continue to search so there is no need to verify for available time.  Also better clarify why wait_for_stop_or_ponderhit() before to exit in some cases.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-11-01
mcostalba,mcostalba,2011-11-19 10:19:12+00:00,Early stop: retire redundant Rml.size() == 1 case  In case there is only 1 legal move we will stop the search at depth 10 anyway because the exclusion search probe will fail low.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-18 20:01:34+00:00,"Rewrite early stop logic  In the ""easy move"" paradigm we verify if the best move has ever changed over a good number of iterations and if the biggest part of the searched nodes are consumed on it. This is a kind of hacky ad indirect heuristic to deduce if one move is much better than others.  Rewrite the early stop condition to verify directly if one move is much better than others performing an exclusion search.  Idea to use exclusion search for time management if form Critter.  After 12245 games at 30""+0.1 Mod vs Orig 1776 - 1775 - 8694 ELO +0 (+-3.4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2011-11-01
mcostalba,mcostalba,2011-11-14 08:05:20+00:00,"CLOP: Passed pawns weights tuning  Tuned with CLOP against a pool of 3 engines. Result verified with a direct match:  After 11720 games at 10""+0.1 Mod vs Orig 1922 - 1832 - 7966 ELO +2 (+-3.6)  So no change in self match but if CLOP is right it should be a bit better against an engine pool.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2011-11-01
mcostalba,mcostalba,2011-11-13 09:54:30+00:00,Rename value in bestValue in id_loop()  The value returned by root search it is actually our best value; so rename the variable to reflect this.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-11-01
mcostalba,mcostalba,2011-11-12 10:55:45+00:00,Rewrite link time optimization in Makefile  Instead of binding link time optimization to the choice of popcount support; do the right thing and add -flto option when gcc 4.5 or later is detected.  Although it should be supported also under mingw; it happens that it doesn't; at least on my 4.6.1 due to some known bugs.  Thanks to Mike for helping me with this patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-12 08:09:41+00:00,Simplify passed pawns logic  Remove the bonus for no *friendly* pieces in the pawn's path and reduce a bit the bonus based on kings proximity.  This patch is part of to the ongoing effort to remove form evaluation all the terms that do not add value.  After 16284 games:  Mod vs Orig 2728 - 2651 - 10911 ELO +1 (+- 3.1)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-10 14:08:53+00:00,"Fix regression: engine hangs while pondering  After a ""stop"" due to a ponder miss Xboard sends immediately the new position to search; without waiting for engine to effectively stop the search.  It is not clear if this is a GUI bug (as I suspect) or allowed behaviour; but because it won't be fixed anyway workaround this issue making listener thread to switch to in-sync mode as soon as a ""stop"" command is received.  Thanks to Mike Whiteley for reporting this.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2011-11-01
mcostalba,mcostalba,2011-11-10 14:06:28+00:00,Stop is not an unknown command  If GUI sends stop while we are waiting for a command do not reply with a silly:  Unknown command: stop  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-11-01
mcostalba,mcostalba,2011-11-09 04:20:35+00:00,"Another fix to profile-build on gcc 4.6  Oliver reports profile builds error with new gcc 4.6; he says:  ""We need to add -lgov with profile-generate AND profile-use. So it has to be added to the second stage of building too.  The problem occurred first with the introduction of gcc4.6 and I think this is because the previous version did find the gcov library automatically. gcc4.6 needs more precise options and does less guesses. I have seen it in debian; Ubuntu and also with mingw on Windows. And all use gcc4.6.""  This patch fixes the issue.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2011-11-01
mcostalba,mcostalba,2011-11-08 06:39:06+00:00,Fix profile-build  After async I/O patches 'bench' changed behaviour and now waits for input at the end of the test run. This is due to listener thread stay blocked on std::getline() even after test run is finished; as soon as we feed something the thread unblocks and then quickly exits.  This is not a big problem; but has the bad side effect of breaking profile builds that hang forever at the end of the test run.  The tricky workaround is to create a pipe that connects to stockfish input and then; when test run is finished; breaking the pipe: this makes std::getline() immediately return.  So this patch adds a 'sleep 10' piped into 'stockfish bench' test run command. After 10 seconds sleep ends; the pipe breaks and 'bench' finishes as usual.  Thanks to Oliver Korff for reporting the issue; and to Mike Whiteley for having co-authored this solution.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-11-01
mcostalba,mcostalba,2011-11-06 12:45:47+00:00,Reformat all_slaves_finished()  Rename and move under ThreadsManager class.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-11-01
mcostalba,mcostalba,2011-11-06 12:32:25+00:00,Better document and reshuffle stuff in think()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-11-01
mcostalba,mcostalba,2011-11-06 11:48:16+00:00,"Better define wait_for_stop_or_ponderhit()  Use do_uci_async_cmd() instead of process input commands directly and clarify that what we are waiting for is something that is able to raise StopRequest flag.  Also fix some stale comments in do_uci_async_cmd(). Here we need to reset Limits.ponder only upon receiving ""ponderhit"". In the case of ""quit"" or ""stop"" resetting Limits.ponder has no effect because the search is going to be stopped anyway.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-11-01
mcostalba,mcostalba,2011-11-05 17:19:38+00:00,Use a timer to avoid polling  The timer will be fired asynchronously to handle time management flags; while other threads are searching.  This implementation uses a thread waiting on a timed condition variable instead of real timers. This approach allow to reduce platform dependant code to a minimum and also is the most portable given that timers libraries are very different among platforms and also the best ones are not compatible with olds Windows.  Also retire the now unused polling code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-05 07:43:44+00:00,Retire now unused input_available()  With our new listener thread we don't need anymore this ugly and platform dependent code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-05 07:35:17+00:00,Rewrite how commands from GUI are read  Instead of polling for input use a dedicated listener thread to read commands from the GUI independently from other threads.  To do this properly we have to delegate to the listener all the reading from the GUI: while searching but also while waiting for a command; like in std::getline().  So we have two possible behaviours: in-sync mode; in which the thread mimics std::getline() and the caller blocks until something is read from GUI; and async mode where the listener continuously reads and processes GUI commands while other threads are searching.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-11-01
mcostalba,mcostalba,2011-11-01 09:38:01+00:00,Further touches to magic bitboards code  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-11-01
mcostalba,mcostalba,2011-10-31 19:03:30+00:00,Fix compile error in cpu_count()  The std::min() template function requires both arguments to be of the same type.  But here we have the integer MAX_THREADS compared to a long:  long sysconf(int name);  So cast to integer and fix the compile.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-10-01
mcostalba,mcostalba,2011-10-31 17:57:13+00:00,Document magics bitboards code  Add comments and rename stuff to better clarify what the magic bitboard initialization code does.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-10-01
mcostalba,mcostalba,2011-10-31 12:32:18+00:00,Merge pull request #1 from Panthee/master  Code Cleanup - Replacing macros Min() and Max() with corresponding STL algorithms std::min() and std::max(),True,0,2011-10-01
Panthee,Panthee,2011-10-31 07:28:59+00:00,Retire update_gains(),True,0,2011-10-01
Panthee,Panthee,2011-10-31 04:38:44+00:00,Replaced macros Min() and Max() with corresponding STL algorithms std::min() and std::max(),True,0,2011-10-01
mcostalba,mcostalba,2011-10-30 22:05:31+00:00,Retire update_gains()  Called from one place only.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-30 18:31:50+00:00,Fix small bug in move_attacks_square()  We test if the piece moved in 'to' attacks the square 's' with:  bit_is_set(attacks_from(piece; to); s))  But we should instead consider the new occupancy; changed after the piece is moved; and so test with:  bit_is_set(attacks_from(piece; to; occ); s))  Otherwise we can miss some cases; for instance a queen in b1 that moves in c1 is not detected to attack a1 while instead she does.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-30 17:48:23+00:00,Inline pinned_pieces() and discovered_check_candidates()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-30 17:02:18+00:00,Code style and 80 chars cols in Position::from_fen()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-30 12:58:44+00:00,Sync do_move() and undo_move()  It is not possible to unify due to the fact that the sequence steps are reversed. What we can do is to try to sync comments and code as much as we can to easy reading and documentation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-30 12:51:20+00:00,Explicitly use a dedicated bitboard for occupied squares  Instead of byTypeBB[0]. This better self-documents the code.  No functional and speed change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-30 09:59:55+00:00,Retire do_capture_move()  It is called only in do_move() that now has been fully expanded. This is the most time consuming function of all the engine.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-29 17:01:56+00:00,Retire undo_null_move()  Use a templetized do_null_move() to do/undo the null move.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-29 16:31:15+00:00,Retire undo_castle_move()  Use a templetized do_castle_move() to do/undo the castling.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-29 12:43:44+00:00,Retire Position::set_castling_rights()  Is called in just one place. And rename set_castle() in the now free to use and more appropiate set_castle_right().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-22 15:06:59+00:00,Retire PieceValueXXX[] getters  They don't add any value given that the corresponding table has global visibility anyhow.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-22 14:01:21+00:00,Simplify the promotion case of move_gives_check()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-22 13:25:53+00:00,Remove redundancy in definitions of attack helpers  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-22 12:17:24+00:00,Convert PST tables to relative values  This is a prerequisite to allow changing piece values at runtime; needed for tuning.  Also use scores instead of separated midgame and endgame values.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-20 06:06:05+00:00,"Increase Mobility  First tuning with CLOP against a pool of 3 engines. Result verified with a direct match:  After 8736 games at 10""+0.1 Mod vs Orig 1470 - 1496 - 5770 ELO -1 (+-4.3)  So no change in self match but if CLOP is right it should be a bit better against an engine pool.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2011-10-01
mcostalba,mcostalba,2011-10-18 19:01:21+00:00,Better document mate and stalemate detection  In particular add that we can have an harmless false positive in case StopRequest or thread.cutoff_occurred() are set.  Reported by David Lee.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-10-01
mcostalba,mcostalba,2011-10-17 20:07:14+00:00,Use newly added log facility instead of LogFile  As a side effect now log file is open and closed every time it is used instead of remaining open for the whole thinking time.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-10-01
mcostalba,mcostalba,2011-10-17 20:07:00+00:00,Add basic log facility  Mainly used to log stuff to a file while playing; when stdout is used for the comunication with the GUI.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-10-01
mcostalba,mcostalba,2011-10-16 22:56:25+00:00,Fix compile error in debug mode  Build broken by commit 3141490374182551ed2 where we renamed move_is_ok() in is_ok() and this clashes with the same named method in Position that overrides the move's one causing compile errors.  The fix is to rename the method in Position.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-09 07:24:56+00:00,Link Time Optimization doesn't needs -static  Justin reports that it breaks the compilation on Fedore 15 and as Tom says:  -static is only needed to work around the gcc on ubuntu 11.10 beta bug. If -static introduces issues on its own then it is better to remove it. It will not be needed in most environments.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-08 11:11:53+00:00,Better document how MultiPV search works  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-10-01
mcostalba,mcostalba,2011-10-08 09:24:54+00:00,"Send again all the PV lines in multiPV searching  Partially revert 1036cadcecc43737 because UCI protocol in case of multipv explicitly requires:  for the best move/pv add ""multipv 1"" in the string when you send the pv. in k-best mode always send all k variants in k strings together.  Thanks to Justin Blanchard for pointing this out.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-10-01
mcostalba,mcostalba,2011-10-08 07:50:11+00:00,"Added gcc -msse3 support  It is enabled when selecting x86-64-modern target; this gives another nice speed up:  On a Core i5-2500 (3300 Mhz; Sandy Bridge):  64 bit download version: 1597151 n/s  -flto : 1659664 n/s  -flto -msse3: 1732344 n/s  Patch suggested by Tom Vijlbrief.  Also unify flto; popcount and msse3 optimization under ""modern"" target; note that this can break the ""modern"" build on old gcc that do not support -flto option: in this case update gcc ;-) or default to the standard build.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-10-01
tomtor,mcostalba,2011-10-06 19:10:12+00:00,Added gcc lto (Link Time Optimization) option  Just by adding the -flto option to CXXFLAGS link command we can gain a few percent in speed.  On a Core i5-2500 (3300 Mhz; Sandy Bridge):  64 bit download version:  Without -flto: 1597151 n/s With -flto : 1659664 n/s  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-10-01
mcostalba,mcostalba,2011-10-03 13:18:57+00:00,Shrink names of move helpers  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-10-01
mcostalba,mcostalba,2011-10-03 13:18:56+00:00,Small touches in position.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-10-01
mcostalba,mcostalba,2011-10-03 13:18:30+00:00,Small touches to book.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-10-01
mcostalba,mcostalba,2011-10-02 09:16:59+00:00,Better naming borrowed from Critter  In line with http://chessprogramming.wikispaces.com conventions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-02 06:40:46+00:00,"Revert ""Retire Rml full PV search at depth == 1""  Yet another random crash source !  Hopefully this is the last one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-10-01
mcostalba,mcostalba,2011-10-02 05:54:57+00:00,Rename kingZone[] and reverse the king's color  Seems easier to understand to me. From Critter.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-02 05:54:57+00:00,Document why Book is defined static  This was not clear to someone on talkchess and actually is not trivial to understand.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-10-02 05:54:43+00:00,When exiting wake up all threads at once  It seems we have a very rare crash under Linux; once every 10K games without this patch.  Is faster to wake up all the threads; especially on SMP; where the threads can then exit in parallel while the main thread is waiting for the next one to terminate.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-10-01
mcostalba,mcostalba,2011-09-25 15:30:29+00:00,No need to test for MOVE_NONE before move_is_ok()  Function move_is_ok() already catches the move == MOVE_NONE case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-09-01
mcostalba,mcostalba,2011-09-24 16:20:35+00:00,Update killers after a TT hit  Almost no increase but seems the logic thing to do.  After 16707 games 2771 - 2595 - 11341 ELO +3 (+- 3.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-09-01
mcostalba,mcostalba,2011-09-24 16:13:14+00:00,Correctly score capture underpromotions  Be sure a queen capture promotion is tried in front of an underpromotion.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-09-01
mcostalba,mcostalba,2011-09-24 16:12:36+00:00,Don't lock before check for termination  Restore old locking scheme changed with commit 1e92df6b20aa2240.  This seems to prevent a very rare crash that occurs once every 5-10K games.  With this patch we have no crashes after 33K games.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-09-01
mcostalba,mcostalba,2011-09-11 10:38:23+00:00,Use the map type template parameter to access map()  It is more natural than using the family subtype and also use two single maps instead of a std::pair.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-09-01
mcostalba,mcostalba,2011-09-11 09:11:43+00:00,Lookup square distance instead of calculate on the fly  Microptimization that gives a +0.7% speed increase.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-09-01
mcostalba,mcostalba,2011-08-21 23:49:47+00:00,Detect family type of endgame from its enum value  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-08-01
mcostalba,mcostalba,2011-08-14 12:15:58+00:00,"Indulge a bit on the template wizardy  Push the template pedal a bit in our ""showoff"" endgame code ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-08-01
mcostalba,mcostalba,2011-08-14 11:12:14+00:00,Small simplification of endgame functions API  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-08-01
mcostalba,mcostalba,2011-08-12 10:56:11+00:00,Fix use of uninitialized variable  When initializing endgames map we build a faked FEN string in mat_key() to get the position hash's key.  This fen string lacks full move numbers; so when parsing the fen in Position::from_fen() we leave startPosPly un-initialized.  Spotted by Valgrind (this is a kind of bug that is almost impossible for humans to find).  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-08-01
mcostalba,mcostalba,2011-08-12 10:54:54+00:00,"Fix silly icc remark #2259  Another stupid remark to quiet out:  remark #2259: non-pointer conversion from ""int"" to ""UINT16={unsigned short}"" may lose significant bits  In this case icc always converts to an integer the result of a shift operation if the bit size of the operand is smaller; hence the warning when assignin back to n.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2011-08-01
mcostalba,mcostalba,2011-08-10 11:26:52+00:00,Use a boolean instead as thread's state  Now that we have just two mutually exclusive thread's states we can repleace them by a simple boolean.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-08-01
mcostalba,mcostalba,2011-08-10 11:05:33+00:00,Remove Thread::WORKISWAITING  Set the state directly to Thread::SEARCHING  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-08-01
mcostalba,mcostalba,2011-08-10 07:17:15+00:00,Don't need pthread_detach() after pthread_join()  Spotted by Joona and verified with Valgrind.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-08-01
mcostalba,mcostalba,2011-08-09 13:19:44+00:00,Change start_routine argument  Directly pass the thread pointer.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
mcostalba,mcostalba,2011-08-09 08:58:10+00:00,Retire Rml full PV search at depth == 1  Now that Rml ordering is based on normal MovePicker logic; apart for the ttMove that is given; we can avoid to score all the root moves at depth 1. We only need it for easy move detection logic; but in this case we just need to score the first two best moves and not all the Rml set.  No regression after 6400 games Mod vs Orig 1052 1012 4336 ELO +2 (+- 4.9)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
mcostalba,mcostalba,2011-08-08 22:08:34+00:00,Retire ThreadsManager::init_hash_tables()  Allocation of pawn and material hash tables should be strictly bounded to the change of the number of activeThreads; so move the code inside set_size().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-08-01
mcostalba,mcostalba,2011-08-08 21:10:01+00:00,Retire Thread::TERMINATED  Use proper way to detect for thread terimnation instead of our homegrown flag.  It adds more code than it removes and adds also platform specific code; neverthless I think is the way to go becuase Thread::TERMINATED flag is intrinsecly racy given that when we raise it thread is still _not_ terminated nor it can be; and also we don't want to reinvent the (broken) wheel of thread termination detection when there is already available the proper one.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-08-01
mcostalba,mcostalba,2011-08-08 13:12:02+00:00,Retire Thread::INITIALIZING  Was used to prevent issues when creating multiple threads on Windows; but now it seems we can remove it safely.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-08-01
mcostalba,mcostalba,2011-08-08 12:23:03+00:00,Move idle_loop() under Thread  This greatly removes clutter from the difficult idle_loop() function  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-08-01
mcostalba,mcostalba,2011-08-08 10:49:58+00:00,Tidy up comments in thread.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-08-01
mcostalba,mcostalba,2011-08-08 09:08:41+00:00,Retire broken SendSearchedNodes  Now that we can split at root it happens that SendSearchedNodes works only once at the end of the iteration; but this is useless becuase speed info is sent anyhow toghter with the pv line.  So retire for now; waiting to find something SMP compatible.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-08-01
mcostalba,mcostalba,2011-08-08 06:46:01+00:00,"Sync search() and qsearch() alpha update  Change qsearch() to reflect alpha update logic of search().  To be consistent changed also moves loop condition and futility pruning condition.  No regression after 5072 games at TC 10""+0.1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2011-08-01
mcostalba,mcostalba,2011-08-08 06:45:24+00:00,Retire Thread::BOOKED  Start a slave as soon as is allocated.  No functional change with faked split.  Regression tested the full split() series and after 2000 games no regression and no crash.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-08-01
mcostalba,mcostalba,2011-08-07 14:15:19+00:00,"Fix obey the ""maxThreadsPerSplitPoint"" setting  Spotted by Joona.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-08-01
mcostalba,mcostalba,2011-08-07 14:10:41+00:00,Do not modify alpha in split()  When calling split or we immediately return because unable to find available slaves; or we start searching on _all_ the moves of the node or until a cut-off occurs; so that when returning from split we immediately leave the moves loop.  Because of this we don't need to change alpha inside split() and we can use a signature similar to search() so to better clarify that split() is actually a search on the remaining node's moves.  No functional change with faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-08-01
mcostalba,mcostalba,2011-08-07 13:37:14+00:00,Initialize a new split point out of lock  Allocate and initialize a new split point out of lock becuase modified data is local to master thread only.  Also better document why we need a lock at the end of split().  No functional change with faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-08-01
mcostalba,mcostalba,2011-08-07 09:36:14+00:00,Update comment on why we call root search with ss+1  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-08-01
mcostalba,mcostalba,2011-08-07 09:36:13+00:00,Fix an assert when stopping the search  When StopRequest is raised we cannot immediately exit the move loop but first we need to update bestValue so to avoid assert:  assert(bestValue > -VALUE_INFINITE && bestValue < VALUE_INFINITE);  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-08-01
zamar,mcostalba,2011-08-07 09:35:56+00:00,"Split at root!  Another great success by Joona !  After 5876 games at 10""+0.1 Mod vs Orig: 1073 - 849 - 3954 ELO +13 (+- 5.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-08-01
zamar,mcostalba,2011-08-06 09:31:30+00:00,Preparations for splitting at root  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-08-01
mcostalba,mcostalba,2011-08-05 06:23:54+00:00,Simplify MovePickerExt<>  Now that we don't special case the root moves anymore we don't need to pass NodeType anymore as template parameter; a simple bool to detect a SpNode will be enough.  Spotted by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-08-01
mcostalba,mcostalba,2011-08-05 06:15:45+00:00,"Fix silly bug in uci loop  After issuing ""go""-command; at the end of the search SF shows: ""Unknown command: ..."".  Spotted by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2011-08-01
mcostalba,mcostalba,2011-08-04 09:10:03+00:00,Fix a (silly) warning under icc compiler  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-08-01
mcostalba,mcostalba,2011-08-03 14:00:23+00:00,Use std::lexicographical_compare() in UCI options  Instead of our home grown function to perform a case insensitive compare on option names as required by UCI protocol.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-08-01
mcostalba,mcostalba,2011-08-02 21:28:03+00:00,Consistently set ttMove to Rml.pv[0] in root node  No functional change; but reduce risks of subtle aliasing bugs.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
mcostalba,mcostalba,2011-08-02 20:47:31+00:00,Fix an off-by-one error in UCI print loop  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
mcostalba,mcostalba,2011-08-02 17:49:06+00:00,Rename ok_to_use_TT() in can_return_tt()  Seems more appropiate. From Lucas Braesch's DoubleCheck.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
mcostalba,mcostalba,2011-08-02 17:00:47+00:00,Send PV only for updated lines  It seems FritzGUI already remembers the old lines; so we just need to update PV info only for the new lines.  Also introduced prevScore field in RootMove to avoid a bulk copy of Rml.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
mcostalba,mcostalba,2011-08-02 17:00:47+00:00,Sort PV moves always in two steps  This should fix following issue:  Suppose the search with MultiPVIteration == 0 returns an exact score  move = Nxf4; score = 100  Now search with MultiPVIteration == 1 and get two scores  move = Qg8; score = 150 move = Ra1; score = 180  If we now reorder all the moves in one step we end up with  pv[0] = Ra1; pv[1] = Qg8  Instead reordering as the current patch we end up in:  pv[0] = Ra1; pv[1] = Nxf4  preserving the first searched move.  No functional change in single PV.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
mcostalba,mcostalba,2011-08-02 17:00:22+00:00,Small cleanup of previous patches  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
zamar,mcostalba,2011-08-02 05:47:33+00:00,Reimplement MultiPV mode  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
zamar,mcostalba,2011-08-02 05:47:22+00:00,"Reimplement support for ""searchmoves"" option  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2011-08-01
zamar,mcostalba,2011-08-02 05:47:06+00:00,Remove now unused RootMove.non_pv_score  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
zamar,mcostalba,2011-08-02 05:46:50+00:00,Make root search to use standard MovePicker.  This patch temporarily breaks MultiPV and searchmove features; but they will be re-implemented in future patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-08-01
zamar,mcostalba,2011-07-29 11:42:22+00:00,Don't probe TT at RootNode  In that case we should also update RootMoveList to avoid bogus output  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-07-01
mcostalba,mcostalba,2011-07-26 11:39:15+00:00,Fix pretty_pv() output in Chess960  And move it to search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-07-01
zamar,mcostalba,2011-07-24 17:27:29+00:00,Fix PV output in Chess960  We missed to set chess960 flag into the std::stringstream used to setup the PV line.  Bug introduced with commit f803f33e6383fea1074aca2cf625983e148a6668 of 30/12/2010 when we started to print PV line into a std::stringstream instead of directly into cout; where the chess960 flag is correctly set.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 07:53:36+00:00,Tidy up benchmark.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 07:12:07+00:00,Rename execute_uci_command() to uci_loop()  As a side effect now root position can be directly allocated on the stack and doesn't need to be defined static anymore.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 06:39:07+00:00,Unhide the istringstream behind UCIParser  It is misnamed because it is not a parser; perhaps a tokenizer; anyhow better call it for what it is; an input string stream.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 05:59:14+00:00,Fix startpos_ply_counter() regression  Return the correct number of played plies at the end of the setup moves. Currently it always returns 0 when starting from start position; like in real games.  We fix this adding st->pliesFromNull that starts from 0 and is incremented after each setup move and is never reset in the setup phase but only once search is started.  It is an hack because startpos_ply_counter() will return different values during the search and is correct only at the beginning of the search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 05:15:40+00:00,Use a circular buffer to keep track of setup states  This fixes a regression on real games due to the fact that we have some mismatches:      history[st->gamePly - i] != stp->key  when st->gamePly - i == 0;this is due to a nasty bug I have introduced when using std::vector<> as StateInfo backup. The point is that StateInfo keeps inside a pointer to the previous StateInfo in a kind of linked list. But when std::vector<> is resized reallocates a larger chunk of memory and moves the data there so these pointers became stale.  This patch fixes the issue.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 05:15:39+00:00,Don't update gamePly after each move  We just need startup value to calculate available thinking time. So remove from state.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 05:15:38+00:00,Use std::vector<Move> to store UCI search moves  Avoid the ugly and anyhow incorrect hard limit on the maximum number of moves and allow to handle an arbitrary number of moves to search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 05:15:36+00:00,Use st->gamePly to store fullMoves  This allow to retire do_setup_move() and also to simplify draw detection logic becuase now we always have:  Min(st->rule50; st->gamePly) = st->rule50  This was already true when starting from starting position; but now is true even when starting from a FEN string because now we take in account fullmove number in counting gamePly so that it is always.  st->rule50 <= st->gamePly  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-24 05:15:35+00:00,Retire history[]  Use key saved in state instead.  No functional change (in real games) and no speed regression.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
zamar,mcostalba,2011-07-24 05:13:29+00:00,Do not exit early even when seeing mate  Fixes the reported KNNK ending problem:  http://talkchess.com/forum/viewtopic.php?t=39347  Joona says:  Now I finally had a time to take a look at on this issue.  I've reproduced the problem starting from this position: 1B6/1B2k3/P7/1P3p2/1K6/8/4b3/4b3 w - - 6 85  I made Stockfish play as white and Fruit as black. I repeated test ten times and once SF was not able to deliver mate.  But I observed several times that SF had reported on last something like mate in 10. However next time it played move with score mate in 15.  Easiest way to solve the problem is attached as a patch. I tested it several times and SF always ended up playing the optimal move. Of course the downside is that now delivering mate takes a bit longer; but IMO it's better to lose once in a while by time in sudden death game than not being able to deliver simple mate with long time controls.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-20 02:34:39+00:00,Revert previous patches due to bug  We have a bug (possibly because of returning draw from root move list); it is possible to see when looking at games with a GUI; we can see rarely but consistently the score return as #0 for many depths until it comes back to normal values.  Revert patches until it is not fixed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-07-01
zamar,mcostalba,2011-07-19 16:36:22+00:00,Move the draw check also for qsearch  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-07-01
zamar,mcostalba,2011-07-19 16:36:14+00:00,Move draw checks right after doing the move  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-07-01
mcostalba,mcostalba,2011-07-17 11:55:26+00:00,Small touches in set_option()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-17 09:22:55+00:00,Validate input UCI moves  Running following command:    position startpos moves e1e8  Makes SF to assert in debug mode in do_move() but to accept bad input and continue in release mode where probably it is going to crash little later.  So validate input before to feed do_move().  Suggestion by Yakovlev Vadim.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-16 21:59:14+00:00,Remove some useless include  Spotted by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-16 09:53:34+00:00,Don't need to assert for pos.is_ok() when position is constant  It's only necessary to do the checking at the end of every non-const member (including the constructors and from_fen()) of class Position. Once the post-condition of every modifier guarantees the class invariant; we don't need to verify sanity of the position as preconditions for outside callers such as movegen; search etc. For non-class types such as Move and Square we still need to assert of course.  Suggested by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-16 09:12:46+00:00,Change hidden checkers API  After previous patch is no more needed to pass the color; becuase it is always the side to move.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-16 08:50:35+00:00,Simplified discovered check connected_moves()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-16 07:53:21+00:00,Simplify and micro-optimize hidden_checkers()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-15 20:53:47+00:00,No need to declare default Position c'tor  Pointed out by Rein Halbersma.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-07-01
mcostalba,mcostalba,2011-07-15 11:20:31+00:00,Fix a warning under MSVC  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-07-01
mcostalba,mcostalba,2011-07-15 11:13:55+00:00,Fix parametrized direction in pawns generation  It worked by accident because we always called both directions; but definition was wrong.  Functional change due to different generation order; but perft numbers are the correct ones.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-07-01
mcostalba,mcostalba,2011-07-15 11:13:48+00:00,Cleanup handling of Delta enums  Ispired by Rein's code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-07-01
mcostalba,mcostalba,2011-07-14 11:43:13+00:00,Use std library to sort moves  Functional change due to the fact that now pick_best() is stable; but should be no change in strenght.  Example code and ideas by Rein Halbersma.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-07-01
mcostalba,mcostalba,2011-07-11 10:17:50+00:00,"Fix icc's ""unreachable code"" warning  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2011-07-01
mcostalba,mcostalba,2011-07-03 11:08:02+00:00,Teach to_fen() about Halfmove and Fullmove number  And also fix the last '/' at the end of the piece placement field.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-03 10:00:28+00:00,Use MoveList also in Position::move_is_pl_slow()  And rename it in Position::move_is_legal()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-03 09:27:15+00:00,Retire move_is_short_castle() and move_is_long_castle()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-03 05:54:46+00:00,Restore startpos_ply_counter() instead of full_moves()  And pass correct currentPly to TimeManager::init().  This restores old behaviour; in particular now black has a different timing than white becuase is no more:  currentPly = 2 * fullMoveNumber;  but becomes  2 * (fullMoves - 1) + int(sideToMove == BLACK)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-07-01
mcostalba,mcostalba,2011-07-02 13:04:33+00:00,Introduce and use struct MoveList  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-02 10:52:22+00:00,Remove MSVC debug window hack in bench  Interference with profile-build under mingw  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-02 10:01:12+00:00,Rearrange structs to avoid internal padding  Found with gcc -Wpadded gcc option.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-07-02 08:47:06+00:00,Revert PHQ-2  No clear advantage again standard; possibly we will retest before to release.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-07-01
mcostalba,mcostalba,2011-06-30 19:04:46+00:00,Small touches to do/undo_castle_move()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-06-01
mcostalba,mcostalba,2011-06-30 18:58:44+00:00,Better document generate_castle_moves()  No functional change also in Chess960  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-06-01
mcostalba,mcostalba,2011-06-30 05:54:09+00:00,"Small tweaks to search()  No functional change also in faked split mode  To be sure verified in real games with 4 threads TC 2""+0.1 After 11125 games 2497 - 2469 - 6159 ELO +0 (+- 4.4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2011-06-01
mcostalba,mcostalba,2011-06-29 16:54:12+00:00,Remove duplicated enum Phase definition  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-06-01
mcostalba,mcostalba,2011-06-28 17:01:51+00:00,Retire find_checkers()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-28 16:22:33+00:00,Retire square_is_weak()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-28 16:11:03+00:00,Retire one piece_list() overload  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-28 16:10:44+00:00,Rename pieces_of_color() in pieces()  To be uniform with other overloads.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-28 16:10:27+00:00,Retire redundant square_is_occupied()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-28 16:10:18+00:00,Change Position::pst() signature  To be more clear what is the underlying table.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-28 16:10:05+00:00,Fix Shredder-FEN regression in from_fen()  Fix also an incredible 3% speed regression by an almost never called function. I guess this is due to mingw very low quality standard libraries implementation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-27 18:26:30+00:00,Greatly simplify castling rights handling  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-06-01
mcostalba,mcostalba,2011-06-27 11:08:12+00:00,Assume input FEN string is correct in from_fen()  And also tolerate a 0 value for full move number.  Revert BUG_41 patch; now we set initial King file only if a castling is possible; so we don't need the fix anymore in case of correct FEN.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-06-01
mcostalba,mcostalba,2011-06-26 10:44:12+00:00,Fix a bug in Position::is_ok()  If we cannot castle castleRightsMask[] could be not valid; for instance when king initial file is FILE_A as queen rook.  In this case castleRightsMask[] at initialQRFile is different from the expected (ALL_CASTLES ^ WHITE_OOO).  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-26 09:52:42+00:00,Rename type_of_piece() and color_of_piece()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-26 09:37:13+00:00,Retire Position::color_of_piece_on()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-26 09:28:54+00:00,Retire Position::type_of_piece_on()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-26 09:19:37+00:00,Retire seeValues[] and move PieceValue[] out of Position  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-24 09:31:03+00:00,Restore user weights to 100  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-06-01
mcostalba,mcostalba,2011-06-24 08:47:30+00:00,"PHQ settings for King and Mobility  See: http://talkchess.com/forum/viewtopic.php?t=39327  After 8130 games on QUAD at 20""+0.1 1342 - 1359 - 5429 ELO +0 (+- 4.4)  Tried also version with just king settings changed: After 5932 games 962 - 1052 - 3918 ELO -5 (+- 5.2)  And with just mobility settings changed: After 4114 games 618 - 619  - 2877 ELO +0 (+- 5.9)  Frank has tested only 1200 games; but at longer TC and against many engines; so because PHQ results are not worst than other combination and not worst than original let's commit his version.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2011-06-01
mcostalba,mcostalba,2011-06-23 11:09:31+00:00,Fix move_is_capture() to detect capture promotions  We miss to account as a capture a promotion capture !  Incredible bug in this critical function that is here since a long time (b50921fd5c3e1753 of 21/10/2009 !!)  This patch fixes the bug and readds the faster move_is_capture_or_promotion() that slightly increases overall speed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-06-01
mcostalba,mcostalba,2011-06-22 16:32:22+00:00,Rewrite how uci info is sent to GUI  It is now much more modular than before and also we always send the seldepth when we send the depth; this avoids to make seldepth disappearing from GUI at the start of a new iteration.  Print also fails high/low pv lines at high enough search depths.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-06-01
mcostalba,mcostalba,2011-06-21 18:01:00+00:00,Simplify sliding_attacks()  Easy; almost trivial simplification; I don't understand how I missed this before !!  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-21 11:13:26+00:00,Retire ksq from CheckInfo  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-20 11:09:11+00:00,Use CheckInfo to store pinned bitboard  This trivial change gives an impressive 2;5% speedup !!!!  Also retire one unused move_gives_check() overload.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-06-01
mcostalba,mcostalba,2011-06-18 16:11:09+00:00,Omit mate distance pruning at root  Restore original behaviour; before root unification and remove a now useless ugly hack for alpha in multi-pv case.  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-18 07:03:59+00:00,Use an array index instead of an iterator in root list  It is not correct to use an iterator stick on a vector that is sorted becuase iterator is invalidated in general case.  It happens to work by accident because iterators are implemented as pointers and so they behave in the same (correct) way then using array indices; but the latters are the correct thing to use.  Also better document the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-15 11:49:59+00:00,Remove useless bestValue = alpha assignement  It is a fossil from the root_search() era; no more needed today.  Spotted by Onno  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-06-01
mcostalba,mcostalba,2011-06-15 11:17:49+00:00,"Try only recaptures in qsearch if depth is very low  This avoids search explosion in qsearch for some patological cases like:  r1n1n1b1/1P1P1P1P/1N1N1N2/2RnQrRq/2pKp3/3BNQbQ/k7/4Bq2 w - - 0 1  After 9078 games 20""+0.1 QUAD: Mod vs Orig 1413 - 1319 - 6346 ELO +3 (+- 4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2011-06-01
mcostalba,mcostalba,2011-06-15 11:11:35+00:00,Speed up kpk initialization  The trick is to classify more position at first cycle; so to reduce following work. Speed up is of about 50% !  Also some cleanup while there.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-06-01
mcostalba,mcostalba,2011-06-15 01:15:41+00:00,Use Carry-Rippler trick to speed up magics  Nice trick discovered on:  http://chessprogramming.wikispaces.com/Traversing+Subsets+of+a+Set  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-06-01
mcostalba,mcostalba,2011-06-13 16:28:09+00:00,Retire init_piece_square_tables()  Merge in init_zobrist() and rename the latter.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-06-01
mcostalba,mcostalba,2011-06-12 20:14:07+00:00,Increase LMR limit by one ply  Seems there is no regression so prefer to prune less.  After 8278 games Mod vs Orig 1246 - 1265 - 5767 +0 ELO (+- 4.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-12 10:50:19+00:00,Better self-document init_zobrist()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-12 10:37:02+00:00,Fix initialization of BSFTable[]  We should start from i = 0; it works by accident because static storage BSFTable[] is init to zero by default.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-12 06:09:30+00:00,Don't update_gains() in qsearch  Is almost unuseful becuase captures are skipped.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-11 21:12:13+00:00,Fix score_captures() for the case of capture promotions  In case we have more than one promotion move; prefer the one that captures the biggest piece.  Almost no functional change; anyhow I don't expect any ELO change; it is just the correct thing to do.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-11 14:56:12+00:00,Retire some unused functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-11 14:31:39+00:00,Micro-optimize castling handling in do_move()  And better self-document the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-10 16:12:10+00:00,Retire PieceLetters struct  Use a much simpler std::string instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-06-01
mcostalba,mcostalba,2011-06-10 10:59:53+00:00,Better document move_to_san()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-06-01
mcostalba,mcostalba,2011-06-09 20:59:24+00:00,Revert refinedValue in ProbCut  It seems much worst in number of nodes seacrhed to reach the depth and anyhow does not give any advantage to the Onno's oroginal one.  So revert by now and perhaps readd when we find something clearly better.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-06-01
mcostalba,mcostalba,2011-06-09 17:47:58+00:00,Use double rotate for magic generation  Allow to choose among 4096 instances of pseudo-random sequences instead of the previous 64 so the probability to find a better sequence increases and actually we have a much better 64 bit case and we can also use the 64 bit version of pick_magic() also for 32 bits and althoug sub optimal; because now we can have more choices results are even slightly better also for 32 bit.  Use also a faster submask().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-06-01
mcostalba,mcostalba,2011-06-08 17:03:26+00:00,"Use refinedValue in ProbCut condition  After 12613 games at 20""+0.1 on QUAD Mod vs Orig 1870 - 1863 - 8880 ELO +0 (+- 3.3)  So no performance change but it is a code semplification and also is more easy to understand.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2011-06-01
mcostalba,mcostalba,2011-06-08 16:59:47+00:00,Small pick_magic() touches  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-06-01
mcostalba,mcostalba,2011-06-07 19:59:12+00:00,Find magics on the fly  Good result for 32 bit case where computation is very fast; still not satisfying on 64 bit case where the magics seem a bit harder to get.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-06-01
mcostalba,mcostalba,2011-06-06 10:56:17+00:00,Partially revert previous patches  Due to a -2% speed penalty. This patch takes the best of the previous series without the regression due to introduction of Magic struct.  Speedup against previous revision is of almost 3% !!!!  No functional change both in 32 and 64 bits.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-06-01
mcostalba,mcostalba,2011-06-05 14:01:22+00:00,Skip offset calculation in slider attacks  Another small simplification and micro optimization.  No functional change in both 32 and 64 bits.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-05 13:13:41+00:00,Get rid of Shift[] tables  We can calculate them counting the masks bits.  Also small tweak to sliding_attacks()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-05 11:28:36+00:00,Better name and document magic botboard stuff  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-05 11:27:53+00:00,Try to keep memory access in the same cache line  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-06-01
mcostalba,mcostalba,2011-06-04 10:29:54+00:00,Skip draw by repetition check in qsearch  Cut in half the time spent in pos.draw() that accounts for a whopping 1% of total time !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-04 10:05:12+00:00,Move bitboards initializations under one function  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-04 08:59:18+00:00,Calculate Bit Scan tables at initialization  Instead of hard-coding them.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-04 05:35:24+00:00,Do not sort negative non captures at low depth  Speedup of the whole 3 patch series is of 2;5% !!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-06-01
mcostalba,mcostalba,2011-06-03 21:10:23+00:00,Split non capture in two sets when ordering  But keep same ordering. This patch is prerequisite for future work.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-06-01
mcostalba,mcostalba,2011-06-03 12:14:03+00:00,Inline extension()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-06-01
mcostalba,mcostalba,2011-06-03 11:59:50+00:00,Use TT also in Root nodes  And other small stuff ti be tested in SMP  No functional change in single thread.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-06-01
mcostalba,mcostalba,2011-06-02 11:49:40+00:00,Microoptimize generate<MV_EVASION>  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-06-01
mcostalba,mcostalba,2011-05-30 19:49:04+00:00,"New extended probcut implementation  Here the idea is to test probcut not only after bad captures; but after any bad move; i.e. any move that leaves the opponent with a good capture.  Ported by a patch from Onno; the difference from original version is that we have moved probcut after null search.  After 7917 games 4 threads 20""+0.1 Mod vs Orig: 1261 - 1095 - 5561 ELO +7 (+- 4.2) LOS 96%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2011-05-01
mcostalba,mcostalba,2011-05-29 09:52:03+00:00,Fix SAN disambiguation bug  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-29 08:17:03+00:00,Rename PH_TT_MOVES in PH_TT_MOVE  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-28 21:50:22+00:00,Retire mateKiller  Practically useless: After 6456 games 1281 - 1293 - 3882 ELO +0 (+- 5.5)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-05-01
mcostalba,mcostalba,2011-05-28 12:23:32+00:00,Unify MovePickerExt template parameters  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-05-01
mcostalba,mcostalba,2011-05-28 11:44:39+00:00,Unify search() template parameters  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-05-01
mcostalba,mcostalba,2011-05-28 10:16:00+00:00,Fix moveCount after legality check delay  We really want PV moves and also Split Point moves to be legal to avoid messing the move counter and corresonding PV move detection or shared Split Point's counter variable.  This fixes a real bug where a position with only one move allowed returns bestValue == -VALUE_INFINITE if the move turns out to be illegal.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-05-01
mcostalba,mcostalba,2011-05-24 20:24:40+00:00,A bit of reformatting after previous series  And some documentation update.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-23 19:21:02+00:00,Test for legality only after futility pruning  Although there is a small functional change it seems an improvment of about 2% in speed !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-05-01
mcostalba,mcostalba,2011-05-23 19:20:52+00:00,Move legal check out of MovePicker  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-05-01
mcostalba,mcostalba,2011-05-23 19:20:42+00:00,Rename move_is_legal() in move_is_pl()  We disjoint pseudo legal detection from full legal detection.  It will be used by future patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-05-01
mcostalba,mcostalba,2011-05-23 19:20:31+00:00,Output debug info to cerr  So to be clearly visible when redirecting stdout to /dev/null  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-05-01
mcostalba,mcostalba,2011-05-23 19:20:19+00:00,Fix a shadowed variable warning under gcc  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-05-01
mcostalba,mcostalba,2011-05-22 10:51:28+00:00,Bug wrong evasion detection for king moves  When we are in check and we move the king then testing with pl_move_is_legal(m; pinned) is not enough becuase we cannot rely on attackers_to() but we have to explicitly remove the king form the occupied bitboard to catch as invalid moves like b1a1 when opposite queen is on c1.  Our move generator already produces correct evasions so we just need to add the extra verification to move_is_legal().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-22 08:49:44+00:00,Add file distance condition in move_is_legal()  Found another missed control in move_is_legal() thanks to brute force testing.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-22 07:52:39+00:00,Remove useless casts in types.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-22 07:48:19+00:00,Promotion piece must be empty if is not a promotion  Add a new check in  move_is_legal()  Avoid useless casting in move.h while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-21 09:40:36+00:00,Introduce MovePicker::isBadCapture() and use in probcut  Small functional change due to the fact that now we skip probcut on evasions.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-05-01
mcostalba,mcostalba,2011-05-20 05:58:53+00:00,Correctly handle castle in see()  Suggested by Onno.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-05-01
mcostalba,mcostalba,2011-05-18 06:05:36+00:00,"Fix brekage from previous patches  It is interesting the fact that we need to test for move_is_castle(m) anyway and not relying on testing if destination square is attacked. Indeed the latter condition fails if the castling rook is attacked; castling is coded as ""king captures the rook"" but it is legal in that case.  Verified no functional change with beginning of the series.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2011-05-01
mcostalba,mcostalba,2011-05-17 22:47:26+00:00,Micro-optimize pl_move_is_legal()  Remove the check for castling moves because it is already implicit in the check for king moves and castling is so rare that doing the check is just a slow down.  Thanks to Marek Kwiatkowski.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-17 22:39:14+00:00,Retire move_is_capture_or_promotion()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-17 22:31:40+00:00,Fix move_is_capture() definition  The structure of move is changed so should also the two functions. It happens that it works by accident !  Bug spotted by Marek Kwiatkowski  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-17 11:25:49+00:00,Retire test for king moves in see()  We already test this condition in see_sign() and so it is almost always a redundant verification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-17 11:17:57+00:00,Retire Position::see(Square from; Square to) overload  Alomst unuseful.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-17 11:17:48+00:00,Prefer an assert to a comment in position.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-17 11:17:38+00:00,Let 'make' with no arguments to show compilation options  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-17 11:17:29+00:00,Prefer ttMove to tte->move() in search()  Avoids aliasing problems due to TT overwrites.  Node changes becuase of IID.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-08 10:50:38+00:00,Use standard naming conventions in book.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-08 08:15:18+00:00,Reintroduce operator>>() in Book class  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-08 08:11:36+00:00,Restore development version  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-08 07:46:33+00:00,Stockfish 2.1.1  stockfish bench signature is: 6487630  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-07 09:08:53+00:00,Spell fix in evaluate.cpp  Spotted by Eelco.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-05-01
mcostalba,mcostalba,2011-05-07 08:51:33+00:00,Fix reading of book file  Bug is subtle because appears only under MSVC 32 bits in optimized version; hence was missed before.  Bug is due to the fact that evaluation order of terms of a sum is undefined by the standard; so in get_int() we have:  return 256 * get_int<n-1>() + bookFile.get();  And if get() is evaluated before get_int() we have a corrupted key.  The patch rewrites the code in a more natural and predictable way.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-05-01
mcostalba,mcostalba,2011-05-05 11:16:26+00:00,Remove redundant assignment in search()  It is already assigned few lines before.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-05-01
mcostalba,mcostalba,2011-05-05 05:35:42+00:00,Restore development version  No functional change.,True,3,2011-05-01
mcostalba,mcostalba,2011-05-03 18:29:21+00:00,Fix a warning in debug mode  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-03 11:11:19+00:00,Stockfish 2.1  stockfish bench signature is: 6487630  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-03 11:11:10+00:00,Reintroduce permanent PV entries in TT  We are now ready to release so restore this improvment before 2.1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-03 11:11:02+00:00,Update Readme.txt to 32 threads and bsfq on Windows  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-03 11:10:53+00:00,Fix bug in evaluate_passed_pawns()  If blockSq is already on rank 8; blockSq + pawn_push(Us) is on rank 9; outside of board. It does not make sense to measure king distance to a field outside the board.  Bug spotted by Fruity: http://open-chess.org/viewtopic.php?f=5&t=1156&start=10  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-05-01
mcostalba,mcostalba,2011-05-02 16:50:46+00:00,"Retire ""Pawn Structure"" UCI option  Almost useless for the user and now is in sync with the material value that is already weighted.  A small speedup of 0;4% because we avoid an apply_weight() call in a fast path.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2011-05-01
mcostalba,mcostalba,2011-05-02 16:50:37+00:00,Rename stuff in evaluate.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-05-01
mcostalba,mcostalba,2011-05-01 11:15:40+00:00,Additional tweaks in evaluate_unstoppable_pawns()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-01 09:31:27+00:00,Remove redundancy in evaluate_unstoppable_pawns()  Spotted by Fruity http://open-chess.org/viewtopic.php?f=5&t=1156&start=20  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-01 08:58:45+00:00,Small reformat in evaluate_unstoppable_pawns()  Also simplify tracing because evaluate_unstoppable_pawns() return always zero if both colors have non pawn material.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-05-01 06:49:40+00:00,Update polyglot.ini  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-05-01
mcostalba,mcostalba,2011-04-29 17:56:48+00:00,Rename check related functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-29 12:08:35+00:00,Small renaming in thread.cpp  To better self document the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-29 12:08:27+00:00,Rename Option in UCIOPtion  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-28 07:00:34+00:00,Limit history range to +-2000  Extensive test series on tweaking history limit and bonus formula. At the end this was the best.  After 11959 games:  Mod vs Orig 2087 - 1934 - 7938 ELO +4 (+- 3.7) LOS 92%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-04-01
mcostalba,mcostalba,2011-04-27 22:21:46+00:00,Perft counts leaf nodes not generated moves.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-27 06:31:51+00:00,Use probe() as name for looking up into an hash table  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-26 12:23:47+00:00,Tidy up uci.cpp and siblings  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-04-01
mcostalba,mcostalba,2011-04-26 12:23:39+00:00,Move OpeningBook and RK where are actually used  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-04-01
mcostalba,mcostalba,2011-04-25 21:59:56+00:00,Fix a compile error with gcc  It seems gcc does not like an extra semicolon.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-25 12:35:13+00:00,Move MovePickerExt specializations away from headings  This unclutters a bit the heading part of search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-25 11:07:30+00:00,"Tidy up benchmark.cpp  Node count is different just becuase now we don't log on ""bench.txt"" file anymore so that we avoid some calls to pretty_pv() that calls Position::do_move().  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2011-04-01
mcostalba,mcostalba,2011-04-25 09:30:39+00:00,Large API rename in ThreadsManager  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-24 18:23:07+00:00,Don't allocate MAX_THREADS hash tables if not necessary  This prevent crashing on mobile devices with limited RAM; currently with MAX_THREADS = 32 we would need 44MB that could be too much for a poor cellphone.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-24 16:07:22+00:00,Move pawn and material tables under Thread class  This change allows to remove some quite a bit of code and seems the natural thing to do.  Introduced file thread.cpp to move away from search.cpp a lot of threads related stuff.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-24 07:54:36+00:00,Rename MOVES_MAX in MAX_MOVES  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-24 07:52:16+00:00,Retire extensions as UCI option  There is no real need why an user should change these values.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-24 07:18:39+00:00,Document why we use per-thread pawn and material tables  Arisen from a discussion on talkchess.  No fnctional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-23 14:52:51+00:00,Fix some comments in early stop detection  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-23 14:00:44+00:00,Retire UseLogFile in search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-23 12:11:03+00:00,Introduce and use SearchLimits  Pack a bit of global variables related to search limits in a single struct.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-22 11:30:51+00:00,Use move_is_special() in pawn endgame condition  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-22 11:30:43+00:00,Retire SearchStartTime global  Use a static variable inside current_search_time() instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-22 11:30:35+00:00,Reduce loops in init_threads() and exit_threads()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-20 11:05:07+00:00,Move wake_sleeping_thread() to Thread class  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-20 11:04:59+00:00,Correctly implementg selDepth feature  Send to GUI the deepest search depth apart from qsearch of the PV line.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-20 11:04:52+00:00,Move sleepLock and sleepCond under Thread  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-20 11:04:43+00:00,Increase risk of blunders at low skill levels  According to Heinz's tests current setup is in fact too strong for weak players. This seems the best according to his tests.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-17 21:32:12+00:00,Use only history to score non captures  It seems gain is practically unuseful; so remove.  After 13554 games: Mod vs Orig 2252 - 2319 - 8983 ELO -1 (+- 3.4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-17 09:31:26+00:00,Small simplification in scale_by_game_phase()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-17 07:59:54+00:00,Move ply to SearchStack  Shrink search() signature for better readibility.  We get also a nice 1.3% speed increase.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-16 11:57:06+00:00,Remove one indentation level in get_next_move()  Small renaming and fix some comments.  No functional and no speed change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-16 09:49:35+00:00,Code style in tt.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-16 09:49:27+00:00,Better self-document LMR reduction() formula  Suggested by Onno  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-16 09:49:20+00:00,Promote OptionsMap to a class  And add a bit of documentation too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-16 09:21:31+00:00,Fix a stale comment  Spotted by Onno  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-14 06:06:56+00:00,Remove src/COPYING file  It is enough the one in the base directory  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-04-01
mcostalba,mcostalba,2011-04-14 06:04:32+00:00,"Remove ""divide by zero"" workaround  It is now useless because of the condition at the beginning.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2011-04-01
mcostalba,mcostalba,2011-04-13 17:51:56+00:00,Cleanup debug counters  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-13 12:18:19+00:00,Move move_is_legal() under Position class  It is a more logical place than in move generation file.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-13 12:17:21+00:00,Some more cleanup in endgame.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-04-01
mcostalba,mcostalba,2011-04-12 07:05:41+00:00,Fix some warnings and a compile error with icc  Unfortunatly icc does not understand that weakerSide and strongerSide belongs to the base class :-(  So we have define them in the derived class.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-04-01
mcostalba,mcostalba,2011-04-11 20:25:24+00:00,Move EndgameFunctions to endgame.cpp  And cleanup code while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-11 17:15:40+00:00,Increase MaterialTableSize 8 times  Now that we prefetch in material hash table we can increase its size and gain something.  Hit rate is now of 98% from 92%  Speedup of 0.8%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-11 17:11:16+00:00,Introduce and use NoPawnsSF[] in material.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-11 11:35:54+00:00,Tempeltize material imbalance  Speedup of almost 1%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-11 11:24:10+00:00,Sync material.h with pawns.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-11 11:24:02+00:00,Prefetch also material tables  Prefetch both pawn and material tables in do_move() and prefetch always; not only after a pawn move or a capture.  Speed up of 0;7%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-10 11:16:36+00:00,Assorted code style and comments in pawns.cpp and pawns.h  The only interesting thing is that a backward or isolated pawn cannot be a candidate passer; so code this condition.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-04-01
mcostalba,mcostalba,2011-04-08 06:48:05+00:00,Retire mate threat extension  It seems we have a lot of totally useless code !  After 8577 games 1504 - 1451 - 5622 ELO +2 (+- 4.4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-07 07:09:41+00:00,Fix a compile error in debug mode  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-04-01
mcostalba,mcostalba,2011-04-05 18:00:40+00:00,Assorted code style and comments in search.cpp  Nothing really serious....  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-04-01
mcostalba,mcostalba,2011-04-04 11:11:01+00:00,Added -Wshadow option and fixed resulting warnings  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-04-01
mcostalba,mcostalba,2011-04-02 09:04:34+00:00,Teach SF to blunder  Add blunder cabability to skill level feature.  The idea is that instead of choosing the best move at the end of the ID loop; we now do this at a randomly chosen sampling depth dependent on SkillLevel; so that at low skill levels we sample when ID loop has reached only a small depth and so we have an higher probability to pick up a blunder.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
zamar,mcostalba,2011-04-02 07:39:54+00:00,Use prob cut search to prune bad captures  The idea is to try a shallow search with reduced beta on bad captures so to quickly prune them out in case are really bad.  After 5529 games 966 - 868 - 3695  ELO +6 (+- 5.4) LOS 91%  Tested also version without upper limitation to 8 plies:  After 8780 games 1537 - 1398 - 5850  ELO +5 (+- 4.3) LOS 93%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-04-01
mcostalba,mcostalba,2011-04-01 21:02:18+00:00,Retire recapture extension also for PvNode  Seems that extension is useless.  After 10105 games Mod vs Orig 1738 - 1702 - 6665  ELO +1 (+- 4)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-01 20:46:45+00:00,Use a constant instead of value_mate_in(PLY_MAX)  And also apply the same to value_mated_in(PLY_MAX)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-01 20:46:34+00:00,Retire value_is_mate()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-01 20:46:27+00:00,Simplify wait_for_stop_or_ponderhit()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-04-01 20:46:12+00:00,Retire update_killers()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-04-01
mcostalba,mcostalba,2011-03-28 12:09:13+00:00,Fine tune skill level  Rescaled Skill level from 0 to 20. At level 19 is still comparable with Crafty 20.14; while at low levels strength increase is now less steep.  Thanks to Joona and Heinz for testing and valuable comments.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-03-01
mcostalba,mcostalba,2011-03-27 10:50:22+00:00,"Add ""Skill level functionality  It is now possible to adjust skill level of Stockfish from 10 (full strength) to 0.  Skill adjustment is done in such a way that is CPU speed and time control largely independent; at least at low skills. It means that given a skill we have same play level on a mobile phone and on a super OCTAL CPU; at 1' per game or at 180'.  At skill 9 strength is that of an average engine; I have used Crafty 20.14 to tune and we are more or less there. At skill 0 engine is pretty weak but still shows a realistic play.  When skill is not used we don't have any impact on the regular code.  Idea to use MultiPV is from Heinz van Saanen; implementation and formulas by me.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2011-03-01
mcostalba,mcostalba,2011-03-26 08:25:26+00:00,Fix a compile error with icc  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-03-01
mcostalba,mcostalba,2011-03-24 12:21:54+00:00,Send PV line to GUI only after resolving a fail high  This is how Shredder; Rybka and others do and avoids user is confused by a fail high (sent to GUI) followed by a fail low (not sent).  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-03-01
mcostalba,mcostalba,2011-03-24 12:21:47+00:00,Triviality in position.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-03-01
mcostalba,mcostalba,2011-03-23 12:09:04+00:00,Retire move_ambiguity() altogether  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-03-01
mcostalba,mcostalba,2011-03-22 12:23:41+00:00,Simplify move_ambiguity()  And additional small touches in move.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-03-01
mcostalba,mcostalba,2011-03-19 15:08:19+00:00,Do not send ponder move if we don't have it  Has been reported by Justin Blanchard that this creates problems on some buggy GUI.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-03-01
mcostalba,mcostalba,2011-03-17 13:29:09+00:00,Use intrinsic in pop_1st_bit() under MSVC 64 bits  Around 1% speedup when compiled with MSVC 64  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-03-01
mcostalba,mcostalba,2011-03-12 17:22:22+00:00,Additional cleanup in bitbase.cpp  Also better document what code does.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-03-01
mcostalba,mcostalba,2011-03-12 11:12:41+00:00,Move KPKBitbase[] where it belongs  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-03-01
mcostalba,mcostalba,2011-03-12 10:22:02+00:00,Fix a couple of issues in bitbase.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-03-01
mcostalba,mcostalba,2011-03-10 18:23:39+00:00,Reintroduce initialization of some bitboards  With off-by-one bug in InFrontBB[] loop fixed.  Also use int instead of File to workaround a bug in mingw 4.4.0 in first loop that cycles forever.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-03-01
mcostalba,mcostalba,2011-03-10 07:10:26+00:00,Rename NonSlidingAttacksBB[] in StepAttacksBB[]  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-03-01
mcostalba,mcostalba,2011-03-10 07:08:34+00:00,Update copyright notes in rkiss.h  New info after a thread on talkchess:  http://www.talkchess.com/forum/viewtopic.php?t=38313  and some emails exchange with Heinz.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-03-01
mcostalba,mcostalba,2011-03-10 07:08:04+00:00,Revert previous patch due to miscompile under gcc  I need to understand what's going on; in the meantime revert.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-03-01
mcostalba,mcostalba,2011-03-08 18:44:19+00:00,Change initialization of some bitboards  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-03-01
mcostalba,mcostalba,2011-03-08 12:16:33+00:00,Increase MAX_THREADS to 32  No speed regression after 8731 games: Mod vs Orig 1394 - 1342 - 5995  ELO +2 (+- 4.1)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-03-01
mcostalba,mcostalba,2011-03-07 18:04:54+00:00,Introduce and use rot() in rkiss.h  Also fix indentation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-03-01
mcostalba,mcostalba,2011-03-02 21:01:30+00:00,Simplify aspirationDelta update rule  After 7522 games: Mod vs Orig 1229 - 1148 - 5145  ELO +3 (+- 4.5) LOS 83%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-03-01
mcostalba,mcostalba,2011-03-01 12:32:42+00:00,"Be sure to read options before to call trace_evaluate()  Otherwise in case we change an option with setoption and then ask for ""eval"" command the evaluation is not updated.  Spotted by Justin Blanchard.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2011-03-01
mcostalba,mcostalba,2011-02-28 19:17:57+00:00,Fix aspiration corner case  Fix a corner case where we start aspiration window and suddendly we get a VALUE_KNOWN_WIN / MATE score; this makes aspiration to blow up in a series of researches loops.  Exit aspiration loop in that case.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-02-01
mcostalba,mcostalba,2011-02-28 19:16:22+00:00,Remove a FIXME in id_loop()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-02-01
mcostalba,mcostalba,2011-02-28 06:51:28+00:00,Score root move list during first iteration  Use first iteration to get a proper startup score and possibly detect an easy move.  After 5180 games: Mod vs Orig 847 - 823 - 3510  ELO +1 (+- 5.5)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-02-01
mcostalba,mcostalba,2011-02-27 08:45:54+00:00,Remove an useless condition in equal SEE pruning  Because we are never in check there and evaluation cannot return a mated value the condition is useless.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-02-01
mcostalba,mcostalba,2011-02-27 08:19:59+00:00,Prune moves with equal SEE in qsearch  After 5166 games: Mod vs Orig 890 - 762 - 3514  ELO +8 (+- 5.5) LOS 96%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-02-01
mcostalba,mcostalba,2011-02-26 13:26:27+00:00,Add evaluation tracing code  This patch is based on Justin Blanchard's original work and allows to breakdown evaluation in its sub terms and show to the user.  Tracing code has zero speed impact when not used.  Note that tracing code is not thread-safe; but this should not be a problem given the typical usage scenario.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-02-01
mcostalba,mcostalba,2011-02-23 22:52:51+00:00,Correctly round evaluation to grain size  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 22:51:20+00:00,Depth dependant singular extension margin  After 7965 games: Mod vs Orig 1324 - 1249 - 5392  ELO +3 (+- 4.4) LOS 81%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 20:52:55+00:00,Move all enum types definitions to types.h  Cleanup headers while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 17:42:45+00:00,Retire color.h  Move contents to piece.h and square.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 17:42:35+00:00,Rename piece_of_color_and_type() to make_piece()  To be aligned with make_square()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 17:42:27+00:00,Retire piece_type_from_char()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 17:41:58+00:00,Triviality in main.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 17:41:35+00:00,Retire enum SquareDelta  Use Square instead. At the end is the same because we were anyway foreseen operators on mixed terms (Square; SquareDelta).  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-23 17:41:27+00:00,Small simplifications in square.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-19 12:31:35+00:00,Introduce and use speed_to_uci()  And retire nps()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-02-01
mcostalba,mcostalba,2011-02-18 16:04:55+00:00,Rename SplitPoint parentSstack  Now that we don't have anymore a search stack array in SplitPoint we can rename this data member to somthing more usual.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-02-01
mcostalba,mcostalba,2011-02-18 15:54:49+00:00,Retire SearchStack sstack[] from SplitPoint  Use a local variable instead. To make it work we need to correctly init next ply search stack at the beginning of the search because now that ss is allocated on the stack instead of on the global storage it contains garbage.  As a side effect we can peform a fast search stack init in id_loop().  With this patch size of SplitPoint goes from 71944 to 136 bytes; and consequently size of Thread goes from 575568 to 1104 bytes.  Finally the size of ThreadsManager that contains all the thread info goes from 9209248 to just 17824 bytes !!  No functional change also in faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-02-01
mcostalba,mcostalba,2011-02-18 10:24:42+00:00,Sync Root new depth to what we do in search()  This allow us to restore the old depth 12 benchmark and fixes one and for all the depth mess.  Test confirms no regression: After 5658 games 892 - 924 - 3842  ELO -1 (+- 5.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-02-01
mcostalba,mcostalba,2011-02-17 08:51:22+00:00,Unify best move update logic  Try to rewrite the Root case using as most as common code as possible.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-02-01
mcostalba,mcostalba,2011-02-17 08:08:27+00:00,Do not special case reductions for MultiPV case  Note that this introduces an asymmetry in which best move is searched deeper then others also in MultiPV; but this is not an error per se.  No functional change when MultiPV = 1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-02-01
mcostalba,mcostalba,2011-02-16 07:57:35+00:00,Avoid permanent PV entries  in TT  This patch removes a condition that allows a PV entry to remain in TT across games for an unlimited time.  Although this produces a nice ELO boost in the long term it is an artifact that affects tests results bewteen version with and without this feature.  So remove now and readd before to release because it actually seems a strong feature.  As example a verification tournament against SF 2.0.1 starting around +10 ELO after 4K games sligltly climbed to +21 ELO after 14K games !!!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-13 10:45:49+00:00,Write the LogFile only at the end of an iteration  Skip writing fail high/low sequences. Note that we don't need fail high/low markers anymore in pretty_pv().  No functional change but some do/undo move sequences.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-02-01
mcostalba,mcostalba,2011-02-12 18:06:07+00:00,Spell checking fixes in search.cpp  Reported by Eelco on open-chess.org  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-02-01
mcostalba,mcostalba,2011-02-12 17:53:02+00:00,Rename iteration in depth in id_loop()  And retire the redundant one.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-02-01
mcostalba,mcostalba,2011-02-12 17:17:37+00:00,Start to count iterations from 1  First search should be done at iteration = 1; not 2. So offset the variable by one.  As a nice side effect now search correctly stops at PLY_MAX included; not after searching (PLY_MAX - 1) as before.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-02-01
mcostalba,mcostalba,2011-02-12 16:58:25+00:00,Fix wrong reported depth  Interestingly this patch will make people complain search depth is reduced against 2.0.1 ;-) but actually it is only an artifact.  Spotted by Joona.  No functional change apart from a different do / undo move sequence due to teh fact that we don't call pv_info_to_uci() anymore before entering id loop.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-02-01
mcostalba,mcostalba,2011-02-11 05:28:55+00:00,Move sending of PV line to id_loop()  No functional change apart form move reordering because pv_info_to_uci() performs a do / undo_move sequence.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-02-01
mcostalba,mcostalba,2011-02-10 20:09:20+00:00,Maximum aspiration delta of 24  After 9080 games 1430 - 1342 - 6308  ELO +3 (+- 2.9)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-02-01
zamar,mcostalba,2011-02-09 22:52:24+00:00,Maximum aspiration delta of 64  After 9242 games Mod vs Orig: 1483 - 1373 - 6386  ELO +4 (+- 2.9)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-02-01
mcostalba,mcostalba,2011-02-06 11:41:47+00:00,Simplify latest patches  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-02-01
zamar,mcostalba,2011-02-05 10:06:08+00:00,Retire some conditions from ok_to_use_TT_pv  After 4844 games 768 - 747 - 3329  ELO +2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-02-01
mcostalba,mcostalba,2011-01-31 12:07:26+00:00,"Use TT for pruning also in PV nodes  Biggest advantage is be able to analize positions without ""loss of memory"" when goind back/forth in a position.  Patch has proven to fix analysys problems and is even worths some elo points.  After 5811 games Mod- Orig: 1037 - 902 - 3872 +8 ELO  (+- 3.6) LOS 97%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2011-01-01
mcostalba,mcostalba,2011-01-29 13:10:05+00:00,Silence silly MSVC warning c4146  Warning C4146: unary minus operator applied to unsigned type; result still unsigned.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-29 13:06:29+00:00,Remove defined(IS_64BIT) in init_sliding_attacks()  No functional change bith in 32 and 64 bits.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-29 12:28:00+00:00,Do not use <algorithm> in to_fen()  Seems there are some problems on HP-UX compiler.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-29 11:17:47+00:00,Retire obsolete reentrancy check in pos.print()  We dont' call MovePicker from print() anymore; so that reentrancy check in now not needed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-27 06:55:04+00:00,Retire singleEvasion  This let us get rid of number_of_evasions()  After 5487 games Mod- Orig: 851 - 852 - 3784 +0 ELO  (+- 3.7)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
mcostalba,mcostalba,2011-01-23 22:13:14+00:00,Add a MovePicker c'tor specialized for qsearch  This simple patch shows a speed increase of more then 2% !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-23 09:54:16+00:00,Introduce and use qsearch_scoring()  Move qsearch scoring functionality out of RootMoveList initialization. Will be needed by future patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-23 09:52:51+00:00,Retire InitialDepth  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-23 08:11:31+00:00,Pass TT move instead of Rml[0].pv[0] to MovePicker  This is used for secondary scoring so it does not changes the fact that Rml[0].pv[0] is always tried as first anyhow.  It happens this is even a no functional change patch becuase we reinsert PV in TT after a search so that TT move is actually Rml[0].pv[0].  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
zamar,mcostalba,2011-01-23 07:36:47+00:00,Different searchedMoves system  After 8751 games on russian cluster Mod- Orig: 1426 - 1323 - 6002  ELO +4 (+- 2.9) LOS 86%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-23 07:36:12+00:00,Remove special Root cases  So to better spot where the differences really count. Also add some more additional cleanup.  Harmless functional change and no regression.  After 5780 games Mod- Orig: 931 - 955 - 3894 ELO -1 (+- 3.6)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-20 18:34:25+00:00,Retire init_ss_array()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
mcostalba,mcostalba,2011-01-19 18:50:44+00:00,Small cleanup in init_sliding_attacks()  No functional change both in 32 and 64 bits.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-19 18:50:32+00:00,Numbers formatting in bitboard.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-19 12:50:51+00:00,Use opposite_color_squares() instead of same_color_squares()  It is almost alwasy the requested test and is a bit faster too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-19 12:33:38+00:00,Retire RelativeRankBB[]  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-19 12:33:26+00:00,Retire some unused functions in bitboard.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-18 17:53:19+00:00,Fix some warnings under icc  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 17:52:52+00:00,Sort root moves moves in MovePickerExt  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:30:13+00:00,Fix a (bestValue == -VALUE_INFINITE) assert  In case of a Root node we can leave with bestValue set to -VALUE_INFINITE if search is stopped by the GUI and stopReques flag is raised.  This patch fixes the issue.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:30:13+00:00,Additional cleanup in id_loop()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:30:12+00:00,Use a global RootMoveList object instead of a pointer  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:30:11+00:00,Move globals to id_loop()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:30:11+00:00,Introduce and use MovePickerExt  A bit of template magic to restore a proper and readable moves 'while' loop that now is again 'similar' to the one that used to be in search().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:30:10+00:00,Unify root_search() step 3  Retire root_search()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:29:57+00:00,Unify root_search() step 2  Enable the change: now we use search() instead of root_search()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-18 12:28:34+00:00,Unify root_search() step 1  Teach search() to behave as a root node if requested. Just added code; but still no functional change.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
zamar,mcostalba,2011-01-17 19:22:10+00:00,Fix very theoretical History corner case  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-16 12:45:34+00:00,Sync root_search() with search()  This will let unification easier.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-16 12:45:23+00:00,Move fail loops out of root_search() to id_loop()  And sync root_search() with search()  After 9384 games Mod - Orig: 1532 - 1433 - 6419  ELO +3 (+- 2.8)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-15 17:03:43+00:00,Last touches in history.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-15 11:05:31+00:00,Fix a warning with __popcnt64() intrinsics  Returns an int64_t while we want a simple int.  This occurs only when compiling with MSVC on a 64 bit platform.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-15 10:31:14+00:00,Partially restore HistoryMax  Should be not useful but better safe than sorry.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-15 10:00:00+00:00,Move Min() and Max() macros to types.h  As usual a bit of cleanup while there...  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-15 09:37:36+00:00,Clarify we want Score and Value to be integers  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-15 09:02:45+00:00,Retire history.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-15 08:30:39+00:00,Retire HistoryMax  Infact we don't use it anymore already.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
zamar,mcostalba,2011-01-14 18:13:22+00:00,Set HistoryMax infinitely high  Respin this old idea. Earlier we tried only with < 1000 games and result was inconclusive.  After 5845 games Mod vs Orig: 935 - 936 - 3974 ELO (+-3.6)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-14 11:56:31+00:00,Simplify from_fen()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-14 06:27:06+00:00,Initialize killers at ss+2 also in root_search()  After 4955 games: Mod - Orig: 786 - 768 - 3401 +1 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-13 21:03:18+00:00,Fix an hang on 32 bits while allocating big TT table  If size_t is defined as a 32 bit quanitity then we have an overflow in the left term of the while condition if mbSize is bigger then 2048.  For instance if mbSize is 2049 then when newSize will reach 0x80000000 (2048MB) comparison is still true; 'while' loops again and we have an overflow in the expression (2*newSize) so that result is 0 and at that point 'while' keeps looping forever hanging the application.  This patch fixes the bug and also makes operator new do not throw an exception upon failure but return a NULL pointer instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
mcostalba,mcostalba,2011-01-11 17:58:56+00:00,"Set unbuffered I/O also for C standard library  In input_available() we use function select(); so we have to set as unbuffered also C library I/O functions otherwise we can miss some input.  For instance in case GUI sends ""go infinite\nstop\n"" we parse the ""go infinite"" but then input_available() under Linux is unable to detect that we still have ""stop"" to be processed.  This is because ""select"" uses file descriptors instead of file pointers. So it cannot know about the buffer associated to a file pointer.  This patch; by BB+; should fix the problem.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2011-01-01
mcostalba,mcostalba,2011-01-10 18:55:02+00:00,Big book.cpp cleanup  Better document PolyGlot formats and greatly reduce line count.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-10 11:54:08+00:00,Compile fix in types.h  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-09 15:24:30+00:00,Small cleanup in execute_uci_command()  With a little fall out in siblings functions...  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-09 14:15:52+00:00,Simplify set_option()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
zamar,mcostalba,2011-01-09 12:20:04+00:00,TTEntry simplification  Now that move is fitted in 16 bits we can simplify TTEntry.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-09 11:55:22+00:00,Don't copy Position in pretty_pv()  Also let do_setup_move() don't reuse same StateInfo so that we can remove the check about different StateInfo objects before memcpy() in do_move.  Functional change due to harmless additionals do_move() / undo_move() steps.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-08 17:31:14+00:00,Merge line_to_san() into pretty_pv()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-08 16:52:02+00:00,Ressurect move.cpp  Actually it is san.cpp renamed. Because now has the move conversions functions and doesn't have any more the bulky move_from_san(); it is better to call it move.cpp  Remove san.h while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
zamar,mcostalba,2011-01-08 15:26:55+00:00,Fix build failure under Linux  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-08 15:23:46+00:00,Retire move_from_san()  It is unused and it is big.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-08 15:12:42+00:00,Greatly simplify move_from_uci()  Use a reverse logic: among the list of generated legal moves transformed in UCI coordinate notation find the one that matches the given string.  It is a bit slower; but here is not performance critical and is much more simplified then before.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-08 14:53:49+00:00,Move uci move parsing under san.cpp  This partially reverts 1e7aaed8bc keeping the conversion functions from/to move to uci string in the same file.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
zamar,mcostalba,2011-01-08 13:27:11+00:00,Change Emergency time maximum from 60000 to 30000  I got report from Werner that Shredder Gui has problems with UCI values which maximum value is greater than 30000.  Of course it's stupid to change engine to fix a GUI's bug; but on the other hand 30000 ms as maximum value is clearly enough; so why not to be merciful  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
zamar,mcostalba,2011-01-08 13:26:59+00:00,Fix Makefile's GPL-notice to be similar to other files  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-08 13:17:41+00:00,Improve I/O responsivness  Added checking of (stdin->_cnt > 0) from Greko.  This seems to greatly improve responsivness when running under console. Now while running a 'stockfish bench'; any key press immediately is detected by SF while before there was a delay of some fraction of a second.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-08 12:23:25+00:00,Fix reading a book under-promotion move  This is an old Glaurung bug that prevented a Polyglot book move to be read correctly in case of underpromotion.  This patch fixes the bug restoring support for both queen and underpromotions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-08 11:53:41+00:00,Triviality in data_available()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-07 15:57:15+00:00,Force inlining of move generation functions  MSVC (and possibly other compilers) does not inline as requested; so force it to do so.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-07 15:57:14+00:00,Small tweak to generate_castle_moves()  Move the castling condition test out of the function. This avoids a function call most of the times.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-07 15:56:42+00:00,"Unify move generation  Functional change due only to moves reorder. Anyhow after 5242 games at 15""+0.1 TC verified we have no regression.  Mod vs Orig 994 - 958 - 3290 +2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2011-01-01
mcostalba,mcostalba,2011-01-07 13:46:29+00:00,Templetize move generation API  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-07 12:40:13+00:00,Retire move.cpp  Move its functions where they belong.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-07 11:13:05+00:00,Use 16 bits to store a move instead of 17  Shrink of 1 bit so to fit a move in an uint_16 and possibly a MoveStack in an uint_32.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-07 10:25:13+00:00,Use a 32 bit bitwise 'and' in SimpleHash lookup  A bit faster on 32 bits machines; more similar to TranspositionTable::first_entry() and same result.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-07 10:20:49+00:00,Introduce SimpleHash class  And use it for pawns and material infos.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2011-01-01
mcostalba,mcostalba,2011-01-06 22:28:06+00:00,"Small tidy up of inttypes for Windows  There was a strange ""int16"" type and ""int64_t"" was defined twice.  Spotted by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2011-01-01
zamar,mcostalba,2011-01-06 13:46:49+00:00,Simplify 50 move rule condition  We never reach a position where rule50 > 100. When rule50 == 100; it's either draw or mate and there is no way search could go deeper.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
zamar,mcostalba,2011-01-06 12:54:03+00:00,Clean up position setup code  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
zamar,mcostalba,2011-01-06 12:44:11+00:00,Parse halfmove clock and fullmove number from FEN  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
zamar,mcostalba,2011-01-06 12:36:02+00:00,Minimal restructuring of value.h  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
mcostalba,mcostalba,2011-01-06 12:33:40+00:00,Do not make any assumption on the move in move_is_legal()  We must be able to filter out also moves where move_is_ok() is false.  And actually we are. Tested on all the default position injecting a number from -1000000 to 1000000 casted to a Move.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
mcostalba,mcostalba,2011-01-06 09:55:48+00:00,Change move_is_ok() and square_is_ok() in something useful  As is defined now is always true; tested with:    for (long i=-1000000; i < 1000000; i++)       if (!move_is_ok(Move(i)))           exit(0);  Reason is that move_from() and move_to() already truncate the input value to something in the range [0; 63] that is always a possible square.  So change definition to something useful.  The same applies also to square_is_ok()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
mcostalba,mcostalba,2011-01-06 08:09:53+00:00,Improve update_killers() signature  Will be used by future patches and is cleaner.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2011-01-01
zamar,mcostalba,2011-01-05 22:41:08+00:00,Fix variable naming in prototypes at uci.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
zamar,mcostalba,2011-01-05 22:38:33+00:00,Remove a false comment  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-05 22:19:12+00:00,Set moveCount base to 1 as in search()  Now first move has moveCount == 1 also in root_search()  Also added small readibility touches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-05 22:17:28+00:00,Use killers also in root_search()  After 4238 games Mod-Orig 800 - 686 - 2752 +9 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-05 20:13:21+00:00,Perft should return an int64_t not an int  Found by Louis Zulli with his super fast hardware: 65M nodes/sec at perft !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-05 20:12:19+00:00,Fix POPCNT support for Intel compiler under Windows  Reported by Martin Wyngaarden that also confirmed this patch to work.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-05 08:59:20+00:00,Esplicitly inline generate_piece_moves() & friends  Should be already inlined by the compiler when optimizing but better safe than sorry ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2011-01-01
mcostalba,mcostalba,2011-01-04 10:35:54+00:00,Use 'moveCount' name also in RootSearch  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-04 10:12:43+00:00,Use -O3 instead of -fast for Linux icc  Reported by Heinz and confirmed by Joona to increase the speed of 6% !  No change for icc on OSX  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-04 10:12:31+00:00,Another round of bitboard.cpp cleanups  Also renamed StepAttackBB[] in NonSlidingAttacksBB[]  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-04 08:55:42+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-04 07:24:05+00:00,Stockfish 2.0.1  Always same siganture: 7224363  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2011-01-01
mcostalba,mcostalba,2011-01-03 22:55:12+00:00,Update Readme and polyglot files  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-03 21:50:38+00:00,Another attempt at fixing Chess960  Keep the isChess960 flag inside Position so that is copied with the Position; but esplicitly highlight the fact that a FEN string has not enough information to detect Chess960 in general case. To do this add a boolean argument isChess960 to from_fen() function so to self document this shortcoming of FEN notation.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-03 21:48:08+00:00,Revert Chess960 fix  Will be substituted by a better next patch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
Unknown,Unknown,2011-01-03 21:32:57+00:00,"Reintroduce the old ""trapped bishop in the corner"" evaluation term for Chess960 games.  After 1918 games at 30"" Mod - Orig: 1052-866 (+532;-346;=1040); Elo +33.8",True,0,2011-01-01
zamar,mcostalba,2011-01-03 21:27:17+00:00,Use simple macro to enable operators  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-03 10:36:32+00:00,Workaround broken function-style cast support in HP-UX  It seems HP's ANSI C++ doesn't understand very well standard function-style cast.  Reported by Richard Lloyd.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-03 09:49:33+00:00,Readd SRWLOCK and Condition Variables under Windows  And set them as default.  Introduce compile switch OLD_LOCKS to allow to fallback on compatible locks supported by Windows XP and older versions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2011-01-01
mcostalba,mcostalba,2011-01-02 23:41:39+00:00,Fix Chess960 regression  Introduced by me in before 1.9 and found by Tord that says:  The 'isChess960' slot in the 'Position' class is currently set depending on the initial files of the rooks; and not on the value of the UCI_Chess960 parameter. This is incorrect; as there are lots of Chess960 positions where the rooks start on the usual files. As a consequence (unless I am missing something); Stockfish will occasionally output castling moves as e1g1/e1c1 rather than the correct e1h1/e1a1 format in Chess960 games. It is possible that some or even most GUIs are robust enough to accept both notations; but I wouldn't bet on it. And in any case; Stockfish's behavior clearly violates the protocol.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-02 10:52:51+00:00,Another (final?) attempt at squares_delta()  This time I have removed the function alltogether !  Sorry to work above a patch of UncombedCoconut (Justin Blanchard) but I couldn't resist ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-02 10:22:41+00:00,Fix old Glaurung bug related to search logging  When we log best and ponder move to a file before to return from think we change the position. If position is then not resended by GUI; as for manual user input we got an error:  justinb@malibu:~$ stockfish Stockfish 2.0 JA 64bit by Tord Romstad; Marco Costalba; Joona Kiiski setoption name Use Search Log value true go depth 1 info depth 1 info depth 1 seldepth 1 multipv 1 score cp 72 time 59 nodes 20 nps 338 pv g1f3 info depth 2 info depth 2 seldepth 2 multipv 1 score cp 12 time 59 nodes 44 nps 745 pv g1f3 g8f6 info nodes 84 nps 1423 time 59 bestmove g1f3 ponder g8f6 go depth 1 info depth 1 score mate 0 info nodes 87 nps 0 time 0 bestmove (none) ponder (none)  Bug spotted and fixed by UncombedCoconut.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-02 09:59:08+00:00,Simplify squares_delta()  And rename in ray_direction()  Patch from UncombedCoconut.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2011-01-01
mcostalba,mcostalba,2011-01-01 22:10:37+00:00,Fix a crash on multi-pv  Bug reported by Tobias Haspel and fixed by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:19:08+00:00,"Restore development version  And set ""Use Sleeping Threads"" to true because it keeps much more responsive and cool my QUAD during tests :-)  It will be reverted back before to release that's the reason to bundle it here.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:10:30+00:00,Stockfish 2.0 (take 2)  Always same siganture: 7224363  Hopefully some more bug fixed and restored compatibility with WIndows XP.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:07:32+00:00,Don't use SRWLOCK and Condition Variables under Windows  They are not compatible with Windows XP  Revert to old CRITICAL_SECTION locks and events.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:07:30+00:00,Fix an off-by-one bug in sort_multipv()  Second parameter of insertion_sort() is a pointer to the element _after_ the last of the list; e.g. end() when sorting all items.  If we want to sort say the first 2 moves we should write:  sort_multipv(2);  So; becuase in root moves loop move counter 'i' starts from 0; we need to pass:  sort_multipv(i+1);  To sort up to move 'i' included.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:07:29+00:00,Remove artificial Iteration >= 3 constraint on time manager  It doesn't seem to have any meaning.  Also add a FIXME on the MaxNodes condition that now is broken in SMP case due to known issue with pos.nodes_searched()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:07:28+00:00,"Fix: Honour UCI ""quit"" command while still in the book  We were not quitting the engine after a ""quit"" command while still in the book and pondering.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:07:26+00:00,"Simplify ""ponderhit"" handling  If flag StopOnPonderhit is set it means that we UseTimeManagement and also we are at Iteration >= 3.  So we can safely simplify the formula.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 15:07:25+00:00,Retire ponderhit()  It is called only from one place; so move code there.  Add a bit of renaming and documentation while at there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 11:30:03+00:00,"Restore development version  And set ""Use Sleeping Threads"" to true because it keeps much more responsive and cool my QUAD during tests :-)  It will be reverted back before to release that's the reason to bundle it here.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2011-01-01
mcostalba,mcostalba,2011-01-01 10:47:34+00:00,Stockfish 2.0  stockfish bench signature is: 7224363  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2011-01-01
mcostalba,mcostalba,2010-12-31 18:47:17+00:00,Send correct searched nodes statistic  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-12-01
mcostalba,mcostalba,2010-12-31 13:32:25+00:00,Remove dubious castle detector  It was introduced by patch 66d16592 of 22/3/2009 merging from Glarurung iPhone.  Tord says: That change is only found in the Glaurung iPhone app; and not in the latest Glaurung UCI source code. I don't remember why this was added (and the iPhone app; unlike the UCI engine; was never version controlled); but it was almost certainly because it was somehow needed in the communication between the engine and the iPhone GUI; and that it was never meant to be included in the UCI engine. My guess is that it has something to do with castling moves being entered as e1-g1 in the GUI; but represented as e1-h1 in the chess engine.  Removing it in Stockfish should be completely safe; and won't harm the iPhone version. Initially the iPhone GUI called functions in the chess engine for checking for legality of moves; writing the move list in SAN format; and various other tasks; but this is no longer the case in the current version.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-12-01
mcostalba,mcostalba,2010-12-31 13:27:24+00:00,"Implement ""seldepth"" UCI info  This is the ""selective search depth in plies"" and we set equal to PV line length.  Tested that works under FritzGUI.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2010-12-01
mcostalba,mcostalba,2010-12-30 15:44:10+00:00,Retire a couple of unused debug functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-12-01
mcostalba,mcostalba,2010-12-30 15:18:22+00:00,Leave threads go to sleep when waiting for a ponderhit  No need to heat up CPU in this case ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-12-01
mcostalba,mcostalba,2010-12-30 15:12:51+00:00,"Move printing of best move on think  It seems a more appropiate place (IMHO) and helps to clarify that idle_loop() should return a move; not a score.  Fix also handling of stalemate positions (we were not sending any score) and we don't need to wait on ""ponderhit""; this is done when returning in think().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2010-12-01
mcostalba,mcostalba,2010-12-30 13:03:08+00:00,Unify single and multi PV 'new best move' handling  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-12-01
mcostalba,mcostalba,2010-12-30 11:27:59+00:00,Move print_pv_info() under RootMove  And rename to pv_info_to_uci()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-12-01
mcostalba,mcostalba,2010-12-30 10:46:53+00:00,Better document value_to_uci()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-12-01
mcostalba,mcostalba,2010-12-30 09:54:33+00:00,Standardize root_search() signature  Now pass alpha and beta by copy as in serach()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-12-01
mcostalba,mcostalba,2010-12-29 14:24:40+00:00,Move extract_pv_from_tt() and insert_pv_in_tt() under RootMove  Functional change only due to additional do/undo move but absolutly harmless.  Also handle re-insertion in tt of PV lines also for multi PV case.,True,2,2010-12-01
mcostalba,mcostalba,2010-12-29 08:22:30+00:00,Use rml[0].pv[] instead of dedicated pv[] array  We have a small functionality change in case we have a fail-high so that both rml[].pv and pv[] are updated; but if; after researching; we have a fail-low then rml score is updated again but pv[] remains the same and coming back from search we used a PV line that has failed-low (after having failed-high).  With this patch we always use the 'correct' PV line; i.e. the line with highest score at the end of the whole search.  Retire also redundant RootMove's 'move' member and directly use pv[0] instead.,True,2,2010-12-01
mcostalba,mcostalba,2010-12-28 22:10:21+00:00,Last small touches in RootMoveList  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
mcostalba,mcostalba,2010-12-28 17:51:08+00:00,Retire LMR intermediate research  It does not seem to improve anything.  After 8344 games Mod - Orig: 1362 - 1321 - 5661 ELO +2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
mcostalba,mcostalba,2010-12-28 17:36:34+00:00,Use insertion_sort() in RootMoveList  Simplify code and get a bit of extra speed; about +0.5%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
mcostalba,mcostalba,2010-12-28 12:06:53+00:00,Redefine MoveStack comparison as the natural one  Define symbol '<' to mean 'minor of'; as it should be. Its meaning was reversed to be used with std::sort() that sorts in ascending order while we want a descending order.  But now that we use our own sorting code we don't need this trick anymore.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
mcostalba,mcostalba,2010-12-28 12:01:14+00:00,Fix broken last patch series  When a reference breaks things !  Here we take a reference (that is a pointer) to an entry in a vector that changes below us --> BOOM !  References are essential but should be considered with care in C++ because could lead to nasty surprises.  Restored functionality.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
mcostalba,mcostalba,2010-12-27 12:55:34+00:00,Speedup moves root list sorting  Instead of a default member by member copy use set_pv() to copy the useful part of pv[] array and skip the remaining.  This greatly speeds up sorting of root move list !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-27 12:10:32+00:00,Use a std::vector to store root moves  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-27 10:36:57+00:00,Rename RootMoveList members removing 'move'  It is redundant being a move list ;-)  Also better document the two scores used by root list.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-27 02:08:10+00:00,Retire DirectionTable[]  With this patch even word 'direction' is disappeared !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-26 15:51:21+00:00,Retire direction.cpp  Move the code to bitboard.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-12-01
mcostalba,mcostalba,2010-12-26 15:17:51+00:00,Retire enum Direction  Use SquareDelta instead  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-12-01
mcostalba,mcostalba,2010-12-26 11:12:58+00:00,Retire SignedDirectionTable[] and RayBB[]  Function ray_bb() was used just in one endgame where can be used squares_in_front_of() instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-12-01
mcostalba,mcostalba,2010-12-26 09:58:52+00:00,Retire direction.h  Move all to square.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-12-01
mcostalba,mcostalba,2010-12-26 09:43:22+00:00,Simplify enum SquareDelta definition  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-12-01
mcostalba,mcostalba,2010-12-25 17:03:43+00:00,Unify MovePicker c'tor call  And use the standard one.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
mcostalba,mcostalba,2010-12-25 16:54:08+00:00,Use generate_moves() in san.cpp  Instead of MovePicker and cleanup san.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
mcostalba,mcostalba,2010-12-25 08:16:30+00:00,Ignore two braindamaged remarks under icc  Remark 1418: external function definition with no prior declaration  and  Remark 1419: external declaration in primary source file  Can be safely ignored because are pure idiocy.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
mcostalba,mcostalba,2010-12-24 23:11:53+00:00,Renamed thread_should_stop() in cutoff_at_splitpoint()  It is more clear what happened.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-12-01
mcostalba,mcostalba,2010-12-24 16:09:39+00:00,Simplify a condition in update of best move  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-12-01
mcostalba,mcostalba,2010-12-24 15:58:25+00:00,Triviality in struct PieceLetters  And little touches in search() too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-12-01
mcostalba,mcostalba,2010-12-18 10:19:31+00:00,Better clarify how we use TT depth in qsearch  Namely we use only two types of depth in TT: DEPTH_QS_CHECKS or DEPTH_QS_NO_CHECKS.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
mcostalba,mcostalba,2010-12-18 09:20:15+00:00,Second cleanup wave on check_is_useless()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
zamar,mcostalba,2010-12-14 17:57:22+00:00,Let check_is_useless() follow SF coding style  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
Unknown,Unknown,2010-12-14 11:07:37+00:00,Fixed a bug in move_from_uci(): En passant captures were not handled correctly.,True,1,2010-12-01
zamar,mcostalba,2010-12-14 06:50:37+00:00,Selective checks at qsearch  After 5821 games Mod- Orig:  1014 - 869 - 3938 ELO +8 (+- 3.6) LOS 97%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
mcostalba,mcostalba,2010-12-13 19:38:41+00:00,Retire uci_main_loop()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-13 19:29:40+00:00,Small cleanup in uci.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-13 19:29:38+00:00,Retire square_from_string()  And rename move_from/to_string() in a more specific move_from/to_uci() that is a simple coordinate notation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-13 06:30:59+00:00,Move the last multi-threads globals to ThreadsManager  Also rename ThreadsManager memeber data to be lower case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-13 06:30:59+00:00,Further reduce sleep lock contention  Use one sleep lock per thread insted of a single one shared.  Also renamed WaitLock in SleepLock.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-11 08:22:38+00:00,Allow threads to sleep when available  By mean of an an UCI option it is possible let the available threads to sleep; this should help with Hyper Threading although is not the best solution when number of threads equals number of available cores.  Option is disabled by default.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
mcostalba,mcostalba,2010-12-10 06:24:48+00:00,Increase MAX_THREADS to 16  No speed regression and no functional change.  After 7826 games Mod- Orig: 1188 - 1230 - 5408 ELO -1 (+- 3.1)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-12-01
mcostalba,mcostalba,2010-12-07 12:13:06+00:00,Increase PV LMR to SF 1.8 levels  Non-PV LMR is left unchanged.  After 8819 games Mod- Orig:  1442 - 1343 - 6034 ELO +3 (+- 2.9) LOS 86%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-12-01
mcostalba,mcostalba,2010-12-06 17:01:18+00:00,Various cleanups in Position's ancillary functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-12-01
mcostalba,mcostalba,2010-12-05 08:24:18+00:00,Fix a crash due to a broken Book::open()  Bug introduced in 9dcc2aad98b9703  We can be asked to open a non-exsistent file; in this case we should gracefully handle the case and silently return instead of exiting.  Bug discovered and bisected down by Joona.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-12-01
zamar,mcostalba,2010-12-04 08:07:45+00:00,New try for unstoppable pawn evaluation  This time we try very hard to avoid false positives. The obvious downside is that we also miss many true winning positions.  After 10544 games on RC Mod- Orig:  1744  - 1646 - 7154 ELO +3 (+- 2.7) LOS 83%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
mcostalba,mcostalba,2010-12-04 08:04:54+00:00,Allow razoring after a null move  After 8322 games on Russian Cluster Mod- Orig:  1341 - 1281 - 5700 ELO +2 (+- 3) LOS 75%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-12-01
zamar,mcostalba,2010-12-02 06:42:18+00:00,Prune all negative see moves at low depths  After 2036 games Mod- Orig: 381 - 278 - 1377 ELO +17 (+- 6.2) LOS 99%  One of the biggest increases ever !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-12-01
mcostalba,mcostalba,2010-11-28 16:05:49+00:00,Fix bestmove output in multi PV case  When MultiPV > 1; always take bestmove from the RootMoveList (and don't bother with a ponder move). Without that the bestmove is most probably incorrect.  Patch from Peter Petrov.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-28 16:01:01+00:00,Fix 'generation' type to uint8_t  When we store this value in TT we cut this to 9 bits; so we need a smaller variable otherwise comparisons like:     replace->generation() == generation  Are always false if generation is bigger then the maximum TT storable value.  This fixes a very nasty and difficult to spot bug (2 weeks for regression hunting).  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-27 20:26:00+00:00,Revert sleeping threads  Revert 141caf1d5b64 + c59efc53c9  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-11-01
mcostalba,mcostalba,2010-11-27 20:25:59+00:00,"Revert ""Allow split point master to sleep (take 2)""  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-11-01
mcostalba,mcostalba,2010-11-23 12:01:11+00:00,We don't need a stringstream in buildKey()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-11-01
mcostalba,mcostalba,2010-11-22 17:36:18+00:00,Retire Application class  It is a redundant boiler plate; just call initialization and resource release directly from main()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-22 12:13:48+00:00,Retire piece.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-21 22:52:51+00:00,UCI options names should not be case sensitive  Correctly handle uci option names in a case insensitive way.  Alos fix some indentation while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-21 13:25:30+00:00,"Retire ""New Game"" UCI option  Was introduced by 403db5a6e9f on 1/12/2009 to correctly handle ""loose on time"" LSN filtering functionality; but is now unused.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-11-01
mcostalba,mcostalba,2010-11-21 12:06:53+00:00,Remove hardcoded 16 from benchmark default positions size  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-21 11:49:16+00:00,Micro-optimize pl_move_is_legal()  This L1/L2 optimization has an incredible +4.7% speedup in perft test where this function is the most time consumer.  Verified a speed up also in normal bench; although smaller.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-20 17:06:38+00:00,"Store ""true"" and ""false"" in bool options  UCI protocol uses ""true"" and ""false"" for check and button types; so store that values instead of ""1"" and ""0""; this simplifies a bit the code.  Also a bit strictier option's type checking in debug mode.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-11-01
mcostalba,mcostalba,2010-11-20 10:48:04+00:00,Debug counters don't need to be global  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-11-01
mcostalba,mcostalba,2010-11-19 22:57:11+00:00,Small touches to engine_name()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-11-01
mcostalba,mcostalba,2010-11-16 18:28:09+00:00,Use occupied_squares() in book_key()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-11-01
mcostalba,mcostalba,2010-11-16 12:43:05+00:00,Rearrange pawn moves generation  This patch greatly cleanups generation of pawn moves but we change the order in which moves are generated so there is a change in functionality; but not in perft.  The only real functionality change is that now when type == CHECK we generate knight underpromotion captures only if give check and not always as before.  Perft is 2% faster and fully verified.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-11-01
mcostalba,mcostalba,2010-11-16 12:02:52+00:00,Introduce generate_promotions()  A bit ugly to guarantee no functional change.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-11-01
mcostalba,mcostalba,2010-11-15 17:58:15+00:00,Simplify generate_pawn_captures()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-15 17:58:00+00:00,Cleanup Bioskey()  And rename in dataAvailable()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-09 04:05:08+00:00,Let bench to have full defaults arguments  Now stockfish bench' defaults to  stockfish bench 128 1 12 default depth  that is the most used line (at least by me)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-11-01
mcostalba,mcostalba,2010-11-08 17:51:42+00:00,Various cleanup in book.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-08 12:53:44+00:00,Let benchmark to default to depth 12  And also simplify a lot the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-08 12:18:18+00:00,Move PieceValue[] and SlidingArray[] where they belong  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-07 22:51:09+00:00,Allow split point master to sleep (take 2)  Let to sleep even split point master; it will be waken up by its slaves when they return from the search.  This time let it be enabled by an UCI option; so people is free to test it on their Hyper Thread box.  Option is disabled by default.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 12:51:03+00:00,Use namespace in position.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 12:31:33+00:00,Retire uci.h and benchmark.h  Moved the single prototipes where are needed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 12:12:48+00:00,Object OpeningBook doen't need to be global  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 11:48:23+00:00,Make rkiss seed deterministic  Search at fixed depth with one thread must be reproducible so remove randomess from time().  Also better license description.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 11:22:15+00:00,Let rkiss.h to follow SF coding style  Fix also Makefile after mersenne.cpp has been removed  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 10:52:59+00:00,Use Heinz's RKiss instead of marsenne  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 09:53:31+00:00,Fix an off by one bug in print_uci_options()  Last option was not printed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-07 09:53:19+00:00,Retire bitbase.h  Moved the only prototipe where is needed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-11-01
mcostalba,mcostalba,2010-11-05 05:10:05+00:00,Rewrite options handling in an object oriented fashion  Big rewrite and about 100 lines removed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-11-01
mcostalba,mcostalba,2010-11-03 12:19:55+00:00,Retire push_button() and button_was_pressed()  Directly access the underlying bool option.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-11-01
mcostalba,mcostalba,2010-11-01 12:17:01+00:00,Prefer int to uint8_t when possible  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-11-01 11:17:54+00:00,"Add ""mingw"" compiler to Makefile  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2010-11-01
mcostalba,mcostalba,2010-11-01 10:44:46+00:00,Fix MinGW warnings  I finally got SF to compile under MinGW (after adding pthread libraries) and here are the fixed warnings.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-11-01
mcostalba,mcostalba,2010-10-31 10:53:49+00:00,Allocate RootPosition on the stack  And pass it as an argument.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-31 10:22:40+00:00,Update nodes after a do_move()  And also store the node counter in Position and not in Thread. This will allow to properly count nodes also in sub trees with SMP active.  This requires a surprisingly high number of changes in a lot of places to make it work properly.  No functional change but node count changed for obvious reasons.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-30 18:19:40+00:00,"Fix some icc's ""statement is unreachable"" warnings  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-10-01
mcostalba,mcostalba,2010-10-30 17:26:41+00:00,Move moveCount update near the SpNode case  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-30 14:22:10+00:00,Introduce and use TranspositionTable::refresh()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-30 13:24:19+00:00,Use margins[] array in evaluate  It will be used by future patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-30 11:32:38+00:00,More readable search/qsearch dispatch  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-24 08:57:30+00:00,Fix last leak detected by Valgrind  This was subtle and google was my friend.  The leak was in _dl_allocate_tls called by pthread_create() and is due to the fact that threads are created in joinable state so that once terminated are not freed. To make the thread to release its resources upon termination we should set them in detached state.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-24 08:56:57+00:00,"Fix a memcpy() warning under Valgrind  Fix warning: ""Source and destination overlap in memcpy""  This happens when we call multiple time do_move() with the same state; for instance when we don't need to undo the move.  This is what valgrind docs say:  You don't want the two blocks to overlap because one of them could get partially overwritten by the copying.  You might think that Memcheck is being overly pedantic reporting this in the case where 'dst' is less than 'src'. For example; the obvious way to implement memcpy() is by copying from the first byte to the last. However; the optimisation guides of some architectures recommend copying from the last byte down to the first. Also; some implementations of memcpy() zero 'dst' before copying; because zeroing the destination's cache line(s) can improve performance.  In addition; for many of these functions; the POSIX standards have wording along the lines ""If copying takes place between objects that overlap; the behavior is undefined."" Hence overlapping copies violate the standard.  The moral of the story is: if you want to write truly portable code; don't make any assumptions about the language implementation.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-10-01
mcostalba,mcostalba,2010-10-24 08:53:19+00:00,Revert previous patch  It seems we have a speed regression under Linux; anyhow commit and revert to leave some documentation in case we want to try again in the future.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-23 12:50:54+00:00,Allow split point master to sleep  Let to sleep even split point master; it will be waken up by its slaves when they return from the search.  With this patch we get maximum HT speedup  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-23 07:07:26+00:00,"Re-add ""Pass evalMargin through SearchStack as eval""  It has more sense to treat the two evaluation metrics in the same way.  As a side effect now we use the correct eval margin when pruning in a SplitPoint node.  No functional change in single thread.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-10-01
mcostalba,mcostalba,2010-10-23 06:51:35+00:00,Finally retire sp_search()  Fix the movcount updating bug and let search() to completely subsititute sp_search().  No functional change even with fakes split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-18 07:34:25+00:00,Temporary restore old sp_search()  There is a bug in the conversion that is triggered when testing with faked split and that I missed somehow :-(  To allow proper testing on cluster restore old sp_search() until I don't fiugre up what's happened.  Restored to be functional equivalent to old behaviour both in single thread and in faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-10-01
mcostalba,mcostalba,2010-10-18 07:19:48+00:00,"Revert ""Pass evalMargin through SearchStack as eval""  Restore full no functional change also in Faked Split mode.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2010-10-01
mcostalba,mcostalba,2010-10-17 12:12:58+00:00,Don't wake up /sleep threads in think() anymore  When entering and exiting from think() we don't need any special wake up / sleeping code because we want available threads to keep sleeping.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 10:38:00+00:00,Enable sleeping of available threads  This simple patch has devastating consequences ;-)  Now an available thread goes to sleep and is waked up after being allocated.  This patch allows Stockfish to dramatically increase performances on HyperThreading systems.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 10:04:52+00:00,Use fast SRWLOCK locks under Windows  They are fast and also have the same semantic of Linux ones.  This allow to simplify the code and especially to use SleepConditionVariableSRW() to wait on a condition releaseing the lock; this has the same semantic as pthread_cond_wait().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 08:35:44+00:00,Remove some ifdef from wake_sleeping_thread()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 08:03:39+00:00,Retire put_threads_to_sleep()  Obsoleted by previous patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 07:59:07+00:00,Retire THREAD_SLEEPING and use THREAD_AVAILABLE instead  This is a prerequisite for future work and anyhow removes a state flag; so it is good anyhow.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 07:39:03+00:00,Retire AllThreadsShouldSleep flag  It is redundant and complicates the already complicated SMP code for no reason.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 06:36:14+00:00,Destroy wait conditions before exiting  We already do this for locks. Also rename SitIdleEvent in WaitCond to be uniform with Lunix naming.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-17 07:00:42+00:00,Change thread API to use one wait condition per thread  This is the native way done in Windows and we will use it for future work; so change Linux to do the same.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-16 14:39:07+00:00,Do not shadow SplitPoint struct with search() parameter  Also retire move_is_killer() is called only from one place.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-16 14:00:20+00:00,Fixed some warnings when using -Weffc++ gcc option  Plus some other icc warnings popped up with new and strictier compile options.  No functional and speed change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-16 14:00:07+00:00,Fix a shadowed variable warning under icc  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-16 11:20:16+00:00,Retire now obsoleted do_sp_search() trampoline code  We can call search() directly from idle_loop()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-16 10:54:44+00:00,Pass evalMargin through SearchStack as eval  It has more sense to treat the two evaluation metrics in the same way.  As a side effect now we use the correct eval margin when pruning in a SplitPoint node.  No functional change in single thread.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-16 10:40:49+00:00,Unify sp_search() and search() step 3  Remove old sp_search() code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-16 10:20:43+00:00,Unify sp_search() and search() step 2  Modify search() to be able to handle split points  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-16 08:49:45+00:00,Unify sp_search() and search() step 1  Rewrite sp_search() to have same signature of search()  This is the first prerequistite step toward unification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-12 11:33:44+00:00,Pass moveCount by value in split()  Actually it is an error to update back moveCount value after split() because it is used in update_history() to access movesSearched[] array. But becasue this vector is not updated in the split point we end up with an access of stale data.  Bug has been hidden til now because we 'forgot' to update moveCount before returning from split().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-12 11:19:47+00:00,Sync sp_search() with search()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-12 11:11:20+00:00,Better document some threads functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-11 18:56:35+00:00,Document an assert in idle_loop()  Thanks to Bruno Causse for the clarification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-10-01
mcostalba,mcostalba,2010-10-10 08:05:46+00:00,Use VALUE_DRAW instead of VALUE_ZERO where better  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-10 07:32:12+00:00,Use do_move_bb() in move_attacks_square()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-10 07:32:03+00:00,Another cleanup in evaluate_pawns()  Suggested by Marek Kwiatkowski.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-09 14:22:00+00:00,Micro optimize open files calculation  Committed mostly because is also a cleanup...  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-09 12:43:43+00:00,Rearrange pawn penalities arrays  A clean up that is also a prerequisite for next patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-09 12:05:58+00:00,Small codestyle touches  Mostly suggested by Justin (UncombedCoconut); the 0ULL -> 0 conversion is mine.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-07 02:57:33+00:00,Properly set to zero stuff returned by 'new'  Language guarantees that c'tor is called; but without any c'tor it happens to work by accident because OS zeroes out the freshly allocated pages. The problem is that if I deallocate and allocate again; the second time pages are no more newly come by the OS and so could contain stale info.  A practical case could be if we change TT size or numbers of threads on the fly while already running.  Bug spotted by Justin Blanchard.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-10-01
mcostalba,mcostalba,2010-10-06 18:28:27+00:00,Retire updateKingTables[]  Suggested by Marek Kwiatkowski.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-10-01
mcostalba,mcostalba,2010-10-05 21:32:53+00:00,Skip ei.kingZone[] initialization together with king safety  Another microptimization by Marek Kwiatkowski.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-05 21:16:09+00:00,Skip an useless compare in space evaluation  Spotted by Marek Kwiatkowski.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-05 18:40:49+00:00,Restore development version  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-05 11:00:24+00:00,Stockfish 1.9.1  Fix release to workaround chess960 on some GUIs  Signature is:  stockfish bench 128 1 12 default depth  Node counts: 10914593  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-05 11:00:16+00:00,Fix broken chess960 under Shredder GUI  We need to add a dummy option anyway to make GUIs happy.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-10-01
mcostalba,mcostalba,2010-10-04 17:40:44+00:00,Rewrite bit counting functions  Get rid of macros and use templates instead; this is safer and allows us fix the warning:  ISO C++ forbids braced-groups within expressions  That broke compilation with -pedantic flag under gcc and POPCNT enabled.  No functional and no performance change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-10-01
mcostalba,mcostalba,2010-10-03 13:43:17+00:00,Remove -pedantic option  Breaks current POPCNT code.  Perhaps we will readd with a proper fix...  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-03 10:15:53+00:00,Use special handling for promotions in move_is_legal()  Simplifies a bit the code and the common case too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-10-01
mcostalba,mcostalba,2010-10-02 17:57:46+00:00,Fix an obsoleted NO_PIECE_TYPE in a comment  Spotted by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-02 13:36:43+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-02 13:32:43+00:00,Increase warning level  Both under gcc and icc: sf compiles with no warnings !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
mcostalba,mcostalba,2010-10-02 08:55:10+00:00,Stockfish 1.9  Signature is:  stockfish bench 128 1 12 default depth  Node counts: 10914593  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-10-01
zamar,mcostalba,2010-09-26 09:27:15+00:00,"Less aggressive move count based futility pruning  This patch from Joona greatly reduces move count pruning; below is the old and new move count limits starting from ONE_PLY with half-play increment:  Old: 4;5;5;5; 7; 7;11;11;11;19;19;19;35;35 New: 4;5;7;9;12;15;19;23;28;33;39;45;52;59  Surprisingly results are even a bit better at a quite fast time control.  After 5260 games at 30""+0.1 Mod - Orig:  864 - 806 - 3590  ELO +3 (+- 3.8)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-09-01
mcostalba,mcostalba,2010-09-25 10:24:20+00:00,Fix handling of 50 move rule and remove a fixme  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-09-01
mcostalba,mcostalba,2010-09-25 10:12:55+00:00,Shrink OutpostBonus[] definition  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-09-01
mcostalba,mcostalba,2010-09-24 11:56:45+00:00,Simplify scale factors implementation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-09-01
mcostalba,mcostalba,2010-09-24 11:56:38+00:00,Rename no_mob_area in mobilityArea  It is the correct name.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-09-01
mcostalba,mcostalba,2010-09-21 19:04:15+00:00,Small code style in qsearch  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-09-01
mcostalba,mcostalba,2010-09-21 05:25:47+00:00,Do not update killers in qsearch  It seems totally unuseful because killers are not used to order the moves in qsearch. Although there is some functionality change; probably just a small side effect.  After 5656 games on rc Mod vs Orig: 1007 - 980 - 3669  ELO +1 (+- 3.7)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-09-01
mcostalba,mcostalba,2010-09-19 12:56:50+00:00,A king move can never have negative SEE  So there is no need to explicitly check for king moves when detecting prunable evasions.  Perhaps teoretically a very bit slower (I didn't test); but it is more clear now what evasions we consider prunable.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-09-01
mcostalba,mcostalba,2010-09-19 12:41:54+00:00,Simplify SEE  Greatly cleanup SEE code and now it is also a bit faster on gcc; about +0.6%.  Thanks to Mike Whiteley new SEE code that gave me fresh ideas on how to cleanup this old stuff.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-09-01
mcostalba,mcostalba,2010-09-16 07:22:39+00:00,Retire NullMoveMargin  A code semplification that could even be a slight increase; anyhow is a reducing pruning patch; so it is good even at equal strenght.  After 6342 games Mod - Orig:  1040 - 974 - 4328  ELO +3 (+- 3.5)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-09-01
mcostalba,mcostalba,2010-09-14 17:06:10+00:00,We need just one eval margin in search  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-09-01
mcostalba,mcostalba,2010-09-14 12:48:26+00:00,"Reintroduce rook contact checks  Were removed when merged from Glaurung 2.2; but without any test.  Note that weight has been increased from original 2 to 4 and has been also fixed a bug where in the original version were considered also diagonal sqaures for the rook; that are contact squares but not checks.  After 4449 games at 30""+0.1 Mod - Orig:  717 - 649 - 3083  ELO +5 (+- 4.1)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2010-09-01
mcostalba,mcostalba,2010-09-14 06:56:02+00:00,Fix a warning under icc  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-09-01
mcostalba,mcostalba,2010-09-13 12:22:00+00:00,Retire badCaptures[] array in MovePicker  Use the tail of moves[] array to store bad captures.  No functional change but some move reorder. Verified with old perft.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-09-01
mcostalba,mcostalba,2010-09-12 23:10:48+00:00,"Increase QueenContactCheckBonus  And also other check bonuses.  After 4272 games on russian cluster at 30""+0.1 Mod - Orig:  711 - 612 - 2949  ELO +8 (+- 4.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-09-01
mcostalba,mcostalba,2010-09-12 13:28:07+00:00,Do not update king tables when we skip king safety  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-09-01
zamar,mcostalba,2010-09-11 08:46:00+00:00,Retire pawn storm evaluation  More then 100 lines of almost useless evaluations. Prefer code semplification to a very small and dubious advantage.  After 7457 games on russian cluster: Mod - Orig: 1285 - 1334 - 4838  ELO -2 (+- 3.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-09-01
mcostalba,mcostalba,2010-09-04 13:10:48+00:00,Array FutilityMarginsMatrix stores Values  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-09-01
mcostalba,mcostalba,2010-08-30 11:56:12+00:00,Remove get_* prefix from RootMoveList API  And small additional cleanup in RootMoveList.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-30 11:56:04+00:00,Use only cumulativeNodes in RootMoveList  And rename in nodes now that we have only one.  After the beta-cut off counters removing we can get rid also of this one.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-28 11:07:15+00:00,Use evaluation margins also in main search  For now keep FutilityMarginsMatrix[] unchanged; in future we are going to reduce to compensate for extra margin.  At this moment it is enough we don't have regressions.  After 9694 games on russian cluster Mod - Orig 1608 - 1578 - 6508  ELO +1 (+- 2.8)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-08-01
mcostalba,mcostalba,2010-08-27 12:28:07+00:00,Split branches in generate_piece_moves()  Instead of one comparison in while() condition use two; the first to check if the piece is exsistant and the second to loop across pieces of that type.  This should help branch prediction in cases we have only one piece of the same type; for instance for queens; the first branch is always true and the second is almost always false.  Increased speed of 0.3-0.5 % on Gcc pgo compiles.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-08-01
mcostalba,mcostalba,2010-08-26 16:52:53+00:00,Speed up updateShelter()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:47:38+00:00,Assorted code style in evaluation.cpp  Renaming; cleanu up; etc.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:47:29+00:00,Finally remove value from EvalInfo  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:41:28+00:00,Remove dependency from ei.value in evaluate functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:41:28+00:00,Remove margin[] from EvalInfo  Directly pass arguments to king evaluation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:41:27+00:00,Remove MaterialInfo* from EvalInfo  Use a local variable instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:41:26+00:00,Change evaluate() signature  Hide EvalInfo and return just the score and the margin.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:41:26+00:00,Retire attackedBy[] access functions  Currently are used by evaluation itself and the whole EvalInfo will be removed from global visibility by next patch; so no reason to use them.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-26 12:41:25+00:00,Decrypt some magics in bitboards definitions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-24 23:20:53+00:00,We don't need EvalInfo c'tor anymore  We know always get complete info from TT; so this code is obsolete.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-24 18:16:03+00:00,Rename ei.kingDanger in ei.margin  It will be more clear when we will go to add stuff apart from king danger itself.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-24 18:13:13+00:00,Call apply_weight() only once in passed pawns evaluation  First accumulate the bonus for each pawn; then call the not very fast apply_weight().  Should be no functional change apart from rounding issues.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-24 17:58:51+00:00,Don't need to memset() EvalInfo  Set manually to zero the few fields that are optionally populated and that's enough.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-24 17:55:40+00:00,There is no need of storing mobility in EvalInfo  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-24 17:55:31+00:00,Refresh comments in evaluate.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-24 12:34:41+00:00,Unify single MobilityBonus[] tables in a big single one  Avoid one address lookup in a very critical time path.  Unified also outpost bonus tables for knights and bishops.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-24 12:13:20+00:00,Retire trapped bishop evaluation  Another 100 lines of dubious and ad-hoc code.  After 7644 games on russian cluster: Mod - Orig 1285 - 1249 - 5110  ELO +1 (+- 3.2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-22 15:51:20+00:00,Retire UCI_Chess960 option  We don't need that !  We can infere from starting fen string if we are in a Chess960 game or not. And note that this is a per-position property; not an application wide one.  A nice trick is to use a custom manipulator (that is an enum actually) to keep using the handy operator<<() on the move when sending to std::cout; yes; I have indulged a bit here ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-08-01
mcostalba,mcostalba,2010-08-22 13:04:06+00:00,Prefetch pawn hash key  Plus a bunch of other minor optimizations.  With this power pack we have an increase of a whopping 1.4%  :-)  ...and it took 3 good hours of profiling + hacking to get it out !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-08-01
mcostalba,mcostalba,2010-08-22 00:39:31+00:00,Retire unstoppable pawns evaluation  One hundred lines of code should be compensated by an important ELO increase; otherwise are candidate for removal...  ...and is not the case. We are well within error margin; so remove the code even if we lose a couple of elo points; but semplification is huge.  After 6494 games on russian cluster Orig vs Mod 1145 - 1107 - 4242 (-2 ELO)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-08-01
mcostalba,mcostalba,2010-08-21 16:21:44+00:00,Remove my address from README  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-08-01
mcostalba,mcostalba,2010-08-20 17:33:19+00:00,Retire beta counters stuff  Is now obsoleted by previous patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-08-01
zamar,mcostalba,2010-08-20 17:04:02+00:00,Use MovePicker's move ordering also at root  After testing on our russian cluster: +3 elo after 4200 games  So keep it becuase it allows a good semplification.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-08-01
mcostalba,mcostalba,2010-08-19 17:22:48+00:00,Move StartPositionFEN out of the header  It is not needed to have global visibility.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 17:22:48+00:00,Move piece values in piece.h / piece.cpp  Where they belong.  Note that array PieceValueMidgame[] and PieceValueEndgame[] are now declared extern in the header and moved in piece.cpp so to avoid allocate the array each time the header is included !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 17:22:47+00:00,Retire is_upper_bound() and friend  Directly expand in the few places where is called.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 17:22:46+00:00,Retire useless piece_value_midgame() overloads  Directly access the table in the few call places.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 17:22:46+00:00,Introduce and use SCORE_ZERO  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 13:50:02+00:00,Do not score PH_QCHECKS  They are picked unsorted anyway; so score is unuseful.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:41+00:00,Disable templetized operators by default  To avoid nasty bugs due to silently overriding of common operator we enable the templates on a type by type base using partial template specialization.  No functional change; zero overhead at runtime.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:38+00:00,Introduce enum VALUE_ZERO instead of Value(0)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:37+00:00,Use Use templetized operations for Score and Value  Note that in value we leave two specialized functions to allow adding an integer; we don't want to add this as a template becasue we want to control implicit conversions to integer of an enum.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:35+00:00,Use templetized operations for Piece  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:33+00:00,Use templetized operations for Square  This is tricky because there are some special binary fnctions with SquareDelta that we should leave as they are.  Also note that we needed to add Unary minus template to fix a comile error in SERIALIZE_MOVES_D macro that was triggered because now we don't allow conversion to int.  No fuctional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:30+00:00,Use templetized operations for File and Rank  Doing the conversion the compiler is now able to spot two possible ambiguity calls that now we can easily fix.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:28+00:00,Use templetize enum operations for Depth  Instead of hardcoded ones.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:26+00:00,Store in TT with depth == -OnePly instead of -1  When depth < DEPTH_ZERO we store with the same depth all the positions; use -OnePly instead of -1 for consistency with depth arithmetic.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:24+00:00,(Re)introduce DEPTH_ZERO to replace Depth(0)  No functional changes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:23+00:00,Retire some unused Depth operator() functions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:20+00:00,Rename OnePly in ONE_PLY  Use enum values standard naming policy also for this one.  No fuctional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-19 12:48:11+00:00,Define OnePly as a Depth enum costant  There is no reason to use a variable for this.  Also remove unused DEPTH_ZERO and DEPTH_MAX.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-08-01
mcostalba,mcostalba,2010-08-18 09:07:28+00:00,Revert F_90 and F_92  Regression test found the patches to be harmless; so revert to keep code simpler.  Test1 at 20+0.1: (2500 - 3000) +0 ELO Test2 at 1+0: (~1000) +2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-08-01
mcostalba,mcostalba,2010-08-09 11:30:33+00:00,Cleanup and optimize Position::has_mate_threat()  There is a functional change because we now skip more moves and because do_move() / undo_move() is well known to be not reversible we end up with a change in node count; although there is actually no change but a bit speed up.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-08 12:14:18+00:00,Usual material.cpp small touches  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-08-01
mcostalba,mcostalba,2010-08-07 17:56:24+00:00,Rename constants to use *_NONE scheme  To be uniform across the sources. As a nice side effect I quickly spotted a couple of needed renames:  captured_piece() -> captured_piece_type() st->capture      -> st->capturedType  Proposed by Ralph and done with QtCreator  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-08-01
mcostalba,mcostalba,2010-08-06 21:30:50+00:00,Move depth computation out of fail low loop  In root_search() we can compute depth at the beginning once and for all.  Spotted by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-08-01
mcostalba,mcostalba,2010-08-06 11:10:07+00:00,Another push to perft speed  We don't need to generate captures and non captures in a separate step. This gives another 7% push to perft speed.  yes; I know; it is totally useless :-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-08-01
mcostalba,mcostalba,2010-08-06 10:15:41+00:00,Faster perft  Skip moves scoring and sorting: this more then doubles the speed !  Verified is correct.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-08-01
mcostalba,mcostalba,2010-08-03 12:06:56+00:00,Rename TM in ThreadsMgr  This avoid misunderstandings with new TimeManager object called TimeMgr.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-03 10:49:28+00:00,TimeManager API rename  We can now set member data as private because is no more directly accessed.  Should be more clear now.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-03 10:47:52+00:00,Move time related global variables under TimeManager  Move OptimumSearchTime; MaximumSearchTime and ExtraSearchTime in TimeManager.  Note that we remove an useless initialization to 0 because these variables are used only with time management.  Also introduce and use TimeManager::available_time()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-03 10:39:42+00:00,Introduce TimeManager class  Firt step in unifying all time management under a single umbrella. Just introduced the class without even member data.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-08-01
mcostalba,mcostalba,2010-08-02 21:09:20+00:00,Small cleanup in search Step.5  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-02 21:02:59+00:00,Reset bestMove before entering main moves loop  After razoring; IID; null verification and singular extension searches we have could have a dirty ss->bestMove; restore to MOVE_NONE before to enter moves loop.  This should avoid to store in TT a stale move when we fail low.  Tested together with previous patch that is the one that gives ELO.  After 1152 games at 1+0 on my QUAD Mod vs Orig +233 =716 -203 (+9 ELO)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-02 17:47:27+00:00,Use past SE information also for success cases  If singular extension search was succesful in the past then skip another the SE search and extend of one ply.  Another way to mitigate the cost of SE at the price of some more spurious extension; but on 90% of cases info is correct.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-02 17:41:55+00:00,Rename MaxSearchTime and AbsoluteMaxSearchTime  Renamed in OptimumSearchTime and MaximumSearchTime; should be more clear now.  Suggested by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-02 10:55:45+00:00,Templetize xxx_time_for_MTG()  Also fixed some warnings under MSVC.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-08-02 10:49:49+00:00,Little timeman.cpp massage  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
zamar,mcostalba,2010-08-02 10:49:31+00:00,Tweak default values for ucioptions  I created three different systems; tested them all separately and attached one did best:  1/40: Orig - Mod: 841 - 850 (+2 elo) 1+1 : Orig - Mod: 474 - 498 (+9 elo) 1+0 : Orig - Mod: 455 - 495 (+15 elo)  Because such testing system is not statistically reliable; I made a confirmation test:  1/40: Orig - Mod: 502 - 543 (+14 elo) 1+1: Orig - Mod: 447 - 489 (+16 elo) 1+0: Orig - Mod: 641 - 656 (+4 elo)  All tests show positive score :-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
zamar,mcostalba,2010-08-02 10:48:03+00:00,New Time management system  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-08-01
mcostalba,mcostalba,2010-07-31 06:29:29+00:00,Always use ss->bestMove to store ply best move  Instead of ss->currentMove. It is more consistent and clear to understand.  Remark by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-30 21:50:03+00:00,Lower SingularExtensionDepth to 7 plies for non-pv  To compensate for the extra work skip singular searches deemed to fail because excluded node failed high already in the past.  After 1200 games at 1+0 Mod vs Orig +387 =1274 -339  (+8 ELO)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
mcostalba,mcostalba,2010-07-26 05:10:01+00:00,Two small fixes in passed pawns evaluation  The one in evaluate_passed_pawns() is just a micro optimization; the other in evaluate_unstoppable_pawns() is indeed a fix; although almost unmeasurable in real games.  Bugs report and fixes by Marek Kwiatkowski  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
mcostalba,mcostalba,2010-07-25 20:58:09+00:00,Fix KBNK endgame  Broken by recent patch. Also better document what's happening there.  Verified to restore original behaviour.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-25 11:10:22+00:00,Rename EMPTY in NO_PIECE  It is more correct and more in line with enum PieceType  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-25 10:49:58+00:00,Introduce enum SquareColor  Square and piece colors are two different things; so use different types to avoid misunderstandings.  Suggested by Tord.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-25 10:49:32+00:00,Introduce and use same_color_squares()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-25 08:57:57+00:00,Cleanup Position::print()  And remove not used OUTSIDE enum Piece.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
zamar,mcostalba,2010-07-25 07:57:23+00:00,Fix build failure on GCC  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-24 17:56:07+00:00,Cleanup Position::to_fen()  Less invasive then previous patches; but still a good enhancement.  Also some indulge on STL algorithms :-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-24 15:31:12+00:00,Last touches to from_fen()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-24 08:43:01+00:00,Rewrite Position::from_fen()  Complete rewrite the function and extend compatibility also to X-FEN notation for Chess960.  We are now able to read standard FEN; Shredder-FEN and X-FEN.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
zamar,mcostalba,2010-07-23 11:21:54+00:00,Don't initialize psqt-tables when 'ucinewgame' is received  After 'Randomness' is retired; this is no longer necessary.  NOTE: Possibly some extra care is needed when tuning branch is synced  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
zamar,mcostalba,2010-07-23 11:21:46+00:00,Retire 'Randomness' ucioption  Using multiple threads and good opening book is much better and more reliable source of randomness than spoiling psqt-tables  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
zamar,mcostalba,2010-07-23 06:03:39+00:00,Always init pthread locks to NULL  This is the only way to keep Windows and POSIX behaviour in sync; so better hardcode it.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
zamar,mcostalba,2010-07-23 06:03:32+00:00,Remove other locking options  Currently broken and we use pthreads in search.cpp anyway; so I see no reason to keep these around  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
mcostalba,mcostalba,2010-07-23 01:42:27+00:00,Retire SearchStack init() and initKillers()  Let be explicit about what this functions do; and we save some code lines too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
mcostalba,mcostalba,2010-07-23 01:26:57+00:00,Fix errouneus reset of ss->threatMove  After we set ss->threatMove we could go under a IID step that resets SearchStack ss and so also ss->threatMove.  When later we use that field in futility pruning we have this set to MOVE_NONE !  The fix is to use a local variable and add threatMove to SplitPoint to pass this move to slaves.  Spotted by Ralph Stoesser; fix suggested by Richard Vida.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
mcostalba,mcostalba,2010-07-22 17:30:18+00:00,Revert previous patch  Improvement is easily in error bar and there is some added complexity making future changes more difficult.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-22 17:15:16+00:00,"Weight backward-ness of a pawn  Because not all backward pawns are the same ;-) if the blocking enemy pawn is near then our pawn is more backward than another whose enemy pawn is far away so that can advance for some sqaures.  After 2925 games at 30""+0 on my QUAD Mod vs Orig +602 =1745 -578 +3 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2010-07-01
zamar,mcostalba,2010-07-22 16:51:33+00:00,ValueType needs only 2 bits to be stored in TT  Also update some more TT documentation  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
zamar,mcostalba,2010-07-22 16:51:26+00:00,Update TT documentation  Update outdated and even misleading documentation.  Also check #include-directives  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-21 11:09:09+00:00,Move insert_pv() and extract_pv() out of TT class  These functions have little to do with TranspositionTable class and more with the search and in particular with the PV handling. So move them where they belong.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-07-01
mcostalba,mcostalba,2010-07-21 11:08:45+00:00,Store position static score in TT as soon as possible  So to maximize the possibility to avoid to recalculate it in the future. A small speed-up of 0.8%  Idea by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-07-01
mcostalba,mcostalba,2010-07-20 18:06:09+00:00,Introduce DEPTH_NONE and use it  Also better fix previous patch.  Suggestions by Joona and Ralph.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-07-01
zamar,mcostalba,2010-07-20 18:01:10+00:00,Remove pointless tte->static_value() != VALUE_NONE checks  Now in non-check nodes we are guaranteed to always have static value in TT Entry.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-07-01
zamar,mcostalba,2010-07-20 18:01:01+00:00,Store static value and king danger in TT also in TT.insert_pv() method  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-07-01
mcostalba,mcostalba,2010-07-19 11:28:33+00:00,"Fix ""pass ss->eval to qsearch()"" condition  The seocond check is no more needed now and anyhow is wrong to overwrite a TT entry if present.  Spotted by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2010-07-01
mcostalba,mcostalba,2010-07-19 11:01:36+00:00,Triviality in material.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
mcostalba,mcostalba,2010-07-19 06:13:50+00:00,Small rewrite of backward pawn test  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
zamar,mcostalba,2010-07-19 02:53:37+00:00,Initialize SearchStack only once at RootMoveList c'tor  Just fix current ugly behaviour :-)  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
zamar,mcostalba,2010-07-19 02:52:21+00:00,Every node is responsible for initializing its own SearchStack entry  More logical than doing partly initialization at init_ss_array()  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
zamar,mcostalba,2010-07-19 02:51:25+00:00,Drop KILLER_MAX. Hardcode to 2 instead.  KILLER_MAX in search.h is quite pointless; because we already hardcode this to 2 in MovePicker anyway.  By hard-coding this to 2 we can keep code simpler.  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
zamar,mcostalba,2010-07-19 02:48:51+00:00,Do not initialize ss->reduction to zero in the beginning of node  It must already be zero because zeroed in SearchStack initialization  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
zamar,mcostalba,2010-07-19 02:43:58+00:00,Do not reset ss->eval in the beginning of the node  This avoids problems with IID clearing ss->eval and eval not being available when we return  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
mcostalba,mcostalba,2010-07-17 16:32:54+00:00,Fix isolated and backward pawns scoring  It is more clear and also more correct because we consider enemy pawns only in fornt of us and not just on our file.  Very small functional change; almost not measurable; but keep the patch for documenting purposes.  Spotted by Marek Kwiatkowski.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-17 13:00:25+00:00,Triviality in endgame.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
zamar,mcostalba,2010-07-16 11:04:02+00:00,Update Makefile  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
zamar,mcostalba,2010-07-15 19:53:16+00:00,Find balance between 1.7 and 1.8 reductions  Almost no change so commit because is a pruning reduction patch.  After 1088 games at 1'+0 with QUAD Mod vs Orig +178 =727 -183  (-2 ELO)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-15 16:14:30+00:00,Remove redundant argument in think()  We don't need to pass side_to_move because we can get it directly from the position object.  Note that in benchmark we always used to pass '0' and it was a bug; but with no effect because was used only in time[] and increment[]; set always to 0 for both colors.  Also additional small cleanup while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-15 16:05:23+00:00,Retire apply_scale_factor() and scale.h  Directly inline in the only occurence.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-15 15:55:35+00:00,Inline history and gain getters  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-15 11:16:36+00:00,Retire value.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-14 16:29:36+00:00,Retire LSN machinery  Now that we use cutechess-cli we can set the auto-resign parameter that makes LSN less effective.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-07-01
mcostalba,mcostalba,2010-07-14 16:29:34+00:00,Triviality in ucioption.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-07-01
mcostalba,mcostalba,2010-07-12 20:06:40+00:00,Add moves from failed high nodes in PV  Considering only VALUE_TYPE_EXACT nodes is too restrictive and has a number of side-effects; most notably the truncation of PV line after a fail high at root.  Note that in this way we are no more guaranteed that PV line is built up with PV nodes only; because it could happen that a side search overwrites with a cut-off move a PV node and this cut-off move ends up in PV.  Change should be almost not measurable; perhaps with ponder on we could have some beneficial effect.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
mcostalba,mcostalba,2010-07-12 20:03:30+00:00,Fix (zugzwang) verification to be shallower then null search  Currently starting from depth 12*OnePly on we have a verification search deeper then the null search.  Note that; although reduction is R we start from one ply less then null search; so actually we reach a depth that is OnePly shallower then null search.  After 1130 games at 1'+0 on QUAD Mod vs Orig +202 =756 -172  +9 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
zamar,mcostalba,2010-07-11 21:25:02+00:00,Remove TranspositionTable::overwrites variable  Doesn't provide useful information and can cause slowdown with many Threads.  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-11 11:05:06+00:00,Space inflate bitbase.cpp  Also heavy cleanup while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-11 08:42:04+00:00,There is no need to clear TT at allocation time  Operator new() already returns a zeroed memory.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-10 15:43:05+00:00,Revert previous patch  After the previous patch; it's impossible to build anything else than x86 32-bit binary!  So revert.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-10 11:16:43+00:00,Makefile: default on gcc 32 bits when type 'make'  From Vratko Polak  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-06 16:56:04+00:00,Reword singular extension comments  Should be more stick to original definition (Hsu; Campbell)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-07-01
zamar,mcostalba,2010-07-06 05:24:58+00:00,Tweak Makefile a bit  To fix some build problems on debian's automatic building system.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-07-01
mcostalba,mcostalba,2010-07-05 19:55:01+00:00,Move SplitPoint array under its thread  And cleanup / rename that part of code.  No functional change also with faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-07-01
mcostalba,mcostalba,2010-07-04 20:49:23+00:00,"Tweak non-captures scoring  Tested with Orig set at f5ef5632f so to evaluate direct gain against 1.8  After 3239 games at 10""+0.1 Mod vs Orig +701 =1906 -632 +7 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-07-01
zamar,mcostalba,2010-07-04 19:15:09+00:00,Fix TT documentation  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-07-01
mcostalba,mcostalba,2010-07-03 18:05:04+00:00,Reintroduce GCC/ICC rounding hack  Unfortunatly the source of this issue is not in the different handling of log(0) illegal value.  No functional change on MSVC.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
zamar,mcostalba,2010-07-03 17:54:34+00:00,Fix Makefile for HPUX  On hpux there is no prefetch.  Reported by Richard Lloyd  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-03 15:12:20+00:00,"Fix DIVIDE BY ZERO exception in init_search()  It happens that when d == 0 we calculate:  log(double(0 * 0) / 2)  Unfortunately; log(0) is ""illegal"" and can generate either a floating point exception or return a nonsense ""huge"" value depending on the platform.  This fixs in the proper way the GCC/ICC rounding difference; bug was from our side; not in the intel compiler.  Also fixed some few other warnings.  Bug spotted by Richard Lloyd.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-07-01
mcostalba,mcostalba,2010-07-03 04:49:13+00:00,PSQT access functions can be static  Also renamed history access value in something more in line with the meaning.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-03 04:36:53+00:00,"Use only history to score non-captures  It seems there is absolutely no difference in using gains.  After 7025 games at 5""+0 Mod vs Orig +1903 =3236 -1886 (+1 ELO)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-07-01
mcostalba,mcostalba,2010-07-03 04:34:57+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-07-01
mcostalba,mcostalba,2010-07-02 05:55:03+00:00,"Revert ""Another PSQT tuning round""  At longer TC of 1'+0"" patch fails: Orig - Mod: 841 - 819 (-6 elo!)  Just before the release ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2010-07-01
mcostalba,mcostalba,2010-07-02 05:23:15+00:00,Stockfish 1.8  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-07-01
mcostalba,mcostalba,2010-07-01 21:21:09+00:00,Mark CheckInfo c'tor as explicit  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
mcostalba,mcostalba,2010-07-01 21:18:53+00:00,Move singleEvasion assignment out of move's loop  We don't need to recheck after every move.  Spotted by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-07-01
zamar,mcostalba,2010-06-29 17:52:51+00:00,"Another PSQT tuning round  This time with a new algorithm by Joona.  It works basically like this:  repeat {    1) pick 8000 random positions from qsearch    2) ""go depth 8"" to get the true evaluation.    3) ""eval"" to get the stand pat score    4) Adjusting parameters one by one to minimize deltasum between true evaluation and stand  pat scores. }  * Good news: method seems to converge * Bad news: Point where it converges is not optimum.  So it's more or less trial and error... sometimes works; sometimes doesn't. It can give you the right direction; but if you let it run too long; it fails. Far from scientific ;)  After 14800 games with 5s/game Orig - Mod: 3318 - 3570 - 7626 (+6 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2010-06-01
mcostalba,mcostalba,2010-06-29 17:35:54+00:00,Remove a redundant check in passed pawn eval  When first condition is met then second one is always true.  Spotted by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-29 17:33:43+00:00,Code style triviality in san.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-29 17:23:45+00:00,Rename TranspositionTable 'writes' in 'overwrites'  Better documents what that variable means.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-29 17:23:28+00:00,"Extract only exact scores to get the PV  This should allow to skip overwritten nodes because only in PV we store in TT with VALUE_TYPE_EXACT flag.  Test result for the whole series is:  After 3627 games at 5"" Mod vs Orig +1037 =1605 -985 +5 ELO  After 1311 games at 1'+0"" Mod vs Orig +234 =850 -227 +2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2010-06-01
mcostalba,mcostalba,2010-06-26 14:43:54+00:00,Retire update_pv() and sp_update_pv()  Expand inline instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-26 14:13:39+00:00,Retire pv[] from SearchStack  Extract PV info from TT instead of using a set of arrays. This is almost equivalent except for cases when TT is full and the PV entry is overwritten; but this is very rare.  (Almost) No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-26 13:42:44+00:00,Introduce bestMove to store PV move  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-26 10:01:43+00:00,Cleanup code that stores score in TT  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
zamar,mcostalba,2010-06-26 09:23:31+00:00,Fix some wrong documentation  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
zamar,mcostalba,2010-06-26 09:22:26+00:00,Remove unused constant  Fixes warning on ICC  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-25 17:56:42+00:00,Stockfish 1.8 beta 2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-06-01
zamar,mcostalba,2010-06-25 17:54:33+00:00,Hack to fix GCC/ICC rounding difference  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-06-01
mcostalba,mcostalba,2010-06-24 17:00:14+00:00,Stockfish 1.8 beta 1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-06-01
mcostalba,mcostalba,2010-06-24 17:00:03+00:00,"Revert ""Do IID also when we already have a ttMove""  Joona's testing reports very bad results at 5s; 30s and even 1 minute TC; so revert.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2010-06-01
mcostalba,mcostalba,2010-06-24 16:53:01+00:00,Call apply_weight() for both colors in one go  Due to rounding errors in apply_weight() where we divide by 0x100 it is not possible to keep some functionality.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-06-01
mcostalba,mcostalba,2010-06-24 16:52:56+00:00,Tweak unstoppable pawns detection  A pawn is unstoppable also if enemy king can reach it but path to queening is protected.  Original idea by Ralph Stoesser fixed by me.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-06-01
mcostalba,mcostalba,2010-06-21 19:50:20+00:00,Merge branch 'master' of free2.projectlocker.com:sf,True,0,2010-06-01
Unknown,Unknown,2010-06-21 09:25:06+00:00,Moved a misplaced #endif in misc.cpp; which broke compilation in Mac OS X.  No functional change.,True,0,2010-06-01
mcostalba,mcostalba,2010-06-19 16:27:10+00:00,Test killer for legality earlier  Many killers moves; around 40%; are not legal; so skip earlier in this case.  Some Movepicker c'tor cleanup while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-19 14:58:14+00:00,Optimize for king moves in see_sign()  Because we only test legal moves; a king move cannot have negative SEE.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-19 10:10:54+00:00,Move prefetch() out of TT  This code is platform specific and has nothing to do with TT class; so move to misc.cpp  This patch is a prerequisite to use extend prefetch use also to other hash tables apart from Transposition Table.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-15 06:02:09+00:00,"Extend checks only if SEE is non-negative  Idea from Dr. Hyatt  After 10k games at 5""+0 on my QUAD Mod vs Orig +2750 =4601 -2649 +4 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2010-06-01
mcostalba,mcostalba,2010-06-13 01:38:16+00:00,"Revert ""Use ply counter in Position object""  Search ply and game ply are rwo different things !  Revert bogus commit.  No functional change on bench; but it changes in real games when engine sends all the moves up to current one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-06-01
mcostalba,mcostalba,2010-06-12 09:29:50+00:00,Set LSNTime to 100 ms  This is a timeout compatible with very short TC of 5 sec/game.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-05 23:17:33+00:00,Remove a wrong FIXME  If we are there it means we already had that info stored in TT; so we don't need to overwrite with the same content !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-05 11:35:44+00:00,Avoid a double copy when saving a TTEntry  In statement:  *tte = TTEntry(posKey32; v; t; d; m; generation; statV; kingD);  We first create a TTEntry; then we copy the temporary entry to its final destination in *tte then we discard the TTEntry.  Instead of this assign the fields directly to the destination TTEntry.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-05 07:42:16+00:00,Avoid calling evaluate() while razoring  Micro optimization that gives a 0.5% speed improvment  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-06-01
mcostalba,mcostalba,2010-06-04 18:41:41+00:00,Offset pv[] always from 0  We don't need to offset from current ply.  Also rewritten a bit update_pv()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-06-01
mcostalba,mcostalba,2010-06-03 18:15:44+00:00,Big qsearch() cleanup  It is more clear and should be a bit faster too.  Reverted also previous optimization patch because seems do not increase actual speed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-06-01
mcostalba,mcostalba,2010-06-03 11:17:05+00:00,Extend intermediate LMR to root search  Almost no change; but it is in sync with what we do in search and in any case the ELO difference is very small (because the events when the intermediate research triggers are very rare); too small to be measured; we just verify we don't have any unexpected regressions.  After 802 games at 1+0 full QUAD Mod vs Orig +114 =581 -107 +3 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-06-01
mcostalba,mcostalba,2010-06-03 11:10:57+00:00,Shortcut futility pruning in qsearch  If we have pruned one capture due to its final value we can prune also following ones because captures are MVV ordered.  Also avoid a compare when not in PV because in that case is always false.  No functional change.,True,3,2010-06-01
mcostalba,mcostalba,2010-06-02 19:48:40+00:00,Do not pass threadID as argument of search() and evaluate()  Get it from the position instead.  A good semplification of function calling and a speedup too.  No functional change also with faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-06-01
mcostalba,mcostalba,2010-06-02 19:19:43+00:00,Save threadID info in Position  This is the best place because when we split we do a copy of the position and also threadID; once set in a given position; never changes anymore.  Forbid use of Position's default and copy c'tor to avoid nasty bugs in case a position is created without explicitly setting the threadID.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-06-01
mcostalba,mcostalba,2010-06-02 18:41:45+00:00,Don't initialize excludedMove and skipNullMove at each node  Do it once at the beginning becuase they are always reset after use in the calling place where are set.  No functional change also with faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-06-01
mcostalba,mcostalba,2010-06-02 12:49:48+00:00,Use SearchStack to pass allowNullmove  Also renamed allowNullmove in skipNullMove to reverse the logic so that the field is initialized to 0 (false) instead of 1 (true).  No functional change also with faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-06-01
mcostalba,mcostalba,2010-06-02 12:22:48+00:00,Use SearchStack to pass excludedMove  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-06-01
mcostalba,mcostalba,2010-06-02 10:25:02+00:00,Fix white space breakage  No functional change with faked split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-06-01
mcostalba,mcostalba,2010-06-02 09:49:34+00:00,Sync sp_search() with main search()  And fix qserahc() dispatch also there.  No functional change tested wit Faked Split.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-06-01
mcostalba,mcostalba,2010-06-01 20:58:54+00:00,Retire bitScanReverse32()  Use log() instead because we are not in speed critical paths.  Also a bit of renaming and code shuffle while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-01 19:50:08+00:00,Retire ok_to_do_nullmove()  Has been remained the same from ages also with the FIXME.  Retire for now and rearrange the conditions order for maximum performance.  Also a small touch at null zugzwang verification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-01 14:47:28+00:00,Move invariant of singular ext. check out of loop  It is almost always false.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-01 14:12:31+00:00,Rename ok_to_prune() in connected_threat()  It is more up to the point. Also small speedup due to checking for threat move before calling the function. This saves more then 90% of function calls.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-01 13:47:55+00:00,Avoid double function dispatch  In 44% of cases we call search() just to call qsearch() one moment later; avoid this double dispatch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-01 11:34:49+00:00,Retire init_node()  Also don't poll in qsearch()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-06-01 06:36:30+00:00,Don't init SplitPointStack[i][j].parent  It is already set to zero because is allocated in the global storage area.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-06-01
mcostalba,mcostalba,2010-05-31 21:03:22+00:00,Use ply counter in Position object  And avoid a redundant one passed as argument in search calls.  Also renamed gamePly in ply to better clarify this is used as search ply and is set to zero at the beginning of the search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-31 17:33:43+00:00,Fix SearchStack and ply misalignment in RootMoveList  In RootMoveList c'tor we call qsearch() with ply == 1 but SearchStack at 0.  We never noticed before because in qsearch we don't access previous's ply SearchStack; otherwise we would have got a nice crash ;-)  This bug is a fall down of previous patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-31 16:36:16+00:00,Convert SearchStack ss[] to SearchStack*  Use a pointer to current SearchStack to avoid ss[ply] address calculation.  Gives 1% speedup on Intel compiler  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-31 11:10:39+00:00,Add function to get ply from position  It will be used by future patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-31 11:09:18+00:00,Move gamePly among the StateInfo data  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-31 11:08:34+00:00,Move promotion and ep under pawn handling  And remove from main do_move() flow. Just a small speedup because we avoid two branches in the common case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-31 05:16:50+00:00,Thread::splitPoint is a volatile pointer  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-31 05:15:39+00:00,Do IID also when we already have a ttMove  In case tte->depth() is far lower the current depth and we are in a PV node.  Almost 45% of researches give a different ttMove !  After 999 games at 1+0 Mod vs Orig +174 =694 -131 +15 ELO !!!!!!!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-29 22:35:12+00:00,If LMR search fails high research at intemediate depth  Do not search immediately at full depth; but try a second chance at lower depth. This is a feature that should scale well because become important at high depths where we have big reductions and also big savings in avoiding a costly full depth search.  After 942 games at 1+0 Mod vs Orig +158 =645 -139  +7 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-29 10:19:53+00:00,Fix IIDMargin description  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-29 07:54:15+00:00,Retire zobMaterial[]  Use zobrist[] array to compute material key.  Space save of 2KB in L1 cache.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-29 07:49:16+00:00,Change zobMaterial[] index 0 definition  The index at 0 was reserved for no-pieces information. But we don't need that.  This is a prerequisite for next patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-29 07:11:36+00:00,Use Key type instead of Bitboard  They are both 64 bits unsigned integer; but it is correct to use the proper type.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-23 13:53:04+00:00,Revert non-linear threats evaluation  After 999 games at 1+0 Mod vs Orig +148 =712 -139 +3 ELO  The added complexity doesn't seems to pay off and could even scale worst with longer TC. So revert.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-05-01
mcostalba,mcostalba,2010-05-22 18:14:19+00:00,Remove an useless assert in evaluate_passed_pawns()  The tested square comes from a bitboard anded with pos.pieces_of_color(Us); so assert is useless.  Another nitpick report by Marek Kwiatkowski  ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-22 17:42:00+00:00,Account for double pawn push in evaluate_unstoppable_pawns()  One of the most nitpicking patches I have ever seen.  Of course almost no functional change; but added just becasue we are very pedantic ;-)  Spotted by Marek Kwiatkowski  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-22 17:35:00+00:00,Fix StormOpenFileBonus[] bug  It was erroneusly reversed. Bug from Glaurung times. Probably a full re-tuning is needed anyhow.  Spotted and fixed by Ralph Stoesser.  After 999 games almost no change; but modified anyway for documentation reasons.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-22 11:45:05+00:00,Fix a warning on array of size 0 under Windows  And better document new reality.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
zamar,mcostalba,2010-05-22 11:37:19+00:00,Drop completely illogical ei.kingDanger == 0 requirement  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
zamar,mcostalba,2010-05-22 11:37:11+00:00,Always save static value and kingDanger to TT  Around 5% speed-up  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
zamar,mcostalba,2010-05-22 11:37:02+00:00,Drop TTClusterSize from 5 to 4  Very small obvious functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-22 11:01:51+00:00,Add non-linear threats evaluation  Increase threats score according to the number of threats and to the side to move.  Constants have been balanced after ~34k iterations.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-22 10:36:51+00:00,"Revert ""Simple implementation of strong YBWC""  It does not seem to increase anything even with a QUAD; so revert.  After 1000 games with a QUAD Mod - Orig: 500 - 497 (+1 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-05-01
zamar,mcostalba,2010-05-21 22:09:53+00:00,Add some automatic detection for Windows  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
zamar,mcostalba,2010-05-21 05:56:57+00:00,Documentation fix  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
zamar,mcostalba,2010-05-21 05:56:48+00:00,Correct 'prefetch' handling for Makefile  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-20 20:37:37+00:00,Let prefetch to be enabled by default on Windows  When compiling with MSVC we don't use the Makefile so tweak a bit the Makefile to allow to let prefetch in by default so that it works under Windows.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
zamar,mcostalba,2010-05-20 20:23:00+00:00,Small tweaks to install gcc-profile-clean targets  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
zamar,mcostalba,2010-05-20 20:22:51+00:00,Modify source to follow new Makefile  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
zamar,mcostalba,2010-05-20 20:22:42+00:00,Rewrite Makefile  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
mcostalba,mcostalba,2010-05-20 20:17:47+00:00,Simple implementation of strong YBWC  No gain in the worst case of 2 threads; but also no loss and good potential for QUAD or OCTAL machines.  After 922 games at 1+0 with 2 threads  Mod vs Orig +143 =533 -143 +0 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
mcostalba,mcostalba,2010-05-20 16:48:55+00:00,Remove an assert in evaluate_passed_pawns()  We already tested few lines before with:  assert(pos.pawn_is_passed(Us; s));  Spotted by Marek Kwiatkowski.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
mcostalba,mcostalba,2010-05-17 16:32:31+00:00,Indentation fix in middle-game evaluation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-17 05:45:59+00:00,Introduce init_attack_tables() in evaluate()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-05-01
mcostalba,mcostalba,2010-05-16 14:37:42+00:00,Do not consider discovered checks in king safety  Does not help and it slows downs a bit because it is not cheap to get the possible discovered checks out of a position.  After 997 games at 1+0 Mod vs orig +153 =692 -152  +0 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-05-01
mcostalba,mcostalba,2010-05-16 07:56:58+00:00,Fix RootMove::operator<() description  Reported by Melvin Sprague.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-05-01
mcostalba,mcostalba,2010-05-15 23:56:05+00:00,Remove an useless Max() in passed pawns evaluation  There is no reason for that since tr cannot become negative.  Spotted by Ralph Stoesser.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-15 20:44:57+00:00,Threath tuning results  Final values for threath tuning (after ~30k iterations)  Verified to be equivalent with tuning branch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-15 05:51:46+00:00,Add support for gcc-profile  It's now possible to build PGO builds with GCC  Patch from Oystein Johansen  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-14 15:55:35+00:00,Rename OutpostMask[] in AttackSpanMask[]  This is a more standard naming (see chessprogramming wiki) and is more stick to what table is and not what is used for.  Code in pawns.cpp is a bit more readable now; at least for me ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-14 11:59:03+00:00,Micro optimization in evaluate_pawns()  Avoid a double bitcount in test for candidate passed pawn when we don't have any supporting pawn.  Also use outpost_mask() instead of build it up on the fly.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-14 11:08:48+00:00,Introduce evaluate_pawn_storm() to unify redundant code  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-14 11:05:17+00:00,Code style tweaks to pawns.cpp  Also a small speedup.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-14 10:59:25+00:00,Change color argument of square_is_weak()  Pass the color for which the square is to be considered weak; not the opposite.  It is more natural and intuitive in this way.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-13 20:53:56+00:00,Space inflate marsenne  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
mcostalba,mcostalba,2010-05-13 20:53:55+00:00,Another split() tweak session  Function split() doesn't need to return a value; also remove useless 'master' field.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-05-01
zamar,mcostalba,2010-05-12 16:33:56+00:00,Document old test result  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
zamar,mcostalba,2010-05-12 16:33:42+00:00,Remove one hack caused by misunderstanding  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-12 11:30:00+00:00,Fix a possible out of range access in previous patch  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-12 11:17:01+00:00,Retire splitPoint->cpus field  It is redundant with splitPoint->slaves[].  Also move slaves[MAX_THREADS] among the shared data in SplitPoint definition as it should have been already.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-12 06:01:50+00:00,Syncing sp_search() and search()  Small twekas to make the two searches as similar as possible.  Also removed an useless setting of mateKiller in sp_search()  No functional change (tested with FakeSplit)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-11 11:03:32+00:00,Simplify init_safety()  In this for is also ready to be tuned....to be continued ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-05-01
mcostalba,mcostalba,2010-05-11 10:59:50+00:00,Greatly simplify weight_option()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-05-01
mcostalba,mcostalba,2010-05-11 06:06:48+00:00,Small evaluate_passed_pawns() cleanup  Mainly renamed local variables with sensible names.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-05-01
mcostalba,mcostalba,2010-05-11 06:05:31+00:00,Better integration of faked split  We don't need to comment/uncomment code; just set FakeSplit bool to true to enable faked split.  Also reintroduced some asserts and cleaned up a bit.  Tested that with FakeSplit = true we have reproducible finger printing even in SMP.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-05-01
zamar,mcostalba,2010-05-11 06:05:30+00:00,Disable fake-mode  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-05-01
zamar,mcostalba,2010-05-11 06:05:17+00:00,Unite sp_search() and sp_search_pv()  Also introduce a new rule: In sp_search() always must hold: sp->alpha < sp->beta Should fix some rear but very nasty races  To keep everything in sync; search() is also modified to obey this rule. Because this affects only PV-nodes; should have zero meaning to speed.  No functional change in fake mode  Regression test after 854 games Mod vs Orig 433 - 421; no crashes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-05-01
zamar,mcostalba,2010-05-09 22:06:13+00:00,Introduce fake-mode for split  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-05-01
mcostalba,mcostalba,2010-05-09 12:05:21+00:00,Revert to old prefetch detection logic  It was broken on Windows 64bit with MSVC and possibly on other platforms; so revert to old proven one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-05-01
mcostalba,mcostalba,2010-05-09 09:30:50+00:00,Fix an off-by-one bug in ThreatBonus[] table  We need a retuning anyhow.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-05-01
zamar,mcostalba,2010-05-08 22:32:31+00:00,Templatize qsearch  No functional change and 2% speed-up on GCC.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 22:09:40+00:00,Retire mate threat detection from evaluation  Remove a lot of complex; obscure and useless code.  After 999 games at 1+0 Mod vs Orig +162 =673 -164 -1 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 12:36:44+00:00,Add a comment and a FIXME  And fix indentation too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 12:12:46+00:00,Lookup TT for eval also in PV nodes  We don't need to evaluate the position if it is already cached in TT. We already do this in non-PV case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 12:06:55+00:00,Fix an obsoleted descrption comment  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 12:00:07+00:00,Unify Internal iterative deepening  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 11:41:36+00:00,Templetize extension() function  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 11:26:34+00:00,Templetize reduction() functions  No functional or speed change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-08 10:49:55+00:00,Use enum NodeType instead of opaque true/false  Increase readibility.  No functional and speed change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
zamar,mcostalba,2010-05-08 10:48:45+00:00,Unite search_pv() and search()  A lot of redundant code removed: -182 lines of code  No functional and speed change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:23+00:00,Rename AttackWeight[] in KingAttackWeights[]  Also simplify a bit the code removing useless named constants.  No functional change.,True,4,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:23+00:00,Array ThreatBonus[] is initialized at zero by compiler  We don't need to do the job.  No functional change.,True,4,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:22+00:00,Properly indent evaluate_king()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:22+00:00,Rename futilityMargin in kingDanger in EvalInfo  This is what actually is.  A standard naming convention suggests to name a variable with someting resembling _what_ the variable is and not _how_ the variable is used. This normally results in easier to read code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:21+00:00,Simplify some obsolete code in king safety  Now that QueenCheckBonus and friends are always > 0 we can remove a bunch of useless 'if' statements.  No functional change.,True,4,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:21+00:00,"Rename king ""safety"" to king ""danger""  A bigger ""safety"" value is actually a bigger threat for the king; so it is a bigger ""danger""  With this renaming ""Cowardice"" and ""Aggressiveness"" UCI parameters become easier to understand.  It is also easier to understand why the once ""safety"" value (that is a ""danger"") is subtracted from evaluation instead of being added.  No functional change.",True,4,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:20+00:00,Evaluation weights cleanup  Use a Weights[] array instead of named variables to store evaluation weights.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-07 11:04:08+00:00,Set Mate Threat Extension to OnePly  For both PV and non-PV nodes.  After 981 games at 1+0 Mod vs Orig +153 =686 -142 +4 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-05-01
mcostalba,mcostalba,2010-05-05 11:56:54+00:00,Avoid a call to apply_weight() in evaluate_king()  Precompute scores in SafetyTable[] instead of calculate them on the fly.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
zamar,mcostalba,2010-05-05 11:20:39+00:00,Further push the LMR pedal  More aggressive LMR reductions.  Tested at different time controls:  - Tested with 1CPU 1+0; after 3000 games; result was +12 ELO  - Tested this with 4CPU 1+0 and got sth around 5-10 ELO increase  - Last one at long time control;after ~1000 games with 10+0 result is:  Orig - Mod: 491 - 520 (+10 elo)  A testing marathon by Joona for this important change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-05 11:16:16+00:00,A promotion piece cannot be a king or a pawn  Or any other garbage value bigger then QUEEN.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-05 11:16:12+00:00,Do not return from idle_loop() with lock held  Master thread returns from idle_loop() when sp->cpus == 0; but cpus is decremented by slave threads under sp->lock; so it could happen that we return in split(); where we release the split point; with sp->lock still held.  This patch guarantees that sp->lock is released when returning to split().  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-05 11:16:10+00:00,Reverse the logic used to detect prefetch  Explicitly search for x86 architecture instead of excluding the others.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-05 11:15:40+00:00,Allow a static evaluation to overwrite an exsisting entry  The idea here is that if we cut-off after a stand pat the already exsisting TT entry was not usable with current beta; so overwrite anyway.  After 999 games at 1+0 Mod vs Orig +173 =665 -161  + 4 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-05-01
mcostalba,mcostalba,2010-05-02 06:50:19+00:00,Do not refresh TT in qsearch  Almost no change and simplifies a bit the code.  After 961 games at 1+0 Mod vs Orig +156 =650 -146  +4 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-05-01
mcostalba,mcostalba,2010-05-01 04:09:55+00:00,Refresh TT entry after a cut-off to avoid aging  Re-save the same TT entry if value is usable and allow us to cut-off; it means that entry is valuable and we want to keep it fresh updating the 'generation' parameter up to the current value.  Patch suggested by J. Wesley Cleveland and better clarified by Miguel A. Ballicora.  After 999 games at 1+0 64MB hash size Mod vs Orig +167 =677 -155 +4 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-05-01
zamar,mcostalba,2010-04-28 10:01:00+00:00,Fix compile error on GCC  Add missing prototype.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-04-01
mcostalba,mcostalba,2010-04-27 05:17:32+00:00,Endgame's apply() method can be 'const'  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-04-01
mcostalba,mcostalba,2010-04-27 05:09:04+00:00,Remove an obsolete comment  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-04-01
mcostalba,mcostalba,2010-04-26 17:45:28+00:00,Another small material tweak  In this case we avoid to name the 'black' version of the endgame function but use a vector indexed by color instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-04-01
mcostalba,mcostalba,2010-04-26 11:21:22+00:00,Cleanup material distribution detectors  No functional change (verified each function)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-04-01
mcostalba,mcostalba,2010-04-25 09:35:55+00:00,Do not call exit_threads() in Application d'tor  Because exit_threads() references the global object TM; we need to call the function when still inside main(); otherwise; due to undefined global object initialization and destruction we could end up with referencing an already destroyed object.  Actually this should not happen because Application singleton is initialized _only_ after all the other globals due to how Application::initialize() is defined; but this is very tricky C++ and not easy to follow; even for me ;-)  Also rearranged a bit main() code flow.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-25 08:50:27+00:00,Small passed pawns evaluation cleanup  Moved evaluation of unstoppable pawns out of evauation of passed pawns because event frequency is much lower. Added evaluate_unstoppable_pawns() that is called very seldom and contains all the unstoppable pawn logic.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-23 17:52:22+00:00,Simplify a bit futility marging formula  Should be a very minor change; but there is a small functional change because futility_margin() is used in more places then in the pruning formula.  After 999 games at 1+0 Mod vs Orig +167 =678 -154  +5 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-04-01
mcostalba,mcostalba,2010-04-21 19:35:47+00:00,Revert scale factor in pawn evaluation  It simply doesn't seems to work both in direct matches and in balance tuning.  So revert the idea.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-04-01
mcostalba,mcostalba,2010-04-19 11:24:26+00:00,Introduce PawnsQtyTable[] to refine pawn's drawish calculation  Also fix dimension of UnpairedPawnsTable[] to accomodate the case in which we have 8 unpaired pawns; i.e. only one side has pawns; the other side has no pawns.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-04-01
mcostalba,mcostalba,2010-04-19 05:37:07+00:00,First attempt at tweaking UnpairedPawnsTable[] values  Values by Joona.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-04-01
mcostalba,mcostalba,2010-04-19 05:21:13+00:00,Introduce scale factor in pawn evaluation  The idea is to reduce the score if we have many pawns opposing an enemy pawn so that the draw possibility increases.  Just introduced the logic; but no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-04-01
mcostalba,mcostalba,2010-04-18 09:09:12+00:00,Fix candidate passed pawn definition  A pawn is candidate to be passed if doesn't have enemy pawns in just front of him; not also behind !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-18 08:58:57+00:00,Retire Position::pawn_is_passed() and friends  Absolutely no useful at all; just code obfuscation so use real definition instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-18 08:47:31+00:00,Introduce table SquaresInFrontMask[2][64]  It will be used to lookup squares in front of a given square. Same concept of PassedPawnMask[] and OutpostMask[].  Also small tweaks in bitboard.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-18 08:18:49+00:00,Better perft integration in benchmark  Now with:     stockfish bench 128 1 5 default perft  it is possible to get perft 5 results of each position and the first 3 positions correspond to the well known test position in:  http://chessprogramming.wikispaces.com/Perft+Results  This allow to quickly check for perft consistency running the 'bench' command.  No functional change but signature has changed because bench default positions 2 and 3 have changed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-18 07:58:26+00:00,"Space inflate bitboard.cpp  This file; somehow; avoided the ""space inflate"" treatment...until now ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-04-01
mcostalba,mcostalba,2010-04-17 10:24:25+00:00,Convert polyglot.ini to use Linux line ending  Instead of Windows cr/lf  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-17 10:22:40+00:00,"Teach polyglot the new ""Best Book Move"" UCI option  Also turn off log by default as is in UCI case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-04-01
mcostalba,mcostalba,2010-04-17 09:57:37+00:00,Revert saving of null search value in TT  Revert all the patches that introduced the change and more or less fixed the zugzwang issue.  There is a gain against last current version and we can remove a lot of code.  After 979 games at 1+0 on my QUAD Mod vs Orig +152 =688 -139 +5 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-16 04:52:18+00:00,Don't overwrite exsisting TT with null search value  Real search is considered of higher quality then null search one.  This allows to fix the zugzwang issue with a minimal impact on ELO.  Zugzwang verified on position:  8/7P/8/8/K2b4/p7/1k6/1B6 b - -  After 999 games at 1+0 on my QUAD Mod vs Orig(94bb196) +168 =657 -174  -2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-04-01
zamar,mcostalba,2010-04-16 04:47:31+00:00,Prevent the use of nullmove TT value only at verification search  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-04-01
zamar,mcostalba,2010-04-16 04:47:29+00:00,Introduce NullStatus enum  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-04-01
zamar,mcostalba,2010-04-16 04:47:28+00:00,"Revert ""Introduce ""Zugzwang detection"" temporary hack for 1.7.1""  This reverts commit f9d3b48ad0ed62732bb07d4811f4fd17cf088cfe.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2010-04-01
mcostalba,mcostalba,2010-04-16 04:45:30+00:00,"Add ""Best Book Move"" UCI option  Is a boolean option that when set allows Stockfish to select the best book move across the possible ones.  Feature requested by Salvo Spitaleri.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2010-04-01
zamar,mcostalba,2010-04-14 18:19:11+00:00,Fix overflow in init_safety  Also write the code in more clean way  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-04-01
zamar,mcostalba,2010-04-13 19:28:49+00:00,Fix evasion pruning condition  Avoid incorrect mate scores in positions like  BK5/1R4b1/2k1Np2/3p3b/2p3pq/p1rB4/n2n1p2/8 w - -  Thanks for Jouni Uski for reporting the problem  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-04-01
mcostalba,mcostalba,2010-04-11 16:03:03+00:00,Fix some warnings under +w1 HP-UX compile  This is the world's fussiest compiler with +w1  Warnings reported by Richard Lloyd.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-10 19:42:31+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 19:41:10+00:00,Update polyglot.ini  Remove obsolete options and add a few ones.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 15:48:25+00:00,Stockfish 1.7.1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 15:41:40+00:00,"Introduce ""Zugzwang detection"" temporary hack for 1.7.1  Add an UCI option ""Zugzwang detection"" OFF by default that enables correct detection of zugzwang.  This is just to let 1.7.1 be 100% compatible with 1.7 and should be removed after release.  Verified 100% functional equivalent to 1.7  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 10:35:30+00:00,Revert HT detection  Fall back on 1.6.3 behaviour.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 10:16:55+00:00,Revert last patch  It fails in test position:  8/7P/8/8/K2b4/p7/1k6/1B6 b - -  Not clear why but we revert because it fixes the issue.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 09:48:08+00:00,Relax TT condition for zugzwang verified null values  In this case use a normal VALUE_TYPE_LOWER TT type instead of VALUE_TYPE_NS_LO. This allow us to TT cut-off in a bit more nodes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 09:35:29+00:00,"Avoid TT cutoffs at root of null zugzwang verification  This patch fixes an issue with zugzwang well explained by Tord:  ""Assume that a zugzwang position occurs at iteration N; at a search depth d; with d < 6*OnePly. The null move search fails high; and no verification search is done; because the depth is too small. The position gets stored in the transposition table with a good score and a depth of d.  Now; consider what happens when the same position occurs at iteration N+1; this time with a depth of d+OnePly (i.e. one ply deeper than at the previous iteration). Once again; the null move search fails high. The point is that the verification search will also fail high; because of an instant transposition table cutoff caused by the value stored in the TT during the previous iteration.""  With this patch we simply do not allow TT cutoffs at the root node of a null move verification search if the TT value was found by a null search.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-04-01
mcostalba,mcostalba,2010-04-10 09:07:53+00:00,Use a flag in TT to track null search values  Add VALUE_TYPE_NS_LO to enum ValueType and use it when saving in TT a value from a null search.  Currently no action is performed; the next patch will enable the new type.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-04-01
mcostalba,mcostalba,2010-04-09 06:54:00+00:00,Fix a warning under HP-UX ANSI C++  Reported warning is:  warning #2514-D: pointless comparison of unsigned                  integer with a negative constant  Spotted by Richard Lloyd.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-04-01
mcostalba,mcostalba,2010-04-07 11:08:50+00:00,Stockfish 1.7  Signatures are:  ./stockfish bench 128 1 12 default depth 8299338  ./stockfish bench 128 1 13 default depth 15694903  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-04-01
Unknown,Unknown,2010-04-06 08:19:09+00:00,Fix PowerPC and ARM compatibility.,True,1,2010-04-01
Unknown,Unknown,2010-04-05 19:47:28+00:00,Add -mdynamic-no-pic to CFLAGS when compiling with GCC under OS X. Without this flag; the __cpuid() function doesn't compile correctly in 32-bit mode.,True,0,2010-04-01
mcostalba,mcostalba,2010-04-05 19:11:41+00:00,Fix one gcc 4.4 warning  Properly fix previous warning. Patch from Joona.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-04-01
mcostalba,mcostalba,2010-04-05 14:36:06+00:00,Fix a warning in HT_enabled()  Under gcc we have:  warning: dereferencing type-punned pointer will break strict-aliasing rules  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-04-01
mcostalba,mcostalba,2010-04-04 10:23:18+00:00,Store score in TT when null search fails high  Use full depth; not reduced one. This allows to avoid to do a null search when in the same position and at the same or bigger depth the null search failed high.  A very small increase; if any.  After 963 games at 1+0 Mod vs Orig: +158 =657 -147  +4 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-04-01
mcostalba,mcostalba,2010-04-02 10:51:39+00:00,Cleanup pawn storm code  In this form it is even more evident we have some issue there to be fixed sooner then later....  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-04-01
mcostalba,mcostalba,2010-04-02 10:45:12+00:00,Fix a comment in evaluate.cpp  Function name is wrong.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-04-01
mcostalba,mcostalba,2010-03-31 05:43:12+00:00,Change poll() signature  After previous patch we don't need any more the call parameters.  This fixes a couple of warnings under MSVC.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-03-01
Unknown,Unknown,2010-03-30 13:15:01+00:00,"Remove several unnecessary UCI options: All king safety options except ""Aggressiveness"" and ""Cowardice""; and ""UCI_ShowCurrLine"". No functional change compared to the previous version with the default settings.",True,1,2010-03-01
mcostalba,mcostalba,2010-03-28 11:04:41+00:00,Revert LMR reduction based on thinking time  After 500 games at 5+0 on my QUAD (3 days) there is no difference with old version; so probably it is a feature that doesn't scale with search depth.  So revert for now; perhaps we should readd under a different form.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-03-01
mcostalba,mcostalba,2010-03-28 10:53:30+00:00,Small comments tweaks in search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-03-01
mcostalba,mcostalba,2010-03-28 10:53:16+00:00,Sync static null conditions with real one  Almost no functional change; but it seems more in line with the meaning of static null pruning.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-03-01
mcostalba,mcostalba,2010-03-23 22:34:31+00:00,Silence a couple of warnings  MSVC complains about an implicit conversion from double to int.  Also small comments tweaks.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-03-01
zamar,mcostalba,2010-03-23 22:29:23+00:00,Vary reduction aggressiveness as a function of thinking time  In the beginning use milder reduction and at the end be more aggressive.  After 1500 games on Joona's QUAD Mod - Orig: 791 - 720 +16 elo  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-03-01
zamar,mcostalba,2010-03-23 22:25:58+00:00,Base work for different reduction schemes  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-03-01
zamar,mcostalba,2010-03-22 06:27:05+00:00,Do not return unproven mate scores from null move search  Causes very small functional change which is not observable with our usual set of test positions.  However change is observable fx. with following position: 4k3/3r4/5Q2/6K1/8/8/8/8 w - - 0 1 go depth 24  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-03-01
mcostalba,mcostalba,2010-03-21 14:12:44+00:00,Use fail soft in null search  If null search fails high return null value instead of beta.  With TT hash there may be a small advantage for fail-soft since storing slightly better bounds may cause slightly more hash hits.  After 990 games at 1+0 Mod vs Orig +171 =665 -154  +6 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-03-01
mcostalba,mcostalba,2010-03-20 10:59:22+00:00,Remove castleRightsMask[] hack  Array castleRightsMask[] is not static because it can be different for different positions; so let it be a Position member data. This allows to remove tricky hacks to take in account that although it was defined static it could change.  Theoretically now copying a position is a bit slower because we need to copy also an array of 64 integers; but because in split() we don't copy the position anymore; but just keep the pointer; the added burden is not mesurable even in MP case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-20 10:45:04+00:00,Retire Position::fast_copy()  It is never used and could be tricky; so remove it.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-20 10:27:07+00:00,Updated copyright year to 2010  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-17 20:04:56+00:00,Fix POPCNT detection gcc compile error  Also don't use __cpuid() intrinsic for Intel under Linux because gives wrong results when detecting HT; use the gcc version instead. Finally clean up the code.  Error was due to changed __cpuid() signature for gcc compiler.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-03-01
mcostalba,mcostalba,2010-03-17 12:22:28+00:00,Fix __cpuid() compile error with gcc  Use same __cpuid() signature used under Windows.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-03-01
mcostalba,mcostalba,2010-03-14 11:52:58+00:00,Add hyper-threading detection  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-03-01
mcostalba,mcostalba,2010-03-14 11:52:56+00:00,Move __cpuid() definition for gcc in types.h  This will allow to use the function also for other purposes then detecting POPCNT.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-03-01
mcostalba,mcostalba,2010-03-13 10:07:10+00:00,Introduce captured_piece()  It will be used by future patches and also rearranges some half cooked code that mistakenly ended up in master in the past.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-13 10:05:27+00:00,Reduce increase progression of aspiration window  Currently; in case of fail high/low we research with a window increased by 2*AspirationDelta at first attempt; this patch instead makes the research be done with an increase of just AspirationDelta size; in case of a consecutive fail we will widen to 2*AspirationDelta and so on.  After Joona's test: Orig - Mod: 850 - 890  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-13 10:00:12+00:00,Use separated research counters in root_search()  One for failing highs and one for failing lows; this should reduce average window size in case of positions that fail first high and then low (or the contrary).  After ~2000 games on Joona's quad we have:  Mod - Orig: 1012- 975 (+6 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-13 09:59:03+00:00,Group time management globals initialization  Instead to leave uninitialized or scattered in the code as is the case for ExtraSearchTime.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-06 17:17:04+00:00,Highlight that alpha and beta could change in root_search()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-06 16:51:56+00:00,Fix a comment and add an assert in root_search()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-06 16:34:36+00:00,Retire RootMoveNumber and use FirstRootMove instead  It is more clear why we use that global flag.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
zamar,mcostalba,2010-03-06 11:18:03+00:00,Save mateThreat flag in splitPoint and make use of it  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
zamar,mcostalba,2010-03-06 11:17:41+00:00,Document one test result  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
zamar,mcostalba,2010-03-06 11:14:46+00:00,Synchronize root_search() with other search routines  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
zamar,mcostalba,2010-03-06 11:07:37+00:00,Remove obsolete code snippet from root_search  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-06 10:43:31+00:00,Sort again root moves after a fail low  Currently we use original sorting after a fail low to research at wider window. This patch instead sorts the moves according to the last available move's scores.  Strangely no functional change; but should be.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-03-06 10:14:38+00:00,Additional search.cpp cleanup  Changed FutilityMarginsMatrix dimensions to be a power of two so that compiler can produce a faster accessing code.  Introduced print_pv_info() to remove some redundant code in root_search()  Remaining stuff is triviality and documentation tweaks.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-03-01
mcostalba,mcostalba,2010-02-28 22:36:02+00:00,Destroy all locks before to exit  And use platform-independent functions where possible.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-28 22:36:01+00:00,We don't need lpThreadId parameter in CreateThread()  Under Windows we use CreateThread() to setup threads and we pass a pointer to a variable that receives the thread identifier; but this parameter is optional and we don't use it; so remove it.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-28 22:36:01+00:00,Function init_thread() should return an integer under Windows  It happens that NULL is 0; but the conventional meaning is of a zero pointer; so repleace with an explicit 0 integer value.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-28 22:35:51+00:00,Try bad captures before non-captures  Consider sligtly negative captures as good if at low depth and far from beta.  After 999 games at 1+0 Mod vs Orig +169 =694 -136  +11 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-27 16:24:58+00:00,Revert previous patch  It raises an assert under Windows; it is not clear why but it happens that idle_loop() is called with incorrect threadID and the assert triggered is:  assert(threadID >= 0 && threadID < MAX_THREADS);  So revert the patch for now; but we should understand why it fails.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-27 12:26:04+00:00,Do not wait for sleeping in init_threads()  We can't do it with full guarantee anyway because there is always a possible race between the setting of state to THREAD_SLEEPING and actual sleeping.  So just remove the not perfect code to avoid misunderstandings. This reflects what we have done in wake_sleeping_threads() in the previous patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-27 11:01:07+00:00,Remove an incorrect assert in wake_sleeping_threads()  Currently there is no guarantee that threads are sleeping when calling wake_sleeping_threads() because put_threads_to_sleep() returns without waiting for threads to actually sleep.  Assert can be easily triggered calling put_threads_to_sleep() and wake_sleeping_threads() in a tight loop.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
zamar,mcostalba,2010-02-25 23:43:19+00:00,Add some commentary  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:41:40+00:00,Clean up common adjustments  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:41:31+00:00,"Remove ""Threat Depth"" ucioption  This option likely has very low meaning for playing strength and style; so I see no need to keep this configurable  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:39:08+00:00,Cleanup steps 12; 14  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:38:34+00:00,Clean up step 11  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:37:56+00:00,Clean steps 8 and 9.  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:37:09+00:00,Clean razoring code (step 6)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:36:29+00:00,"Synchronize variable listing of 4 different search routines  search() is used as a ""leading star"" and other routines are modified according to it.  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2010-02-01
zamar,mcostalba,2010-02-25 23:35:35+00:00,Remove current line printing in SMP mode  Was broken and fixing would be too messy. Now this option is only activated in single thread mode  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 06:30:19+00:00,Synchronize sp_search() with search() part I  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-25 06:30:09+00:00,Rename staticValue to refinedValue  Just to avoid misunderstandings. True staticValue is available through search stack  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-24 18:56:48+00:00,Fix repetition detection bug  Bug spotted by Jouni Uski and fix suggested by Pablo Vazquez  Also add note that we are not always handling fifty move rule correctly  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:42:24+00:00,Synchronize sp_search_pv() with search_pv()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:41:51+00:00,Synchronize sp_search() with search() part II  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:37:05+00:00,Simplify locking in splitpoint search  One rule: Always lock before picking up a move.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:36:21+00:00,Synchronize search_pv() with search take II  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:34:55+00:00,Synchronize search_pv() with search take I  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:30:02+00:00,Search code documentation; take III  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:26:05+00:00,Search code documentation take II  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:24:10+00:00,Separate razoring from null move  I cannot see connection between the two.  Also add one FIXME for illogical behaviour  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:20:26+00:00,Split search() in independent sections  I don't know if enumerating sections is a good idea; but for me code is more readable this way  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 18:19:52+00:00,Avoid research in case thread has already been asked to stop  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 06:28:50+00:00,Add one assert  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 06:27:45+00:00,Do not wait for threads falling asleep  I cannot see any reason to do this. Even this is not enough to fix theoretical race case on Windows which doesn't seem to cause any problems in practice anyhow  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-24 06:26:28+00:00,Remove unnecessary conditions from if-clauses and replace them with asserts  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
zamar,mcostalba,2010-02-23 06:23:03+00:00,Fix crash in debug mode  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
zamar,mcostalba,2010-02-23 06:22:56+00:00,Fix some races  Resurrect extra check for sleeping in POSIX code. This necessary to prevent ugly races between thread_broadcast and thread_cond_wait.  After thread has woken up; it marks itself as available. Another thread must not do this; because of possible race.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
zamar,mcostalba,2010-02-23 06:22:49+00:00,Fix one assert  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
zamar,mcostalba,2010-02-23 06:22:42+00:00,Fix compile errors in debug mode  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
mcostalba,mcostalba,2010-02-21 15:10:19+00:00,Document struct SplitPoint fields constness  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-21 14:32:39+00:00,Beta is never changed after an sp_search()  So we can use a const value instead of a pointer in split().  Also pass NULL instead of a faked address of alpha in case split is called from a non-PV node.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-21 14:18:35+00:00,Supress make warning on missing .depend file  This is generated by make itself; so the warning is useless.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-21 14:07:53+00:00,"Fix an icc warning  remark #1599: declaration hides variable ""i"" (declared at line 2651)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-02-01
mcostalba,mcostalba,2010-02-21 13:05:38+00:00,Code style triviality in split()  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-21 12:44:36+00:00,Fix a warning with POPCNT and MSVC  Intrinsic __popcnt64() returns an unsigned __int64; cast to an integer and silence the warning.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-20 22:59:47+00:00,"Revert ""Recursive lock""  Joona says that sp_update_pv() does not pass the split point boundaries; so there is no risk to corrupt data from another split point. Also the race on thread_should_stop() is harmless because of this.  So revert the patch and come back to single lock.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-02-01
mcostalba,mcostalba,2010-02-20 22:48:54+00:00,Remove a couple of useless thread_should_stop() calls  We test for it anyway few lines below and even under lock protection.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-20 17:36:07+00:00,"Revert small state change optimization in idle_loop()  Joona says:  1. We should not be afraid of ""AllThreadsShouldExit"" flag. Because when this is set to true we _must_not_ be searching (= All splits must have been undone). And if we are not searching it's impossible that some other thread could give us work to do. So setting state to THREAD_AVAILABLE doesn't do any harm. If you want to add check for this; you could do it like this:   if (threads[threadID].state == THREAD_WORKISWAITING)  { +    assert(!AllThreadsShouldExit)      threads[threadID].state = THREAD_SEARCHING;  2a. If waitSp->cpus == 0; setting state to THREAD_AVAILABLE makes no harm either; because helpful master concept dictates that _only_ our own slave can book us. If we don't have any slaves; noone has the right to book us.  2b. If point (2a) is not correct then your extra check only adds extra race: In smp code checking for waitSp->cpus > 0 is not enough. It's possible that our slave immediately exits and another thread books us as a slave when our state is still THREAD_AVAILABLE. So instead of adding extra level of security we have just introduced extra race.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-02-01
mcostalba,mcostalba,2010-02-20 17:29:53+00:00,Recursive lock all split point's chain  When we found a cut-off then lock all the split point chain; not only current one to avoid races in case two threads running on different split points where one is ancestor then the other; find a beta cut-off at the same time; in this case we want only one to call sp_update_pv().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-20 16:52:09+00:00,Retire per-thread stopRequest flag  This is a per split-point request; not per-thread. When we find a beta cut-off in current thread's split point or in or in some ancestor of the current split point then threads should stop immediately the search and return to idle_loop().  The check is done by thread_should_stop() that now looks only at split point's chain.  No functional change and a good semplification.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-20 15:57:24+00:00,Use state instead of flags to track threads  This is easier to follow and also reduces the points where state changes to mainly idle_loop() and split().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-20 12:38:04+00:00,Rename THREAD_MAX in MAX_THREADS  Also rename idle_thread_exists() in available_thread_exists()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
zamar,mcostalba,2010-02-15 18:15:44+00:00,Search negative SEE moves in qsearch in PV  After 2704 games on slow single core mod - orig: 1381 - 1323  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-02-01
zamar,mcostalba,2010-02-15 18:14:41+00:00,Use zero null move margin when depth < 4 * OnePly  This is because when we are below 4 * OnePly; the null move will directly jump to qsearch and if we are below beta; our opponent is above beta and will get immediate stand pat cut off.  So basically this patch is just optimizing away useless evaluation calls. dbg_hit_on() runs show that this heuristic is correct >99% of cases. Transposition table probably causes some inaccurary?  After 1148 games on QUAD mod-orig: 583 - 565 +5 elo  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-02-01
mcostalba,mcostalba,2010-02-14 15:31:30+00:00,Fix another setting of a flag out of lock protection  In this case is dangerous because in split() we reset the flag to false; but if it was set due to a cut-off higher in the tree we completely miss that and go on with the full search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-14 15:04:53+00:00,Rename flag 'stop' in 'stopRequest'  Instead of other flags this is not a state flag; i.e. does not defines a state for the thread; but a request because after we raise 'stopRequest' flag the corresponding thread is not stopped; but continues to run for a while until it returns from sp_search() in idle_loop.  It is important the name reflects this.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-14 14:59:12+00:00,Reset thread flags to a known state before to exit think()  Among them 'stop' and 'printCurrentLineRequest' could have random value; so reset to a known state before to leave the search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-14 12:43:26+00:00,Fix 'stop' flag changed out of lock protection  This is the first nice effect of previous patch !  Because thread_should_stop() should be declared 'const' we need to remove the setting of 'stop' flag to true that turns out to be a bug because thread_should_stop() is called outside from lock protection while 'stop' flag is a volatile shared variable so cannot be changed when not in lock.  Note that this bugs fires ONLY when we use more then 2 threads; so commonly only in a QUAD or OCTAL machine.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-14 11:53:27+00:00,Introduce ThreadsManager class  Main aim of this patch is to consolidate all the thread related stuff behind a single class interface so to avoid messing with global flags and having thread code scattered among non-thread related stuff.  Another advantage is that now access to thread's variables is more controlled; in particular we can differentiate between read and write accesses by the mean of different interfaces; it is so simpler to understand how a function is related to threads.  Lastly this rewrite is the base for future code consolidations and semplifications that are easier now that we have only one thread's access point.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-13 12:40:23+00:00,Fix compile error under gcc  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-13 11:40:29+00:00,Ensure function boundaries for threads state changes  Ensure threads are sleeping when leaving init_threads() and the newly introduced put_threads_to_sleep().  Also ensure threads are not sleeping when leaving wake_sleeping_threads().  As a side effect we now leave think() with all the threads (but the main one) guaranteed to sleep. So when we enter again in think(); after the opponent next move; we know threads must be sleeping.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-13 11:07:13+00:00,Rename stop_threads() to exit_threads()  More stick to what actually happens.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-13 11:02:34+00:00,Be sure threads are woken in wake_sleeping_threads()  Wait inside wake_sleeping_threads() for the threads to be effectively and reliably woken up.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-13 10:41:34+00:00,Use Thread c'tor to properly init the struct  This is what c'tors are for.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-13 10:28:33+00:00,Add 'sleeping' flag to struct Thread  Will be used by future patches. Also:  - Renamed Idle in AllThreadsShouldSleep  - Explicitly inited AllThreadsShouldExit and AllThreadsShouldSleep   in init_thread() instead of use an anonymous global initialization.  - Rewritten idle_loop() while condition to avoid a 'break' statement  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-12 05:49:16+00:00,"Allow build on HP-UX 11.X  Patch from Richard Lloyd (slightly edited from me); following the list of changes as described by the author:  src/Makefile: - Added PREFIX and BINDIR for the install: rule. - Added a ""make hpux"" line to the help: rule. - Added ""make test""/""make check"" rule that runs the $(PGOBENCH) command. - ""make clean"" now additionally removes core and bench.txt. - Added an hpux: rule. - Added an install: rule to mkdir $(BINDIR); copy $(EXE) to $(BINDIR) and  then strip it. - ""make strip"" now ensures that $(EXE) is built first before trying to  strip it. - Hide errors and output from the g++ command used by the .depend: rule and  then touch .depend in case g++ isn't available. - Hide errors from the ""include .depend"" in case .depend doesn't exist  (e.g. directly after a ""make clean"").  src/book.cpp and src/book.h: - HP-UX's aCC really didn't like the const keywords used for the  Book::file_name() definitions; so they were removed. I checked that this  didn't affect a Linux build and it was still fine.  src/misc.cpp: - HP-UX uses <sys/pstat.h> and pstat_getdynamic() to determine the number of  CPU cores; so added conditional code for that (if pstat_getdynamic() fails;  set the number of cores to 1).  src/tt.cpp: - <xmmintrin.h> and _mm_prefetch() seem highly specific to the Intel x86(_64)  and gcc platforms - neither exist in HP-UX; so conditionally avoid that  code in HP-UX's case. Perhaps some sort of define is needed here  such as -DHAS_MM_PREFETCH that could be #ifdef'ed for instead?  Even after these changes; it's more convenient for HP-UX users to edit the default: rule in the Makefile to run ""$(MAKE) hpux"" before they build stockfish; but that's not a big deal if they're warned about that first (the same applies to all other builds other than the standard ""$(MAKE) gcc"" one).  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2010-02-01
mcostalba,mcostalba,2010-02-10 20:27:44+00:00,Fix a couple of new MSVC 2010 warnings  Compiler complains because in Book we have a d'tor but not copy c'tor and assignement operator (warning C4511 and C4512); note that after adding them (just declared) you now need also default c'tor !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
mcostalba,mcostalba,2010-02-08 09:50:17+00:00,Retire EvalInfo* in SearchStack  It is an hidden bug waiting to fire. The main problem is that ss[ply] is overwritten by search() and qsearch() called from IID and razoring; so that we cannot hold a pointer to a local EvalInfo variable.  For instance if we go razoring then we overwrite the pointer with the address of a variable local to qsearch(); when we return from qsearch() variable goes out of scope and now ss[ply].evalInfo holds a stale pointer !  Because we are not looking for troubles we go through the safe route and we remove it entirely.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-02-01
mcostalba,mcostalba,2010-02-07 12:23:00+00:00,Small code style triviality  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
zamar,mcostalba,2010-02-07 12:09:03+00:00,Implement init_search()  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
zamar,mcostalba,2010-02-07 12:08:56+00:00,Document lookup tables  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
zamar,mcostalba,2010-02-07 12:08:48+00:00,Implement futility move count array  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
zamar,mcostalba,2010-02-07 12:08:40+00:00,Implement futility margins matrix  No functinal change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
mcostalba,mcostalba,2010-02-07 07:55:51+00:00,Use gain table to order non-captures  Gain value is multiplied by 16 to be of comparable magnitudo of negative history; on average.  This patch shows very good results in tactical tests; but started very bad in real games; so I have run two test matches.  After 896 games at 1+0 Mod vs Orig +187 =525 -184 +1 ELO  After 999 games at 1+0 Mod vs Orig +223 =590 -186 +13 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-02-01
zamar,mcostalba,2010-02-06 16:40:01+00:00,Use posKey instead of pos.get_key() after NonPVIID  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
zamar,mcostalba,2010-02-06 16:39:53+00:00,Use opening book when pondering  Otherwise we will not use move given by opening book when we receive 'ponderhit'-command.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-02-01
mcostalba,mcostalba,2010-02-05 17:31:09+00:00,Delay sorting of negative scored non-captures  We can do this only when needed; if we get a cut-off before we skip sorting entirely. This reduces sorting time of about 20%.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
zamar,mcostalba,2010-02-05 17:06:41+00:00,Copy 4 SearchStack items in split()  In search routines we use information from previous ply and init killers two plies ahead.  So for me it seems correct to copy 4 searchstack items in split:  ply - 1; ply; ply + 1; ply + 2  Because a) we do not split at root (ply == 0) b) ply < PLY_MAX and SearchStack size is PLY_MAX_PLUS_2 there should be no risk of underflows or overflows  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
mcostalba,mcostalba,2010-02-05 17:04:08+00:00,Remove sorting optimization for many zeroes  With negative history we don't have anymore a lot of zeroes to score; so just split moves in positives and non-positives sets.  Speed up is almost zero; we cannot test speed directly because node count changed due to reorder; but I have verified sorting is correct. With a profiler I have seen we gain a little in sort_moves() and lose a little in insertion_sort(); so the net effect is almost zero; but code is simpler.  No real change; just move reordering.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
zamar,mcostalba,2010-02-05 14:21:21+00:00,Give FailLow flag more descriptive name  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
zamar,mcostalba,2010-02-05 14:21:12+00:00,Remove Problem variable  It was only used to control StopOnPonderHit variable. Now use FailLow variable instead.  Patch has a minor effect on time management when ponder is on.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
zamar,mcostalba,2010-02-05 14:21:05+00:00,Remove unused failHighPly1 flag  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
zamar,mcostalba,2010-02-05 14:20:57+00:00,Remove unused FailHigh flag  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
zamar,mcostalba,2010-02-05 14:20:47+00:00,Simplify time management  noProblemFound condition is never true. This was verified by running 800 games 1+0 match in 1 CPU computer.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
mcostalba,mcostalba,2010-02-05 07:19:39+00:00,Be sure negative see evasions are at the bottom  Because H.move_ordering_score() can return negative values some negative see moves could be searched before non-negative see moves with negative history.  This patch restores proper ordering.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-02-01
mcostalba,mcostalba,2010-02-04 23:34:17+00:00,Score non-captures only by history  Now that history can go negative and is almost alwyas non zero we have no more reasons to use also psqt term.  After 994 games at 1+0 Mod vs Orig +204 =597 -193 +4 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
zamar,mcostalba,2010-02-04 18:09:51+00:00,Reduction lookup table  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-02-01
mcostalba,mcostalba,2010-02-03 18:33:59+00:00,Convert gains to use a piece-to mapping  Instead of piece-from-to; in this way it is similar to what we already do for history.  Almost no change; but seems a bit simpler in this way.  After 995 games at 1+0 Mod vs Orig +207 =596 -192 +5 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-02-01
mcostalba,mcostalba,2010-02-02 18:01:24+00:00,Fix a compile error from previous patch  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
zamar,mcostalba,2010-02-02 17:58:00+00:00,Fix indentations  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
zamar,mcostalba,2010-02-02 17:57:50+00:00,Retire outdated aspiration search code  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
mcostalba,mcostalba,2010-02-02 07:51:54+00:00,Renamed stand pat as 'static null move pruning'  It seems more standard conformant. Also added a bit of description directly from Tord.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-02-01
mcostalba,mcostalba,2010-02-01 19:06:56+00:00,Save futilityMargin for both colors  It will be needed by future patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-02-01
mcostalba,mcostalba,2010-02-01 18:33:02+00:00,Fix duplicated scaling function  We erroneusly added two times the same scaling function to endgame's map.  Fix detected by valgrind becasue resulted in a memleak of the first added scaling function.  Bug introduced by 30e8f0c9ad6a473 of 13/02/2009  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-02-01
mcostalba,mcostalba,2010-02-01 15:53:10+00:00,Increase TT size limit to 8 GB  We had an overflow due to use an integer for hash size; now we use a size_t as we should; so we can increase to an higher limit.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-02-01
mcostalba,mcostalba,2010-02-01 13:17:37+00:00,Check bounds in set_option_value()  Normally it's up to the GUI to check for option's limits; but we could receive the new value directly from the user by teminal window. So let's check the bounds anyway.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-02-01
mcostalba,mcostalba,2010-01-31 10:14:42+00:00,Some code style triviality in root search  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-31 08:39:32+00:00,Add hardware POPCNT support for gcc  With new target 'make gcc-popcnt' it is now possible to compile with enabled hardware POPCNT support also with gcc. Until now was possible only for Intel and MSVC compilers.  When this instruction is supported by CPU; for instance on Intel i7 or i5 family; produced binary is a bit faster.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-30 09:37:03+00:00,"Revert ""Remove pointless gcc flag when generating dependencies""  This reverts commit c43c5fe9e0c9a99947b940133df2cb2bbb57c3f9.  Produces following build error after 'make clean'; 'make icc' under Mandriva with icc version 11.0  Makefile:306: .depend: No such file or directory In file included from tt.cpp:28: /usr/lib/gcc/i586-manbo-linux-gnu/4.3.2/include/xmmintrin.h:35:3: error: #error ""SSE instruction set not enabled""  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-01-01
mcostalba,mcostalba,2010-01-30 08:59:28+00:00,Retire captures pruning  Futility captures alone does not seem an improvment.  Perhaps is a combination of stand pat + futility that is winning; so revert for now and continue testing starting from a standard base until we find the correct receipe.  After 999 games at 1+0 Mod vs Orig +231 0506 -201  +10 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-01-01
mcostalba,mcostalba,2010-01-29 15:47:04+00:00,Avoid search tree explosion in qsearch  Under some rare cases we can have a search tree explosion due to a perpetual check or to a very long non-capture TT sequence.  This avoids the tree explosion not following TT moves that are not captures or promotions when we are below the 'generate checks' depth.  Idea suggested by Richard Vida.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-01-01
zamar,mcostalba,2010-01-29 10:03:06+00:00,Correct qsearch() TT save  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-01-01
mcostalba,mcostalba,2010-01-28 23:12:03+00:00,Stricter conditions in main search stand pat  Not a biggie but is a reduced pruned patch that doesn't seems to hurt; so it is welcomed ;-)  After 999 games at 1+0 Mod vs Orig +207 =601 -191  +6 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
mcostalba,mcostalba,2010-01-28 11:47:48+00:00,Use float instead of double in reduction parameters  This is faster on 32 bit CPU and precision is enough.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
mcostalba,mcostalba,2010-01-28 11:39:15+00:00,Micro optimize reduction_parameters()  At ply == OnePly (common case) we avoid some useless floating point computation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
mcostalba,mcostalba,2010-01-28 11:34:28+00:00,Avoid to calculate reduction for each move  This is slow because some floating point operation is involved.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-28 10:17:59+00:00,Remove useless variable 'PostFutilityValueMargin'  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-28 10:16:56+00:00,Precalculate FutilityMargins  This way we don't need to copy+paste formula everywhere  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-28 10:15:41+00:00,Use calculate_reduction() function to simplify code  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-28 10:15:18+00:00,Bugfix: reduction was not set to zero in full depth search  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-28 10:14:43+00:00,Implement calculate_reduction function  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-27 19:03:44+00:00,"Standardize set_option function  Previously input like ""setoption name Use Search Log value true "" (note space at the end of the line) didn't work.  Now parse value same way as option name. This way we implicitly left- and right-trim value.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2010-01-01
zamar,mcostalba,2010-01-27 19:00:28+00:00,Do not initialize RootPosition at startup  Initializing high-level object at startup is very dangerous; because low-level snippets are not yet initialized.  For example Position's constructor calls find_checkers() which calls attackers_to() which depends on various global bitboard arrays which are not yet initialized. I think we are lucky not to crash.  RootPosition.from_fen(StartPosition); is called immediately after all initializations are made at uci_main_loop() which is the correct behaviour  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-27 18:59:34+00:00,Aspiration window rewrite  Joona new aspiration window. Main idea is to always research aspiration fail highs/low at the same ply and use much smaller aspiration window than previously.  Testing result is very positive.  1CPU: 953-1149  4CPU: 545 - 656  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-27 18:23:16+00:00,Be sure we exit while loop with lock held  This fixes an hang introduced by recent locking rewrite patch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 17:58:42+00:00,Fix capture pruning  We forgot to update bestValue previously  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-27 16:58:04+00:00,Simplify locking in sp_search and sp_search_pv  Avoid to take the lock two times in a tight sequence; the first in get_next_move() and the second to update sp->moves.  Do all with one lock and so retire the now useless locked version of get_next_move().  Also fix some theorical race due to comparison sp->bestValue < sp->beta is done out of lock protection. Finally fix another (harmless but time waster) race that coudl occur because thread_should_stop() is also called outside of lock protection.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-27 16:57:04+00:00,"Temporary revert ""captures pruning"" due to an assert  In debug run with 2 threads it happens to be following assert after some minutes:  assert(value > -VALUE_INFINITE && value < VALUE_INFINITE);  in search(); line 1615.  I am not able to understand why; anyhow reverted for the moment.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2010-01-01
mcostalba,mcostalba,2010-01-27 10:49:03+00:00,Added some FIXME to track needed tests  This avoid us to forget some very needed tests now that futility has changed in a whole big chunk we need to fine tuning every splitted change.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-27 10:22:38+00:00,Integrate gains table in History  This will be useful to use gains table in move ordering along with history table.  No functional change and big code remove.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-27 10:09:07+00:00,Introduce update_gains() and refactor some code  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 09:14:20+00:00,Fix some silly bugs  SelectiveDepth was ignored  Test results for the whole futility pruning series:  4CPU: Orig - Mod: 959 - 1027 (+12 elo)  1CPU: Orig - Mod: 763 - 830 (+15 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:57:51+00:00,MaxGain based futility pruning for captures  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:57:41+00:00,MaxGain based pruning  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:57:31+00:00,Implement post futility pruning  and prevent futility pruning from pruning castling moves  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:57:24+00:00,Collect MaxGain statistics  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:57:14+00:00,Implement MaxGain table  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:53:30+00:00,Remove pointless gcc flag when generating dependencies  When generating dependencies there is absolutely no point to pass -msse flag to gcc; so remove it.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:52:47+00:00,Remove InfiniteSearch hack  With current search control system; I can see absolutely no reason to classify fixed time search as infinite search.  So remove old dated hack  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
zamar,mcostalba,2010-01-27 08:52:15+00:00,"Remove last use of uip.eof()  Value of uip.eof() should not be trusted. input like ""go infinite searchmoves "" (note space in the end of line) causes problems.  Check the return value of (uip >> token) instead  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2010-01-01
mcostalba,mcostalba,2010-01-26 11:12:11+00:00,Reduce lock contention in sp_search_pv()  In less then 1% of cases value > sp->bestValue; so avoid an useless lock in the common case. This is the same change already applied to sp_search().  Also SplitPoint futilityValue is not volatile because never changes after has been assigned in split()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-01-01
mcostalba,mcostalba,2010-01-25 22:34:21+00:00,Fix a possible crash in thread_is_available()  When we have more then 2 threads then we do an array access with index 'Threads[slave].activeSplitPoints - 1' This should be >= 0 because we tested the variable just few statements before; but because is a shared variable it could be that the 'slave' thread set the value to zero just after we test it; so that when we use the decremented variable for array access we crash.  Bug spotted by Bruno Causse.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 18:59:33+00:00,Small split() cleanup  Unify start loop for master and slave threads. Also guarantee that all the 'stop' flags are set to false before first slave is started; should be no harm because only master thread can reset 'stop' flag of slaves to true; so should be no race but better safe then sorry.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 15:31:56+00:00,Prune evasions with negative SEE in qsearch  Only pure blocking evasions are candidate for pruning.  After 998 games at 1+0  Mod vs Orig +215 =596 -187  +10 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 15:22:50+00:00,Avoid copy a Position to get a move's san notation  In move_to_san() we create by copy a new position just to detect if move gives check. This could be very costly in line_to_san() that calls move_to_san() for every move; so create the position only once and pass a reference to move_to_san()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 14:02:06+00:00,Fix a race in idle_loop() exiting  When pondering threads are put to sleep; but when thinking the threads are parked in idle_loop in a tight polling loop checking for workIsWaiting falg.  So before we set the slave's flag workIsWaiting we have to guarantee that all the slave data is already setup because slave can start in any moment from there.  Rearrange the last loop to fix this race.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 13:12:30+00:00,In split() release the lock before slow search stack copy  Once we have allocated our slave threads and we have removed master from available threads we can safely remove the lock so that the lenghty search stack copy operation will not impact lock contention.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 11:46:08+00:00,Do not copy master position in split()  A pointer is enough because after a split point has been setup master and slaves thread end up calling sp_search() or sp_search_pv() and here a full copy of split point position is done again; note that even master does another copy (of itself) and this is done before any do_move() call so that master Position is never updated between split() and sp_search().  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 11:13:16+00:00,Use fast_copy() instead of full copy in sp_search  And detach splitPoint Position from the master one.  So we duplicate StateInfo only once in split() instead of one for each thread in sp_search  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 11:04:00+00:00,Better document how Position c'tor works  Renamed a bit the functions to be more clear what we actually are doing when we craete a Position object and explained how StateInfo works.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 10:27:32+00:00,Fix a couple of MSVC casting warnings  Also removed some trailing whitespaces and aligned indentation to current standard.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-25 10:11:22+00:00,Copy only the search stack tail in split()  Only the previous; the current and the next ply SearchStack are copied.  This reduces split overhead especially at low depth (high ply) and with many threads.  Possibly no functional change (it is not easy to prove in SMP)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
Unknown,Unknown,2010-01-24 15:09:54+00:00,Merge branch 'master' of ssh://free2.projectlocker.com/sf,True,6,2010-01-01
Unknown,Unknown,2010-01-24 15:09:32+00:00,Fixes a Chess960 bug when playing with more than one search thread.  The init_eval() function corrupted the static array castleRightsMask[] in the Position class; resulting in instant crashes in most Chess960 games. Fixed by repairing the damage directly after the function is called. Also modified the Position::to_fen() function to display castle rights correctly for Chess960 positions; and added sanity checks for uncastled rook files in Position::is_ok().,True,6,2010-01-01
mcostalba,mcostalba,2010-01-24 13:33:51+00:00,Check for thread creation successful completion  It is a good programming practice to verify a system call has indeed succeed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-24 13:30:09+00:00,Fix some races in SMP code  When a search fails high then sp->alpha is increased and slave threads are requested to stop.  So we have to check for a stop request before to start a search otherwise we could end up with sp->alpha >= sp->beta leading to an assert in debug run in search_pv().  This patch fixes the assert and get rid of some of possible races.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
Unknown,Unknown,2010-01-22 12:42:33+00:00,"Make sure we make a move at the end of the search when reaching maximum depth during a ""go movetime ..."" search. This prevents Stockfish from hanging forever after finding a mate in two or three while running a test suite at a level of a few seconds per move.  No functional change when playing games at normal time controls.",True,4,2010-01-01
mcostalba,mcostalba,2010-01-20 23:31:01+00:00,If near beta generate checks at -OnePly  In qsearch() try to get a cutoff with the help of an extra check if we are already very near.  Small increase in actual games but a good result in tactical test sets where this patch makes SF more tactical.  Mod vs Orig +197 =620 -181 +6 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-20 17:43:29+00:00,Retire LMRPVMoves and LMRNonPVMoves  Are no used anymore.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-19 22:30:23+00:00,Fix enum Value issue with gcc 4.4  Louis Zulli reports a miscompile with g++-4.4 from MacPorts.  Namely enum Value is compiled as unsigned instead of signed integer and this yields an issue in score_string() where float(v) is incorrectly casted when Value v is negative.  This patch ensure that compiler choses a signed variable to store a Value.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-01-01
mcostalba,mcostalba,2010-01-19 10:52:13+00:00,Small lnArray[] cleanup  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-01-01
mcostalba,mcostalba,2010-01-19 10:23:00+00:00,Silence some silly MSVC warnings  Value is never used un-initialized; but MSVC is not smart enough to detect itself :-(  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-01-01
mcostalba,mcostalba,2010-01-19 10:22:49+00:00,Order check moves used in qsearch  Use the same scoring system used for evasions. Small if any increase; but should be in at least for completeness.  After 999 games at 1+0 Mod vs Orig +208 =601 -190 +6 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-01-01
mcostalba,mcostalba,2010-01-18 14:47:43+00:00,Avoid an useless evaluate() call  Now that we have position static score we don't need to call evaluate() a second time.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-18 09:03:09+00:00,Allow SearchStack to link an EvalInfo object  This will allow to have wider access to attack information; for instance from MovePicker.  Note that 'eval' field become obsolete; it is kept just becasue when we get a position score from TT we update 'eval' even without an EvalInfo object.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
zamar,mcostalba,2010-01-18 08:11:58+00:00,Make reduction search code SMP-friendly  In sp_search_pv() we do a LMR search using sp->alpha; at the end we detect a fail high with condition (value > sp->alpha); but if another thread has increased sp->alpha during our LMR search we could miss to detect a fail high event becasue value will be equal to old alpha and so smaller then new one.  This patch fixes this SMP-bug and changes also the non SMP versions of the search to keep code style in sync.  Bug spotted by Bruno Causse.  No functional change (for single CPU case)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
zamar,mcostalba,2010-01-17 13:21:14+00:00,Small cleanup of unused code in sp_search  futilityValue is now calculated immediately after staticValue; so remove small bunch of unused code  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-17 12:54:52+00:00,"Fix silly MSVC warning  MSVC raises an ""use of partially uninitialized variable"" for futilityValue and staticValue but this is not rue becasue when !isCheck variables are never used; anyhow silence the warning.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-01-01
mcostalba,mcostalba,2010-01-17 12:24:40+00:00,Initialize futilityMargin in EvalInfo c'tor  This is less prone to bugs because now it's up to the compiler don't forget this important initialization.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
zamar,mcostalba,2010-01-17 12:15:44+00:00,Retire quick_evaluate()  No change in functionality signature  The only functional change is that when we reach PLY_MAX; we now return VALUE_DRAW instead of evaluating position.  But we reach PLY_MAX only when position is dead drawn and transposition table is filled with draw scores; so this shouldn't matter at all.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
zamar,mcostalba,2010-01-17 10:46:40+00:00,Razor at depth one; but do razoring only when not in check  This way razoring is always based on exact evaluation and follows simple formula.  Joona's test results are positive:  32-bit 1CPU:  Mod - Orig: 1073 - 993  64-bit 4CPU:  Mod - Orig: 759 - 721  Functionality Signature: 11448962  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-13 21:10:43+00:00,Allow negative history values  Don't clamp to zero if a move continues to fail.  After 946 games at 1+0 Mod vs Orig +208 =562 -176 +12 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-11 20:18:30+00:00,Store node evaluation in SearchStack  This info will be used by future patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-11 20:17:02+00:00,Decrease NullMoveMargin and adjust razoring  Also retire razoring margins vector and use a simpler formula instead.  Now that we use a more accurate static evaluation try to avoid useless null searches when we are well below beta. And for teh same reason increase a bit the razoring.  After 972 games at 1+0 Mod vs Orig +224 =558 -190 +12 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-11 10:19:12+00:00,"Do not wait when AbortSearch is set  It means we have already received ""stop"" or ""quit"" commands.  This fixes an hang in tactical test in Fritz GUI. Bug introduced by previous bug fix :-(  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2010-01-01
mcostalba,mcostalba,2010-01-10 12:18:43+00:00,"Fix sending of best move during an infinite search  According to UCI standard once engine receives 'go infinite' command it should search until the ""stop"" command and do not exit the search without being told so; even if PLY_MAX has been reached.  Patch is quite invasive because it cleanups some hacks used by fixed depth and fixed nodes modes; mainly during benchmarks.  Bug found by Pascal Georges.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2010-01-01
mcostalba,mcostalba,2010-01-09 15:49:54+00:00,"Fix threads count setting  Was broken after ""Optimal tune for 8 cores"" patch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2010-01-01
mcostalba,mcostalba,2010-01-08 11:58:51+00:00,"Optimal tune for 8 cores  After deep tests Louis Zulli found on his OCTAL machine that best setup for an 8 core CPU is as following  ""Threads"" = 8 ""Minimum Split Depth"" = 6 or 7 (mSD) ""Maximum Number of Threads per Split Point"" = not important (MNTpSP)  Here are testing results:  mSD7 (8 threads) vs mSD4 (8 threads): 291 - 120 - 589 mSD6 vs mSD7: 168 - 188 - 644 mSD6-MNTpSP5 vs mSD6-MNTpSP6: 172 - 172 - 656 SF-7threads vs SF-8threads: 179 - 204 - 617  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2010-01-01
mcostalba,mcostalba,2010-01-08 11:03:47+00:00,Sync qsearch with search  So to have the same layout and be as much similar as possible. The only functional change is that now we try ttMove as first also in PV nodes and at the end we save the ttMove; as it happens in search. This should have almost zero impact on ELO but it seems the correct thing to do.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-01-01
mcostalba,mcostalba,2010-01-08 09:20:35+00:00,Use full evaluation in null search  This is an important design change because we know compute evaluation in each node.  This is a 2.0 type change!  After 977 games at 1+0  Mod vs Orig +236 =538 -202 51.74%  +12 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2010-01-01
zamar,mcostalba,2010-01-07 14:49:48+00:00,Slow down reductions  After testing on Joona QUAD the whole LMR series:  Orig - Mod: 335 - 405 (+33 elo)  Functionality Signature: 12581900  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-07 14:40:04+00:00,Use logarithmic LMR also at root  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
zamar,mcostalba,2010-01-07 14:35:57+00:00,Logarithmic LMR  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
mcostalba,mcostalba,2010-01-07 10:59:32+00:00,Fix 'position ..... moves ' parsing bug  If after 'moves' there is a space then we crash.  The problem is that operator>>() trims whitespaces so that after 'moves' has been extract we are still not at eof() but remaining string contains only spaces. So that the next extarction operation uip >> token ends up with unchanged token value that remains 'moves'; this garbage value is then feeded to RootPosition.do_move() through move_from_string() that does not detect the invalid move value leading to a crash.  This bug is triggered by Shredder 12 interface under Mac that puts a space after 'moves' without any actual move list.  Bug fixed by Justin Blanchard  After reviewing UCI parsing code I spotted other possible weak points due to the fact that we don't test if the last extract operation has been succesful. So I have extended Justing patch to fix the remaining possible holes in uci.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2010-01-01
mcostalba,mcostalba,2010-01-06 09:07:07+00:00,Fix en-passant parsing from fen string  According to standard en-passant is recorded in fen string regardless of whether there is a pawn in position to make an en passant capture.  Instead internally we set ep square only if the pawn can be captured. So teach from_fen() to correctly handle this difference.  Bug reported and fixed by Justin Blanchard.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2010-01-01
mcostalba,mcostalba,2010-01-05 13:57:59+00:00,Introduce refine_eval()  Try to get a position evaluation better then the quick one with the help of the TT table.  This allows the null search conditions and chosen reductions to be more accurate.  After 908 games at 1+0 Mod vs Orig +209 =526 -173 +14 ELO  Functionality Signature: 16627355  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-01-01
mcostalba,mcostalba,2010-01-05 07:09:09+00:00,Increase null reduction at high depths  Linear rule; less aggressive then Dann's one.  It seems it scales well with depth. We will need to verify against weaker engine if it keeps the score.  After 999 games at 1+0 on my Dual Core Mod vs Orig +232 =534 -207  +9 ELO  After 1000 games by Martin Thoresen on his QUAD at 1+0 Mod vs Orig 521/479 52.10%  Functionality Signature: 17655312  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2010-01-01
mcostalba,mcostalba,2010-01-04 16:19:42+00:00,Fix a compile error under gcc  And some warnings on the picky icc.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-04 11:39:13+00:00,Last round of search.cpp cleanup  The most interesting thing is a bit of rewrite and semplification in connected_moves()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2010-01-01
mcostalba,mcostalba,2010-01-03 20:30:46+00:00,Space inflate bottom part of search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-03 14:37:23+00:00,Rename MaxActiveSplitPoints  And move in thread.h togheter with THREAD_MAX  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-03 14:37:17+00:00,Retire 'finished' from MovePicker  It is not useful becasue it is safe to call get_next_move() multiple times when phase == PH_STOP  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-03 14:37:03+00:00,Rename SingleReplyExtension in SingleEvasionExtension  Because that's the correct meaning. Note that also the corresponding UCI option has been renamed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-03 14:36:40+00:00,Small cleanup in search.cpp  Also clarify some comments.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2010-01-01
mcostalba,mcostalba,2010-01-02 09:30:05+00:00,Retire approximateEval field from SplitPoint  It is not used anymore after the futility pruning rewrite in a66f31f12.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2010-01-01
mcostalba,mcostalba,2009-12-31 12:45:57+00:00,Double HistoryMax and reduce aging  After history accounting rewrite in 1.6; a small tweak of history parameters seems positive.  Note that these are not to be considered the optimal values; just a wild guess that proved good.  Finding the optimal values would require a much longer testing time.  After 967 games at 1+0  Mod vs Orig 240 529 198 +15 ELO  Functionality Signature: 21222553  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-12-01
mcostalba,mcostalba,2009-12-30 12:25:22+00:00,Fix a little warning under gcc compiler  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-12-01
mcostalba,mcostalba,2009-12-30 12:25:21+00:00,Optimized bitScanReverse32()  Should be a bit faster then previous one. Hacked by Pascal Georges.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-12-01
mcostalba,mcostalba,2009-12-30 12:25:21+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-12-01
mcostalba,mcostalba,2009-12-30 12:25:20+00:00,Stockfish 1.6.2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-12-01
mcostalba,mcostalba,2009-12-30 12:25:02+00:00,"Better fix for gcc optimization issue  According to the standard; compiler is free to choose the enum type as long as can keep its data. Also cast to short and right shift are implementation defined in case of a signed integer.  Normally all the compilers implement this stuff in the ""usual"" way; but gcc with -O3 and -O2 pushes aggressively the language to its limits to squeeze even the last bit of speed. And this broke our not 100% standard conforming code.  The fix is to rewrite the Score enum and the 16 bits word extracting functions in a way that is 100% standard compliant and with no speed regression on gcc and also on the other compilers.  Verified it works on all compilers and with equivalent functionality.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2009-12-01
mcostalba,mcostalba,2009-12-27 18:45:19+00:00,Score enum should be at least 32 bits  The compiler is allowed to chose the size of an enum variable based on the values it is expected to store. So force the compiler to use at least a 32 bit integer type for the Score.  MSVC and Intel do not change; while gcc under -O3 is affected by this change.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-12-01
mcostalba,mcostalba,2009-12-27 13:07:08+00:00,Revert small pop_1st_bit() optimization  We cannot cast a pointer type to an unrelated pointer type. This is a violation of the strict aliasing rules.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-12-01
mcostalba,mcostalba,2009-12-27 12:54:46+00:00,Remove a bogus assert  It is not clear why is not true; even in single thread case; but as a matter of fact it is not!  So remove it.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-12-01
mcostalba,mcostalba,2009-12-27 12:52:29+00:00,Use THREAD_MAX instead of hardcoded 8  This will allow to change THREAD_MAX value in the future.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-12-01
mcostalba,mcostalba,2009-12-27 07:35:44+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-12-01
mcostalba,mcostalba,2009-12-26 23:44:08+00:00,Set maximum hash table size to 2GB  We cannot allocate more then 2 GB; so let the limit reflect this.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
mcostalba,mcostalba,2009-12-26 18:39:22+00:00,Stockfish 1.6.1  Workaround a gcc optimization bug.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
mcostalba,mcostalba,2009-12-26 18:39:13+00:00,Workaround optimization bug in gcc  Unfortunatly we need to slow down to -O1 to be sure it works always.  Note that sometime it works also with -O2 or even -O3; but user has to try himself.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
mcostalba,mcostalba,2009-12-26 18:39:04+00:00,Fix description of Score enum  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
mcostalba,mcostalba,2009-12-26 18:38:53+00:00,Fix a typo in ReducedStateInfo  It happened to work by accident because Score and Value are both integer.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
mcostalba,mcostalba,2009-12-22 21:11:10+00:00,Stockfish 1.6  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-12-01
mcostalba,mcostalba,2009-12-21 10:44:11+00:00,Score definition gives a compile error under gcc  For enum definitions a parenthesis is required.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-12-01
mcostalba,mcostalba,2009-12-19 16:00:33+00:00,Setup Release Candidate 1  To be used by Jim for testing different compiles settings.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
mcostalba,mcostalba,2009-12-19 09:43:12+00:00,Fix a comment in HistoryMax description  Was obsoleted out some time ago.  Spotted by Justin Blanchard  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
mcostalba,mcostalba,2009-12-18 09:11:50+00:00,"Fix book name is hard coded as book.bin  Instead should be read by the corresponding UCI option ""Book File"".  Bug reported and fixed by Justin Blanchard (Arch Linux)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2009-12-01
mcostalba,mcostalba,2009-12-15 11:07:23+00:00,In non-PV IID don't call evaluate when in check  Was a long standing hidden bug from Glaurung times; triggered only now that we enable IID at non PV nodes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-12-01
mcostalba,mcostalba,2009-12-15 10:52:57+00:00,Fix a compile error in debug mode  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-12-01
mcostalba,mcostalba,2009-12-14 10:44:37+00:00,Enable IID at non-PV nodes  We want to increrase the opportunities of doing an exclusion search.  After 999 games at 1+0 Mod vs Orig +216 =574 -209 50.35%  503.0/999  +2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-12-01
zamar,mcostalba,2009-12-13 09:03:46+00:00,Synchronize pruning rules in search and sp_search  Regression test passed:  Mod - Orig: 365 - 351  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-12-01
mcostalba,mcostalba,2009-12-12 18:23:10+00:00,Remove history counters  Instead decrement history value on failure.  After 999 games at 1+0  Mod vs Orig  +236 =558 -204 51.60% +11 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-12-01
zamar,mcostalba,2009-12-10 18:00:19+00:00,Fix overflow risk in split point  Sizeof of search stack should be PLY_MAX+2 instead of PLY_MAX.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-12-01
zamar,mcostalba,2009-12-09 18:43:12+00:00,Re-enable TT.insert_pv()  This time make sure that valuable TTentries are not overwritten.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-12-01
zamar,mcostalba,2009-12-08 17:13:38+00:00,Disable insert_pv  This way we avoid overwriting valuable TT entries which are needed to calculate exclusion search extension for pv.  Mod - Orig: 483 - 410 (+28 elo!)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-12-01
mcostalba,mcostalba,2009-12-08 10:16:14+00:00,Set IncrementalFutilityMargin to 8  After 999 games we are almost equal (+2 ELO); but we have a good result against Rybka  Rybka 2.3.2a mp 32-bit vs Mod  254.5 - 242.5 +152/-140/=205 51.21% Rybka 2.3.2a mp 32-bit vs Orig 259.5 - 236.5 +151/-128/=217 52.32%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-12-01
zamar,mcostalba,2009-12-03 14:12:50+00:00,Replace 100 with PLY_MAX in ok_to_use_TT  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-12-01
zamar,mcostalba,2009-12-02 18:49:50+00:00,Adjust SingleReplyMargin 0x64 -> 0x20  Mod - Orig: 920 - 890 (+6 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-12-01
mcostalba,mcostalba,2009-12-02 14:13:13+00:00,Don't clear hash at the beginning of a new game  After 900 games at 1+0 Mod vs Orig +217 =480 -196 +8 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-12-01
mcostalba,mcostalba,2009-12-01 10:49:33+00:00,Try to prune also when approximateEval < beta  Now we always try to filter out moves; we will have more wasted evaluation calls; but also more pruned nodes.  After 786 games  Mod vs Orig +196 =413 -177 +8 ELO  Verified also against Rybka it increases score to 50-51%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-12-01
zamar,mcostalba,2009-11-28 20:41:57+00:00,Do not crash if we are asked to search mate or stalemate position.  We might be asked to ponder mate or stalemate position. This being the case; simply wait for stop or ponderhit. Currently we crash.  UCI specs aren't clear on the issue; but it cost nothing to add little check.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-28 16:31:56+00:00,"Fix get_option_value() for strings with spaces  Problem is that  istream& operator>> (istream& is; char* str );  according to C++ documentation ""Ends extraction when the next character is either a valid whitespace or a null character; or if the End-Of-File is reached.""  So if the parameter value is a string with spaces the currently used instruction 'ss >> ret;' copies the chars only up to the first white space and not the whole string.  Use a specialization of get_option_value() to fix this corner case.  Bug reported by xiaozhi  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-11-01
mcostalba,mcostalba,2009-11-28 10:56:08+00:00,Retire FutilityMargins[] array  Now we use a formula to calculate margins on the fly.  Node count has changed because we fixed a leftover when we still where using FutilityMargins to calculate futilityValue in the case that we had the evaluation score in TT.  Also small indentation fix.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-27 20:17:34+00:00,IncrementalFutilityMargin to 4 and increased pruning  Increase pruning at low depths while tone downa bit at higher depths (linearize a bit the logaritmic behaviour)  This goes togheter with IncrementalFutilityMargin decreased to 4 compensate the bigger pruning effect.  Total pruned nodes are more or less the same. We go from 36% of nodes after prune to 37% with this patch.  After 999 games at 1+0 Mod vs Orig +250 =526 -223 +9 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
zamar,mcostalba,2009-11-27 14:56:26+00:00,Drop OnlyMoveExt PV-condition from 8 plies to 6 plies  Orig - Mod: 731 - 750  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-27 14:38:51+00:00,Use move not ttMove in exclude search  If we arrive until the exclusion search call then we know that move == ttMove == tte->move()  But using ttMove in search call while; during excluded search conditions we have used tte->Move()could be a little bit suboptimal. On the other side using tte->move() also in search call is a bit ugly so opt for the third choice that is the most clean becasue from the conditions the reader easily understands that we are talking of ttMove and that we ant to exclude the move we are evaluating in that moment.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-27 10:54:07+00:00,Better document previous patch  If tte->move() != MOVE_NONE then tte->move() == ttMove  What could happen is that we have a ttMove without a tte; or; we have a tte but tte->move() == MOVE_NONE  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-26 12:58:55+00:00,Fix a possible crash in excluded search condition  Due to IID we could have a ttMove and not a tte; or; even if we have a tte they could belong to different searches so that the depth and type of tte don't have the same origin of the ttMove.  To fix this we always use tte entry in excluded search condition and; after an IID; we reprobe the TT table.  No functional change. Apart from possible crash fix.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-11-01
mcostalba,mcostalba,2009-11-25 16:42:52+00:00,Document why we don't use TT to prune in search_pv()  From a Joona' s post on talkchess.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
zamar,mcostalba,2009-11-25 16:42:51+00:00,Revert last Only move extensions tweaks  They gave bad results:  Mod - Orig: 361 - 404  Master is now verified to be functional equivalent with F_63  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-25 16:42:41+00:00,"Speed up sorting of non-captures  Becasue we have a lot of zero scores (around 30% of moves) it is a good idea to do a couple a presorting loops across the move list and shuffle the moves a bit so that with a small effort we end up with 3 groups of moves: positives scores; zero scores and negative scores.  We have two advantages  1) We don't need to sort zero scores  2) Sort two small groups is faster then sort a single big one  Speed up is of about 2%  Because equal scored moves could be reordered in a different way this is not a ""no functional change"" although I have verified the output list is always correctly sorted.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2009-11-01
mcostalba,mcostalba,2009-11-25 13:35:32+00:00,Rewrite messy LSN-code take 2  We already reset loseOnTime flag at the beginning of a new game; so we can simplify a bit the ligic there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
zamar,mcostalba,2009-11-25 11:10:47+00:00,Rewrite messy LSN-code  * New version is documented and logic should be easier to follow * Add extra check to not use LSN with x moves / y seconds time control * New code fixes some rear cases where old code (still) causes program to lose on time at move 1.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
zamar,mcostalba,2009-11-25 10:57:20+00:00,Remove RootMoveList::scan_for_easy_move()  * The function is called only in one place * It must not be called elsewhere * The function call easily replaced with simple one line condition  No functional change (tested with usual set + 2000 random positions)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
zamar,mcostalba,2009-11-25 10:52:09+00:00,Remove 2 FIXMEs from search.cpp  * First one is without any documentation; code is working just fine;   so there seems to be nothing that really should be fixed.  * Second one requesting emergency measures on aspiration fail low   when we are running out of time and we are without good move.   After very long time; I've come to conclusion that this is   impossible to fix; so remove request.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-23 20:12:49+00:00,Document and cleanup new effective-single-reply code  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
zamar,mcostalba,2009-11-23 20:02:34+00:00,Always extend full ply in PV  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
zamar,mcostalba,2009-11-23 20:02:27+00:00,Add mild extension in low depths  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
zamar,mcostalba,2009-11-23 20:01:05+00:00,Fix currentMove bug  Orig vs Master: +15 elo 887.5 - 812.5 (1700 games; finished) [4CPU]  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
zamar,mcostalba,2009-11-23 20:00:13+00:00,Only move extension based on exclusion search  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
zamar,mcostalba,2009-11-23 20:00:05+00:00,Base work for exclusion search  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-23 19:59:27+00:00,Tone down a bit futility parameters  After 999 games at 1+0  Mod vs Orig +239 =542 -218  +7 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-23 19:59:26+00:00,Remove 4*IncrementalFutilityMargin from futilityValue  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-23 19:59:24+00:00,Logaritmic futility margins  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-23 19:59:23+00:00,Exponential futility margins  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-23 19:59:21+00:00,History pruning exponential limit  Use an exponenital law instead of a linear one for history pruning.  This should prune more at low depths and a bit less at high depths.  After 965 games  Mod vs Orig +233 =504 -228 +2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-23 19:59:20+00:00,Incremental Futility Margin  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-22 20:15:13+00:00,In razor qsearch use corrected beta  Correct beta by razor margin when callin qsearch  After 1019 games on Joona's QUAD  Mod - Orig: 524 - 495 (+10 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-11-22 20:12:33+00:00,Code style triviality  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-11-15 08:35:22+00:00,Micro-optimize get_material_info()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-11-14 16:57:50+00:00,Convert pawns evaluation to Score  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-14 16:57:49+00:00,Move game phase computation to MaterialInfo  Game phase is a strictly function of the material combination so its natural place is MaterialInfo; not position.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-14 16:57:34+00:00,Null move dynamic reduction based on value  After 994 games at 1+0  Mod vs Orig +244 =521 -229 50.75%  504.5/994 +5 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-13 09:35:56+00:00,Use a more standard perft UCI interface  Call directly 'perft 6' to search up to depth 6*OnePly instead of the old 'perft depth 6'.  It is more in line to what other engines do. Also a bit of cleanup while there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-13 09:10:22+00:00,Better document king safety evaluation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-13 09:10:21+00:00,Rearrange table layout in evaluate.cpp  A bit more cache friendly.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-13 09:10:21+00:00,Remove dcCandidates data member from SplitPoint  It is no more used now that we have CheckInfo.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-11 21:26:29+00:00,Remove update_checkers()  Now that we have CheckInfo we don't need it anymore.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-11 21:25:08+00:00,Retire evaluate_mobility()  Move the code to the caller and also move mob_area computation out of evaluate_pieces(). It is more clear the code flow and it is also faster.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-11 21:25:07+00:00,Small sort_moves() deobfuscation  Write the for loop in a more idiomatic way; no assembly change and of course no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-11 21:24:30+00:00,Don't futility-prune ttMove  After 933 games Mod vs Orig +219 =505 -208 +4 ELO  A small increase as expected.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-10 17:12:19+00:00,"Propagate ""move is check"" info to do_move()  When false (common case) we avoid to update checkers bitboard that although not so costly slows down a bit this very hot and critical path.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2009-11-01
mcostalba,mcostalba,2009-11-10 16:18:00+00:00,Small update_checkers() cleanup  And is a bit faster too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-11-01
mcostalba,mcostalba,2009-11-10 16:18:00+00:00,Small update to pop_1st_bit()  Avoid a 64 bit load using a pointer. It saves a couple of push/pop instructions so advantage is only theorical; but anyway we use pop_1st_bit() as a reference implementation for 32 bit systems so we keep it more for documentation purposes then for other reasons.  Idea of pointer is of Eric Mullins.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-11-01
mcostalba,mcostalba,2009-11-09 20:48:02+00:00,Small CheckInfo fallout  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-09 20:38:39+00:00,Fully convert move_is_check() internally  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-09 20:02:07+00:00,Convert move_is_check() to take a CheckInfo reference  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-09 19:54:45+00:00,Use CheckInfo to compute dcCandidates  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-09 19:50:02+00:00,Introduce CheckInfo struct  Keeps info used to speed-up move_is_check()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-09 08:00:24+00:00,Fix operator/(Score s; int i)  And remove some useless declarations  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-09 07:45:30+00:00,Don't copy the key in do_move  It will be overwritten anyway.  Also other little small touches that seem to increase speed more then the whole enum Score patch series :-(  Optimization is really a black art.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-09 07:43:34+00:00,Define Score as an enum  Increases performance because now we use one integer for both midgame and endgame scores.  Unfortunatly the latest patches seem to have reduced a bit the speed so at the end we are more or less at the same performance level of the beginning. But this patch series introduced also some code cleanup so it is the main reason we commit anyway.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-11-01
mcostalba,mcostalba,2009-11-07 20:10:49+00:00,Change Score definition to avoid the union  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 18:47:48+00:00,"Revert ""Do not extend at low depths if not in PV""  On Joona's QUAD: Orig - Mod: 414 - 373  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 18:46:36+00:00,"Revert ""IID in pv also when TT move depth is too small""  After almost 900 games we are at -2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 16:08:28+00:00,Last conversions to Score in evaluate.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 14:45:49+00:00,Convert ThreatBonus to Score  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 14:35:11+00:00,Convert RookOn7thBonus and QueenOn7thBonus to be Score  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 14:28:02+00:00,Convert mobility bonus tables to Score  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 13:33:40+00:00,Convert apply_weight() to handle Score  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 13:17:10+00:00,Convert MaterialInfo and PawnInfo to use Score  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 12:14:24+00:00,Introduce PieceSquareTable[16][64]  Instead of MgPieceSquareTable[16][64] and EgPieceSquareTable[16][64]  This allows to fetch mg and eg values from adjacent words in memory.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 11:40:48+00:00,Convert Position to use Score struct  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 11:35:04+00:00,Introduce Score struct  Save mid and end game scores in an union so to operate on both values in one instruction.  This patch just introduces the infrastructure and changes EvalInfo to use a single Score value instead of mgValue and egValue.  Speed is more or less the same because we still don't use unified midgame-endgame tables where the single assignment optimization can prove effective.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-07 09:08:28+00:00,Fix correct name of int64_t type  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-11-01
mcostalba,mcostalba,2009-11-06 16:52:12+00:00,Do not extend at low depths if not in PV  Only check extensions are allowed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-06 16:52:04+00:00,IID in pv also when TT move depth is too small  Try an internal iterative deepening not only when we don't have a TT move but also if search depth is more then 4*OnePly higher then TT move depth.  On some tests it seems that in around 20% of cases ttMove changes !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-06 16:50:38+00:00,Better big-endian support wording in Makefile  Suggested by Joona.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-06 16:50:24+00:00,Enable POPCNT only through Makefile  Also remove some fallback templates that prevent a compile error in case the user runs 'make icc-profile-popcnt' from a non supported machine.  We want to loudly fail in that case instead of silently fallback in a non-popcount compilation.  Updated documentation too.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
zamar,mcostalba,2009-11-06 16:50:15+00:00,Add popcnt-support in Makefile  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-06 13:42:48+00:00,Small code-style touches in movegen.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-06 09:39:33+00:00,Fix a small warning under icc  Variable 'f' in 'for' loop scope hides same named one in outer scope.  Of curse no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-06 09:21:15+00:00,Big-endian compatible pop_1st_bit()  Thanks to Eric Mullins we have now endian friendly pop_1st_bit() and also is removed the need to use -fno-strict-aliasing compiler option with GCC.  Speed is almost as fast; very small difference if any in perft test; so I assume almost no difference in real games.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-06 08:23:47+00:00,Fix a compile error in debug mode  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-11-01
mcostalba,mcostalba,2009-11-05 18:14:17+00:00,Enable PH_TT_MOVES during evasion generation  This allow us to avoid the generation of the evasion moves if we already have a TT move; and in case we have a cut-off we skip evasion generation altoghter.  Node count is changed because now we try TT move _before_ to generate evasions. The search on the TT move alters the piece lists so that when we come back to generate evasions we build the move list with a diferent order and this alters the node count.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-11-01
mcostalba,mcostalba,2009-11-05 13:58:57+00:00,Extend move_is_legal() to work also when in check  This patch is a prerequisite to use TT phase during evasions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-11-01
mcostalba,mcostalba,2009-11-05 13:58:57+00:00,Move locals definitions at the function start  It seems to me function are easier to read now.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-11-01
mcostalba,mcostalba,2009-11-05 06:03:48+00:00,Retire MovePicker::discovered_check_candidates()  It is now no more needed to know dc candidates inside MovePicker; so avoid calculating there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-11-01
mcostalba,mcostalba,2009-11-05 06:03:47+00:00,Rewrite generate_pawn_moves() and simplify evasions  Big cleanup and semplification of pawns evasions that now are pseudo-legal as the remaining moves. This allow us to remove a lot of tricky code.  Verified against perft: no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-11-01
mcostalba,mcostalba,2009-11-05 06:03:36+00:00,Generate pseudo-legal moves in generate_evasions()  This allow a big semplification in move generation that will be committed with the next patch. And makes handling of evasions similar to the other type of moves.  This patch plus the next seem to improve also on the performance side because after 640 games to verify there are no hidden regressions we are at +9 ELO  Verified with perft no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-11-01
mcostalba,mcostalba,2009-11-04 10:18:43+00:00,Optimize generate_evasions()  Generate captures of checking piece and blocking evasions in one go.  Also reduce of one indentation level early returning when we have a double check.  Verified with perft no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-04 10:18:05+00:00,Speed up perft  There is no need to do / undo the move at the last ply  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-04 10:17:42+00:00,Remove SEE optimizations  Don't seem to help; perhaps because we return an approximate SEE score instead of the real negative score so that we have some bad capture or evasion sub-optimal ordering that compensates the speed up.  Anyhow after 999 games at 1+0 Mod vs Orig +240 =514 -245 -2 ELO  So almost no harm to remove and make the code simpler.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-11-01
mcostalba,mcostalba,2009-11-01 20:08:30+00:00,Reorder evasions  Always try ttMove as first. Then try good captures ordered by MVV/LVA; then non-captures if destination square is not under attack; ordered by history value; and at the end bad-captures and non-captures with a negative SEE. This last group is ordered by the SEE score.  After 999 games at 1+0 Mod vs Orig +254 =546 -199 +19 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-11-01 20:06:26+00:00,Another see() shortcut  Because we only generate legal moves we can assume a king cannot be recaptured; so we can safely return immediately with the captured piece score. If the move turns out to be illegal it will be pruned anyhow; independently from SEE value. This gives a good speed up especially now that we SEE-test all the evasions that are always legal and very often are king moves.  Another optimization catches almost 15% of cases; unfortunatly we have already calculated the very expensive attacks; so benefits are not so big anyway.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-11-01 20:06:14+00:00,Shortcut see_sign() when SEE is known negative  This patch cuts 30% of SEE calculations; as a drawback a returned negative value is no more always correct if a shortcut is found.  This could impact move order when based on negative see score as example bad captures and evasions.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-11-01 16:19:04+00:00,Remove castling moves in check generation  Check generation is used only in qsearch and only at Depth(0); castling moves that give check are very rare overall and even almost not exsistent at Depth(0).  So retire this almost never used code that adds a small but consistent slow down in the normal path.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-11-01 16:13:01+00:00,Optimize check generation  Because discovery checks are very rare it is better to handle them all in one go and strip from usual check generation function.  Also rewrite direct checks generation to use piece lists instead of pop_1st_bit()  On perft test we have a +6% of speed up and is verified we generate the same moves; although in a different order.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
zamar,mcostalba,2009-11-01 16:05:00+00:00,Implemented perft  Patch from Joona with extension to benchmark and inclusion of Depth(0) moves generation by me.  Note that to test also qsearch and in particulary checks generations a change in the end condition is needed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-11-01
mcostalba,mcostalba,2009-10-31 08:42:59+00:00,Evaluation threat values after 39089 games  Verified against tuning branch.  After 100 games at 1+0 on Joona QUAD  Mod - Orig: 527.5 - 471.5 (+20 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-10-01
mcostalba,mcostalba,2009-10-25 09:22:03+00:00,Fix build under gcc  Also some warnings squashed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-10-01
mcostalba,mcostalba,2009-10-25 07:21:35+00:00,Add threat evaluation  Give a bonus for each kind of attacked piece. Bonus value is based on the type of attacked piece and the type of attacking one.  Penalize pieces attacked by enemy pawns; also in this case penality value depends on the type of attacked piece.  This patch oboletes as redundant the increased mobility count of the attcked squares that is then removed.  After 956 games at 1+0 Mod vs Orig  +262 =462 -232 51.57%  493.0/956 +11 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-10-01
mcostalba,mcostalba,2009-10-23 10:24:53+00:00,Micro optimize mobility calculation  Take out of mobility loop a constant expression.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-10-01
mcostalba,mcostalba,2009-10-22 06:22:54+00:00,Unify capture and promotion tests  Small code cleanup and a bit faster too.  The only functional change is that in extension in pv node we extend promotions and not only captures when condition met.  This is practically an undetectable change and has no impact on strenght.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-10-01
mcostalba,mcostalba,2009-10-22 06:22:44+00:00,Don't prune TT move in qsearch even if SEE < 0  Even if SEE is negative there is always a good possibility that TT move is a cut move anyway. For instance a lot of BXN exchanges that have negative SEE can very easily be good exchanges.  A nice side effect is a bit reduced frequency of see_sign() calls.  After 643 games at 1+0 Mod vs Orig +174 =327 -142 52.49%  337.5/643 +17 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-10-01
mcostalba,mcostalba,2009-10-22 06:18:41+00:00,Pick best moves one per cycle instead of sorting  When the move list is very small; like captures normally are; it is faster to pick the best move with a linear scan; one per cycle.  This has the added advantage that the picked capture move is very possibly a cut-off move; so that other searches are avoided. For non-captures it is still faster to sort in advance.  Because scan-and-pick alghortim is not stable; node count has changed.  After 885 games at 1+0 Mod vs Orig +196 =510 -179 50.96%  451.0/885  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-10-01
mcostalba,mcostalba,2009-10-19 06:47:18+00:00,Avoid a needless locking in sp_search()  Only in less then 2% of cases we have a new sp->bestValue; so check before to lock and save a costly locking most of the times.  Patch suggested by Joona.  No functional search.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-10-01
zamar,mcostalba,2009-10-18 20:31:19+00:00,Similarize pruning code in search() and sp_search()  Use futility pruning also in split points. Do not use history pruning in split points when getting mated.  After 1000 games on Joona QUAD Orig - Mod: 496 - 504  Added an optimization to avoid a costly lock in the very common case that sp->futilityValue <= sp->bestValue. A test on a dual CPU shows only 114 hits on 23196 events; so avoid a lock in all the other cases.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-10-01
mcostalba,mcostalba,2009-10-17 08:24:58+00:00,Use an homegrown insertion sort instead of std::sort()  It is stable and it is also a bit faster then std::sort() on the tipical small move lists that we need to handle.  Verified to have same functionality of std::stable_sort()  After 999 games at 1+0 Mod vs Orig +240 =534 -225 50.75%  507.0/999  +5 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-10-01
mcostalba,mcostalba,2009-10-15 17:52:21+00:00,Do not prune the move if we are still under mate  If after the first tried 2 + int(depth) moves we still have no any move that takes us out of a mate then do not prune the following move; it is more important to escape mate then speed up search.  This fixes an odd behaviour regarding mates; as example the following diagram is a mate in 4; not in 3 as bogusly reported before this patch.  1B2n3/8/2R5/5p2/3kp1n1/4p3/B3K3/8 w - - bm #4;  The performance impact should be minimal; the increment in searched nodes is less then 0.1 %%  Idea and patch by Joona  After 999 games at 1+0 Mod vs Orig +193 =604 -202  -3 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-10-01
Unknown,Unknown,2009-10-15 10:39:55+00:00,Minor improvement in eval of unstoppable pawns promoting one ply apart.  Marco's new code for evaluating two unstoppable passed pawns where one pawn promotes a single ply before the other tried to detect cases where the pawn that promotes first could immediately capture the pawn that promotes a ply later; but didn't work in cases where the two pawns are on the same file. An example of this is the following position:  8/8/3K4/2P5/2p5/3k4/8/8 w - -  With the new code; such positions are handled correctly.,True,3,2009-10-01
mcostalba,mcostalba,2009-10-12 14:32:50+00:00,Fix a crash when reaching PLY_MAX in a check position  In this case we call evaluate() being in check and this is not allowed.  Bug found testing with reduced PLY_MAX value as suggested by Miguel A. Ballicora on talkchess.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-10-01
mcostalba,mcostalba,2009-10-12 08:09:06+00:00,Add a new rule on promoting pawns in evaluate_passed_pawns()  Add a rule about the situation when one side queens exactly one ply before the other. To avoid difficult (but luckly rare) cases we only handle the case of free paths to queen for both sides.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-10-01
mcostalba,mcostalba,2009-10-12 07:36:35+00:00,Fix x-ray attack from behind in evaluate_passed_pawns()  Fix a condition for x-ray attack of a queen or a rook behind a pawn of us. Previous condition does not check if the enemy slider behind our pawn is really attacking the pawn.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-10-01
mcostalba,mcostalba,2009-10-12 07:36:30+00:00,Small cleanup and in evaluate_passed_pawns()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-10-01
mcostalba,mcostalba,2009-10-12 07:36:23+00:00,"Revert ""Use std::stable_sort() instead of std::sort()""  Unfortunatly std::stable_sort() implementation in gcc is horrendously slow. We have a big performance regression on Linux systems (-20% !)  So revert the commit and wait to fix the issue in a different way; perhaps with an our home grown sorting; that should be comparable in speed with std::sort()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2009-10-01
mcostalba,mcostalba,2009-10-10 14:45:46+00:00,Use std::stable_sort() instead of std::sort()  Standard does not mandate std::sort() to be stable; so we can have; and actually do have different node count on different platforms.  So use the platform independent std::stable_sort() and gain same functionality on any platform (Windows; Unix; Mac OS) and with any compiler (MSVC; gcc or Intel C++).  This sort is teoretically slower; but profiling shows only a very minimal drop in performance; probably due to the fact that the set to sort is very small; mainly only captures and with less frequency non-captures; anyhow we are talking of 30-40 moves in the worst average case. Sorting alghortims are build to work on thousands or even milions of elements. With such small sets performance difference seems not noticable.  After 999 games at 1+0  Mod vs Orig +234 =523 -242 -3 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-10-01
mcostalba,mcostalba,2009-10-10 13:56:56+00:00,Unroll color loops in evaluate_passed_pawns()  Speed increase is on 1.5% on Intel pgo build.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-10-01
mcostalba,mcostalba,2009-10-10 13:56:10+00:00,Use piece_list to scan the pawns in evaluate_pawns()  No functional change and small speed increase.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-10-01
mcostalba,mcostalba,2009-10-10 08:49:41+00:00,Fix pieceList initialization in Position::clear()  We want piece list to be terminated with SQ_NONE.  This happens with all the pieces but the pawns that being 8 make the inner loop exit just before writing the SQ_NONE value at the tail of the list.  This bug was hidden because currently we don't use piece list to scan pawns; but this will change in the future and in any case an initialization should be done correctly for the whole array to avoid subtle bugs in the future.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-10-01
mcostalba,mcostalba,2009-10-09 15:48:45+00:00,Unroll color loops in get_pawn_info  This allow to resolve a lot of addresses at compile time instead of an indirect access at runtime.  Speed up on pgo compile is of 1.3%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-10-01
mcostalba,mcostalba,2009-10-09 10:29:11+00:00,Small micro-optimization in get_pawn_info()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-10-01
mcostalba,mcostalba,2009-10-09 09:11:43+00:00,Restore pliesFromNull counter  It is not equivalent because the check for the 50 moves rule get badly affected.  // Draw by the 50 moves rule? if (st->rule50 > 100 || (st->rule50 == 100 && !is_check()))     return true;  So we _really_ need two counters.  Thanks to Joona and Tord to be patience with a silly guy ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-10-01
mcostalba,mcostalba,2009-10-09 09:04:55+00:00,Fix an off-by-one bug in extract_pv()  In case we reach ply == PLY_MAX we exit the function writing  pv[PLY_MAX] = MOVE_NONE;  And because SearchStack is defined as:  struct SearchStack {   Move pv[PLY_MAX];   Move currentMove;   .....  We end up with the unwanted assignment  SearchStack.currentMove = MOVE_NONE;  Fortunatly this is harmless because currentMove is not used where extarct_pv() is called. But neverthless this is a bug that needs to be fixed.  Thanks to Uri Blass for spotting out this.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-10-01
mcostalba,mcostalba,2009-10-09 03:35:11+00:00,Rewrite previous patch using only one counter  Use only rule50 and retire pliesFromNull.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-10-01
mcostalba,mcostalba,2009-10-09 02:55:10+00:00,Do not claim repetition after null move  Null moves can artificially create a repetition draw where instead there is no one.  So use a second counter to reset history after a null move.  Idea from Joona.  After 999 games at 1+0  Mod vs Orig +238 =553 -208 51.50%  514.5/999  +10 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-10-01
mcostalba,mcostalba,2009-10-08 14:16:47+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-10-01
mcostalba,mcostalba,2009-10-08 14:16:34+00:00,Stockfish 1.5.1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-10-01
mcostalba,mcostalba,2009-10-08 08:09:19+00:00,Fix the polling frequency when pondering  When pondering InfiniteSearch == false but myTime == 0 so that NodesBetweenPolls = 1000 instead of the standard.  The patch fixes the bug and is more robust because checks directly myTime for a non-zero value; without relying on an indirect test (InfiniteSearch in this case).  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-10-01
Unknown,Unknown,2009-10-08 06:55:25+00:00,Use slightly lower polling frequency in the last few seconds.  Instead of checking the time every 100 nodes in the last second; and every 1000 nodes in the last five seconds; Stockfish now checks every 1000 nodes in the last second and every 5000 nodes in the last five seconds.  This was tested in 1036 games at a time control of 40 moves/10 seconds; and no losses on time occured.  Also fixed a bug pointed out by Marco:  In infinite mode; myTime is actually 0; but of course we still don't want to check the time more frequently than the standard once per 30000 nodes in this case.,True,3,2009-10-01
Unknown,Unknown,2009-10-07 16:27:00+00:00,Minor change to time management code; to make sure we don't lose on time at the last move before the time control when there is very little time left.,True,2,2009-10-01
Unknown,Unknown,2009-10-06 10:51:15+00:00,Display fail high/fail low in search log file.,True,1,2009-10-01
mcostalba,mcostalba,2009-10-06 10:15:05+00:00,Fix bogus comment in extract_pv()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-10-01
mcostalba,mcostalba,2009-10-06 10:12:41+00:00,Fix use of an initialized SearchStack  In RootMoveList c'tor we allocate a search stack and then call directly qsearch.  There is called init_node() that clears all the fields of the search stack array that refers to current ply but not the the killer moves.  The killer moves cleared correspond to ply+2.  In id_loop() this is not a problem because killer moves of corresponding ply are cleared anyway few instructions later; but in RootMoveList c'tor we leave them uninitialized.  This patch fixes this very old bug. It comes direclty from Glaurung age.  Bug spotted by Valgrind.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-10-01
mcostalba,mcostalba,2009-10-06 08:18:15+00:00,Remove a redundant assignment in PawnInfo c'tor  We don't need to set key to 0 because clear() already takes care of that.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-10-01
mcostalba,mcostalba,2009-10-06 06:14:12+00:00,Small code reformat in TranspositionTable::extract_pv()  In particular don't use an array of StateInfo; this avoids a possible overflow and is in any case redundant.  Also pass as argument the pv[] array size to avoid a second possible overflow on this one.  Fix suggested by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-10-01
Unknown,Unknown,2009-10-05 14:46:18+00:00,Fixed an embarassing Chess960 bug found by Alexander Schmidt.  It turned out that we used do_move_bb to update the king and rook bitboards when making and unmaking castling moves; which obviously doesn't work in Chess960; where the source and destination squares for the king or rook could be identical.  No functional change in normal chess.,True,0,2009-10-01
mcostalba,mcostalba,2009-10-05 06:15:13+00:00,Restore development version  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-10-01
mcostalba,mcostalba,2009-10-04 06:09:12+00:00,Stockfish 1.5  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-10-01
mcostalba,mcostalba,2009-10-04 05:59:06+00:00,Small touches to increased mobility patch  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-10-01
mcostalba,mcostalba,2009-10-03 09:48:20+00:00,Move a comment where it belongs in SEE  No functional change of course.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-10-01
mcostalba,mcostalba,2009-10-03 09:48:07+00:00,"Don't increase mobility if attacked piece is defended by a pawn  If an enemy piece is defended by a pawn don't give the extra mobility bonus in case we attack it.  Joona says that ""Paralyzing pawn"" is usually worth of nothing.  On Joona QUAD after 964 games: Orig - Patch_2: 191 - 218 - 555 (+ 10 elo)  On my PC after 999 games at 1+0: Mod vs Orig +227 =550 -222 50.25%  502.0/999  +2 ELO  In both cases we tested against the original version (without increased mobility); not against the previous patch that instead seems to fail on Joona QUAD: Orig vs. Prev.Patch: 237 - 217 - 627 (-6 elo)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-10-01
mcostalba,mcostalba,2009-09-30 15:11:45+00:00,Count two times number of attacked pieces in mobility  Now in mobility we count enemy attacked pieces as empty squares.  With this patch we try to give an higher score to positions where the number of attacked pieces is higher.  After 999 games at 1+0  Mod vs Orig +262 =517 -219 52.15% 520.5/998 +15 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-30 15:11:41+00:00,Optimize futilityValue calculation  Avoid calling evaluate() if we already have the score in TT  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-30 15:11:37+00:00,Store pawn attacks in PawnInfo  They are pawn structure invariant so has a sense to store togheter with pawn info instead of recalculating them each time evaluate() is called.  Speed up is around 1%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
Unknown,Unknown,2009-09-30 07:53:29+00:00,Fixed a couple of typos in a comment.  No functional change; of course.,True,2,2009-09-01
mcostalba,mcostalba,2009-09-29 15:48:50+00:00,Fix a MSVC warning in search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
Unknown,Unknown,2009-09-29 11:40:00+00:00,Temporarily removed the unfinished UCI_Elo code in preparation for the release of the public Stockfish 1.5.,True,1,2009-09-01
mcostalba,mcostalba,2009-09-29 09:14:43+00:00,"Print RootMoveList startup scoring  This satisfies a specific user request of 28/8/2009  ""The only issue I have is that during multiPV analysis; the depth 1 best move score is not reported by the engine (reporting for the best move begins at depth 2).  I need it at depth 1 also. Would it be possible to make this modification in future versions? This would be of great help as otherwise I will have to use a lesser engine.  The goal of my project is to calculate the ELO performance in a game and also the ELO rating of individual moves. For this I need depth 1 scores for lower rated performances. I intend to distribute the program for free upon completion.  Thanks; Jack Welbourne""  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2009-09-01
mcostalba,mcostalba,2009-09-28 16:56:04+00:00,Retire compute_weight() in evaluation.cpp  Is used only in weight_option() so inline there. Unroll color loop also for evaluate_space() and finally also some assorted code style fixes.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-09-01
mcostalba,mcostalba,2009-09-28 10:44:12+00:00,Unroll color loops in evaluate  Use templates to manually unroll the loops so that many values could be calculated at compile time or at runtime but with a fast direct memory access instead of an indirect one.  This change gives a speed up of 3.5 % on pgo build !!!  :-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-09-01
mcostalba,mcostalba,2009-09-27 06:58:28+00:00,Change back file mode of misc.cpp  It was erroneusly changed by 6bf22f35 from mode 100644 to 100755.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-26 13:49:04+00:00,Update piece list iteration also in evaluate_pieces()  Move to what we already do in generate_piece_moves()  This simple patch gives a spped up of 1.4% !!  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-09-01
mcostalba,mcostalba,2009-09-26 13:48:58+00:00,Retire faked Windows version of gettimeofday()  Use equivalent Windows function _ftime() instead.  This patch also removes two long standing warnings under MSVC.  No functional change and no change for non-Windows systems.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-09-01
mcostalba,mcostalba,2009-09-24 06:11:39+00:00,Micro optimization of generate_piece_moves()  This patch make the piece list always terminated by SQ_NONE; so that we can use a simpler and faster loop in move generation.  Speedup is about 0.6%.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-09-01
mcostalba,mcostalba,2009-09-23 16:47:03+00:00,Retire kingSquare[] array  It is redundant. Use pieceList[c][KING][0] instead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-23 16:33:24+00:00,Reorder data layout and optimize access patern  With this very simple patch we get a speed boost of 0.8% on my PC !  Sometime we find the most complex tricks to increase speed when instead the best results come from the simplest solutions.  No functional change of course ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-23 16:01:59+00:00,Fix a couple of Intel compiler warnings  And avoid calculating emptySquares for pawns captures case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-23 16:01:30+00:00,Fix a piece_of_color_and_type() / pieceS_of_color_and_type() typo  Bug introduced in 17c51192  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-23 13:23:07+00:00,Rename generate_piece_moves() in generate_piece_evasions()  A better and more specific name. Also a bit of code reshuffle.  Verified No functional change and No performance change for the whole series.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-23 10:18:55+00:00,Retire generate_pawn_captures()  And unify in generate_pawn_noncaptures() renamed generate_pawn_moves()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-23 09:47:11+00:00,Retire generate_pawn_blocking_evasions()  And unify in generate_pawn_noncaptures()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-23 09:06:32+00:00,Standardize generate_pawn_blocking_evasions()  Rewrite in the form normally used in other similar functions like generate_pawn_noncaptures()  This allow an easier reading of the pawn moves generators and simplify a bit the code.  No functional change (tested on more then 100M nodes).  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-09-01
mcostalba,mcostalba,2009-09-22 06:07:19+00:00,Code style and subtle fix in move_is_legal()  A bunch of trivial code style and comment fixes.  Among them there is a real fix for a subtle case involving promotion moves.  We currently check that a pawn push to 8/1th rank must be a promotion; but we don't check the contary; i.e. that a pawn push on a different rank must NOT be a promotion. Note that; funny enough; we perform this control for all the other pieces; but not for the pawns!  This patch fixes this really corner case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-22 06:07:18+00:00,Simplify move legality check for uncommon cases  Remove a bunch of difficult and tricky code to test legality of castle and ep moves and instead use a slower but simpler check against the list of generated legal moves.  Because these moves are very rare the performance impact is small but code semplification is ver big: almost 100 lines of difficult code removed !  No functionality change. No performance change (strangely enough there is no even minimal performance regression in pgo builds but instead a slightly and unexpected increase).  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-22 06:07:18+00:00,Enable functionality of previous patch  Now under-promotion checks are generated.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-22 06:07:17+00:00,When generating checks add possibly under-promotions  In qsearch at depth 0 we generate only captures and checks. Queen promotion moves are generated among the captures; but under-promotion moves (both captures and non-captures) are never generated even if they could give a discovery check.  This patch fixes this limitation extending generate_pawn_noncaptures() to generate also check moves when required.  Apart for adding the (rare) case of an under-promotion that gives discovery check; the patch is also a good cleanup because removes generate_pawn_checks() altoghter.  This patch does the code clean-up but not enables the functional change so to allow an easier debug.  No functional change and no performance change (actually a very very small speed increase).  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-22 06:07:16+00:00,Fix a bug in generate_piece_checks()  We are generating also king moves that give check !  Of course these moves are illegal so are in any case filtered out in MovePicker. Neverthless we should avoid to generate them.  Also simplify a bit the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-22 06:07:16+00:00,Small micro optimization in generate_evasions()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-22 06:06:52+00:00,Change evaluation GrainSize from 4 to 8  Idea from Joona.  After 999 games at 1+0 on my Intel Core 2 Duo Orig - Mod: +215 =538 -226 (+11 ELO)  On Joona QUAD after 845 games at 1+0 Orig - Mod: 151 - 181 - 513 (+13 elo)  So it seems a good change !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-20 19:05:40+00:00,Save static evaluation also for failed low nodes  When a node fails low and bestValue is still equal to the original static node evaluation; then save this in TT along with usual info.  This will allow us to avoid a future costly evaluation() call.  This patch extends to failed low nodes what we already do for failed high ones.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 18:39:54+00:00,Revert evaluation drift  Still not clear if it helps and; especially; how it helps. So revert for now to avoid any influence on future feature now under test.  With this patch we come back to be functional equivalent to patch e33c94883 F_53.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 18:32:53+00:00,Evaluation drift: add always 7 instead of ply  After 828 games at 1+0  Mod vs Orig +191 =447 -190 50.06%  414.5/828  So almost no difference. Patch is committed more for documentation purposes then for other reasons.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 13:55:28+00:00,Rename piece_attacks_from() in attacks_from()  It is in line with attackers_to() and is shorter and piece is already redundant because is passed as template parameter anyway.  Integrate also pawn_attacks_from() in the attacks_from() family so to have an uniform attack info API.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 10:01:56+00:00,Remove undefined pinned_pieces(Color c; Bitboard& p)  It was added in revision 5f142ec2 but never used.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 09:47:59+00:00,Retire attackers_to(Square s; Color c)  Use the definition in the few places where is needed.  As a nice side effect there is also an optimization in generate_evasions() where the bitboard of enemy pieces is computed only once and out of a tight loop.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 09:26:54+00:00,Rename piece_attacks() in piece_attacks_from()  It is a bit longer but much easier to understand especially for people new to the sources. I remember it was not trivial for me to understand the returned attack bitboard refers to attacks launched from the given square and not attacking the given square.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 09:12:56+00:00,Cleanup piece_attacks_square() functions  Most of them are not required to be public and are used in one place only so remove them and use its definitions.  Also rename piece_attacks_square() in piece_attacks() to be aligned to the current naming policy.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 08:31:48+00:00,Rename attacks_to() in attackers_to()  These functions return bitboard of attacking pieces; not the attacks themselfs so reflect this in the name.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 08:09:27+00:00,Change pawn_attacks() API  Instead of pawn_attacks(Color c; Square s) define as pawn_attacks(Square s; Color c) to be more aligned to the others attack info functions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 07:48:10+00:00,Clean up API for attack information  Remove undefined functions sliding_attacks() and ray_attacks() and retire square_is_attacked(); use the corresponding definition instead. It is more clear that we are computing full attack info for the given square.  Alos fix some obsolete comments in move generation functions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-20 06:32:00+00:00,Move kingSquare[] array to StateInfo  This avoids to reverting back when undoing the move.  No functional change. No performance change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-19 11:52:57+00:00,Don't compensate TT for evaluation drift  It seems that it works better without compensation of drifted value when saving static evaluation in TT.  After 818 games at 1+0  Mod vs Orig +217 =429 -172 52.75%  431.5/818  +19 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-09-01
mcostalba,mcostalba,2009-09-17 13:18:44+00:00,Use WIN32_LEAN_AND_MEAN in lock.h  This avoids inclusion of a bunch of not very commonly used headers from windows.h  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-09-01
zamar,mcostalba,2009-09-17 13:16:16+00:00,Make static value saved in TT independent from ply  After 963 games at 1+0  Mod vs Orig +246 =511 -206 52.08%  501.0/962  +14 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-09-01
mcostalba,mcostalba,2009-09-15 08:04:16+00:00,Evaluation drift  Increase evaluation score with ply.  After 940 games at 1+0  Mod vs Orig +247 =487 -206  +15 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-09-01
mcostalba,mcostalba,2009-09-13 15:13:49+00:00,Fix semantic of piece_attacks<PAWN>  Return the bitboard with the pawn attacks for both colors so to be aligned to the meaning of the others piece_attacks<Piece> templates.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-13 10:35:48+00:00,Indirectly prefetch board[from]  One of the most time critical functions is move_is_check() and in particular the call to type_of_piece_on(from) in the switch statement.  This call lookups in board[] array and can be slow if board[from] is not already cached. Few instructions before in the execution stream; we check the move for legality with pl_move_is_legal().  This patch changes pl_move_is_legal() to use type_of_piece_on(from) for checking for a king move so that board[from] is automatically cached in L1 and ready to be used by the near follower move_is_check()  Another advantage is that the call to king_square(us) in pl_move_is_legal() is avoided most of the times.  Speed up of this nice and tricky patch is 0.7% !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-09-01
mcostalba,mcostalba,2009-09-04 07:21:07+00:00,Retire piece_is_slider(PieceType pt)  Is not used in any part of the sources.  No functional change; of course ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-09-01
mcostalba,mcostalba,2009-09-04 07:21:06+00:00,Second take at unifying bitboard representation access  This patch is built on Tord idea to use functions instead of templates to access position's bitboards. This has the added advantage that we don't need fallback functions for cases where the piece type or the color is a variable and not a constant.  Also added Joona suggestion to workaround request for two types of pieces like bishop_and_queens() and rook_and_queens().  No functionality or performance change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-09-01
mcostalba,mcostalba,2009-09-04 07:21:05+00:00,Templetize functions to get pieces by type  Use a single template to get bitboard representation of the position given the type of piece as a constant.  This removes almost 80 lines of code and introduces an uniform notation to be used for querying for piece type.  No functional change and no performance change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-09-01
mcostalba,mcostalba,2009-09-04 07:21:04+00:00,Set LMRPVMoves to 10 instead of 14  After 934 games at 1+0  Mod vs Orig +228 =493 -213 50.80%  474.5/934   +6 ELO  So it seems not negative and there is also the added benefit to unify LMRPVMoves use in search_pv() and in root list.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-09-01
mcostalba,mcostalba,2009-09-04 07:21:02+00:00,Fix poly values mismerge  I managed to completely mismerge correct values for QuadraticCoefficientsOppositeColor table :-(  Now it correspond to tuning branch for real.  After 999 games at 1+0  Mod vs Orig +247 =512 -240 50.35%  503.0/999  +2 ELO  So almost no change; but the new values comes from the same tuning session of the others; so has more sense to use these ones.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-09-01
Unknown,Unknown,2009-09-02 07:58:15+00:00,Bug fix for discovered checks in connected_moves().  Because of a hard-to-spot single-character bug in connected_moves(); the discovered check code had no effect whatsoever. The condition in the if (...) statement at the beginning of the code would always return false.  Thanks to Edsel Apostol for pointing out this bug!,True,2,2009-09-01
mcostalba,mcostalba,2009-08-31 14:23:04+00:00,Retire pieces_of_color_and_type()  It is used mainly in a bunch of inline oneliners just below its definition. So substitute it with the explicit definition and avoid information hiding.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-31 13:32:31+00:00,MovePicker: rename number_of_moves() in number_of_evasions()  It is more clear that only in that case the move number is correct; otherwise is only a partial quantity: the number of moves of that phase.  In case of PH_EVASIONS instead we have only one phase.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-31 10:33:44+00:00,Use pointers instead of array indices also for badCaptures  To have uniformity with moves array handling.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-31 09:02:28+00:00,Document index[] and pieceList[] are not invariants  Array index[] and pieceList[] are not guaranteed to be invariant to a do_move() + undo_move() sequence when a capture move is involved.  The reason is that the captured piece is removed form the list and substituted with the last one in do_move() while in undo_move() is added again but at the end of the list.  Because index[] and pieceList[] are used in move generation to scan the pieces it means that moves will be generated in a different order before and after a do_move() + undo_move() sequence as; for instance; the one in Position::has_mate_threat()  After latest patches; move generation could now be invoked also by MovePicker c'tor and this explains why order of picked moves is different if MovePicker object is istantiated before or after a Position::has_mate_threat() call.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-30 19:10:09+00:00,Workaround a bug in Position::has_mate_threat()  It seems that pos.has_mate_threat() changes the position !  So that calling MovePicker c'tor before or after the has_mate_threat() call changes the things !  Bug was unhidden by previous patch that makes MovePicker c'tor to generate; score and sort good captures under some circumstances.  Because scoring the captures is position dependent it seems that the moves returned by MovePicker are different when c'tor is called before has_mate_threat()  Of course this is only a workaround because the real bug is still hidden :-(  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-30 19:10:09+00:00,Skip TT_MOVES phase when possible  If we don't have tt moves to search skip the useless loop associated with TT_MOVES phase.  Another 1% speed boost that brings this series to a +6.2% against original revision 595a90df  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-30 19:10:08+00:00,Movepicker: take move's loop out of switch statement  This not only cleans up the code but gives another speed boost of 1.8%  From revision 595a90dfd0 we have increased pgo compiled binary speed of a whopping +5.2% without any functional change !!  This is really awsome considering that we have also cut line count by 25 lines.  Sometime we spend days for getting an extra 1% from move generation while instead the biggest optimizations come from anonymous and apparently dull parts of the code.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-30 19:09:58+00:00,"Revert ""null move reorder"" series  Does not seem to improve on the standard; latest results from Joona after 2040 games are negative:  Orig - Mod: 454 - 424 - 1162  And is more or less the same I got few days ago.  So revert for now.  Verified same functionality of 595a90dfd  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2009-08-01
mcostalba,mcostalba,2009-08-29 18:51:00+00:00,Convert handling of tt moves and killers to standard form  Use the same way of loop along the move list used for the others move kinds so to be consistent in get_next_move()  And a bit of the usual clean up too; but just a bit.  It is even a bit (+0.3%) faster now. ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-29 06:17:09+00:00,Try null move before captures  Always after TT move but before captures.  This seems a better setup against version before this patch.  After 999 games at 1+0  Mod - Orig +252 =527 -220 +11 ELO  Unfortunatly it does not seems to improve on the standard version; with null move outside of movepicker (595a90df) with the latest speed-up patches added in.  After 999 games at 1+0  Mod - Standard +244 =506 -249 -2 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-29 05:48:31+00:00,Use pointers instead of array indices in MovePicker  This avoids calculating the array entry position at each access and gives another boost of almost 1%.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-27 18:56:26+00:00,Change the flow in wich moves are generated and picked  In MovePicker we get the next move with pick_move_from_list(); then check if the return value is equal to MOVE_NONE and in this case we update the state to the new phase.  This patch reorders the flow so that now from pick_move_from_list() renamed get_next_move() we directly call go_next_phase() to generate and sort the next bunch of moves when there are no more move to try. This avoids to always check for pick_move_from_list() returned value and the flow is more linear and natural.  Also use a local variable instead of a pointer dereferencing in a time critical switch statement in get_next_move()  With this patch alone we have an incredible speed up of 3.2% !!!  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-08-01
mcostalba,mcostalba,2009-08-26 15:59:58+00:00,Disable again null move at depth == OnePly  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-08-01
zamar,mcostalba,2009-08-26 15:30:39+00:00,Use special null move technique in low depth.  Try good captures before null move when depth < 3 * OnePly. Use this kind of null move also in Depth == OnePly.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-08-01
zamar,mcostalba,2009-08-26 15:30:35+00:00,Use nullMove only through MovePicker.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-08-01
zamar,mcostalba,2009-08-26 15:29:18+00:00,Add Null move support to MovePicker.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-08-01
zamar,mcostalba,2009-08-26 14:42:58+00:00,Create useNullMove local variable  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-08-01
mcostalba,mcostalba,2009-08-26 14:38:47+00:00,Clean killers handling in movepicker  Original patch from Joona with added optimizations by me.  Great cleanup of MovePicker with speed improvment of 1%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-08-01
mcostalba,mcostalba,2009-08-25 14:11:05+00:00,Micro-optimze extension()  Explicitly write the conditions for pawn to 7th and passed pawn instead of wrapping in redundant helpers.  Also retire the now unused move_is_pawn_push_to_7th() and the never used move_was_passed_pawn_push() and move_is_deep_pawn_push()  Function extension() is so time critical that this simple patch speeds up the pgo compile of 0.5% and it is also more clear what actually happens there.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-08-01
mcostalba,mcostalba,2009-08-23 17:57:11+00:00,Merge branch 'master' of git-Stockfish@free2.projectlocker.com:sf,True,6,2009-08-01
mcostalba,mcostalba,2009-08-23 17:55:07+00:00,Remove a local variable from pop_1st_bit()  Remove the 'b' uint32_t local variable. Optimized assembly is more or less the same (one 'mov' instruction less); but now it is written in a way more similar to the final assembly flow so it should be easier for compiler to optimize.  Also guarantee that BitTable[] is always aligned.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-23 17:51:01+00:00,Poly ampli+bias values after 73831 games  Verified correct against tuning branch.  After 999 games at 1+0  Mod vs Orig +257 =510 -232 51.20%  +9 ELO  Very small increase but an increase anyway !  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
Unknown,Unknown,2009-08-21 08:50:34+00:00,Added a few new targets to the Makefile for OS X with icpc.  The following new targets were added:    * osx-icc32: 32-bit x86 compiled with icpc.    * osx-icc64: 64-bit x86 compiled with icpc.    * osx-icc32-profile: 32-bit x86 compiled with icpc and pgo.    * osx-icc64-profile: 64-bit x86 compiled with icpc and pgo.,True,4,2009-08-01
mcostalba,mcostalba,2009-08-20 16:48:52+00:00,"Fix some asserts raised by is_ok()  There were two asserts.  The first was raised because is_ok() was called at the beginning of do_castle_move() and this is wrong after the last code reformatting because at that point the state is already modified by the caller do_move().  The second; raised by debugIncrementalEval; was due to a rounding error in compute_value() that occurs because TempoValueEndgame was updated in an odd number by patch  ""Merge Joona Kiiski evaluation tweaks"" (3ed603cd) of 13/3/2009  This line in compute_value() is the guilty one:  result += (side_to_move() == WHITE)? TempoValue / 2 : -TempoValue / 2;  The fix is to increment TempoValueEndgame so to be even.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2009-08-01
Unknown,Unknown,2009-08-20 14:54:20+00:00,Fixed incorrect material key update when making promotion moves.,True,3,2009-08-01
mcostalba,mcostalba,2009-08-18 20:21:28+00:00,More use of memset() in Position::clear()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-08-01
mcostalba,mcostalba,2009-08-18 07:58:19+00:00,Little do_move() micro optimizations  Also a few remaining style touches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-08-01
mcostalba,mcostalba,2009-08-17 22:15:35+00:00,Better clarify how pieceList[] and index[] work  Rearrange the code a bit to be more self-documenting.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-17 14:09:20+00:00,Unify patch series summary  This patch seems bigger then what actually is.  It just moves some code around and adds a bit of coding style fixes to do_move() and undo_move() so to have uniformity of naming in both functions.  The diffstat for the whole patch series is  239 insertions(+); 426 deletions(-)  And final MSVC pgo build is even a bit faster:  Before 448.051 nodes/sec  After 453.810  nodes/sec (+1.3%)  No functional change (tested on more then 100M of nodes)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-17 13:48:45+00:00,Unify undo_ep_move(m)  Integrate undo_ep_move in undo_move() this reduces line count and code readibility.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-17 13:48:33+00:00,Unify undo_promotion_move()  Integrate do_ep_move in undo_move() this reduces line count and code readibility.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-17 13:48:20+00:00,Unify do_promotion_move()  Integrate do_promotion_move() in do_move() this reduces line count and code readibility.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-17 13:47:12+00:00,Unify do_ep_move()  Integrate do_ep_move in do_move() this reduces line count and code readibility.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-15 15:09:10+00:00,L1/L2 friendly PhaseTable[]  In Movepicker c'tor we access during initialization one of MainSearchPhaseIndex..QsearchWithoutChecksPhaseIndex globals.  Postpone definition of PhaseTable[] just after them so that when PhaseTable[] will be accessed later in get_next_move() it will be already present in L1/L2.  It works like an implicit prefetching of PhaseTable[].  Also shrink PhaseTable[] to fit an L1 cache line of 16 bytes using uint8_t instead of int.  This apparentely innocuous patch gives an astonish speed up of 1.6% under MSVC 2010 beta; pgo optimized !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-14 11:47:49+00:00,Use optimized pop_1st_bit() under Windows 64 with icc  Intel compiler can handle this code even under Windows.  So lift the costrain.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-08-01
mcostalba,mcostalba,2009-08-14 07:19:55+00:00,Better naming and document some endgame functions  In particular the generic scaling functions.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-08-01
mcostalba,mcostalba,2009-08-14 07:13:42+00:00,Finally fix prefetch on Linux  It was due to a missing -msse compiler option !  Without this option the CPU silently discards prefetcht2 instructions during execution.  Also added a (gcc documented) hack to prevent Intel compiler to optimize away the prefetches.  Special thanks to Heinz for testing and suggesting improvments. And for Jim for testing icc on Windows.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-08-01
mcostalba,mcostalba,2009-08-14 07:13:13+00:00,Reuse 5 slots instead of 4  But this time with the guarantee of an always aligned access so that prefetching is not adversely impacted.  On Joona PC 1+0; 64Mb hash:  Orig - Mod: 174 - 237 - 359  Instead after 1000 games at 1+0 with 128MB hash size we are at + 1 ELO (just 4 games of difference).  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-08-01
mcostalba,mcostalba,2009-08-10 21:35:08+00:00,Double prefetch on Windows  After fixing the cpu frequency with RightMark tool I was able to test speed all the different prefetch combinations.  Here the results:  OS Windows Vista 32bit; MSVC compile CPU Intecl Core 2 Duo T5220 1.55 GHz bench on depth 12; 1 thread; 26552844 nodes searched results in nodes/sec  no-prefetch 402486; 402005; 402767; 401439; 403060  single prefetch (aligned 64) 410145; 409159; 408078; 410443; 409652  double prefetch (aligned 64) 0+32 414739; 411238; 413937; 414641; 413834  double prefetch (aligned 64) 0+64 413537; 414337; 413537; 414842; 414240  And now also some crazy stuff:  single prefetch (aligned 128) 410145; 407395; 406230; 410050; 409949  double prefetch (aligned 64) 0+0 409753; 410044; 409456  single prefetch (aligned 64) +32 408379; 408272; 406809  single prefetch (aligned 64) +64 408279; 409059; 407395  So it seems the best is a double prefetch at the addres + 32 or +64; I will choose the second one because it seems more natural to me.  It is still a mystery why it doesn't work under Linux :-(  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-10 12:49:12+00:00,Avoid Intel compiler optimizes away prefetching  Without this hack Intel compiler happily optimizes away the gcc builtin call.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-10 12:49:00+00:00,Use aligned prefetch address  Prefetch always form a chache line boundary. It seems that if prefetch address is not cache line aligned then performance is adversely impacted.  Hopefully we will resuse that 32 bits of padding for something useful in the future.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-10 12:47:39+00:00,Remove old BishopPairBonus constants  Now that we have poly imbalance these ones are no more used.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-10 00:42:35+00:00,Enable prefetch also for gcc  This fix a compile error under Linux with gcc when there aren't the intel dev libraries.  Also simplify the previous patch moving TT definition from search.cpp to tt.cpp so to avoid using passing a pointer to TT to the current position.  Finally simplify do_move(); now we miss a prefetch in the rare case of setting an en-passant square but code is much cleaner and performance penalty is almost zero.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-08-01
mcostalba,mcostalba,2009-08-09 15:45:37+00:00,Try to prefetch as soon as position key is ready  Move prefetching code inside do_move() so to allow a very early prefetching and to put as many instructions as possible between prefetching and following retrieve().  With this patch retrieve() times are cutted of another 25%  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-09 13:18:15+00:00,Add TT prefetching support  TT.retrieve() is the most time consuming function because almost always involves a very slow RAM access.  TT table is so big that is never cached. This patch prefetches TT data just after a move is done; so that subsequent TT.retrieve will be very  fast.  Profiling with VTune shows that TT:retrieve() times are almost cutted in half !  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-09 03:42:26+00:00,Use 5 TTEntry slots instead of 4  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-09 03:42:07+00:00,Use 32 bit key in TT  Shrink key to 32 bits instead of 64. To still avoid collisions use the high 32 bits of position key as the TT key and the low 32 bits to retrieve the correct cluster index in the table.  With this patch size og TTentry shrinks to 96 bits instead of 128 and the cluster of 4 TTEntry sums to 48 bytes instead of 64.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-08-01
mcostalba,mcostalba,2009-08-08 16:37:13+00:00,Makefile: added 'make strip' target  Binaries are always built with symbol table in to easy debugging and profiling.  It is now possible to run:  make strip  To remove symbol table from the compiled binary. This could be useful to prepare the release version.  Patch by Heinz van Saanen.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-08 16:30:46+00:00,Let LMR at root be independent of MultiPV value  Current formula enable LMR when  i + MultiPV >= LMRPVMoves  It means that; for instance; if MultiPV == 1 then LMR will be started to be considered at move i = LMRPVMoves - 1; while if MultiPV == 3 then it will start before; at move i = LMRPVMoves - 3.  With this patch the formula becomes  i >= MultiPV + LMRPVMoves - 2  So that LMR will always start after LMRPVMoves - 1 moves from the last PV move.  No functional change when MultiPV == 1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-08 13:12:04+00:00,Speed up polynomial material imbalance loop  Access pos.piece_count() only once and avoid some branches in the inner loop.  Profiling with VTune shows a 20% speed improvement in get_material_info(); and it is also a bit more cleaned up this way ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-08 12:10:10+00:00,There is no need to special case KNNK ending  It is always draw; so use the corresponding proper evaluation function.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-08 08:21:42+00:00,Move halfOpenFiles[] calculation out of a loop  And put it in an already existing one so to optimze a bit.  Also additional cleanups and code shuffles all around the place.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-08 08:21:29+00:00,Compile without DEBUG flag by default  And build also symbol table. It can easily stripped after .exe is done and it is necessary for profiling.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
mcostalba,mcostalba,2009-08-08 02:49:49+00:00,Revert material balance values after 100000 games  After Joona's direct testing with ~2000 games it seems values after 100.000 games does not give any advantage; so revert for now.  Score of Stockfish_0 vs Stockfish_15: 491 - 392 - 1102 Score of Stockfish_0 vs Stockfish_40: 461 - 439 - 1076 Score of Stockfish_0 vs Stockfish_65: 442 - 518 - 1018 (13 elo) Score of Stockfish_0 vs Stockfish_100: 504 - 502 - 984  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
zamar,mcostalba,2009-08-08 02:36:20+00:00,"Do not adjust Minimum Split Depth automatically  Currently minimum split depth is set automatically to 6 when number of CPUs is more than 4. I believe this is a bad idea since for example my quad (4CPU with hyperthreading) is detected as 8CPU computer. I've manually lowered down the number of Threads; but so far I have played all games with Minimum Split Depth set to 6!  Since 4CPU computers with hyperthreading are quite common and 8 CPU computers extremely rear (I expect we can get a direct jump to 16 or 32 cores); this automatic adjusting is likely to do more harm than good. Add a note in Readme.txt; so that those rear 8CPU owners can manually tweak the ""Minimum Split Depth"" parameter  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-08-01
mcostalba,mcostalba,2009-08-08 02:30:27+00:00,Polished Makefile for *nix  Greately improved Makefile from Heinz van Saanen  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-08-01
Unknown,Unknown,2009-08-07 14:26:24+00:00,"Supply the ""upperbound"" and ""lowerbound"" parameters in UCI search output when the score is outside the root window.",True,4,2009-08-01
Unknown,Unknown,2009-08-06 16:07:32+00:00,Fixed a bug in PV extraction from the transposition table: The previous used move_is_legal to verify that the move from the TT was legal; and the old version of move_is_legal only works when the side to move is not in check. Fixed this by adding a separate; slower version of move_is_legal which works even when the side to move is in check.,True,3,2009-08-01
Unknown,Unknown,2009-08-06 12:02:53+00:00,Moved the code for extracting the PV from the TT to tt.cpp; where it belongs.,True,3,2009-08-01
Unknown,Unknown,2009-08-06 11:27:49+00:00,Added a new function build_pv(); which extends a PV by walking down the transposition table.  When the search was stopped before a fail high at the root was resolved; Stockfish would often print a very short PV; sometimes consisting of just a single move. This was not only a little user-unfriendly; but also harmed the strength a little in ponder-on games: Single-move PVs mean that there is no ponder move to search.  It is perhaps worth considering to remove the pv[][] array entirely; and always build the entire PV from the transposition table. This would simplify the source code somewhat and probably make the program infinitesimally faster; at the expense of sometimes getting shorter PVs or PVs with rubbish moves near the end.,True,3,2009-08-01
Unknown,Unknown,2009-08-04 09:31:25+00:00,Initial work towards adjustable playing strength.  Added the UCI_LimitStrength and the UCI_Elo options; with an Elo range of 2100-2900. When UCI_LimitStrength is enabled; the number of threads is set to 1; and the search speed is slowed down according to the chosen Elo level.  Todo:  1. Implement Elo levels below 2100 by blundering on purpose and/or    crippling the evaluation. 2. Automatically calibrate the maximum Elo by measuring the CPU speed    during program initialization; perhaps by doing some bitboard    computations and measuring the time taken.  No functional change when UCI_LimitStrength is false (the default).,True,1,2009-08-01
Unknown,Unknown,2009-08-03 07:08:59+00:00,Added LMR at the root.  After 2000 games at 1+0  Mod vs Orig +534 =1033 -433 52.525%  1050.5/2000  +18 ELO,True,0,2009-08-01
zamar,mcostalba,2009-07-26 17:55:17+00:00,Remove useless mate value special handling in null search  After 1200 games (1CPU); time control 1+0:  Mod vs Orig: +331 =564 -277  +16 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-07-01
mcostalba,mcostalba,2009-07-26 16:42:48+00:00,Yet another small touch to endgame functions handling  It is like a never finished painting. Everyday a little touch more.  But this time it is very little ;-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-07-01
mcostalba,mcostalba,2009-07-26 15:11:20+00:00,Remove unused members in Application class  Also rearrange a bit the remining methods.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-07-01
mcostalba,mcostalba,2009-07-26 08:07:42+00:00,Fix a spurious extra space  This morning it seems there is nothing better to do...  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-07-01
mcostalba,mcostalba,2009-07-25 15:48:28+00:00,Micro optimize extension() in search.cpp  Small micro-optimization in this very time critical function.  Use bitwise 'or' instead of logic 'or' to avoid branches in the assembly and use the result to skip an handful of checks.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-24 13:26:49+00:00,Polynomial material balance after 100.000 games  Verified it is equivalent to the tuning branch results with parameter values sampled after 100.000 games.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-24 13:18:03+00:00,"Revert Makefile changes  Some unwanted changes to Makefile slept in in patch ""Introduced the UCI_AnalyseMode option"".  Revert them. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2009-07-01
mcostalba,mcostalba,2009-07-24 13:13:13+00:00,Simplify king shelter cache handling  This is more similar to how get_material_info() and get_pawn_info() work and also removes some clutter from evaluate_king().  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-24 13:12:33+00:00,Delay costly SEE call during captures ordering in MovePicker  When ordering moves we push all captures with negative SEE values to badCaptures[] array during the scoring phase.  This patch delays the costly SEE call up to when the move has been picked up in pick_move_from_list(); this way we save some SEE calls in case we get a cutoff.  It seems we have a speed gain of about 1-1.5 % in terms of nodes/sec and profiling seems to confirm the small but real speed increase.  Idea from Pablo Vazquez on talkchess.com http://www.talkchess.com/forum/viewtopic.php?t=29018&start=20  It would be a no functional change but actually it is not because now sorting set is different and so std::sort(); that is not a stable sort; does not guarantees the order of same scored moves to remain the same as before.  After 952 games at 1+0 we are below error bar; almost equal just 6 games of difference (+2 ELO)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-23 21:01:42+00:00,Microptimization in do_evaluate()  Do not call count_1s_max_15() if not necessary; as is not in the common case (>95%).  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-07-01
mcostalba,mcostalba,2009-07-23 09:43:58+00:00,Use do_move_bb() helpers when doing a castle  Small cleanup.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-07-01
mcostalba,mcostalba,2009-07-22 23:03:30+00:00,Add Tord's polynomial material balance  Use a polynomial weighted evaluation to calculate material value.  This is far more flexible and elegant then applying a series of single euristic rules as before.  Also correct a design issue in which we returned two values; one for middle game and one for endgame; while instead; because game phase is a function of board material itself; only one value should be calculated and used both for mid and end game.  Verified it is equivalent to the tuning branch results with parameter values sampled after 40.000 games.  After 999 games at 1+0  Mod vs Orig +277 =482 -240 51.85%  518.0/999  +13 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-07-01
mcostalba,mcostalba,2009-07-20 09:53:41+00:00,Rename int32 in int32_t  To use the same naming rule of the other types and to be compatible with inttypes.h; used under Linux.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-07-01
mcostalba,mcostalba,2009-07-20 07:05:48+00:00,Correctly set mateThreat in search()  We do not accept null search returned mate values; but we always do a full search in those cases.  So the variable mateThreat that is set only if null move search returns a mate value is always false.  Restore the functionality of mateThreat moving the assignement where it can be triggered.  After 999 games at 1+0  Mod vs Orig +253 =517 -229 51.20%  +8 ELO  Bug reported by xiaozhi  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-07-01
mcostalba,mcostalba,2009-07-18 10:47:37+00:00,Use increased LMR horizont also in PV search  Tord says that using a lower horizon at PV nodes looks strange and inconsistent with the general philosophy of our search (i.e. always being more conservative at PV nodes). So set LMR at 3 also on search_pv().  Test result after 601 games seems to confirm this.  Mod vs Orig +156 =318 -127 52.41%  315.0/601  +17 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-18 05:08:06+00:00,Reintroduce null move dynamic reduction  Test extension of LMR horizon to 3 plies alone; without touching null move search. To keep the patch minimal we still don't change LMR horizon in PV search. This will be the object of the next patch.  Result seems good after 998 games:  Mod vs Orig  +252/=518/-228 51.20%  511.0/998 +8 ELO  So dynamic null move reduction seems a bit stronger then fixed reduction even with LMR horizon set to 3.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-18 05:08:02+00:00,Use increased LMR horizont only after a null move  Revert to LMR horizont of 2 plies. Only if parent move is a null move increase to 3 so to avoid the bad combination of null move reduction + LMR reduction. This is a more aggressive patch then previous one; but it seems we are going in the wromg direction.  After 531 games result is not good:  Mod vs Orig  +123/=265/-143 48.12%  255.5/531  -13 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-18 05:07:58+00:00,Combine increased LMR horizont and fixed null move reduction  Set null move reduction to R=4; but increase the LMR horizon to 3 plies. The two tweaks are related and should compensate the combined effect of null move + LMR reduction at shallow depths.  Idea from Tord.  After 999 games at 1+0  Mod vs Orig  +251 =522 -225 51.30% + 9 ELO  On Tord iMac Core 2 Duo 2.8 GHz; one thread; Mac OS X 10.6; at 1+0 time control we have:  Mod vs Orig 994-1006  -1.4 ELO  But Orig version is pgo compiled and Mod is not. The PGO compiled version is about 8% faster; which corresponds to about 7 Elo points. This means that results are reasonably consistent.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
Unknown,Unknown,2009-07-17 20:26:01+00:00,Introduced the UCI_AnalyseMode option; and made the evaluation function symmetrical in analyse mode.  No functional change when playing games.,True,4,2009-07-01
mcostalba,mcostalba,2009-07-17 18:29:25+00:00,Fix two compile errors in new endgame code  Code that compiles cleanly under MSVC triggers one compile error (correct) under Intel C++ and two(!) under gcc.  The first is the same complained by Intel; but the second is an interesting corner case of C++ standard (there are many) that is correctly spotted only by gcc.  Both MSVC and Intel pass this silently; probably to avoid breaking people code.  Now we are fully C++ compliant ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-17 15:25:53+00:00,Move constant bitboard arrays from header to cpp file  This avoid to duplicate storage allocation for every file where they are used.  Note that simple numeric constant can remain in header because are automatically folded by the compiler.  Patch suggested by Tord.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-17 15:05:19+00:00,Remove even more redundancy in endgame functions handling  Push on the templatization even more to chip out some code and take the opportunity to show some neat template trick ;-)  Ok. I would say we can stop here now....it is quickly becoming a style exercise but we are not boost developers so give it a stop.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
Unknown,Unknown,2009-07-17 07:12:59+00:00,Removed an incorrect assert() statement in search.cpp; which asserted that a static eval cached in the transposition table would always equal the static eval of the current position. This is in general not true; because the cached value could be from a previous search with different evaluation parameter settings; or from a search from the opposite side (Stockfish's evaluation function is assymmetric by default).,True,4,2009-07-01
mcostalba,mcostalba,2009-07-17 06:55:51+00:00,Simplify endgame functions handling  We really don't need to have global endgame functions. We can allocate them on the heap at initialization time and store the corresponding pointer directly in the functions maps. To avoid leaks we just need to remember to deallocate them in map d'tor.  These functions are always created in couple; one for each color; so remove a lot of redundant hard coded info and just use the minimum required: the type and the corresponding named string.  This greatly simplifies the code and also it is less error prone; now is much simpler to add a new endgame specialized function: just add the corresponding enum in endgame.h and the obvious add_xx() call in EndgameFunctions c'tor; and of course; the most important part; the EvaluationFunction<xxx>::apply() specialization in endgame.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
Unknown,Unknown,2009-07-15 09:01:49+00:00,Renamed the variable 'looseOnTime' to 'loseOnTime'; because I'm a pedant.  No functional change.,True,2,2009-07-01
mcostalba,mcostalba,2009-07-15 07:35:00+00:00,"Remove ""Last seconds noise"" filtering UCI option  This feature makes sense during development; but It doesn't seem to make sense for normal users.  Also fix a possible race where the GUI adjudicates the game a fraction of second before the engine sets looseOnTime flag so that it will bogusly waits until it ran out of time at the beginning of the next new game.  The fix is to always reset looseOnTime at the beginning of a new game.  Race condition spotted by Tord.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2009-07-01
mcostalba,mcostalba,2009-07-14 09:28:41+00:00,Introduce SERIALIZE_MOVES_D() macro and use it for pawn moves  This is another moves serialization macro but this time focused on pawn moves where the 'from' square is given as a delta from the 'to' square.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-07-01
mcostalba,mcostalba,2009-07-14 09:28:29+00:00,Micro optimize pawn moves generation  It is very rare we have pawns on 7(2) rank; so we can skip the promotion handling stuff in most cases.  With this patch pawn moves generation is almost 20% faster.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-07-01
mcostalba,mcostalba,2009-07-12 07:37:43+00:00,Introduce see_sign() and use it to shortcut full see()  Mostly of times we are interested only in the sign of SEE; namely if a capture is negative or not.  If the capturing piece is smaller then the captured one we already know SEE cannot be negative and this information is enough most of the times. And of course it is much faster to detect then a full SEE.  Note that in case see_sign() is negative then the returned value is exactly the see() value; this is very important; especially for ordering capturing moves.  With this patch the calls to the costly see() are reduced of almost 30%.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-07-01
mcostalba,mcostalba,2009-07-12 07:37:43+00:00,Move some global variables to local scope in search.cpp  Some variables were global due to some old and now removed code; but now can be moved in local scope.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-07-01
mcostalba,mcostalba,2009-07-12 07:37:28+00:00,Joona tweaks of Weights and limits  Verification test give unusless result  After 999 games at 1+0 Mod vs Orig +250 =503 -246 50.20% +1 ELO  So we are well below our radar level. Neverthless there are 100.000 games on Joona QUAD that we could take in account and that shows that this tweak perhaps has something good in it; altough very little.  Verification tests shows should not be a regression; at least not a big one even in the worst case; so apply the change anyway and keep the finger crossed ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-07-01
mcostalba,mcostalba,2009-07-10 17:50:43+00:00,Small tidy up of previous patch  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
Unknown,Unknown,2009-07-10 16:34:56+00:00,"Strip whitespace from beginning of string sent to set_option_value().  It turned out that the input sent to set_option_value() when it is called by set_option() in uci.cpp always started with at least one whitespace. In most cases; this is not a problem; because the majority of UCI options have numeric values. It did; however; cause a problem for UCI options with non-numerical values; like options of type CHECK and COMBO. In particular; changing the value of an option of type CHECK didn't work; because the comparisons with ""true"" and ""false"" would always return false. This means that the ""Ponder"" and ""UCI_Chess960"" options haven't been working for a while.",True,4,2009-07-01
mcostalba,mcostalba,2009-07-09 15:45:39+00:00,Revert last tweaks Tests show no improvment; so revert for now.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-07-01
mcostalba,mcostalba,2009-07-09 15:45:17+00:00,Joona tweaks of tempos and misc parameters  Unfortunatly this tweak does not give good results.  After 894 games at 1+0 we have:  Mod vs Orig  +205/-236/=453 48.27%  -12 ELO !!  Perhaps we should test again; but in the mean time we are going to revert this.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-07-01
mcostalba,mcostalba,2009-07-06 10:20:05+00:00,Restore development versioning and LSN filtering  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-07-01
mcostalba,mcostalba,2009-07-06 08:41:22+00:00,Fix generation of check blocking promotion  A promotion move is not considered a possible evasion as it could be.  Bug introduced by patch  Convert also generate_pawn_blocking_evasions() to new API (7/5/2009)  Bug spotted by Kenny Dail.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-07-01
mcostalba,mcostalba,2009-07-04 20:57:12+00:00,Stockfish 1.4  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-04 20:56:59+00:00,Small Makefile tweaks  Set gcc as default compiler on Linux; also compile with symbols stripped to shrink binary file.  Original patch by Heinz van Saanen.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-04 17:10:39+00:00,Fix bitcount.h compile warnings under Intel compiler  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-04 17:03:49+00:00,Check Intel compiler before MSVC in bitcount.h  Predefined macro __INTEL_COMPILER is defined only for Intel; while _MSC_VER is defined for both Intel C++ and MSVC.  So rearrange ifdefs to take in account this and test __INTEL_COMPILER first and only if not defined check _MSC_VER for MSVC.  Patch suggested by Joona.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-04 09:32:51+00:00,Add support for saving timing file during benchmark  Add a new argument to bench to specify the name of the file where timing information will be saved for each benchmark session.  This argument is optional; if not specified file will not be created.  Original patch by Heinz van Saanen  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-04 08:20:28+00:00,Disable POPCNT support per default  This is mainly intended to allow 64 bit compiles on any system and avoid to crash when the binary; compiled on a box where POPCNT is not supported; is run on a Core i7 system or similar CPU.  What could happen is that when compiled in a standard 64 bit system; because the correct headers for the POPCNT intrinsic are not found; the compiler creates dummy bit count functions instead; these are never called at runtime on the machine where Stockfish has been compiled. But if we run the same binary on a Core i7 system; because POPCNT is detected at run time; the dummy bitcount functions will be called giving false results that will crash the application.  Note that would be possible to fallback on software bit count in these cases; but this is even more subtle because POPCNT path is not optimized so that we have an application working but at sub-optimal speed; so better to crash; at least user is loudly warned that there is something wrong.  If; instead; Stockfish is compiled on a Core i7 system with POPCNT enabled; then if the PGO compile has been done properly; the same binary will run at optimal speed _both_ on the Core i7 machine and on any other 64 bit standard machine. This is the ideal mode for binary distribution.  Finally this patch disables bsfq support under Windows; because it seems inline assembly is not supported both by MSVC and by Intel Windows version.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-04 08:18:17+00:00,Do not compile POPCNT if NO_POPCNT is defined  Also rename DISABLE_POPCNT_SUPPORT in NO_POPCNT and simplify a bit the macro logic.  Always define a __popcnt64()or _mm_popcnt_u64() template; if the proper function with the same name is defined in the intrinsics header; then it will be choosen as first otherwise we fall back on the dummy template that is never called at runtime anyway because cpu_has_popcnt() returns false.  This fixes the compile error reported by Jim.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-07-01
mcostalba,mcostalba,2009-07-03 12:11:32+00:00,Microptimize pawns info access  Avoid indirect calling of piece_of_color_and_type(c; PAWN) and its alias pawns(c) in the pawn evaluation loop; but use the pawns bitboards accessed only once before entering the loop.  Also explicitly mark functions as static to better self-document.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-03 08:18:20+00:00,"Restore correct 64 bit version of pop_1st_bit()  Was erroneusly changed with the 32bit in recent patch ""Retire USE_COMPACT_ROOK_ATTACKS..."".  Also another clean up of define magics. Move compiler specific definitions in types.h and remove redundant cruft.  Now this macro ugly mess seems more reasonable.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2009-07-01
mcostalba,mcostalba,2009-07-03 08:18:14+00:00,Use bsfq asm instruction to count bits  On 64 bit systems we can use bsfq instruction to count set bits in a bitboard.  This is a patch for GCC and Intel compilers to take advantage of that and get a 2% speed up.  Original patch from Heinz van Saanen; adapted to current tree by me.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-03 06:52:10+00:00,Retire USE_COMPACT_ROOK_ATTACKS and USE_FOLDED_BITSCAN defines  This greatly simplifies bitboard.cpp that now has only two setups; respectively for 32 and 64 bits CPU according to IS_64BIT define that is automatically set but can be tweaked manually in bitboard.h  No functional change both in 32 and in 64 bits.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-07-01
mcostalba,mcostalba,2009-07-02 05:29:25+00:00,Revert per-thread history tables  Testing on Joona QUAD failed to give any advantage. Actually we had a little loss:  Mod - Orig: 342.0 - 374.0  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-07-01
mcostalba,mcostalba,2009-07-02 05:29:14+00:00,Joona tweaks of piece values  This is the backport of tuned piece values.  We needed to change also the psqt tables so that their values; that are relative to piece values; remain the same.  Amost no change after 999 games:  Mod vs Orig 594-495 + 2 ELO points so well within error bar  It was expected somehow given the very little change of the parameters values.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-07-01
mcostalba,mcostalba,2009-06-28 04:30:13+00:00,Explicitly use delta psqt values when possible  Instead of add and subtract pqst values corrisponding to the move starting and destination squares; do it in one go with the helper function pst_delta<>()  This simplifies the code and also better documents that what we need is a delta value; not an absolute one.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-06-01
mcostalba,mcostalba,2009-06-26 08:17:47+00:00,Joona tweaks of pawns parameters  Test result after 999 games at 1+0  Mod vs Orig +278 =493 -228 52;50% +17 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-20 18:18:00+00:00,Fix compile errors in debug mode  Fall out of move_promotion() rename  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-06-01
mcostalba,mcostalba,2009-06-20 13:45:11+00:00,Use POPCNT in evaluate_space() when available  This was forgotten by the POCNT patches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-06-01
mcostalba,mcostalba,2009-06-20 13:45:03+00:00,Fix a couple of warnings under Intel compiler  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-06-01
mcostalba,mcostalba,2009-06-20 08:04:32+00:00,Micro optimize and rename move_promotion()  Rename to move_is_promotion() to be more clear; also add a new function move_promotion_piece() to get the promotion piece type in the few places where is needed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-06-01
mcostalba,mcostalba,2009-06-20 08:04:20+00:00,Only on Windows do wait for input at the end of benchmark  Under MS Visual C++ debug window always unconditionally closes when program exits; this is bad because we want to read results before.  So limit this kludge on Windows only.  Original patch by Heinz van Saanen.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-06-01
mcostalba,mcostalba,2009-06-18 16:23:35+00:00,Skip castle rights update when not needed  Micro optimization in do_move(); a quick check avoid us to update castle rights in almost 90% of cases.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-06-01
zamar,mcostalba,2009-06-18 06:35:24+00:00,Disable use of aspiration window in known win positions  When we are hunting for mate; transposition table is filled in with mate scores. Current implemenatation of aspiration search can't cope with this very well.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-06-01
zamar,mcostalba,2009-06-18 06:35:24+00:00,Bugfix: KRK was not classified as KNOWN_WIN  Problem is that npMaterial is compared to _endgame_ value of rook; although npMaterial is always (also in endgame!) calculated using _middlegame_ values.  Bug was hidden as long as Rook middlegame and endgame values were same.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-06-01
mcostalba,mcostalba,2009-06-18 06:35:23+00:00,Give proper credit to Joona  Stockfish would not be as where is now without his contributions.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-06-01
mcostalba,mcostalba,2009-06-18 06:35:08+00:00,Joona tweaks of mobility and outposts bonus  These are the tuned values of mobility and outposts after 100.000 games on Joona QUAD.  After 999 games at 1+0 Mod vs Orig +248 =537 -214 51.70% +12 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-06-01
mcostalba,mcostalba,2009-06-16 18:22:22+00:00,Fix king value in SEE  When SEE piece values changed in aaad48464b of 9/12/2008 we forgot to update the value assigned in case of captured king.  In that patch we changed the SEE piece values but without proper testing. Probably it is a good idea to make some tests with the old Glaurung values.  Bug spotted by Joona.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-06-01
mcostalba,mcostalba,2009-06-13 10:13:09+00:00,Reduce SMP contention on TT  Move TT object away from heavy write accessed NodesSincePoll and also; inside TT isolate the heavy accessed writes variable.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-06-01
mcostalba,mcostalba,2009-06-12 11:12:42+00:00,Better clarify why recent generate_pawn_checks() works  We can have false positives; but these are filtered out anyhow by following conditions so they are harmless.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-12 11:12:23+00:00,Code style triviality in search.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-12 11:10:40+00:00,Remove global variables from search.h  Globals are not really needed; so redefine as locals.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-12 11:10:02+00:00,MovePicker doesn't need to know if called from a pv node  This was needed by an old optimization in sorting of non-captures that is now obsoleted by new std::sort() approach.  Remove also the unused depth member data. Interestingly this has always been unused since the Glaurung days.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-12 11:00:18+00:00,Joona tweaks of piece-square tables  These are the tuned psqt values after 100.000 games on Joona QUAD. Results seem very good.  On PC 1 after 999 games Mod vs Orig  +261 =511 -227 51.70 %  +12 ELO  On PC 2 after 913 games Mod vs Orig  +254 =448 -211 52.35 %  +16 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-08 11:53:38+00:00,Move initialization of PawnInfo in its c'tor  Where it belongs.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-06-01
mcostalba,mcostalba,2009-06-08 10:27:50+00:00,Move initialization of MaterialInfo in its c'tor  Where it belongs.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-06-01
mcostalba,mcostalba,2009-06-08 09:52:03+00:00,Micro optimize pretty_pv  Creating an History object requires clearing the History tables; although fast is an useless job in san.cpp where History is used just as a dummy argument for MovePicker c'tor.  So use a file scoped constant instead of creating a new History() object each time MovePicker c'tor is called as in move_ambiguity()  This optimizes pretty_pv() through the following calling chain: pretty_pv() -> line_to_san() -> move_to_san() -> move_ambiguity()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-06-01
mcostalba,mcostalba,2009-06-05 14:07:36+00:00,Give credit to Joona for optimized parameters  This also allow us to better track what is already optimized and what still needs optimization.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-05 14:07:26+00:00,Use a specialized function for king evaluation  King evaluation is special in any case and as an added benefit we can use the HasPopCnt optimization also for king.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-06-01
mcostalba,mcostalba,2009-06-03 16:38:42+00:00,Split evaluate_outposts from evaluate_common  This is an old patch; was part of a series; but is good also alone as a cleanup.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-06-01
mcostalba,mcostalba,2009-06-03 16:36:50+00:00,Document variables with heavy SMP read access  Also move NodesSincePoll away from the same cache line of other heavy read accessed only variables.  Fortunatly we don't have anymore write access contention; but still read access contention in some cases.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-06-01
mcostalba,mcostalba,2009-06-03 16:35:56+00:00,Retire UseQSearchFutilityPruning and UseFutilityPruning  They are always true anyway and are heavy used file scope variables where there could be SMP contention. Although read only.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-06-01
mcostalba,mcostalba,2009-06-03 16:34:35+00:00,Use one History table per thread  This reduces contention and reduce history trashing effect especially at high search depths.  No functional change for single CPU case.  After 999 games at 1+0 on Dual Core Intel we have  Mod vs Orig  +233 =526 -240  -2 ELO  We need to test at longer time controls and possibly with a QUAD where we could foreseen an improvment.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-06-01
mcostalba,mcostalba,2009-06-02 08:57:15+00:00,Convert History table H in a local variable  This is a first step for future patches and in any case seems a nice thing to do.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-06-01
mcostalba,mcostalba,2009-06-02 08:35:49+00:00,Avoid using EmptySearchStack global  This reduces contention in SMP case and also cleanups the code a bit.  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-06-01
mcostalba,mcostalba,2009-05-29 15:23:21+00:00,Detach the state when copying a position  In Position we store a pointer to a StateInfo record kept outside of the Position object.  When copying a position we copy also that pointer so after the copy we have two Position objects pointing to the same StateInfo record. This can be dangerous so fix by copying also the StateInfo record inside the new Position object and let the new st pointer point to it. This completely detach the copied Position from the original one.  Also rename setStartState() as saveState() and clean up the API to state more clearly what the function does.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-05-01
mcostalba,mcostalba,2009-05-29 06:31:13+00:00,Order bad captures by SEE value  We have already calculated it; so just sorting the moves adds a very little overhead.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-05-01
mcostalba,mcostalba,2009-05-29 06:30:58+00:00,Passed pawns evaluation tweak  Do not penalize if in our adavncing pawn's path there are non-pawns enemy pieces. Especially if they can be attacked by us.  Patch is mine; but original idea and also fixing of a first; wrong; version of the patch is from Eelco de Groot.  Tests with Joona framework seems to confirm patch is good  Results for patch 'disabled'   based on 5776 games: Win percentage: 41.309  (+- 0.526)  [+- 1.053] Results for patch 'enabled'  based on 6400 games: Win percentage: 42.422  (+- 0.500)  [+- 1.000]  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-05-01
mcostalba,mcostalba,2009-05-25 06:56:26+00:00,Merge hardware POPCNT detection and use  Tests on Joona luxury iCore7 QUAD show that speed increase against standrd 64bit routine is between 3% and 4%.  So it seems a good thing to have. Also the user feedback at startup regarding the compile and the hardware detection can be an useful debug tool.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-05-01
mcostalba,mcostalba,2009-05-25 06:49:50+00:00,Split killer moves from non-captures  In MovePicker consider killer moves as a separate phase from non-capture picking.  Note that this change guarantees that killer1 is always tried before killer2. Until now; because scoring difference of the two moves was just 1 point; if psqt tables of killer1 gave a lower value then killer2; the latter was tried as first.  After 999 games at 1+0 we have Mod vs Orig: +245 =527 -227 +6 ELO  Not a lot but patch is anyhow something worth to have.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-05-01
mcostalba,mcostalba,2009-05-25 06:28:55+00:00,Revert _BitScanForward64 support  It shows almost no improvment and adds a good bunch of complexity.  So remove for now. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-05-01
mcostalba,mcostalba,2009-05-24 09:25:59+00:00,Add a bit more pop_1st_bit<HasBSF> conversions  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-24 09:18:31+00:00,Use compiler name lookup to simplify code  We don't need different names between a function and a template. Compiler will know when use one or the other.  This let use restore original count_1s_xx() names instead of sw_count_1s_xxx so to simplify a bit the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-24 09:07:03+00:00,Enable _BitScanForward64 in move generation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-24 08:46:43+00:00,Enable _BitScanForward64 at runtime  Only add infrastructure; still disabled.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-23 15:12:26+00:00,Print info about use of 64bit functions and hardware POPCNT  With this patch at the applications startup a line is printed with info about use of optimized 64 bit routines and hardware POPCNT.  Also allow the possibility to disable POPCNT support during PGO compiles to exercise the fallback software only path.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-05-01
mcostalba,mcostalba,2009-05-21 16:08:34+00:00,Fix compile errors under MSVC  Fallback from previous patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 14:50:19+00:00,Forgot two conversion to new POPCNT interface  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 14:42:07+00:00,Add temporary debug info on POPCNT support  To be removed before to release.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 14:41:31+00:00,Enable POPCNT at runtime  Runtime detect POPCNT instruction support and use it.  Also if POPCNT is not supported we don't add _any_ overhead so that we don't lose any speed in standard case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 14:19:20+00:00,Introduce bitcount.h  It will be used for POPCNT intrinsics.  For now no bianry and functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 10:15:52+00:00,Unify piece_attacks<> for KNIGHT and KING  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 09:28:51+00:00,Use do_move_bb() also for en passant moves  Unfortunatly; due to Chess960 compatibility we cannot extend also to castling where the destinations squares are not guaranteed to be empty.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 08:55:23+00:00,Introduce do_move_bb() to update bitboards after a move  Avoid a clear_bit() + set_bit() sequence but update bitboards with only one xor instructions.  This is faster and simplifies the code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 07:54:48+00:00,Backup some mor einfo in do_null_move()  Faster undo_null_move()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-21 07:47:03+00:00,Move npMaterial[2] to StateInfo in Position  So to have a bit faster undo_move() and also a code semplification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-20 13:46:16+00:00,Retire lastMove from Position class  Is not used in any way so remove.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-20 13:11:41+00:00,Small code style in headers  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-20 12:43:17+00:00,Directly relate HistoryMax to OnePly  This obsoletes some remainding comments.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-20 10:40:07+00:00,Small code style massage in uci.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-20 10:02:39+00:00,Space inflate and cleanup direction.cpp  Hopefully it is now more clear what's happening here.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-20 07:03:15+00:00,"Reduce history 4 times instead of 2 when reach the maximum  This gives more weight to newer entries.  After 999 games at 1'+ 0"" we have:  Mod vs Orig +233/-208/=558 51.25% +9 ELO  Confirmed by another session of 437 games:  Mod vs Orig +109/-92/=236 51.95% +14 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,2,2009-05-01
mcostalba,mcostalba,2009-05-19 14:49:54+00:00,Retire count_1s_8bit()  Use the plain array lookup in the only place where it is used. This remove an unecessary indirection and better clarifies what code does.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-05-01
mcostalba,mcostalba,2009-05-19 14:41:45+00:00,Small code style triviality in evaluation  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-05-01
mcostalba,mcostalba,2009-05-19 14:35:12+00:00,Remove hardcode default values of UCI variables from evaluation  This is the same change we have already done in search.cpp; this time for evaluation.cpp  If a variable will be populated reading an UCI option then do not hard code its default values.  This avoids misleadings when reading the sources.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-05-01
mcostalba,mcostalba,2009-05-17 09:23:24+00:00,Cache king shelter info in pawns structure  It does not change often and is not so fast to calculate.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-16 11:25:35+00:00,Move beta counter variables to the per-thread data  This should reduce concurrent accessing in SMP case.  Suggestion by Tord Romstad.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-05-01
mcostalba,mcostalba,2009-05-16 11:06:54+00:00,Better document how history works  Both with added comment and changing the API to reflect that only destination square and moved piece is important for history.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-05-01
mcostalba,mcostalba,2009-05-15 16:48:18+00:00,Fix broken multi-pv with aspiration window search  Aspiration window search must be disabled for multi-pv case.  We missed one point where aspiration window should be disabled in this case.  Patch from Joona; with a little added edit by me.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-05-01
mcostalba,mcostalba,2009-05-12 10:10:40+00:00,Fix a warning un using anonymous structs  No functional and no binary change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-05-01
mcostalba,mcostalba,2009-05-10 17:38:47+00:00,Use string instead of std::string  And others small code style touches.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-10 16:42:04+00:00,Use 64 bits for debug counters  Has happened 32 bits were not enough for some test.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-09 10:09:25+00:00,Fix some Intel compilers warnings  Also a compile fix due to Makefile missing new application.cpp file.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-05-01
mcostalba,mcostalba,2009-05-08 08:56:59+00:00,Micro optimize generate_pawn_checks()  Use a better condition to find candidate direct check pawns. In particular consider only pawns in the front ranks of the enemy king; this greatly reduces pawns candidates bitboard that now is empty more then 90% of the time so that we can early skip further tests.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-05-01
mcostalba,mcostalba,2009-05-07 15:08:55+00:00,Convert also generate_pawn_blocking_evasions() to new API  New compact parameter passing API.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-07 15:01:52+00:00,Better dscovery check condition in generate_pawn_checks()  Be more strict; is not enough dc bitboard is not empty; but needs to inclde also at least one pawn.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-07 14:41:36+00:00,Further parametrize generate_pawn_captures  We can parametrize for the capture direction too.  Also use a single template parameter and calculate (at compile time) remainin parameters directly in the function.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-07 12:54:40+00:00,Update copyright year  We are well in 2009 already.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-07 10:59:19+00:00,Rewrite the way application exits  Centralize in a single object all the global resources management and avoid a bunch of sparse exit() calls.  This is more reliable and clean and more stick to C++ coding practices.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-07 07:27:38+00:00,Be sure book file is closed before we leave  Move closing of file in Book destructor. This guarantees us against leaving the file open under any case and simplifies also Book use.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-05-01
mcostalba,mcostalba,2009-05-06 18:28:17+00:00,Rewrite Book implementation  Let Book be derived directly from std::ifstream and rewrite the functions accordingly.  Also simplify file reading by use of operator>>()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-06 10:19:20+00:00,Space inflate book.cpp  Also document most interesting parts.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-06 07:50:49+00:00,Fix a couple of MSVC warnings  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-05-01
mcostalba,mcostalba,2009-05-05 13:12:23+00:00,Micro optimize move_is_ep() and move_is_castle()  Avoid a shift operation moving it at compile time.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-05-01
mcostalba,mcostalba,2009-05-05 12:55:48+00:00,Faster Position::move_is_capture() condition  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-05-01
mcostalba,mcostalba,2009-05-05 11:10:29+00:00,Fix missing pawn color check in move_is_legal()  In case we have a correct white pawn move but pawn is black (or the contrary) we fail to detect the move as illegal.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-05-01
mcostalba,mcostalba,2009-05-04 09:58:26+00:00,Update makefile to use PGO with Intel C++ v11.0  Update profiler guided optimization instructions in Makefile to the latest Intel C++ compiler.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-05-01
mcostalba,mcostalba,2009-05-04 09:18:24+00:00,Micro optimize SEE  Use pieces_of_type() instead of pieces_of_color_and_type() in an hot loop and cut of almost 10% SEE execution time.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-05-01
mcostalba,mcostalba,2009-05-03 07:15:55+00:00,Avoid an usless check in pl_move_is_legal  Although very cheap this is a very hot path; so avoid it.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-03 07:11:36+00:00,Change TT interface to ask directly for a position key  Instead of a position because the key is all that we need.  Interface is more clear and also very very little bit faster.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-03 07:11:24+00:00,Setup to use Callgrind profiler  Disabled by default.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-03 07:11:07+00:00,Restore development versioning and LSN filtering  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-03 06:49:34+00:00,Stockfish 1.3.1  Mainteinance version to fix broken Glaurung 2 book reading.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-03 06:46:27+00:00,Revert Glaurung 1 book compatibility patch  It breaks also Glaurung 2 book parsing.  We really need to work on book.cpp; but for now just leave compatibility just for Glaurung 2 books.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-05-01
mcostalba,mcostalba,2009-05-02 10:53:08+00:00,Stockfish 1.3  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-05-01
mcostalba,mcostalba,2009-05-02 10:52:49+00:00,"Fix a very old UCI option parsing bug  We currently fail on an option with a sapece in the name; as example  setoption name Clear Hash  returns error message ""Option Clear not found"". This patch fixes this off-by-one type bug.  Thanks to Joona for spotting this.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-05-01
mcostalba,mcostalba,2009-05-02 09:08:10+00:00,Nicely simplify MovePicker::pick_move_from_list  It is a positive fall back from previous patch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-05-01
mcostalba,mcostalba,2009-05-02 09:07:46+00:00,Sort moves just after scoring  Instead of a delayed selection sort so that the highest score move is picked up from the list when needed; sort all the moves up front just after score them.  Selection sort is O(n*n) while std::sort is O(n*log n); it is true that delayed selection allows us to just pick the move until a cut off occurs or up to a given limit (12); but with an average of 30 non capture-moves delayed pick become slower just after 5-6 moves and we now pick up to 12.  Profiling seem to prove this idea and movepick.cpp is now 10% faster.  Also tests seem to confirm this:  After 700 games at 1+0: Mod vs Orig +178 -160 =362 +9 ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-05-01
mcostalba,mcostalba,2009-04-30 14:16:35+00:00,Update polyglot.ini  Upadte to new parameters and parameters values.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-04-01
mcostalba,mcostalba,2009-04-30 07:18:20+00:00,Stockfish 1.3 rc1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-04-01
mcostalba,mcostalba,2009-04-30 06:55:38+00:00,Do not razor after a null move  We don't want to return unproven null move fails high; so that if a position is so good that null move fails high we want to check this with real do_move() / undo_move() test; not just razoring the position because; from the opponent point of view; is very bad.  These are tests results at 1+0  Mod vs Orig +252 -264 =483  49.40% Mod vs Toga II 1.4.1SE  +365 -325 =309  52.00%  So it seems a very slightly regression regarding orig version (but withing error bar) and a nice increase against Toga that is what we are interested most. Orig version scores 49.75% against Toga; so we welcome this change ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-04-01
mcostalba,mcostalba,2009-04-29 14:01:57+00:00,Fix assignment of pv[0] when creating root move list  It is bogusly assigned from moves[i].move instead of mlist[i].move or equivalently to moves[count].move that it seem more clear to me.  Bug is hidden while all the moves are included; in this default case moves[i].move and mlist[i].move are the same variable.  Also a bit of cleanup while there.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-04-01
mcostalba,mcostalba,2009-04-28 07:00:09+00:00,Merge Joona's razoring tweaks After proof testing on 3 different engines these are the results:  Stockfish - Toga II 1.4.1SE +130 -132 =132 49.75% Stockfish - Deep Sieng 3.0  +145 -110 =150 54.45% Stockfish - HIARCS 12 MP    +94  -149 =150 43.00%  So it seems no regressions occurs; although also no improvment. But anyhow this patch increases Stockfish strenght against itself; so merge it.  Note that this patch not only adds back razoring at depth one; but also increases razor depth limit from 3 to 4 because hard coded depth 4 limit is no more overwritten by UCI parameter that otherwise defaults to 3.,True,1,2009-04-01
mcostalba,mcostalba,2009-04-28 06:47:26+00:00,Hardcode depth limit for selective search  Because futility margins array has a fixed size we cannot arbitrarly choose or change the SelectiveDepth parameter; otherwise we have a crash for values bigger then array size.  On the other hand tweaking of this parameter requires some modification to the hardcoded margins; so makes sense to hard code also this very bounded one.  Who wants to experiment is of course free to change the sources.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-04-01
mcostalba,mcostalba,2009-04-27 17:00:45+00:00,Fix a warning under MSVC  Somehow silly warning C4800: 'int' :forcing value to bool 'true' or 'false'(performance warning)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 15:39:59+00:00,Micro optimize Position::move_is_check()  More then optimization it is worth a bit of better code self documenting.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 14:36:33+00:00,Inline Position::move_is_capture()  This is a very hot path function; profiling on Intel compiler shows that inlining cuts in half the overhead.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 12:48:14+00:00,Retire timeoday.cpp  Move the only function gettimeofday in misc.cpp where is used.  This avoids polluting the global namespace.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 12:38:47+00:00,Small cleanup in misc.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 12:21:49+00:00,Code style cleanup in transposition table code  Assorted fixes but no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 09:29:33+00:00,"Fix a bogus assert in tt.cpp  Max hash size is 4096 MB; not 1024 MB; see the corresponding ""Hash"" UCI parameter in ucioption.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 09:12:34+00:00,Convert piece.cpp to C++  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-27 08:45:15+00:00,Remove an useless comparison in futility pruning  Currently futility is allowed when depth < SelectiveDepth and SelectiveDepth is 7*OnePly; so the comprison is always true.  Patch could introduce a functional change only if we choose to increase SelectiveDepth.  Currently no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-26 12:51:54+00:00,"Small code tidy up and test results  When testing at 1'+0"" time control results are still reasonably good. We have made two sessions on two different PC.  After 840 games Mod - Orig: +221 -194 =425 +10 ELO (two CPU)  After 935 games Mod - Orig: +246 -222 =467  +9 ELO (single CPU)  So it seems that with fast CPU and/or longer time controls benefits of the patch are a bit reduced. This could be due to the fact that only 3% of nodes are pruned by razoring at depth one and these nodes are very swallow ones; mostly get pruned anyway with only a slightly additional cost; even without performing any do_move() call.  Another reason is that sometime (0;3%% of cases) a possible good move is missed typically in positions when moving side gives check; as example in the following one  3r2k1/pbpp1nbp/1p6/3P3q/6RP/1P4P1/P4Pb1/3Q2K1 w - -  The winning move Rxg7+ is missed.  Bottom line is that patch seems good for blitz times; perhaps also for longer times. We should test against a third engine (Toga ?) to have a final answer regarding this new setup.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2009-04-01
zamar,mcostalba,2009-04-26 12:51:50+00:00,Razor again at depth one Some time ago it was found by Marco Costalba that it's better to disable razoring at depth one; because given the very low evaluation of the node; futility pruning would already do the job at very low cost and avoiding missing important moves.  Now enable razoring there again; but only when our quickly evaluated material advantage is more than a rook. The idea is to try razoring only when it's extremely likely that it will succeed.  Extreme lightning speed test show promising result: Orig - Mod: +1285 =1495 -1348  This needs to be tested with longer time controls though.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
zamar,mcostalba,2009-04-26 12:51:47+00:00,Make futility and razor margins more tunable  Restructure RazorMargins and FutilityMargins arrays so that their values can be more easily tuned.  Add RazorApprMargins array which replaces razorAtDepthOne concept; because setting RazorApprMargin very high value at ply one is same as not razoring there at all.  Comment out setting razoring and futility margins through uci to avoid errors while tuning.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
mcostalba,mcostalba,2009-04-26 12:41:17+00:00,Do not hardcode default values of UCI variables  If a variable will be populated reading an UCI option then do not hard code its default values.  This avoids misleadings when reading the sources.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
mcostalba,mcostalba,2009-04-26 12:40:26+00:00,Greatly speedup has_mate_threat()  Instead of loop across all legal moves to find a mate loop across possible check moves only.  This reduces more then 10 times the number of moves to check for a possible mate.  Also rename generate_checks() in generate_non_capture_checks() so to better clarify what the function does.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
mcostalba,mcostalba,2009-04-19 19:09:53+00:00,Micro optimize generate_piece_checks() take 2  Add some missing bits of this patch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
Unknown,mcostalba,2009-04-19 19:57:23+00:00,Add missing header file to make stockfish compile with latest Inter C++ Compiler under Linux (memcpy needs cstring)  Correct some references glaurung -> stockfish in Makefile  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
mcostalba,mcostalba,2009-04-19 16:13:04+00:00,Simplify Position::is_mate()  Should be a bit faster too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
mcostalba,mcostalba,2009-04-18 15:28:12+00:00,Micro optimize generate_piece_checks()  Avoid calculating piece attacks if there aren't available check sqaures for the given piece.  About 15% of cases. Not a biggie but still something especially in the middle game where king is well covered inside his castle.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-18 13:24:21+00:00,MovePicker: retire per square MVV/LVA ordering  Is not used anyway and in case we need it again we can resurrect from git archives.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-18 13:04:00+00:00,In qsearch store the cut move in TT  And upon reentering the same position try it as first.  Normally qsearch moves order is already very good; first move is the cut off in almost 90% of cases. With this patch; we get a cut off on TT move of 98%.  Another good side effect is that we don't generate captures and/or checks when we already have a TT move.  Unfortunatly we found a TT move only in 1% of cases. So real impact of this patch is relatively low.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-18 08:15:42+00:00,"Merge Joona's new aspiration window search It seems very positive.  After 999 games at 1'+0"" result is: +249 -216 =534 +11 ELO  And after another 456 games we still have: +122 -113 =221",True,5,2009-04-01
mcostalba,mcostalba,2009-04-18 08:13:31+00:00,Introduce move_pawns() helper in movegen.cpp  This let us to have more readable code keeping the same speed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-18 08:12:41+00:00,Remove failHigh/Low bits from IterationInfoType  We don't use that info anyway.  Also document a little more new aspiration window code.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
zamar,mcostalba,2009-04-18 08:12:18+00:00,Restore calling insert_pv after search is aborted + small clean-up  Restore old behaviour that after search is aborted we call insert_pv; before breaking out from the iterative deepening loop.  Remove one useless FIXME and document other better.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-18 08:12:07+00:00,Little code style tweaks  Let the code be more conformant to current style.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-18 08:11:56+00:00,Revert previous patch as per Joona request Joona says patch gives bad results after testing; so revert for now.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
zamar,mcostalba,2009-04-18 08:11:41+00:00,Improve handling of fail-highs in assumed PV  Check all fail highs in assumed PV with greater care (fruit/Toga already does this). Add a flag when aspiration search fails high at ply 1 to prevent search to be terminated prematurely.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
zamar,mcostalba,2009-04-18 08:11:30+00:00,"Revert ""Implement a fallback system when aspiration search fails low and we are out of time.""  This reverts commit 55dd98f7c717b94a659931cd20e088334b1cf7a6.  Revert fallback-system for root_search  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-04-01
zamar,mcostalba,2009-04-18 08:11:15+00:00,Implement a fallback system when aspiration search fails low and we are out of time.  However also this patch is immediately reverted. For three reasons: 1) the case it affects is very rare (and then we are likely to lose anyway);    so we can well live without this.  2) Because the case is so rare it's hard to test this change properly.  3) To perform fallback search; we must reset so many global variables that this    patch is very likely both buggy and extremely bad style.  Consider including this again if we clean-up global variables one day...  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
zamar,mcostalba,2009-04-18 08:11:05+00:00,"Revert ""Implement bestValue in root_search.""  This reverts commit 9a39f93f35254787b7b57980019dde276a89c48c.  Revert bestValue in root_search  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-04-01
zamar,mcostalba,2009-04-18 08:10:54+00:00,Implement bestValue in root_search.  However just after finished writing this patch I realized that this is not the way to go. So this will be immediately reverted.  (Just save this here in git in case I change my mind later :) )  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
zamar,mcostalba,2009-04-18 08:10:41+00:00,Dynamic aspiration search without research.  Implement system where aspiration search window is calculated using values from previous iterations.  And then some crazy experimental stuff: If search fails low at the root; don't widen window; but continue and hope we will find a better move with given window. If search fails high at the root; cut immediately; add some more time and start new iteration.  Note: this patch is not complete implementation; but a first test for this idea. There are many FIXMEs left around. Most importantly how to deal with the situation when we don't have any move!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-13 11:02:22+00:00,Re-fix square.h warning to avoid a compile error under MSVC  This fix adds ugliness to an already ugly previous fix...hopefully it is the last one :-(  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-13 11:02:14+00:00,Fix a gcc warning due to order of initialization in Option  Move idx declaration before minValue and maxValue and silence this last warning.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-13 11:02:06+00:00,Fix a compile error with Intel icc  To make std::sort() work operator<() should be declared const.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-13 11:01:55+00:00,Fix a warning under Intel compiler in square.h  We need to cast to char the whole expression...  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-04-01
mcostalba,mcostalba,2009-04-12 00:10:50+00:00,Fix a very nasty conversion bug in Option c'tor  Sometimes C++ can be really bad!  In this case an hard coded c string selects Option c'tor with int argument instead of the std::string one becuase it is considered a better matching by the compiler.  Fix the bug changing the argument type from std::string to const char* so to be a better match then the int one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-04-01
mcostalba,mcostalba,2009-04-11 15:01:33+00:00,"Store UCI options of type CHECK according to C++ convention  Store boolean values as ""1"" and ""0"" instead of ""true"" and ""false"" and convert back to UCI protocol convention when needed.  This is simpler then the other way around.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-04-01
mcostalba,mcostalba,2009-04-11 15:01:21+00:00,Restore original UCI option printing order  For each option store its index so to be printed according to insertion order.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-11 15:01:08+00:00,Use a map instead of a vector to store UCI options  Apart from the teoretical speed increase; the main reason of this patch is a good amount of code cleanup.  Note that now UCI options are printed in alphabetical order and not in insertion order as before. Next patch will take care of restoring old behaviour.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-11 10:09:37+00:00,Remove unused currentMoveCaptureValue from search stack  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-11 09:58:10+00:00,Less aggressive null move dynamic reduction  In null move search do not jump directly in qsearch() from depth(4*OnePly); but only from depth(3*OnePly).  After 999 games at 1+0: +248 -224 =527 +8ELO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-04-01
mcostalba,mcostalba,2009-04-03 19:34:22+00:00,Revert dynamic LMR  It doesn't seem to work against Toga. After more then 400 games we are at -13 ELO while; without it we are at + 5 ELO after 1000 games.  So revert for now to keep code simple.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-04-01
mcostalba,mcostalba,2009-03-31 19:50:24+00:00,Fix compile in the debug mode  Due to previous patches we end up with a compile error in debug mode.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-31 19:50:10+00:00,Silence idiotic warning on two's complement of an unsigned  MSVC gives:  warning C4146: unary minus operator applied to unsigned type;                result still unsigned  When finds -b where b is an unsigned integer. So rewrite the two's complement in a way to avoid the warning. Theoretically the new version is slower; but in practice changes nothing.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-31 19:49:56+00:00,Silence a bunch of warnings under MSVC /W4  Still some remain; but are really the silly ones.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-31 19:41:06+00:00,Revert setting a flag when TT value equals static evaluation Strangely enough it seems that optimization doesn't work.  After 760 games at 1+0: +155 -184 =421 -13 ELO  Probably the overhead; although small; for setting the flag is not compensated by the saved evaluation call.  This could be due to the fact that after a TT value is stored; if and when we hit the position again the stored TT value is actually used as a cut-off so that we don't need to go on with another search and evaluation is avoided in any case.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-30 08:09:27+00:00,An VALUE_TYPE_EVAL score cannot overwrite an entry  If we want to store a value of type VALUE_TYPE_EVAL for a given position and we found an already exsisting entry for the same position then we skip.  We don't want to overwrite a more valuable score with a lesser one. Note that also in case the exsisting entry is of VALUE_TYPE_EVAL type the overwrite is unuseful because we would store the same score again.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-30 07:54:09+00:00,Remember when TT value equals static evaluation value  When the stored TT value equals the static value set a proper flag so to not call evaluation() if we hit the same position again but use the stored TT value instead.  This is another trick to avoid calling costly evaluation() in qsearch.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-30 07:29:02+00:00,Document TTEntry and move layouts  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-29 16:23:41+00:00,A move needs 17 bits not 19  Fix a bug in the way a move is stored and read in a TT entry. We use a mask of 19 bits insteaad of 17 so that the last two bits in the TT entry end up to be random data.  This bug will bite us when we will use these two until now unused bits.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-27 18:35:08+00:00,Remove some obsolete code in movepick.cpp  This fixes some warning under Intel compiler.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-03-01
mcostalba,mcostalba,2009-03-27 14:30:45+00:00,"Revert storing of TT when returning from ""stand pat""  After testing it seems patch is bad:  After 999 games 1+0: +242 -271 =486 -10 ELO  So restore saving of TT at the end but using new Joona idea of storing as VALUE_TYPE_UPPER/VALUE_TYPE_LOWER instead of VALUE_TYPE_EXACT.  Some optimization is still possible but better test new ideas one by one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2009-03-01
mcostalba,mcostalba,2009-03-24 17:28:42+00:00,Cache evaluation score in qsearch  Instead of just drop evaluation score after stand pat logic save it in TT so to be reused if the same position occurs again.  Note that we NEVER use the cached value apart to avoid an evaluation call; in particulary we never return to caller after a succesful tt hit.  To accomodate this a new value type VALUE_TYPE_EVAL has been introduced so that ok_to_use_TT() always returns false.  With this patch we cut about 15% of total evaluation calls.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-24 17:28:25+00:00,Let to toggle dynamic LMR  It is now disabled by default due to bad results against a pool of engines...more testing is needed tough.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-24 10:26:43+00:00,"In qsearch update TT only if returning from stand pat  This is the only ""correct"" exact value we can store.  Otherwise there could be spurious failed high/low nodes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,1,2009-03-01
mcostalba,mcostalba,2009-03-24 09:50:13+00:00,When asked for position key print it as an hex value  Merged from Glaurung current development snapshot.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-24 09:49:02+00:00,Wait at least until iteration 3 before to stop the search  It was 2 before.  Merged from Glaurung current development snapshot.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-24 09:40:22+00:00,Let zobrist keys to be compatible with Glaurung 1  Some changes to the zobrist keys; to make them identical to those used by Glaurung 1.  The only purpose is to make it possible for both programs to use the same opening book.  Merged from Glaurung current development snapshot.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-24 09:30:27+00:00,Fixed a sliding attack bitboard bug in 32-bit mode  This is what prevented USE_32BIT_ATTACKS from working on some architectures (like PowerPC).  Merged from Glaurung current development snapshot.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-23 14:30:20+00:00,Fix a bug in insert_pv() where minimum depth is zero  We implicitly considered the minimum depth stored in TT to be Depth(0); but because we store values in TT also in qsearch() where depth is < 0; we need to use a negative number as minimum depth.  Bug spotted by Joona Kiiski.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-23 11:02:15+00:00,Revert odd depths razoring I have just made a new rule that no modification that increases pruning is allowed if after 1000 games ELO is not increased by at least 10 point (was +5 in this case)  Yes; I like this kind of nosense rules :-),True,0,2009-03-01
mcostalba,mcostalba,2009-03-23 10:58:28+00:00,More aggressive dynamic LMR  Previous setup didn't change anything  After 996 games 1+0: +267 -261 =468 +2 ELO  Now with this new setup we have  After 999 games 1+0: +277 -245 =477 +11 ELO  Seems reasonable...  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-22 22:53:22+00:00,LMR dynamic reduction  Reduce of two plies near the leafs and when we still have enough depth to go so to limit horizon effects.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-22 22:53:10+00:00,Always print a best move when requested  Little fix merged from iPhone Glaurung.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-22 22:52:59+00:00,Better castle move detector in move_to_san()  Merged from iPhone Glaurung.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-22 22:52:23+00:00,Fix a smal bug in Position::from_fen  We could fail to parse an en-passant position in same cases.  Merged from iPhone Glaurung.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-22 22:52:06+00:00,Merge new pawn storm evaluation  More accuracy in pawn storm evaluation directly from iPhone Glaurung.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-22 12:11:24+00:00,Fix a small bug in king safety  Merged from iPhone Glaurung.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-22 12:06:29+00:00,Merge KBPP vs KB endgame from iPhone Glaurung  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-21 13:51:31+00:00,Fix: In qsearch do not use TT value when in a PV node  We already do like this in search_pv(); so extend also in qsearch().  Bug spotted by Joona Kiiski.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-03-01
mcostalba,mcostalba,2009-03-19 11:55:32+00:00,Big headers cleanup  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-03-01
mcostalba,mcostalba,2009-03-16 12:59:41+00:00,Safe guard some wild and ugly casts  These casts are needed but plain ugly; at least be sure they don't hide any subtle conversion bug.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-16 07:02:33+00:00,Partially revert pawns storm bug fix  Try to save space and use the minimum size possible.  In particular restore int16_t for values and int8_t for halfOpenFiles.  Use int16_t for storm values insted of int and also instead of original buggy and too small int8_t.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-15 17:19:08+00:00,Silence a good bunch of Intel warnings  Note that some pawns and material info has been switched to int from int8_t.  This is a waste of space but it is not clear if we have a faster or slower code (or nothing changed); some test should be needed.  Few warnings still are alive.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-15 17:18:56+00:00,Fix an overflow bug in pawns stormValue  These fields are defined as int8_t but values bigger then 127 are stored there so that we silently overflow.  Fix bringing up all the fields to a sane int type. This will increase memory usage; but apart from being safe; it is not clear if code is slower or faster. Test is needed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-15 17:18:42+00:00,Fix a silly warning on Intel compiler  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-15 15:44:12+00:00,Revert NULL move beta corrections After testing result is bad -25 ELO,True,6,2009-03-01
mcostalba,mcostalba,2009-03-15 15:43:28+00:00,Retire Null Driven IID  It does not seem to clearly improve things and in any case is disabled by default; so retire for now.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-03-01
mcostalba,mcostalba,2009-03-14 12:00:22+00:00,Merge Joona Kiiski NULL search beta correction  Prune more moves after a null search because of a lower beta limit then in main search.  In test positions reduces the searched nodes of 30% !!!!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-03-01
mcostalba,mcostalba,2009-03-14 11:55:14+00:00,Merge Joona Kiiski evaluation tweaks  Merge tewaks to many evaluation parameters by Joona Kiiski.  After test they seem good!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-03-01
mcostalba,mcostalba,2009-03-07 20:05:49+00:00,Micro optimize move_is_check()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-03-01
mcostalba,mcostalba,2009-03-07 20:05:31+00:00,Micro optimize pl_move_is_legal()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-03-01
mcostalba,mcostalba,2009-03-06 19:47:19+00:00,Micro optimize previous patch  Also remove some Intel warnings; not all :-(  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-03-01
mcostalba,mcostalba,2009-03-06 18:19:45+00:00,Introduce evaluate_pieces<>() to remove redundancy  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-03-01
mcostalba,mcostalba,2009-03-04 23:38:45+00:00,Fix compile error with inlines under gcc and Intel  It seems that these compilers do not like inline functions that call a template when template definition is not in scope.  So move functions from header to in *.cpp file  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-03-01
mcostalba,mcostalba,2009-03-04 21:51:20+00:00,Fix some comments in position.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-03-01
mcostalba,mcostalba,2009-03-04 21:51:04+00:00,Avoid to call useless sliders attacks in update_checkers()  Quickly filter out some calls to sliders attacks when we already know that will fail for sure.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-03-01
mcostalba,mcostalba,2009-03-04 21:50:51+00:00,Super fast hidden_checkers()  Rewritten hidden_checkers() to avoid calling sliders attacks functions but just a much faster squares_between()  Also a good code semplification.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-03-01
mcostalba,mcostalba,2009-03-03 20:01:00+00:00,Cleanup SearchStack initialization  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-03-01
mcostalba,mcostalba,2009-03-02 17:00:42+00:00,Micro optimize copy of new state in do_move()  Instead of copying all; copy only the fields that are updated incrementally; not the ones that are recalcuated form scratch anyway.  This reduces copy overhead of 30%.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-03-02 15:20:00+00:00,Revert hidden checkers rework  It is slower the previous uglier but faster code.  So completely restore old one for now :-(  Just leave in the rework of status backup/restore in do_move().  We will cherry pick bits of previous work once we are sure we have fixed the performance regression.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-03-01
mcostalba,mcostalba,2009-02-28 17:43:36+00:00,Use checker info to remove a bunch of hidden checks updates  Another powerful condition let us remove a big chunk of useless updates.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-28 17:43:20+00:00,Stricter condition to check for dc candidates  Another optimization that let us remove another half of find_hidden_checks(them; DcCandidates) calls.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-28 17:43:02+00:00,Split calculation of pinners from dc candidates  This let us to calculate only pinners when we now that dc candidates are not possible.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-28 17:42:51+00:00,Slightly better condition in update_hidden_checks()  Use a more strict condition to check if we have captured an opponent pinner or hidden checker.  With this patch the occurrence of checkerCaptured == true are reduced of 50%.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-28 17:42:30+00:00,Compute pinned and friends incrementally  In do_move() use previous pinned bitboards values to compute the new one after the move. In particulary we end up with the same bitboards in most cases. So detect these cases and just keep the old values.  This should speedup a lot this slow computation in a very hot path so that we can use this important info everywhere in the code at very cheap cost.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-23 20:45:12+00:00,Fix a subtle bug due to the StateInfo pointer became stale  There was one occurence when the StateInfo variable went out of scope before the corresponding Position object.  This yelds to a crash. Bug was not hit before because occurs only when using an UCI interface and not the usual benchmark.  The fix consists in copying internally the content of the about to stale StateInfo.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-02-01
mcostalba,mcostalba,2009-02-23 20:45:01+00:00,Teach SEE about pinned pieces  Remove pinned pieces from attacks when calculating SEE value.  Algorithm is not perfect; there should be no false positives; but can happen that we miss to remove a pinned piece. Currently we don't cach 100% of cases; but is a tradeoff between speed and accuracy. In any case we stay on the safe side; so we remove an attacker when we are sure it is pinned.  About only 0;5% of cases are affected by this patch; not a lot given the hard work: this is a difficult patch!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-02-01
mcostalba,mcostalba,2009-02-23 20:44:46+00:00,Small Position::clear() cleanup  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-02-01
mcostalba,mcostalba,2009-02-23 20:44:29+00:00,Do not copy the whole old state in do_move()  Instead of copy the old state in the new one; copy only fields that will be updated incrementally; not the ones that will be recalculcated anyway.  This let us copy 13 bytes instead of 28 for each do_move() call.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-02-01
mcostalba,mcostalba,2009-02-23 20:44:17+00:00,Update pinned bitboards and friends in do_move()  Probably is slightly slow; but code is surely better in this way. We will optimize later for speed.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-02-01
mcostalba,mcostalba,2009-02-23 20:44:04+00:00,Fix some asserts unhidden by a debug compile  Fallback form previous patches. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-02-01
mcostalba,mcostalba,2009-02-22 20:19:04+00:00,Avoid resetting pinners[c]  Small optimization. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-02-01
mcostalba,mcostalba,2009-02-22 20:18:50+00:00,Introduce StateInfo instead of UndoInfo  We don't backup anymore but use the renamed StateInfo argument passed in do_move() to store the new position state when doing a move.  Backup is now just revert to previous StateInfo that we know because we store a pointer to it. Note that now backing store is up to the caller; Position is stateless in that regard; state is accessed through a pointer.  This patch will let us remove all the backup/restore copying; just a pointer switch is now necessary.  Note that do_null_move() still uses StateInfo as backup.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-02-01
mcostalba,mcostalba,2009-02-22 20:18:35+00:00,Wrap state variables in a named struct  This will allow us to more easily move the state out of Position class.  No functioanl change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-02-01
mcostalba,mcostalba,2009-02-22 20:18:14+00:00,Convert also undo_null_move() to avoid passing UndoInfo object  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-02-01
mcostalba,mcostalba,2009-02-22 20:18:02+00:00,Passing UndoInfo is not needed anymore when undoing the move  We store it now in the same UndoInfo struct as 'previous' field; so when doing a move we also know where to get the previous info when undoing the back the move.  This is needed for future patches and is a nice cleanup anyway.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-02-01
mcostalba,mcostalba,2009-02-22 20:17:44+00:00,Remove two useless calls to pinned_pieces()  Are obsoleted by new pinned caching code.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-02-01
mcostalba,mcostalba,2009-02-20 21:50:35+00:00,Position: Unify and templetize mg_pst() and eg_pst()  Also templetize compute_value() can be simpler now that the above is templetized too.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-20 21:50:20+00:00,Unify compute_mg_value() and compute_eg_value()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-20 21:50:08+00:00,Use a union to fast and simply backup info in do_move()  This nice union trick let us optimize the speed and remove the now unuseful backup() and restore() functions.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-20 21:49:54+00:00,In Position backup and restore contiguous data  Give the compiler one more chance to optimize the copy.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-19 16:35:23+00:00,Finally remove any occurence of dcCandidates from search.cpp  This ends our cleanup series.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-02-01
mcostalba,mcostalba,2009-02-19 16:29:36+00:00,Do not pass discovery check candidates in Position::do_move()  Also remove any bit of 'pinned' and co. from MovePicker class.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-02-01
mcostalba,mcostalba,2009-02-19 16:01:08+00:00,Do not pass pinned argument in Position::move_is_check()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-02-01
mcostalba,mcostalba,2009-02-19 15:48:57+00:00,Do not pass pinned argument in Position::pl_move_is_legal()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-02-01
mcostalba,mcostalba,2009-02-19 15:37:03+00:00,Cleanup pinned and friends in movegen.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-02-01
mcostalba,mcostalba,2009-02-19 15:28:35+00:00,Cache pinned and discovery check bitboards  After have been calculated cache their values so to avoid another expensive call to hidden_checks() if pinned_pieces() or discovered_check_candidates() are called with the same position.  Add also interface to get pinners bitboard; we already have this value so save it instead of discard.  Now that; after the first call to pinned_pieces() the following are very cheap we can rewrite and cleanup all the checking handling.  So this patch is a prerequisite for future work.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-02-01
mcostalba,mcostalba,2009-02-19 14:49:54+00:00,Revert mobility of pinned pieces for now We will redo after rewriting the handling of pinned bitboard and its friends.,True,3,2009-02-01
mcostalba,mcostalba,2009-02-17 16:26:15+00:00,Remove xxx_of_color() for real  Remove also from assert expressions. Was hidden in release mode.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-17 11:00:05+00:00,Change piece_attacks_square() API  An extra argument let us simplify some code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-17 10:29:14+00:00,Mobility is zero for a pinned piece  A little bit more overhead; but better mobility evaluation.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-17 09:54:47+00:00,Remove xxx_of_color() helpers  They hide the underlying uniform function call with no benefit.  A little bit more verbose but now is clear what happens.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-13 19:57:03+00:00,Avoid a call to move_is_capture() in extension()  Pass value as an argument instead or recalculating it. Altough call is cheap this is a very hot path so with this patch total time spent for move_is_capture() is almost halved.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:56:46+00:00,Add scan for X-ray attacks in piece_attacks_square()  Used to avoid pruning interesting moves.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:56:26+00:00,"Fix a subtle bug in Position::move_is_capture()  Currently fails if we test with a move that is not of from the side to move but from the opponent.  This is the typical case of the threat from null move search. The result is an erroneus prune of the defending moves; see PruneDefendingMoves in ok_to_prune()  Fix the test to work also with threat moves.  Bug was always in but was unhidden by a patch of 17/12/2008 ""Trigger of PawnEndgameExtension if capture is not a pawn""  Until then it was hidden by a tricky check in the prune conditions instead of the natural move_is_capture()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:55:59+00:00,Do not manually build endgame functions hash keys  Use Position::compute_material_key() to do the job; so we are sure there is not key mismatch during endgame function lookups.  This fixes two endgames hash errors that caused two endgames to be disabled.  This patch is also a code cleanup because removes a lot of messy key assignments.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:55:29+00:00,Use template for endgame scaling functions  Also integrate scaling and evaluation in a single base class.  Nice use of templates here :-)  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:55:14+00:00,Use templates for end game evaluation functions  Huge simplification and no speed cost penalty.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:54:56+00:00,Small code formatting in position.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:54:37+00:00,Use update_checkers<>() also for PAWN  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:54:17+00:00,Introduce update_checkers() to simplify do_move()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:53:58+00:00,Remove square_is_attacked()  Use attacks_to() instead. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:53:39+00:00,Rename generate_piece_blocking_evasions()  In generate_piece_moves() to be more uniform with other functions. Unfortunatly the different number of calling arguments do not allow us to easily integrate in generate_piece_moves() template family.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:53:13+00:00,Final touches to generate_evasions()  Small code tidy up and a little optimization to avoid calling generate_piece_blocking_evasions() when blockSquares is empty (30% of cases).  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-13 19:52:52+00:00,Simplify legality check in generate_evasions()  Now that we have removed sliders checkers attacks from evasion's set we can simplyfy legality check.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-11 18:01:26+00:00,generate_evasions() avoid an usless check for enpassant case  Remove ugly and useless code. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-11 18:01:06+00:00,Optimize generate_piece_blocking_evasions()  Rewrite as in generate_piece_moves() using a for loop instead of the slower serializing of the bitboard with pop_1st_bit()  This will allow also to merge with generate_piece_moves() when we will drop legality constrain on generate_evasions()  Generated moves are not changed; but are generated in a different order; this changes the number of nodes at fixed depth test.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-11 18:00:52+00:00,generate_evasions() avoid to calculate pinned pieces  Pass as function argument.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-11 18:00:35+00:00,Drop a double semicolon  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-10 18:01:51+00:00,Last touches to movegen.cpp  Of course no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-10 18:01:49+00:00,Remove special case of pawn checks generation  Also additional renaming.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-10 18:01:47+00:00,Remove special case of pawn move generatation  Code cleanup. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-10 18:01:45+00:00,Simplify generate_evasions()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-10 18:01:43+00:00,Simplify generate_checks()  Also rearrange signatures to be uniform.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-10 18:01:41+00:00,Micro-optimize do_generate_pawn_checks()  Discovery check candidates are normally empty; so avoid discovery checks generation in that common case.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-10 18:01:39+00:00,Templetize generate_piece_checks_king()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-02-01
mcostalba,mcostalba,2009-02-07 12:26:57+00:00,Small optimization in generate_evasions()  Find squares attacked by slider checkers; we will remove them from king evasions set so to avoid a couple of cycles in the slow king evasions legality check loop.  Not a biggie; but now generate_evasions() is faster then generate_non_captures(); before was slower.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-07 12:26:50+00:00,Simplify newly introduced castling_is_check()  Use bit_is_set() instead of open coding.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-07 12:26:42+00:00,Small code style tidy up  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-07 12:26:29+00:00,Fix casting warnings under Intel Compiler  Int to Char warning fixed changing the function signature to int.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-07 12:26:17+00:00,Fix Makefile  Was broken after we removed color.cpp and square.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2009-02-01
mcostalba,mcostalba,2009-02-06 06:14:38+00:00,Templetize generate_castle_moves()  Cleanup the code and remove lines.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-06 06:14:16+00:00,Add generation of castling checks  When we generate checks one case is missing: generation of castling moves that give check to the opponent king.  This is a very rare case but anyway it is a case and we can do this without slowing down the common case of no castling checks.  So this is the patch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2009-02-01
mcostalba,mcostalba,2009-02-04 18:41:56+00:00,Remove square.cpp  Move the few stuff in square.h  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-04 18:41:38+00:00,Move constants from piece.cpp to piece.h  Leave in piece.cpp only a couple of functions that need #include <cstring>  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-04 18:41:17+00:00,PawnInfo::clear() retire memset() and fix Ubuntu compile  Go back to original direct assignment; this allows to add an include in pawns.h to teach about memset()  This fix a compile error under Ubuntu.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-04 18:40:43+00:00,Remove the useless color.cpp  Integrate the only (inline) function in color.h  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-04 18:40:31+00:00,Final endgame.cpp space inflate  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-02-04 18:40:09+00:00,Revert previous commit. Optimization is correct but slightly slower so it is a pessimization :-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-02-01
mcostalba,mcostalba,2009-01-25 18:29:15+00:00,Yet another count_1s() optimization  No functional change  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-01-01
mcostalba,mcostalba,2009-01-25 17:00:57+00:00,Rever count_1s() optimizations  They are wrong for all ones case.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-01-01
mcostalba,mcostalba,2009-01-25 12:52:35+00:00,MovePicker; remove a variable  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-01-01
mcostalba,mcostalba,2009-01-25 12:36:59+00:00,MovePicker::find_best_index() never returns -1  So avoid checking for it.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-01-01
mcostalba,mcostalba,2009-01-11 16:15:18+00:00,Rewrite count_1s() to be similar to 64bit counterpart  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-01-01
mcostalba,mcostalba,2009-01-11 16:05:29+00:00,Micro optimize count_1s_max_15() for 32 bit system  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2009-01-01
mcostalba,mcostalba,2009-01-10 15:11:33+00:00,"Fix a very old bug in queen mobility  For queen mobility could be bigger then 15; so we need count_1s() not count_1s_max_15().  This bug was introduced by patch: ""Group common evaluate code"" of 24/9/2008  So it's almost 4 months and two release old!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2009-01-01
mcostalba,mcostalba,2009-01-08 14:46:57+00:00,Start to space inflate endgame.cpp  Still a lot to do; it's a big file!  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2009-01-01
mcostalba,mcostalba,2009-01-07 14:48:22+00:00,Rewrite evaluate_common() as a template  Seems to speed up this very hot path and code is cleaner too.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-01-01
mcostalba,mcostalba,2009-01-07 14:48:11+00:00,Big trailing whitespace cleanup part 2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-01-01
mcostalba,mcostalba,2009-01-07 14:47:59+00:00,Big trailing whitespace cleanup part 1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-01-01
mcostalba,mcostalba,2009-01-07 14:47:31+00:00,Another micro-optmization in valuate_passed_pawns()  very small gain; but still a gain at the cost of an extra indentation level.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2009-01-01
mcostalba,mcostalba,2009-01-06 15:10:22+00:00,Fix a small bug in rook pawn evaluation  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-01-01
mcostalba,mcostalba,2009-01-06 15:06:08+00:00,evaluate_passed_pawns() micro-optmization  No functional change; only a bit faster.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-01-01
mcostalba,mcostalba,2009-01-06 14:59:08+00:00,Final space inflate of evaluatio.cpp  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-01-01
mcostalba,mcostalba,2009-01-06 14:49:33+00:00,Space inflate evaluate_passed_pawns()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2009-01-01
mcostalba,mcostalba,2009-01-05 14:14:16+00:00,Piece mobility: filter out squares protected by pawns  Do not consider squares protected by enemy pawns in mobility evaluation.  This reduces the mobility value by about 15%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-01-01
mcostalba,mcostalba,2009-01-05 11:41:27+00:00,Take in account odd depths in razoring formula  This is somewhat taken from Stockfish 1.2 Default; only the razoring thresold are updated; not the razoring depth.  At the end razoring is a bit more aggressive. Results seems slightly positive.  After 999 games +239 =536 -224 Elo +5  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2009-01-01
mcostalba,mcostalba,2008-12-30 11:54:21+00:00,Fix dbg_mean_of() to enable statistics when called  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-30 11:42:23+00:00,Restore development versioning and LSN filtering  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-29 11:24:34+00:00,Stockfish 1.2 optimistic  Optimistic razoring settings. It is stronger with most engines but weaker with someones.  The default is instead more solid and uniform with all the opponents.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-29 11:18:49+00:00,Stockfish 1.2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-29 11:18:36+00:00,Micro optimization in extension()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-29 11:18:23+00:00,Remove a gcc warning on an unused variable  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-28 18:38:44+00:00,Properly handle odd depths in razor formula  A little bit more aggressive; but should be more in line with the depths logic.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-28 11:55:33+00:00,Safer razoring formula  Add also the possibility to razor at ply one. It is disable dby default but it seems stronger against Stockfish itself. It is still not clear if is stronger against other engines. By now leave disabled.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-28 11:37:13+00:00,Don't silently accept an option name mismatch  With this we could have found earlier the futility name option bug!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-25 19:08:45+00:00,Tweak again futility margings  Lower margins near the leafs; higher at high depth.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-12-01
mcostalba,mcostalba,2008-12-25 18:41:24+00:00,Expose new futility margin interface to UCI  Now futility margin it's actually a scale factor to apply to the base ones.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-12-01
mcostalba,mcostalba,2008-12-25 11:05:45+00:00,Tweak futility margins  Less prune at the bottom and at the middle; a bit more at the top.  After 747 games: +215 =345 -187 +13 elo  Also introduced a vector of margins; now that start to be a lot it is a more flexible solution.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-12-01
mcostalba,mcostalba,2008-12-24 08:35:57+00:00,Try razoring only for depth > OnePly  Because razoring verification after qsearch() cuts more then 40% of candidates; do not waste a costly qsearch for nodes at depth one that will be probably discarded anyway by futility.  Also tight razoring conditions to keep dangerous false negatives below 0;05%. Still not clear if it is enough.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-12-01
mcostalba,mcostalba,2008-12-24 08:34:09+00:00,Futility pruning till ply 6 included  Seems good:  After 796 games: +211 = 393 -192 +8 elo  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-12-01
mcostalba,mcostalba,2008-12-23 11:02:10+00:00,Fix a comment  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-23 11:01:48+00:00,Merge futility pruning from Glaurung 2.2  It seems much more powerful then previous one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-22 11:10:15+00:00,Passed pawns: consider enemy rooks or queens from behind  Merged from Glaurung 2.2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-22 11:07:00+00:00,King safety: retire rook contact check  Merged from Glaurung 2.2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-22 10:44:00+00:00,Set the 'Problem' variable only at ply == 1  Bug fix merged from Glaurung 2.2 for search_pv()  Added the same fix also to sp_search_pv() where was missing.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-21 19:10:20+00:00,Retire EvaluatePawnStorms and UseEasyMove constants  Merged from Glaurung 2.2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-21 16:02:34+00:00,Merge cosmetics from Glaurung 2.2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-21 15:26:36+00:00,Merge space weigth evaluation fromGlaurung 2.2  Is a new evaluation rule that gives bonus in midgame to the side that has more space behind pawns for its minor pieces.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-21 14:38:10+00:00,Merged two new endgames from Glaurung 2.2  It is two bishop against a knight and two minor pieces against one minor piece.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-21 09:44:41+00:00,SEE: add support for enpassant moves  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-21 09:44:12+00:00,Call poll() before to check for stopped search  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-21 09:42:39+00:00,Less aggressive razoring  Use a margin to compare with beta so that positions that after the verifying qsearch have gained a lot of points are not discarded just becasue not above beta.  Also remove the second condition on depth <= OnePly; it was too risky and added only a 2% more of pruned nodes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-18 21:01:56+00:00,"Revert: ""Do not razor when in check""  It is slightly weaker after 500 games. Keep the check on mate values.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2008-12-01
mcostalba,mcostalba,2008-12-17 18:36:51+00:00,Trigger of PawnEndgameExtension if capture is not a pawn  Instead of a rook.  This gives an unexpected graeat increase!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-12-01
mcostalba,mcostalba,2008-12-16 21:20:53+00:00,search_pv: an enpassant move is a capture  Fix the logic in search_pv and sp_search_pv  An additional issue to consider is that a castle move is not a capture but destination square is not empty.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-16 21:20:42+00:00,qsearch: take in account enpassant in futility formula  Should not change anything at ELO level but it is the correct thing to do.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-16 21:20:18+00:00,qsearch: do not call evaluate when in check  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-15 21:23:03+00:00,Restore development versioning and LSN filtering  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-15 21:20:03+00:00,Do not razor while in check or value is mate  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-15 21:19:25+00:00,Do not null search when beta is a mate value  Also do not return unproven mates in null search.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-15 21:18:56+00:00,Better document null move dynamic reduction  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-15 21:13:42+00:00,Introduce beta counters to order moves at ply one  Instead of number of searched nodes use the number of opponent beta-cutoff occurred under the move subtree.  After 570 games 1+0 we have: +150 =288 -132 (+11 ELO)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-14 16:26:05+00:00,Debugging: move debug function definitions in misc.cpp  Also activate writing on log file.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-14 13:57:17+00:00,Debugging: print to file  Print debug info on log file; not only on std::cout  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-12-01
mcostalba,mcostalba,2008-12-12 21:27:43+00:00,Fix two bugs in ok_to_prune() (2)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-12-01
mcostalba,mcostalba,2008-12-11 19:39:08+00:00,"Disable ""Null driven IID"" by default  Testing is not clear. Probably we need to test at deeper depths to have some clear results.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2008-12-01
mcostalba,mcostalba,2008-12-11 19:38:52+00:00,Null move only for depth > OnePly  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-12-01
mcostalba,mcostalba,2008-12-10 20:43:09+00:00,Null driven IID: remove IIDMargin from see() condition  This seems to cut searched nodes also more.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-12-01
mcostalba,mcostalba,2008-12-10 20:35:07+00:00,Fix inflate pawns.cpp fallout  Catched counting the nodes searched at fixed depth. A quick and reliable cross check; expecially in inflate only patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-12-01
mcostalba,mcostalba,2008-12-09 23:14:24+00:00,Add behind_bb() helper to simplify code logic  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-09 23:14:15+00:00,Space inflate pawns.cpp  Hopefully no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-09 23:13:59+00:00,Add a see() function that take only destination square  In this case firstlocates the least valuable attacker; if any; then proceed as usual.  This will be used by next patch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-12-01
mcostalba,mcostalba,2008-12-08 11:03:46+00:00,Stockfish 1.1a  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-08 09:57:40+00:00,"Add ""Null driven IID"" UCI option (default true)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2008-12-01
mcostalba,mcostalba,2008-12-08 09:46:52+00:00,Null move driven internal iterative deepening  When a null move fails low due to a capture; try to detect if without the capture we are above beta; in this case there is a good possibility this is a cut-node and the capture is just a null move artifact due to side to move change. So if we still don't have a TT move it's a good time to start an IID.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-12-01
mcostalba,mcostalba,2008-12-06 16:18:59+00:00,Stockfish 1.1  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-06 11:32:23+00:00,Revert see() shortcut for LxH and equal captures  It happens that more then 70% of cases are HxL; where we call see() anyway. The mesured saving of calling see is about 0;5% of total time; but considering the added burden in score_captures() the saving is only 0;35% locally and due to more difficult inlining of the function it ends up that we have no advantage at all; possibly a small slow down!  So revert.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-06 11:32:11+00:00,Fix two gcc warnings in san.cpp  One good; the other silly.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-06 11:31:48+00:00,Fix an Intel warning in san.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-06 10:37:19+00:00,MovePicker: avoid calling see() for LxH and equal captures  No functional change but should speed-up the captures scoring.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-06 10:31:14+00:00,Null capture pruning  Null move can fail low because of a capture artifact due to the side to move change. Try to detect this condition and fail high instead.  This pruning is very powerful; around 7% of nodes; but is still experimental so is disabled by default.  Set UseNullCapturePruning to true to enable.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-06 10:18:31+00:00,Position::move_is_capture() does not handle MOVE_NONE  Actually square 0 can be dirty; so that move_is_capture(0) can return any random values.  Add an assert to be sure it is caught.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-06 10:18:08+00:00,Allow to call Position::print() from MovePicker  Fix a recursion issue that gives a stack overflow.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-12-01
mcostalba,mcostalba,2008-12-05 08:06:51+00:00,san.cpp: rewrite broken move_from_san  Use a state machine to parse the input. Fixed the many broken cases.  Tested on more then 15 milions nodes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-12-01
mcostalba,mcostalba,2008-12-05 08:06:30+00:00,san.cpp cleanup  Hopefully no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-12-01
mcostalba,mcostalba,2008-11-30 18:23:33+00:00,Revert opponent time advantage logic  Strength increase was due to an hidden bug introduced by the patch; namely the time per move to /30 instead of /40 (see previous patch).  After testing this feature do not add any substantial increase so is removed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-30 20:16:47+00:00,Revert sigmoid interpolator  After deep test (1000 games) it seems do not improve anything; actually seems slightly weaker.  So remove it for now.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-30 00:25:16+00:00,san.cpp pass position as constant reference  Make a copy of the position when needed instead of passing as a reference. It is cleaner and let us to simplify also Position::print()  A small space inflate while there.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-29 23:38:33+00:00,piece_type_to_char() default argument in declaration  Default argument should be in declaration where it is visible through header include; not in definition.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-26 10:22:30+00:00,Revert threat move ordering  Does not seem to improve anything.  Anyhow idea is nice; maybe we still have to find correct recipe.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-11-01
mcostalba,mcostalba,2008-11-25 19:41:06+00:00,Tweak allocated time per move  It seems better to give more time in middle game then at the end.  Also Toga uses the same limit.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-25 19:40:49+00:00,Rewrok the extendeable patch  Cleanup and document.  The real functional change is that not mate threat moves are never pruned; as could happen before.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-25 19:40:34+00:00,MovePicker: take advantage of threat move for ordering  If the null move was refuted by a capture then give a bonus if we move away the captured piece.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-25 19:40:12+00:00,Use extendable instead of depth extension  We can have depth(0) also in problematic cases according to how extensions are tweaked by the user.  In any case we don't want to prune these moves.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-24 19:43:29+00:00,Generate moves for powerful pieces first  This seems to reduce searched nodes by a surprising 2.5%  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-24 19:43:11+00:00,Benchmark: print nodes searched at the end of testing  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-22 14:59:26+00:00,Easy debug macro enabling  Now you don't need to toggle show_debug_xxxx anymore  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-22 10:56:14+00:00,Introduce node limited benchmarking  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-22 10:02:05+00:00,Introduce depth limited benchmarking  Also print some more info.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,Unknown,2008-11-19 21:15:41+00:00,Remove an include in movepick.h  Signed-off-by: Marco Costalba <mcostalba@gmail.com> Signed-off-by: unknown <Marco@.(none)>,True,2,2008-11-01
mcostalba,Unknown,2008-11-19 21:15:26+00:00,Fix a silly bug that disabled second killer  Signed-off-by: Marco Costalba <mcostalba@gmail.com> Signed-off-by: unknown <Marco@.(none)>,True,2,2008-11-01
mcostalba,Unknown,2008-11-19 21:15:14+00:00,qsearch: restore pruning of pv nodes with negative SEE  Signed-off-by: Marco Costalba <mcostalba@gmail.com> Signed-off-by: unknown <Marco@.(none)>,True,2,2008-11-01
mcostalba,mcostalba,2008-11-16 11:46:12+00:00,Fix Intel warnings and init_search_stack argument  Should be a reference not a copy!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:48+00:00,Set killer slots number to 2  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:48+00:00,MovePicker: fix a nasty bug in EvalInfo optimization  EvalInfo has missing attack info when a specialized endgame function is used.  We missed this case and were using an empty attack bitboard instead so that no captures were generated for endgames.  After testing the EvalInfo optimization gave worst results; so after a (long) debug session this nasty bug was found.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:48+00:00,Add and use update_killers()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:48+00:00,Add and use move_is_killer() helper  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:47+00:00,Convert killers to a vector  Add infrastructure to threat killer moves as a vector; this will allow us to easily parametrize the number of killer moves; instead of hardcode this value to two as is now.  This patch just add the infrastructure; no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:47+00:00,qsearch: do not prune pv nodes with negative SEE  Also small micro-optimization; take a line out of the moves loop.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:47+00:00,Disable per-square MVV/LVA for now  Needs more testing.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:46+00:00,MovePicker: use EvalInfo to skip generating captures  When we know already no captures are possible in a given position.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:46+00:00,"Position::to_fen(): fix a bug in side to move representation  Was introduced almost two months ago in patch: ""Space inflate Position::to_fen()""  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:46+00:00,Print the move in addition to position  Teach Position::print() to optionally print a given move in san notation in addition to the ASCII representation of the board.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:46+00:00,Enable per-square MVV/LVA  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:46+00:00,MovePicker:find bad captures during scoring  Instead of pospone until picking. No functional change and probably no performance change but it is needed for following patch.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:45+00:00,MovePicker: introduce per square MVV/LVA ordering  Just added the infrastructure; no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-16 11:37:45+00:00,Fix hashfull info  Do not count has a replacement when a TT entry is written in an empty slot.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:40+00:00,Fix in ok_to_history(): castle move is not a capture  It is erroneusly considered a capture because king moves on the same square of the rook.  Use the correct function Position::move_is_capture() instead of the open coded (and buggy) one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:40+00:00,Small tidyup of TranspositionTable::store()  Hopefully without bugs this time!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:40+00:00,Fix a logic bug in TranspositionTable::store()  Make the logic work as advertised in the function description.  Still a fallback from TT cleanup.  This should be less serious then the one in retrieve(); but it's still a bug.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:40+00:00,Micro optimization of update_history()  Remove an useless comparison.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:40+00:00,Use cut-off checks in qsearch as killer moves  Killers should not be captures; but checks are not and are produced also in qsearch.  Use this information; will be useful for move ordering.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:39+00:00,Smaller null move reduction when depth is high  Lower probability to miss something important.  It seems to increase strenght. Idea form Cyclone.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:39+00:00,Introduce LastIterations variable  Is set during the last iteration.  Sometime also during the second last.  During the last iteration is set in the 95% of cases.  During the second last is set in the 40% of cases.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-10 18:19:39+00:00,Restore development versioning and LSN filtering  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-11-01
mcostalba,mcostalba,2008-11-04 19:59:11+00:00,Fix a missed initialization in get_option_value()  Spotted and reported by Dann Corbit.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-04 19:56:30+00:00,Stockfish 1.01  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-04 19:56:30+00:00,Fix compile under Ubuntu 64bit  Some missing includes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-04 19:56:30+00:00,Fix a serious bug in TranspositionTable::retrieve()  Reported by Tord Romstad.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-04 19:56:30+00:00,Restore development versioning  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-04 19:56:18+00:00,Restore LSN filtering  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-11-01
mcostalba,mcostalba,2008-11-02 14:58:10+00:00,Revert movepick optimizations before to release  More testing is needed and better do not risk just before release.  Reverted:  Disable LSN filtering as defualt for release Use MVV/LVA in score_evasions()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-02 14:35:32+00:00,Stockfish 1.0  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-02 14:35:02+00:00,Disable LSN filtering as defualt for release  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-02 14:00:28+00:00,Use MVV/LVA in score_evasions()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-02 14:00:28+00:00,Delay SEE for scoring captures  Do not calculate SEE on all the moves in MovePicker::score_captures() but delay until pick_move_from_list() when only the best ones are double checked against their see value.  If a beta cut-off occurs then we avoid calculating SEE on all the moves; but just the picked ones.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-02 14:00:28+00:00,search: micro optimization  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-02 14:00:19+00:00,Fix a couple of gcc warnings in position.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-02 14:00:09+00:00,Update README to Stockfish  Remove Glaurung references.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:54+00:00,Final touches to material.cpp  No functional changes; altough a bit of code reshuffle.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:54+00:00,Material: lockless per-thread maps  Adds a good bunch of code but should be faster and scalable because is lockless.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:54+00:00,"Revert ""MovePicker::score_captures() order with SEE when pv""  Does not seem to increase the strenght.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:53+00:00,Space inflate move.cpp  Also a little cleanup.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:53+00:00,"Revert ""Relax time constraints""  Does not seem to give an improvment; acutually it seems a totally neutral change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:53+00:00,Partially space inflate search.cpp  Space inflate main remaining functions in search.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:53+00:00,Relax time constraints  Allow a seacrh to take a bit more time if needed.  This reduces the chanches of wast all the search time for the last iteration and also allow to start the last iteration when we have less time remaining.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:52+00:00,Material: micro optimize map reading  Do only one map walk per read instead of two.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:52+00:00,Material: protect global map access with locks  STL library is not guaranteed to be thread safe; even for read-access.  So because these global maps are accessed by all the threads we need to protect them.  This fixes a random crash experienced during testing.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:52+00:00,MovePicker::score_captures() order with SEE when pv  Order PV nodes by SEE instead of MVV/LVA.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:52+00:00,"Revert ""Last minute surprise"" for now  It defenitly needs more testing. Just postponed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:52+00:00,Finish material.cpp cleanup  Hopefully no regression this time!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:51+00:00,Start to simplify material.cpp  It is posisble to simplify a lot here!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:51+00:00,Factor out Position::do_capture_move()  Start to slim line count i position.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:51+00:00,"Fix a bug in generate_evasions()  Introduced in the patch ""movegen: prefer (*mlist++) to mlist[n++]""  This was nasty because due to a mismerge the repo in one PC had the bug; but the testing one did not; so I had non reproducible results according to which machine I used for testing.  This hopefully closes a more then one week regression that made me go crazy!  It was found by accident comparing; for other reasons; the sources of the two PC's.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2008-11-01
mcostalba,mcostalba,2008-11-01 11:46:51+00:00,"Refine ""few moves"" in ""last minute surprise""  It seems that ""few moves"" works because we extend the good captures at the last ply of PV; so code it directly.  This version seems defenitly stronger then previous one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,5,2008-11-01
mcostalba,mcostalba,2008-10-26 20:44:58+00:00,Manual merge,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 20:30:21+00:00,Space inflate extension() code  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 20:30:21+00:00,TEST: extend when few moves available  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 20:30:21+00:00,Revert see shortcut when only one attacker  It does not seem to work after a little testing.  Perhaps it works on the long terms; but it is also ugly because not correct; so revert for now.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 20:30:21+00:00,Prefer out of loop variables in MovePicker::score_captures()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 20:30:20+00:00,Effectively use MVV/LVA in MovePicker::score_captures()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 20:30:20+00:00,Reintroduce piece/square tables to score non-captures  Was removed after original movepick restore. But proved to be useful.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 12:23:27+00:00,Position: fix a couple of Intel compiler warnings  Plus usual trailing whitespace.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 09:11:13+00:00,Test with SEE shortcut  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 09:11:13+00:00,Better naming of pseudo-legality and legality testing  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 09:11:13+00:00,Try to cleanup movepick  Hopefully without regressions.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 09:11:13+00:00,"Restore original movepick modulo space inflation  We have a regression somewhere here so restart from zero and proceed one change at a time.  With this modification we have the same strenght of ""Introduce Stockfish"" patch that is our strongest to date.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,6,2008-10-01
mcostalba,mcostalba,2008-10-26 09:10:56+00:00,Space inflate position: complete!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-24 19:10:05+00:00,Space inflate position until do_promotion_move()  We will end some day ;-)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-24 19:10:05+00:00,Start to space inflate position.cpp  It's a big file!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-24 19:10:05+00:00,Fix a performance bug in generate_move_if_legal  Use the pinned argument in pos.move_is_legal()  No functional change; simply use pos.move_is_legal() as was meant to be.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-24 19:10:04+00:00,Unify pinned and discovery checks code  Templates are our friends here. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-24 19:10:04+00:00,Refactor Position::pinned_pieces() to use templates  Also better document this interesting function.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-24 19:10:04+00:00,movegen: add SERIALIZE_MOVES and hides a bunch of loops  Only syntactic sugar; perhaps we should leave as is; anyhow...  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-24 19:10:04+00:00,Another  generate_piece_moves() micro optimization  This time on the for loop.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-24 19:09:51+00:00,Fix another template conversion bug in movegen  Hopefully the last one.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-10-01
mcostalba,mcostalba,2008-10-23 05:17:04+00:00,movegen: prefer (*mlist++) to mlist[n++]  Teoretically faster; practically it helps to removes some more lines.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-10-01
mcostalba,mcostalba,2008-10-23 05:17:04+00:00,"Fix a bug in generate_pawn_captures()  Introduced in ""movegen: Introduce generate_pawn_captures()"" when unifiying black and white functions.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2008-10-01
mcostalba,mcostalba,2008-10-23 05:17:04+00:00,Fully templetize pawn move generators  A little bit more syntax heavuer but surely faster.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-10-01
mcostalba,mcostalba,2008-10-20 22:10:27+00:00,Micro optimize generate_piece_moves()  It is a time critical path. The biggest in move generation.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:57:13+00:00,Another Intel warning sqeezed  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:55:43+00:00,Quiet a warning on Intel compiler  Plus usual trailing whitespace noise.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:21+00:00,Shrink arguments in move generation functions  Perhaps no speedup; but it is more readable.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:20+00:00,"Fix a bug in king discoveries checks  Introduced in ""Add a generate_piece_checks() specialization for the king""  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:20+00:00,Update copyright info  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:19+00:00,Last little touches to movegen  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:19+00:00,Rename PawnOffsets in PawnParams  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:19+00:00,Pawn move generator: dispatch at compile time  Instead of function pointers use templates to dispatch shift operations.  It is more clear and possibly also faster because branches are removed at compile time.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:18+00:00,Start to templetize pawn move generators  Still very soft; we will see if compiler is enough or we need more aggressive templetization.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:18+00:00,Remove Positions::xxx_count() functions  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:18+00:00,Remove white/black_pawn_attacks_square()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:17+00:00,Templetize Position::xxx_attacks_square()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:17+00:00,Remove Position::xxx_list() functions  No useful; only obfuscating.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:17+00:00,Add a generate_piece_checks() specialization for the king  Also reshuffle the code a bit.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:17+00:00,Remove white/black_pawn_attacks()  Unuseful syntactic sugar; obfuscates the real code.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:16+00:00,Prefer template to name decoration  This also allows faster code although bigger.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:16+00:00,Fix a missing comma in BenchmarkPositions[]  An old bug introduced in 3e0dc9ee8477 almost one month ago.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:16+00:00,Position::is_ok()give more info on failed test  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:15+00:00,Fix an assert due to a missing parentesis  Bitwise operators precedence issue here; was causing an assert.  This is a fallout from recent patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:15+00:00,Final semplification of generate_evasions()  Now it's readable!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:15+00:00,Introduce generate_piece_blocking_evasions()  Start to simplify generate_evasions  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-20 19:47:15+00:00,Space inflate generate_evasions()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-19 19:43:33+00:00,Update copyright info  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 19:43:21+00:00,Last little touches to movegen  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 19:43:09+00:00,Rename PawnOffsets in PawnParams  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 19:42:12+00:00,Pawn move generator: dispatch at compile time  Instead of function pointers use templates to dispatch shift operations.  It is more clear and possibly also faster because branches are removed at compile time.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 15:20:21+00:00,Start to templetize pawn move generators  Still very soft; we will see if compiler is enough or we need more aggressive templetization.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 13:39:29+00:00,Remove Positions::xxx_count() functions  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 13:06:06+00:00,Remove white/black_pawn_attacks_square()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 12:56:57+00:00,Templetize Position::xxx_attacks_square()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 12:44:25+00:00,Remove Position::xxx_list() functions  No useful; only obfuscating.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 12:22:03+00:00,Add a generate_piece_checks() specialization for the king  Also reshuffle the code a bit.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 11:53:51+00:00,Remove white/black_pawn_attacks()  Unuseful syntactic sugar; obfuscates the real code.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 11:43:09+00:00,Prefer template to name decoration  This also allows faster code although bigger.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 10:55:53+00:00,Fix a missing comma in BenchmarkPositions[]  An old bug introduced in 3e0dc9ee8477 almost one month ago.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 09:41:24+00:00,Position::is_ok()give more info on failed test  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 09:17:17+00:00,Fix an assert due to a missing parentesis  Bitwise operators precedence issue here; was causing an assert.  This is a fallout from recent patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 08:33:33+00:00,Final semplification of generate_evasions()  Now it's readable!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 07:49:26+00:00,Introduce generate_piece_blocking_evasions()  Start to simplify generate_evasions  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-19 07:27:24+00:00,Space inflate generate_evasions()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:35+00:00,movegen: Introduce generate_pawn_noncaptures()  This is the last of pawn moves generators converted to new unified form.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:35+00:00,movegen: Introduce generate_pawn_captures()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:35+00:00,movegen: Fix just introduced move counter bug  This is what happens when you don't tests your patches !!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:35+00:00,movegen: Introduce generate_pawn_checks()  This greatly simplify redundant code.  Perhaps slihtly slower. Test needed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:34+00:00,generate_checks: fix a bug in black double pawn push  It was written pos.black_pawn_attacks(ksq) instead of pos.white_pawn_attacks(ksq)  Updated to the undrlying pos.pawn_attacks(WHITE; ksq)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:34+00:00,Space inflate generate_castle_moves()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:34+00:00,Unify pieces check generation with generate_piece_checks()  Could be slower: test needed!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:34+00:00,Do not special case generate_king_moves()  Teoretically a little slowdown. If after testing we verify the slowdown has impact on ELO we revert the change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:34+00:00,Use a const pointer-to-member array for attacks  Allow the compiler to optimize member function access.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:34+00:00,Use pointer-to-members to remove a bunch of duplicated code  Remove all generate_XXX_moves() functions; use an array of pointer to members instead.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:33+00:00,movegen: revert see ordering in score_captures()  It works better with MVV ordering.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:33+00:00,Movegen: further simplify generate_move_if_legal  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:33+00:00,Unify black and white code in generate_move_if_legal()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:33+00:00,Space inflate movegen.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:33+00:00,Movepick: add and use find_best_index() helper  This removes a bunch of redundant code.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:33+00:00,Test with see  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:32+00:00,Use MVV to score captures when see >=0  This fix a couple of dubious bugs in MVV/LVA ordering.  Tests seems to confirm now is slightly better.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:32+00:00,MovePicker: use const reference instead of pointers  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:32+00:00,Space inflate movepick.cpp  Also added some FIXME to dubious points.  Still no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:32+00:00,Better comment previous patch  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:32+00:00,Always add psqt scoring  When there is also history; history is always preferred.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-18 19:35:20+00:00,Shortcut sorting when no move is in history  An alternative algorithm to psqt scoring.  Still unclear what is the best; more tests needed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-15 06:18:05+00:00,Add psqt ordering when there is no history  This seems to increase strenght (about 15 ELO); still to test some variations on this theme that could increase ELO even more.  Idea from Rebel (http://members.home.nl/matador/chess840.htm)  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-10-01
Unknown,Unknown,2008-10-13 21:45:47+00:00,Introduce Stockfish  Signed-off-by: unknown <Marco@.(none)>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-13 18:40:48+00:00,"Implement Last Seconds Noise (LSN) filtering  When an engine is in deep trouble at few seconds from time limit then giveup without fighting anymore.  This is used to reduce ""lucky draws"" and time pressure blunders noises that can obfuscate results during tests blitz games (typical one minute games).  Goal of this technique is to reduce number of matches needed to reliably prove then an engine A is stronger then an opponent B.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2008-10-01
mcostalba,mcostalba,2008-10-13 18:40:47+00:00,Add a second margin to razoring  Razor on ply one if the advantage is more then a pawn; the only way to gap the advantage is to capture; so go directly in quiesce.  This seems to have a positive effect.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-13 18:40:47+00:00,Workaround a static data member bug in MSVC  Without this patch MSVC crashes when compiled in release mode. It survives and works as expected in debug mode and with gcc and Intel compilers.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-12 12:34:54+00:00,Yet another pop_1st_bit() optimization  Always for 32 bit but withot relying on MSVC intrinsics.  It is very similar to previous ones; but this does not segfaults due to -fno-strict-aliasing compiler option.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-11 17:25:16+00:00,Add mean calculation in debug tools  Another simple performance counter...  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-11 17:03:59+00:00,Revert bad capture pruning  After testing does not seem to increase ELO.  Indeed Glaurung is a little bit weaker; so revert.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-06 03:44:23+00:00,Better interface to get the current move type  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-06 03:44:23+00:00,Allow to prune bad captures  Only good capture are preserved from futility pruning and LMR reducing.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-06 03:44:22+00:00,Teach MovePicker::get_next_move() to return move type  This will be used in future patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-10-01
mcostalba,mcostalba,2008-10-05 08:37:05+00:00,Fix single digit day in engine_name()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-10-01
mcostalba,mcostalba,2008-10-04 08:01:54+00:00,Add dbg_before() and dbg_after()  Other two debug utilities to compute filter rate.  Usage is:  dbg_before(); // counts passages from this point  if(..) // complex code stuff you want to audit   return/continue if(...)   .....  dbg_after(); // counts passages from this point  Then somewhere in the code; normally in poll() add dbg_print_hit_rate() and you will see the filter rate of your code under auditing.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-10-04 07:50:19+00:00,Space inflate Position::to_fen()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-10-01
mcostalba,mcostalba,2008-09-28 08:59:20+00:00,position.cpp: fix a typo introduced by recent patch  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-28 08:59:08+00:00,Use relative values in piece square tables  So that will be automatically changed when pieces values change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-28 08:58:56+00:00,Start to cleanup position.cpp  Still a lot to do. No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-28 08:58:47+00:00,Add dbg_hit_on_c(c; x) tool  Like dbg_hit_on(x) but first filter out events and only when condition 'c' is true the hit counter is tested with 'x'.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-26 03:54:49+00:00,Space inflate evaluate_king()  This is the most complex piece of software so far.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-26 03:54:49+00:00,Clarify difference between king zone and adjacent zone  There are subtle differences in the king evaluation that should be clear to avoid misunderstandings.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-26 03:54:49+00:00,Tidy up quick_evaluate()  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-26 03:54:49+00:00,Tidy up middle game specific evaluation  Also add starting position to benchmarks.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-26 03:54:49+00:00,Code style massage evaluate()  No functional changes.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-25 05:51:56+00:00,Add auto configuration for 32/64 bits  Instead of manually adjust defines in bitboard.h now proper ones are automatically set.  It is anyhow possible to still set them manually in case of problems.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-24 19:17:28+00:00,Evaluate: weight_option() is static  Declare function under local namespace. This removes a warning from the picky Intel compiler.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-24 19:02:16+00:00,Cleanup read_weights() in evaluate.cpp  Exception to 80 colums rule here; but result seems better.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-24 19:02:15+00:00,Evaluate: rename king attack variables  A better naming IMHO  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-24 19:02:15+00:00,Further cleanup evaluate()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-24 19:02:15+00:00,Rename pawn_rank() in relative_rank()  It is more clear; at last for me.  Also cleanup evaluate_rook() and evaluate_queen()  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-24 19:02:14+00:00,Add also outposts evaluation in common code  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-24 19:02:14+00:00,Group common evaluate code  This removes code redundancy but perhaps impact performance due to uninlining.  Testing for regression is needed. For now aim to best code readibility.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-23 22:32:53+00:00,Warnings termination fest  A bunch of Intel C++ warnings removed; other silent out.  Still few remaining but need deeper look.  Also usual whitespace crap removal noise.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-09-01
mcostalba,mcostalba,2008-09-23 21:36:51+00:00,Do not use evaluate() for razoring  Because razoring is reached 10% of times and about 50% of time first two conditions are met we can save 5% of calls to the fairly costly evaluate().  On the other side statistics have shown 95% of nodes that pass the first two razoring conditions pass also the evaluate() test. So the risk of dropping the third condition seems low enough.  Testing seems to validate this.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-09-01
mcostalba,mcostalba,2008-09-23 06:07:50+00:00,init_eval: small cleanup  Functionality not changed.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-09-01
mcostalba,mcostalba,2008-09-23 06:07:42+00:00,Fix InitKingDanger initialization  Last line was missing.  Also reformat tables constants to be more readable.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-09-01
mcostalba,mcostalba,2008-09-21 20:19:07+00:00,Optimize pop_1st_bit() take 2  This time we use MSVC intrinsics that are C wrappers for Intel assembler 'bsf' instruction.  The speed up in node count is around 3%; probably it does not worth the effort. Anyway this patch can be useful at least for documentation purposes.  This optimization covers 32 bit systems only.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-21 09:51:38+00:00,Change the name to Glaurung clone  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-21 09:23:50+00:00,Switch to developer version numbering  Also clean up code while there.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-20 20:19:54+00:00,Use optimized pop_1st_bit() only under Windows  Under Linux we have a segfault after a random time; about a couple of minutes while running the benchmark.  This happens both with gcc and icc; and both with O2 and O3 optimizations.  Disable for Linux until we understand what's the deal.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-20 19:56:46+00:00,Add new superlinear interpolator  Faster transition and between phases and more persistent during mid and ending game.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-20 04:53:06+00:00,Finally remove last old C style I/O stuff  Now I/O is fully done with C++ iostreams.  The only exception is in non-windows version of Bioskey() in misc.cpp  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-19 11:53:36+00:00,Convert book.cpp to use C++ I/O  Instead of old C stdio.h  Also small code clean up while there.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-19 03:33:55+00:00,Final touches to pop_1st_bit optimization  This final version is a little bit faster then previous patch and is a bit cleaned up also.  On 32 bit x86 pop_1st_bit is now more then two times faster then the original one that is optimized for 64 bit processors.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-18 14:09:19+00:00,Optimize pop_1st_bit() on 32 bits x86  Operations on 64 bits Bitboard types are slow on x86 compiled with gcc; so optimize this case.  BTW profiling shows that pop_1st_bit() is a veeery performance critical path!  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:27:10+00:00,"Ignore non keyboard events in Bioskey()  Filter out mouse and windows type events.  This fix an issue where Glaurung hangs in console mode under Windows.  To reproduce simply open a console under Windows (cmd.exe); run ""glaurung.exe bench 50 1""; this starts benchmarking. Then hide the windows and show again or clik the mouse somewhere on the window; this hangs the benchmark because Boiskey() returns true and poll() calls std::getline() that hangs waiting for user pressing a return key.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:27:09+00:00,Cleanup poll()  Reshape this function in preparation for future work.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:27:09+00:00,Improve time managment  If we need some more and we are in time advantage take it.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:27:09+00:00,Pass also opponent time to think()  This patch modifies think() signature to accept also opponent time. This is needed for future changes to time managment.  Still no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:27:09+00:00,Disable a stupid and noisy MSVC warning  Remove the crap from compiler messages.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:27:08+00:00,Teach Benchmark to read positions from a file  This comes handy to test the engine on different sets of positions; not only the 15 default ones.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:26:39+00:00,Reformat benchmark interface  Prepare to following patches; still no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:26:31+00:00,Fix another conversion warning: Bitboard->int  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:26:24+00:00,Document where we want a uint16_t instead of a uint64_t  This patch removes some conversion warnings and better describe where we are going to expect a small integer.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:26:18+00:00,Use size_t instead of int  Remove some warning.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:26:10+00:00,MovePicker: simplify move swapping  We don't need a full swap here because once found and returned the best move will not be used again.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:25:55+00:00,Prefer strncpy() to strcpy()  This removes a warning under MSVC++  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,3,2008-09-01
mcostalba,mcostalba,2008-09-18 10:25:22+00:00,"Fix: ""Ponder"" option has type bool not int  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,3,2008-09-01
mcostalba,mcostalba,2008-09-09 09:37:27+00:00,Space inflate sp_search_pv  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-09-01
mcostalba,mcostalba,2008-09-09 09:15:58+00:00,Space inflate sp_search  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-09-01
mcostalba,mcostalba,2008-09-09 05:37:46+00:00,Use TT in qsearch  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,1,2008-09-01
mcostalba,mcostalba,2008-09-07 07:38:19+00:00,search: fix a bug and clear history update  When a move produces a beta-cut off is marked as success in history and all the remaining ones are marked as failures.  The loop across the searched moves; that is used to register failures; does not skip the good one; that is then registered as a failure too.  The patch fixes the bug and cleanup the code.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-07 06:31:30+00:00,Space inflate qsearch  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,6,2008-09-01
mcostalba,mcostalba,2008-09-06 16:25:58+00:00,Space inflate search()  Same as previous patch but for search() function.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 15:12:39+00:00,search_pv: spaces inflate  It seems easier to understand; at least to me.  Hopefully no functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 13:53:43+00:00,Split transposition table lookup in a separate function  This slims down the code and is a prerequisite for future patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 10:30:07+00:00,TranspositionTable: add first_entry() helper  An inline function to retrieve the first TT entry given a position.  Plus usual whitespace noise.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 10:22:10+00:00,Add simple debug hit rate counter  Add a very simple debug framework to measure the hit rate of a given condition.  Simply insert macro  dbg_hit_on(x);  Anywhere you want to compute hit rate of condition x and then call; as example in poll(); function dbg_print_hit_rate() to print current results.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 10:21:08+00:00,TranspositionTable: micro optimize first cycle  In the common case (>95%) tte == replace so skip additional comparisons in this case.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 10:20:28+00:00,TranspositionTable: early skip on an empty TT entry  Instead of going for the whole 4 cycle loop early skip if TT entry is empty.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 10:19:29+00:00,TranspositionTable: spaces inflate  No functional change; just a tidy up in preparation for next patches.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-06 04:37:00+00:00,RootMoveList: inline trivial accessors  Although not performance critical; trivial accessors can be inlined without any harm.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,5,2008-09-01
mcostalba,mcostalba,2008-09-05 07:04:45+00:00,RootMoveList sorting: be compatible with std::sort  sort() and sort_multipv() are almost the same; so use only one implementation.  Also introduce the natural RootMove::operator<() to compare the moves instead of compare_root_moves(); this will allow to use std::sort instead of our home grown bubble-sort.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,4,2008-09-01
mcostalba,mcostalba,2008-09-03 21:33:49+00:00,scan_for_easy_move: we don't need a loop here  Moves are already sorted; so just consider the best and the second one.  Some trailing whitespace remove noise crept in due to my editor removes it before to save.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-03 21:29:04+00:00,Better document RootMoveList c'tor  Also some code tidy-up.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,2,2008-09-01
mcostalba,mcostalba,2008-09-01 20:05:23+00:00,"Fix a couple of bugs (fallout from previous patches)  After testing and comparing output with standard Glaurung a couple of issues arised.  A default value was wrong and init_uci_options() missed a couple of stringify() calls. Also storing bool values as ""false"" and ""true"" needs some care.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2008-09-01
mcostalba,mcostalba,2008-09-01 14:58:02+00:00,"ucioptions: Fix stringification of a bool  We want stringify a bool as ""true"" and ""false""; not ""1"" and ""0"".  Signed-off-by: Marco Costalba <mcostalba@gmail.com>",True,0,2008-09-01
mcostalba,mcostalba,2008-09-01 14:03:01+00:00,Preserve options order when printed  Use a vector instead of a map so that options are printed according to their original order.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-09-01
mcostalba,mcostalba,2008-09-01 12:05:02+00:00,Rewrite ucioptions.cpp to use C++  Instead of old-style C string functions use standard library to greatly streamline the implementation.  No functional change.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-09-01
mcostalba,mcostalba,2008-09-01 06:16:17+00:00,Finally remove UCIInputParser class altogether  Class UCIInputParser is now a typedef of a std::istringstream; this greatly simplifies the code; especially the many conversions from string to integer are now handled automatically by the stream instead of relying on a chunk of C-style atoi() calls.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-09-01
mcostalba,mcostalba,2008-09-01 06:06:34+00:00,Use a string stream in UCIInputParser  Use a std::istringstream instead of an home grown string tokenizer code.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-09-01
mcostalba,mcostalba,2008-09-01 06:03:21+00:00,Avoid casts to handle isspace() arguments  Use proper standard conversion to deal with negative values of a char.  Signed-off-by: Marco Costalba <mcostalba@gmail.com>,True,0,2008-09-01
mcostalba,mcostalba,2008-09-01 05:59:13+00:00,Initial import of Glaurung 2.1,True,0,2008-09-01
